/*
Copyright (C) 2018-2019 de4dot@gmail.com

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

// ‚ö†Ô∏èThis file was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è

#nullable enable

#if ENCODER && BLOCK_ENCODER && CODE_ASSEMBLER
namespace Iced.Intel {
	public partial class Assembler {
		/// <summary>aaa instruction.<br/>
		/// <br/>
		/// <c>AAA</c><br/>
		/// <br/>
		/// <c>37</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void aaa() {
			Code op;
			op = Code.Aaa;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>aad instruction.<br/>
		/// <br/>
		/// <c>AAD imm8</c><br/>
		/// <br/>
		/// <c>D5 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void aad(sbyte imm) {
			Code op;
			op = Code.Aad_imm8;
			AddInstruction(Instruction.Create(op, imm));
		}
		/// <summary>aad instruction.<br/>
		/// <br/>
		/// <c>AAD imm8</c><br/>
		/// <br/>
		/// <c>D5 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void aad(byte imm) {
			Code op;
			op = Code.Aad_imm8;
			AddInstruction(Instruction.Create(op, (uint)imm));
		}
		/// <summary>aam instruction.<br/>
		/// <br/>
		/// <c>AAM imm8</c><br/>
		/// <br/>
		/// <c>D4 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void aam(sbyte imm) {
			Code op;
			op = Code.Aam_imm8;
			AddInstruction(Instruction.Create(op, imm));
		}
		/// <summary>aam instruction.<br/>
		/// <br/>
		/// <c>AAM imm8</c><br/>
		/// <br/>
		/// <c>D4 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void aam(byte imm) {
			Code op;
			op = Code.Aam_imm8;
			AddInstruction(Instruction.Create(op, (uint)imm));
		}
		/// <summary>aas instruction.<br/>
		/// <br/>
		/// <c>AAS</c><br/>
		/// <br/>
		/// <c>3F</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void aas() {
			Code op;
			op = Code.Aas;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>adc instruction.<br/>
		/// <br/>
		/// <c>ADC r/m8, r8</c><br/>
		/// <br/>
		/// <c>10 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void adc(AssemblerRegister8 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Adc_rm8_r8;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>adc instruction.<br/>
		/// <br/>
		/// <c>ADC r/m8, r8</c><br/>
		/// <br/>
		/// <c>10 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void adc(AssemblerMemoryOperand dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Adc_rm8_r8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>adc instruction.<br/>
		/// <br/>
		/// <c>ADC r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 11 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void adc(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Adc_rm16_r16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>adc instruction.<br/>
		/// <br/>
		/// <c>ADC r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 11 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void adc(AssemblerMemoryOperand dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Adc_rm16_r16;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>adc instruction.<br/>
		/// <br/>
		/// <c>ADC r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 11 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void adc(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Adc_rm32_r32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>adc instruction.<br/>
		/// <br/>
		/// <c>ADC r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 11 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void adc(AssemblerMemoryOperand dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Adc_rm32_r32;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>adc instruction.<br/>
		/// <br/>
		/// <c>ADC r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 11 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void adc(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Adc_rm64_r64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>adc instruction.<br/>
		/// <br/>
		/// <c>ADC r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 11 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void adc(AssemblerMemoryOperand dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Adc_rm64_r64;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>adc instruction.<br/>
		/// <br/>
		/// <c>ADC r8, r/m8</c><br/>
		/// <br/>
		/// <c>12 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void adc(AssemblerRegister8 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Adc_r8_rm8;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>adc instruction.<br/>
		/// <br/>
		/// <c>ADC r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 13 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void adc(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Adc_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>adc instruction.<br/>
		/// <br/>
		/// <c>ADC r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 13 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void adc(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Adc_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>adc instruction.<br/>
		/// <br/>
		/// <c>ADC r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 13 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void adc(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Adc_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>adc instruction.<br/>
		/// <br/>
		/// <c>ADC AL, imm8</c><br/>
		/// <br/>
		/// <c>14 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADC r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /2 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void adc(AssemblerRegister8 dst, sbyte imm) {
			Code op;
			op = dst == Register.AL ? Code.Adc_AL_imm8 : Code.Adc_rm8_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>adc instruction.<br/>
		/// <br/>
		/// <c>ADC AX, imm16</c><br/>
		/// <br/>
		/// <c>o16 15 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADC r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /2 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADC r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /2 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void adc(AssemblerRegister16 dst, short imm) {
			Code op;
			if (dst == Register.AX) {
				op = Code.Adc_AX_imm16;
			} else op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Adc_rm16_imm8 : Code.Adc_rm16_imm16;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>adc instruction.<br/>
		/// <br/>
		/// <c>ADC EAX, imm32</c><br/>
		/// <br/>
		/// <c>o32 15 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADC r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /2 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADC r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /2 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void adc(AssemblerRegister32 dst, int imm) {
			Code op;
			if (dst == Register.EAX) {
				op = Code.Adc_EAX_imm32;
			} else op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Adc_rm32_imm8 : Code.Adc_rm32_imm32;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>adc instruction.<br/>
		/// <br/>
		/// <c>ADC RAX, imm32</c><br/>
		/// <br/>
		/// <c>REX.W 15 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ADC r/m64, imm32</c><br/>
		/// <br/>
		/// <c>REX.W 81 /2 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ADC r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W 83 /2 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void adc(AssemblerRegister64 dst, int imm) {
			Code op;
			if (dst == Register.RAX) {
				op = Code.Adc_RAX_imm32;
			} else op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Adc_rm64_imm8 : Code.Adc_rm64_imm32;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>adc instruction.<br/>
		/// <br/>
		/// <c>ADC r/m64, imm32</c><br/>
		/// <br/>
		/// <c>REX.W 81 /2 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ADC r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W 83 /2 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ADC r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /2 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADC r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /2 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADC r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /2 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADC r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /2 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADC r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /2 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void adc(AssemblerMemoryOperand dst, int imm) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Adc_rm64_imm8 : Code.Adc_rm64_imm32;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Adc_rm32_imm8 : Code.Adc_rm32_imm32;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Adc_rm16_imm8 : Code.Adc_rm16_imm16;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Adc_rm8_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Adc, dst, imm);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>adc instruction.<br/>
		/// <br/>
		/// <c>ADC AL, imm8</c><br/>
		/// <br/>
		/// <c>14 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADC r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /2 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void adc(AssemblerRegister8 dst, byte imm) {
			Code op;
			op = dst == Register.AL ? Code.Adc_AL_imm8 : Code.Adc_rm8_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>adc instruction.<br/>
		/// <br/>
		/// <c>ADC AX, imm16</c><br/>
		/// <br/>
		/// <c>o16 15 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADC r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /2 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADC r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /2 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void adc(AssemblerRegister16 dst, ushort imm) {
			Code op;
			if (dst == Register.AX) {
				op = Code.Adc_AX_imm16;
			} else op = imm <= (ushort)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF) ? Code.Adc_rm16_imm8 : Code.Adc_rm16_imm16;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>adc instruction.<br/>
		/// <br/>
		/// <c>ADC EAX, imm32</c><br/>
		/// <br/>
		/// <c>o32 15 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADC r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /2 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADC r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /2 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void adc(AssemblerRegister32 dst, uint imm) {
			Code op;
			if (dst == Register.EAX) {
				op = Code.Adc_EAX_imm32;
			} else op = imm <= (uint)sbyte.MaxValue || (0xFFFF_FF80 <= imm && imm <= 0xFFFF_FFFF) ? Code.Adc_rm32_imm8 : Code.Adc_rm32_imm32;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>adc instruction.<br/>
		/// <br/>
		/// <c>ADC r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /2 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADC r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /2 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADC r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /2 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADC r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /2 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADC r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /2 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void adc(AssemblerMemoryOperand dst, uint imm) {
			Code op;
			if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = imm <= (uint)sbyte.MaxValue || (0xFFFF_FF80 <= imm && imm <= 0xFFFF_FFFF) ? Code.Adc_rm32_imm8 : Code.Adc_rm32_imm32;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = imm <= (uint)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF) ? Code.Adc_rm16_imm8 : Code.Adc_rm16_imm16;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Adc_rm8_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Adc, dst, imm);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>adcx instruction.<br/>
		/// <br/>
		/// <c>ADCX r32, r/m32</c><br/>
		/// <br/>
		/// <c>66 0F 38 F6 /r</c><br/>
		/// <br/>
		/// <c>ADX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void adcx(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Adcx_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>adcx instruction.<br/>
		/// <br/>
		/// <c>ADCX r64, r/m64</c><br/>
		/// <br/>
		/// <c>66 REX.W 0F 38 F6 /r</c><br/>
		/// <br/>
		/// <c>ADX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void adcx(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Adcx_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>adcx instruction.<br/>
		/// <br/>
		/// <c>ADCX r32, r/m32</c><br/>
		/// <br/>
		/// <c>66 0F 38 F6 /r</c><br/>
		/// <br/>
		/// <c>ADX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void adcx(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Adcx_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>adcx instruction.<br/>
		/// <br/>
		/// <c>ADCX r64, r/m64</c><br/>
		/// <br/>
		/// <c>66 REX.W 0F 38 F6 /r</c><br/>
		/// <br/>
		/// <c>ADX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void adcx(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Adcx_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>add instruction.<br/>
		/// <br/>
		/// <c>ADD r/m8, r8</c><br/>
		/// <br/>
		/// <c>00 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void add(AssemblerRegister8 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Add_rm8_r8;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>add instruction.<br/>
		/// <br/>
		/// <c>ADD r/m8, r8</c><br/>
		/// <br/>
		/// <c>00 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void add(AssemblerMemoryOperand dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Add_rm8_r8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>add instruction.<br/>
		/// <br/>
		/// <c>ADD r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 01 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void add(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Add_rm16_r16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>add instruction.<br/>
		/// <br/>
		/// <c>ADD r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 01 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void add(AssemblerMemoryOperand dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Add_rm16_r16;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>add instruction.<br/>
		/// <br/>
		/// <c>ADD r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 01 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void add(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Add_rm32_r32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>add instruction.<br/>
		/// <br/>
		/// <c>ADD r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 01 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void add(AssemblerMemoryOperand dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Add_rm32_r32;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>add instruction.<br/>
		/// <br/>
		/// <c>ADD r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 01 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void add(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Add_rm64_r64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>add instruction.<br/>
		/// <br/>
		/// <c>ADD r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 01 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void add(AssemblerMemoryOperand dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Add_rm64_r64;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>add instruction.<br/>
		/// <br/>
		/// <c>ADD r8, r/m8</c><br/>
		/// <br/>
		/// <c>02 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void add(AssemblerRegister8 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Add_r8_rm8;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>add instruction.<br/>
		/// <br/>
		/// <c>ADD r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 03 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void add(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Add_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>add instruction.<br/>
		/// <br/>
		/// <c>ADD r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 03 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void add(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Add_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>add instruction.<br/>
		/// <br/>
		/// <c>ADD r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 03 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void add(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Add_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>add instruction.<br/>
		/// <br/>
		/// <c>ADD AL, imm8</c><br/>
		/// <br/>
		/// <c>04 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADD r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /0 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void add(AssemblerRegister8 dst, sbyte imm) {
			Code op;
			op = dst == Register.AL ? Code.Add_AL_imm8 : Code.Add_rm8_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>add instruction.<br/>
		/// <br/>
		/// <c>ADD AX, imm16</c><br/>
		/// <br/>
		/// <c>o16 05 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADD r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /0 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADD r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /0 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void add(AssemblerRegister16 dst, short imm) {
			Code op;
			if (dst == Register.AX) {
				op = Code.Add_AX_imm16;
			} else op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Add_rm16_imm8 : Code.Add_rm16_imm16;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>add instruction.<br/>
		/// <br/>
		/// <c>ADD EAX, imm32</c><br/>
		/// <br/>
		/// <c>o32 05 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADD r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /0 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADD r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /0 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void add(AssemblerRegister32 dst, int imm) {
			Code op;
			if (dst == Register.EAX) {
				op = Code.Add_EAX_imm32;
			} else op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Add_rm32_imm8 : Code.Add_rm32_imm32;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>add instruction.<br/>
		/// <br/>
		/// <c>ADD RAX, imm32</c><br/>
		/// <br/>
		/// <c>REX.W 05 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ADD r/m64, imm32</c><br/>
		/// <br/>
		/// <c>REX.W 81 /0 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ADD r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W 83 /0 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void add(AssemblerRegister64 dst, int imm) {
			Code op;
			if (dst == Register.RAX) {
				op = Code.Add_RAX_imm32;
			} else op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Add_rm64_imm8 : Code.Add_rm64_imm32;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>add instruction.<br/>
		/// <br/>
		/// <c>ADD r/m64, imm32</c><br/>
		/// <br/>
		/// <c>REX.W 81 /0 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ADD r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W 83 /0 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ADD r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /0 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADD r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /0 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADD r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /0 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADD r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /0 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADD r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /0 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void add(AssemblerMemoryOperand dst, int imm) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Add_rm64_imm8 : Code.Add_rm64_imm32;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Add_rm32_imm8 : Code.Add_rm32_imm32;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Add_rm16_imm8 : Code.Add_rm16_imm16;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Add_rm8_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Add, dst, imm);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>add instruction.<br/>
		/// <br/>
		/// <c>ADD AL, imm8</c><br/>
		/// <br/>
		/// <c>04 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADD r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /0 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void add(AssemblerRegister8 dst, byte imm) {
			Code op;
			op = dst == Register.AL ? Code.Add_AL_imm8 : Code.Add_rm8_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>add instruction.<br/>
		/// <br/>
		/// <c>ADD AX, imm16</c><br/>
		/// <br/>
		/// <c>o16 05 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADD r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /0 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADD r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /0 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void add(AssemblerRegister16 dst, ushort imm) {
			Code op;
			if (dst == Register.AX) {
				op = Code.Add_AX_imm16;
			} else op = imm <= (ushort)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF) ? Code.Add_rm16_imm8 : Code.Add_rm16_imm16;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>add instruction.<br/>
		/// <br/>
		/// <c>ADD EAX, imm32</c><br/>
		/// <br/>
		/// <c>o32 05 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADD r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /0 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADD r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /0 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void add(AssemblerRegister32 dst, uint imm) {
			Code op;
			if (dst == Register.EAX) {
				op = Code.Add_EAX_imm32;
			} else op = imm <= (uint)sbyte.MaxValue || (0xFFFF_FF80 <= imm && imm <= 0xFFFF_FFFF) ? Code.Add_rm32_imm8 : Code.Add_rm32_imm32;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>add instruction.<br/>
		/// <br/>
		/// <c>ADD r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /0 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADD r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /0 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADD r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /0 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADD r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /0 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADD r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /0 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void add(AssemblerMemoryOperand dst, uint imm) {
			Code op;
			if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = imm <= (uint)sbyte.MaxValue || (0xFFFF_FF80 <= imm && imm <= 0xFFFF_FFFF) ? Code.Add_rm32_imm8 : Code.Add_rm32_imm32;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = imm <= (uint)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF) ? Code.Add_rm16_imm8 : Code.Add_rm16_imm16;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Add_rm8_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Add, dst, imm);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>addpd instruction.<br/>
		/// <br/>
		/// <c>ADDPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 58 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void addpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Addpd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>addpd instruction.<br/>
		/// <br/>
		/// <c>ADDPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 58 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void addpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Addpd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>addps instruction.<br/>
		/// <br/>
		/// <c>ADDPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 58 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void addps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Addps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>addps instruction.<br/>
		/// <br/>
		/// <c>ADDPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 58 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void addps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Addps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>addsd instruction.<br/>
		/// <br/>
		/// <c>ADDSD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 58 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void addsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Addsd_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>addsd instruction.<br/>
		/// <br/>
		/// <c>ADDSD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 58 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void addsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Addsd_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>addss instruction.<br/>
		/// <br/>
		/// <c>ADDSS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 58 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void addss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Addss_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>addss instruction.<br/>
		/// <br/>
		/// <c>ADDSS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 58 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void addss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Addss_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>addsubpd instruction.<br/>
		/// <br/>
		/// <c>ADDSUBPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F D0 /r</c><br/>
		/// <br/>
		/// <c>SSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void addsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Addsubpd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>addsubpd instruction.<br/>
		/// <br/>
		/// <c>ADDSUBPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F D0 /r</c><br/>
		/// <br/>
		/// <c>SSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void addsubpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Addsubpd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>addsubps instruction.<br/>
		/// <br/>
		/// <c>ADDSUBPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>F2 0F D0 /r</c><br/>
		/// <br/>
		/// <c>SSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void addsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Addsubps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>addsubps instruction.<br/>
		/// <br/>
		/// <c>ADDSUBPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>F2 0F D0 /r</c><br/>
		/// <br/>
		/// <c>SSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void addsubps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Addsubps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>adox instruction.<br/>
		/// <br/>
		/// <c>ADOX r32, r/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 38 F6 /r</c><br/>
		/// <br/>
		/// <c>ADX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void adox(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Adox_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>adox instruction.<br/>
		/// <br/>
		/// <c>ADOX r64, r/m64</c><br/>
		/// <br/>
		/// <c>F3 REX.W 0F 38 F6 /r</c><br/>
		/// <br/>
		/// <c>ADX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void adox(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Adox_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>adox instruction.<br/>
		/// <br/>
		/// <c>ADOX r32, r/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 38 F6 /r</c><br/>
		/// <br/>
		/// <c>ADX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void adox(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Adox_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>adox instruction.<br/>
		/// <br/>
		/// <c>ADOX r64, r/m64</c><br/>
		/// <br/>
		/// <c>F3 REX.W 0F 38 F6 /r</c><br/>
		/// <br/>
		/// <c>ADX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void adox(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Adox_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>aesdec instruction.<br/>
		/// <br/>
		/// <c>AESDEC xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 DE /r</c><br/>
		/// <br/>
		/// <c>AES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void aesdec(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Aesdec_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>aesdec instruction.<br/>
		/// <br/>
		/// <c>AESDEC xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 DE /r</c><br/>
		/// <br/>
		/// <c>AES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void aesdec(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Aesdec_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>aesdeclast instruction.<br/>
		/// <br/>
		/// <c>AESDECLAST xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 DF /r</c><br/>
		/// <br/>
		/// <c>AES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void aesdeclast(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Aesdeclast_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>aesdeclast instruction.<br/>
		/// <br/>
		/// <c>AESDECLAST xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 DF /r</c><br/>
		/// <br/>
		/// <c>AES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void aesdeclast(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Aesdeclast_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>aesenc instruction.<br/>
		/// <br/>
		/// <c>AESENC xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 DC /r</c><br/>
		/// <br/>
		/// <c>AES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void aesenc(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Aesenc_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>aesenc instruction.<br/>
		/// <br/>
		/// <c>AESENC xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 DC /r</c><br/>
		/// <br/>
		/// <c>AES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void aesenc(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Aesenc_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>aesenclast instruction.<br/>
		/// <br/>
		/// <c>AESENCLAST xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 DD /r</c><br/>
		/// <br/>
		/// <c>AES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void aesenclast(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Aesenclast_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>aesenclast instruction.<br/>
		/// <br/>
		/// <c>AESENCLAST xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 DD /r</c><br/>
		/// <br/>
		/// <c>AES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void aesenclast(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Aesenclast_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>aesimc instruction.<br/>
		/// <br/>
		/// <c>AESIMC xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 DB /r</c><br/>
		/// <br/>
		/// <c>AES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void aesimc(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Aesimc_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>aesimc instruction.<br/>
		/// <br/>
		/// <c>AESIMC xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 DB /r</c><br/>
		/// <br/>
		/// <c>AES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void aesimc(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Aesimc_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>aeskeygenassist instruction.<br/>
		/// <br/>
		/// <c>AESKEYGENASSIST xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A DF /r ib</c><br/>
		/// <br/>
		/// <c>AES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void aeskeygenassist(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.Aeskeygenassist_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>aeskeygenassist instruction.<br/>
		/// <br/>
		/// <c>AESKEYGENASSIST xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A DF /r ib</c><br/>
		/// <br/>
		/// <c>AES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void aeskeygenassist(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.Aeskeygenassist_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>aeskeygenassist instruction.<br/>
		/// <br/>
		/// <c>AESKEYGENASSIST xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A DF /r ib</c><br/>
		/// <br/>
		/// <c>AES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void aeskeygenassist(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.Aeskeygenassist_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>aeskeygenassist instruction.<br/>
		/// <br/>
		/// <c>AESKEYGENASSIST xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A DF /r ib</c><br/>
		/// <br/>
		/// <c>AES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void aeskeygenassist(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.Aeskeygenassist_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>and instruction.<br/>
		/// <br/>
		/// <c>AND r/m8, r8</c><br/>
		/// <br/>
		/// <c>20 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void and(AssemblerRegister8 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.And_rm8_r8;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>and instruction.<br/>
		/// <br/>
		/// <c>AND r/m8, r8</c><br/>
		/// <br/>
		/// <c>20 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void and(AssemblerMemoryOperand dst, AssemblerRegister8 src) {
			Code op;
			op = Code.And_rm8_r8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>and instruction.<br/>
		/// <br/>
		/// <c>AND r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 21 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void and(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.And_rm16_r16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>and instruction.<br/>
		/// <br/>
		/// <c>AND r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 21 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void and(AssemblerMemoryOperand dst, AssemblerRegister16 src) {
			Code op;
			op = Code.And_rm16_r16;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>and instruction.<br/>
		/// <br/>
		/// <c>AND r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 21 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void and(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.And_rm32_r32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>and instruction.<br/>
		/// <br/>
		/// <c>AND r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 21 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void and(AssemblerMemoryOperand dst, AssemblerRegister32 src) {
			Code op;
			op = Code.And_rm32_r32;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>and instruction.<br/>
		/// <br/>
		/// <c>AND r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 21 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void and(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.And_rm64_r64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>and instruction.<br/>
		/// <br/>
		/// <c>AND r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 21 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void and(AssemblerMemoryOperand dst, AssemblerRegister64 src) {
			Code op;
			op = Code.And_rm64_r64;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>and instruction.<br/>
		/// <br/>
		/// <c>AND r8, r/m8</c><br/>
		/// <br/>
		/// <c>22 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void and(AssemblerRegister8 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.And_r8_rm8;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>and instruction.<br/>
		/// <br/>
		/// <c>AND r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 23 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void and(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.And_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>and instruction.<br/>
		/// <br/>
		/// <c>AND r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 23 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void and(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.And_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>and instruction.<br/>
		/// <br/>
		/// <c>AND r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 23 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void and(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.And_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>and instruction.<br/>
		/// <br/>
		/// <c>AND AL, imm8</c><br/>
		/// <br/>
		/// <c>24 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>AND r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /4 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void and(AssemblerRegister8 dst, sbyte imm) {
			Code op;
			op = dst == Register.AL ? Code.And_AL_imm8 : Code.And_rm8_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>and instruction.<br/>
		/// <br/>
		/// <c>AND AX, imm16</c><br/>
		/// <br/>
		/// <c>o16 25 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>AND r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /4 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>AND r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /4 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void and(AssemblerRegister16 dst, short imm) {
			Code op;
			if (dst == Register.AX) {
				op = Code.And_AX_imm16;
			} else op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.And_rm16_imm8 : Code.And_rm16_imm16;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>and instruction.<br/>
		/// <br/>
		/// <c>AND EAX, imm32</c><br/>
		/// <br/>
		/// <c>o32 25 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>AND r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /4 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>AND r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /4 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void and(AssemblerRegister32 dst, int imm) {
			Code op;
			if (dst == Register.EAX) {
				op = Code.And_EAX_imm32;
			} else op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.And_rm32_imm8 : Code.And_rm32_imm32;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>and instruction.<br/>
		/// <br/>
		/// <c>AND RAX, imm32</c><br/>
		/// <br/>
		/// <c>REX.W 25 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>AND r/m64, imm32</c><br/>
		/// <br/>
		/// <c>REX.W 81 /4 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>AND r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W 83 /4 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void and(AssemblerRegister64 dst, int imm) {
			Code op;
			if (dst == Register.RAX) {
				op = Code.And_RAX_imm32;
			} else op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.And_rm64_imm8 : Code.And_rm64_imm32;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>and instruction.<br/>
		/// <br/>
		/// <c>AND r/m64, imm32</c><br/>
		/// <br/>
		/// <c>REX.W 81 /4 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>AND r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W 83 /4 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>AND r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /4 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>AND r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /4 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>AND r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /4 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>AND r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /4 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>AND r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /4 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void and(AssemblerMemoryOperand dst, int imm) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.And_rm64_imm8 : Code.And_rm64_imm32;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.And_rm32_imm8 : Code.And_rm32_imm32;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.And_rm16_imm8 : Code.And_rm16_imm16;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.And_rm8_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.And, dst, imm);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>and instruction.<br/>
		/// <br/>
		/// <c>AND AL, imm8</c><br/>
		/// <br/>
		/// <c>24 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>AND r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /4 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void and(AssemblerRegister8 dst, byte imm) {
			Code op;
			op = dst == Register.AL ? Code.And_AL_imm8 : Code.And_rm8_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>and instruction.<br/>
		/// <br/>
		/// <c>AND AX, imm16</c><br/>
		/// <br/>
		/// <c>o16 25 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>AND r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /4 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>AND r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /4 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void and(AssemblerRegister16 dst, ushort imm) {
			Code op;
			if (dst == Register.AX) {
				op = Code.And_AX_imm16;
			} else op = imm <= (ushort)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF) ? Code.And_rm16_imm8 : Code.And_rm16_imm16;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>and instruction.<br/>
		/// <br/>
		/// <c>AND EAX, imm32</c><br/>
		/// <br/>
		/// <c>o32 25 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>AND r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /4 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>AND r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /4 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void and(AssemblerRegister32 dst, uint imm) {
			Code op;
			if (dst == Register.EAX) {
				op = Code.And_EAX_imm32;
			} else op = imm <= (uint)sbyte.MaxValue || (0xFFFF_FF80 <= imm && imm <= 0xFFFF_FFFF) ? Code.And_rm32_imm8 : Code.And_rm32_imm32;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>and instruction.<br/>
		/// <br/>
		/// <c>AND r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /4 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>AND r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /4 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>AND r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /4 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>AND r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /4 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>AND r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /4 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void and(AssemblerMemoryOperand dst, uint imm) {
			Code op;
			if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = imm <= (uint)sbyte.MaxValue || (0xFFFF_FF80 <= imm && imm <= 0xFFFF_FFFF) ? Code.And_rm32_imm8 : Code.And_rm32_imm32;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = imm <= (uint)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF) ? Code.And_rm16_imm8 : Code.And_rm16_imm16;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.And_rm8_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.And, dst, imm);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>andn instruction.<br/>
		/// <br/>
		/// <c>ANDN r32a, r32b, r/m32</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W0 F2 /r</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void andn(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerRegister32 src2) {
			Code op;
			op = Code.VEX_Andn_r32_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>andn instruction.<br/>
		/// <br/>
		/// <c>ANDN r64a, r64b, r/m64</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W1 F2 /r</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void andn(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerRegister64 src2) {
			Code op;
			op = Code.VEX_Andn_r64_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>andn instruction.<br/>
		/// <br/>
		/// <c>ANDN r32a, r32b, r/m32</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W0 F2 /r</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void andn(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Andn_r32_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>andn instruction.<br/>
		/// <br/>
		/// <c>ANDN r64a, r64b, r/m64</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W1 F2 /r</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void andn(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Andn_r64_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>andnpd instruction.<br/>
		/// <br/>
		/// <c>ANDNPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 55 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void andnpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Andnpd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>andnpd instruction.<br/>
		/// <br/>
		/// <c>ANDNPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 55 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void andnpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Andnpd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>andnps instruction.<br/>
		/// <br/>
		/// <c>ANDNPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 55 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void andnps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Andnps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>andnps instruction.<br/>
		/// <br/>
		/// <c>ANDNPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 55 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void andnps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Andnps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>andpd instruction.<br/>
		/// <br/>
		/// <c>ANDPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 54 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void andpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Andpd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>andpd instruction.<br/>
		/// <br/>
		/// <c>ANDPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 54 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void andpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Andpd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>andps instruction.<br/>
		/// <br/>
		/// <c>ANDPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 54 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void andps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Andps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>andps instruction.<br/>
		/// <br/>
		/// <c>ANDPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 54 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void andps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Andps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>arpl instruction.<br/>
		/// <br/>
		/// <c>ARPL r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 63 /r</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void arpl(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Arpl_rm16_r16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>arpl instruction.<br/>
		/// <br/>
		/// <c>ARPL r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 63 /r</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void arpl(AssemblerMemoryOperand dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Arpl_rm16_r16;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>arpl instruction.<br/>
		/// <br/>
		/// <c>ARPL r32/m16, r32</c><br/>
		/// <br/>
		/// <c>o32 63 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void arpl(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Arpl_r32m16_r32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>arpl instruction.<br/>
		/// <br/>
		/// <c>ARPL r32/m16, r32</c><br/>
		/// <br/>
		/// <c>o32 63 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void arpl(AssemblerMemoryOperand dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Arpl_r32m16_r32;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>bextr instruction.<br/>
		/// <br/>
		/// <c>BEXTR r32a, r/m32, r32b</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W0 F7 /r</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void bextr(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerRegister32 src2) {
			Code op;
			op = Code.VEX_Bextr_r32_rm32_r32;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>bextr instruction.<br/>
		/// <br/>
		/// <c>BEXTR r32a, r/m32, r32b</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W0 F7 /r</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void bextr(AssemblerRegister32 dst, AssemblerMemoryOperand src1, AssemblerRegister32 src2) {
			Code op;
			op = Code.VEX_Bextr_r32_rm32_r32;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), src2));
		}
		/// <summary>bextr instruction.<br/>
		/// <br/>
		/// <c>BEXTR r64a, r/m64, r64b</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W1 F7 /r</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void bextr(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerRegister64 src2) {
			Code op;
			op = Code.VEX_Bextr_r64_rm64_r64;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>bextr instruction.<br/>
		/// <br/>
		/// <c>BEXTR r64a, r/m64, r64b</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W1 F7 /r</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void bextr(AssemblerRegister64 dst, AssemblerMemoryOperand src1, AssemblerRegister64 src2) {
			Code op;
			op = Code.VEX_Bextr_r64_rm64_r64;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), src2));
		}
		/// <summary>bextr instruction.<br/>
		/// <br/>
		/// <c>BEXTR r32, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W0 10 /r id</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void bextr(AssemblerRegister32 dst, AssemblerRegister32 src1, int imm) {
			Code op;
			op = Code.XOP_Bextr_r32_rm32_imm32;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>bextr instruction.<br/>
		/// <br/>
		/// <c>BEXTR r64, r/m64, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W1 10 /r id</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void bextr(AssemblerRegister64 dst, AssemblerRegister64 src1, int imm) {
			Code op;
			op = Code.XOP_Bextr_r64_rm64_imm32;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>bextr instruction.<br/>
		/// <br/>
		/// <c>BEXTR r32, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W0 10 /r id</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void bextr(AssemblerRegister32 dst, AssemblerMemoryOperand src1, int imm) {
			Code op;
			op = Code.XOP_Bextr_r32_rm32_imm32;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>bextr instruction.<br/>
		/// <br/>
		/// <c>BEXTR r64, r/m64, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W1 10 /r id</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void bextr(AssemblerRegister64 dst, AssemblerMemoryOperand src1, int imm) {
			Code op;
			op = Code.XOP_Bextr_r64_rm64_imm32;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>bextr instruction.<br/>
		/// <br/>
		/// <c>BEXTR r32, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W0 10 /r id</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void bextr(AssemblerRegister32 dst, AssemblerRegister32 src1, uint imm) {
			Code op;
			op = Code.XOP_Bextr_r32_rm32_imm32;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>bextr instruction.<br/>
		/// <br/>
		/// <c>BEXTR r64, r/m64, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W1 10 /r id</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void bextr(AssemblerRegister64 dst, AssemblerRegister64 src1, uint imm) {
			Code op;
			op = Code.XOP_Bextr_r64_rm64_imm32;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>bextr instruction.<br/>
		/// <br/>
		/// <c>BEXTR r32, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W0 10 /r id</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void bextr(AssemblerRegister32 dst, AssemblerMemoryOperand src1, uint imm) {
			Code op;
			op = Code.XOP_Bextr_r32_rm32_imm32;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>bextr instruction.<br/>
		/// <br/>
		/// <c>BEXTR r64, r/m64, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W1 10 /r id</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void bextr(AssemblerRegister64 dst, AssemblerMemoryOperand src1, uint imm) {
			Code op;
			op = Code.XOP_Bextr_r64_rm64_imm32;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>blcfill instruction.<br/>
		/// <br/>
		/// <c>BLCFILL r32, r/m32</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W0 01 /1</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void blcfill(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.XOP_Blcfill_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>blcfill instruction.<br/>
		/// <br/>
		/// <c>BLCFILL r64, r/m64</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W1 01 /1</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void blcfill(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.XOP_Blcfill_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>blcfill instruction.<br/>
		/// <br/>
		/// <c>BLCFILL r32, r/m32</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W0 01 /1</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void blcfill(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.XOP_Blcfill_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>blcfill instruction.<br/>
		/// <br/>
		/// <c>BLCFILL r64, r/m64</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W1 01 /1</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void blcfill(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.XOP_Blcfill_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>blci instruction.<br/>
		/// <br/>
		/// <c>BLCI r32, r/m32</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W0 02 /6</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void blci(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.XOP_Blci_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>blci instruction.<br/>
		/// <br/>
		/// <c>BLCI r64, r/m64</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W1 02 /6</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void blci(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.XOP_Blci_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>blci instruction.<br/>
		/// <br/>
		/// <c>BLCI r32, r/m32</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W0 02 /6</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void blci(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.XOP_Blci_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>blci instruction.<br/>
		/// <br/>
		/// <c>BLCI r64, r/m64</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W1 02 /6</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void blci(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.XOP_Blci_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>blcic instruction.<br/>
		/// <br/>
		/// <c>BLCIC r32, r/m32</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W0 01 /5</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void blcic(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.XOP_Blcic_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>blcic instruction.<br/>
		/// <br/>
		/// <c>BLCIC r64, r/m64</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W1 01 /5</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void blcic(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.XOP_Blcic_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>blcic instruction.<br/>
		/// <br/>
		/// <c>BLCIC r32, r/m32</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W0 01 /5</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void blcic(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.XOP_Blcic_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>blcic instruction.<br/>
		/// <br/>
		/// <c>BLCIC r64, r/m64</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W1 01 /5</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void blcic(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.XOP_Blcic_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>blcmsk instruction.<br/>
		/// <br/>
		/// <c>BLCMSK r32, r/m32</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W0 02 /1</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void blcmsk(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.XOP_Blcmsk_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>blcmsk instruction.<br/>
		/// <br/>
		/// <c>BLCMSK r64, r/m64</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W1 02 /1</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void blcmsk(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.XOP_Blcmsk_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>blcmsk instruction.<br/>
		/// <br/>
		/// <c>BLCMSK r32, r/m32</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W0 02 /1</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void blcmsk(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.XOP_Blcmsk_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>blcmsk instruction.<br/>
		/// <br/>
		/// <c>BLCMSK r64, r/m64</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W1 02 /1</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void blcmsk(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.XOP_Blcmsk_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>blcs instruction.<br/>
		/// <br/>
		/// <c>BLCS r32, r/m32</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W0 01 /3</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void blcs(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.XOP_Blcs_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>blcs instruction.<br/>
		/// <br/>
		/// <c>BLCS r64, r/m64</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W1 01 /3</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void blcs(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.XOP_Blcs_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>blcs instruction.<br/>
		/// <br/>
		/// <c>BLCS r32, r/m32</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W0 01 /3</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void blcs(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.XOP_Blcs_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>blcs instruction.<br/>
		/// <br/>
		/// <c>BLCS r64, r/m64</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W1 01 /3</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void blcs(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.XOP_Blcs_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>blendpd instruction.<br/>
		/// <br/>
		/// <c>BLENDPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0D /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void blendpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.Blendpd_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>blendpd instruction.<br/>
		/// <br/>
		/// <c>BLENDPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0D /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void blendpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.Blendpd_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>blendpd instruction.<br/>
		/// <br/>
		/// <c>BLENDPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0D /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void blendpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.Blendpd_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>blendpd instruction.<br/>
		/// <br/>
		/// <c>BLENDPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0D /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void blendpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.Blendpd_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>blendps instruction.<br/>
		/// <br/>
		/// <c>BLENDPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0C /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void blendps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.Blendps_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>blendps instruction.<br/>
		/// <br/>
		/// <c>BLENDPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0C /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void blendps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.Blendps_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>blendps instruction.<br/>
		/// <br/>
		/// <c>BLENDPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0C /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void blendps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.Blendps_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>blendps instruction.<br/>
		/// <br/>
		/// <c>BLENDPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0C /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void blendps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.Blendps_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>blendvpd instruction.<br/>
		/// <br/>
		/// <c>BLENDVPD xmm1, xmm2/m128, &lt;XMM0&gt;</c><br/>
		/// <br/>
		/// <c>66 0F 38 15 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void blendvpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Blendvpd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>blendvpd instruction.<br/>
		/// <br/>
		/// <c>BLENDVPD xmm1, xmm2/m128, &lt;XMM0&gt;</c><br/>
		/// <br/>
		/// <c>66 0F 38 15 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void blendvpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Blendvpd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>blendvps instruction.<br/>
		/// <br/>
		/// <c>BLENDVPS xmm1, xmm2/m128, &lt;XMM0&gt;</c><br/>
		/// <br/>
		/// <c>66 0F 38 14 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void blendvps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Blendvps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>blendvps instruction.<br/>
		/// <br/>
		/// <c>BLENDVPS xmm1, xmm2/m128, &lt;XMM0&gt;</c><br/>
		/// <br/>
		/// <c>66 0F 38 14 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void blendvps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Blendvps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>blsfill instruction.<br/>
		/// <br/>
		/// <c>BLSFILL r32, r/m32</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W0 01 /2</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void blsfill(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.XOP_Blsfill_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>blsfill instruction.<br/>
		/// <br/>
		/// <c>BLSFILL r64, r/m64</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W1 01 /2</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void blsfill(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.XOP_Blsfill_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>blsfill instruction.<br/>
		/// <br/>
		/// <c>BLSFILL r32, r/m32</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W0 01 /2</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void blsfill(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.XOP_Blsfill_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>blsfill instruction.<br/>
		/// <br/>
		/// <c>BLSFILL r64, r/m64</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W1 01 /2</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void blsfill(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.XOP_Blsfill_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>blsi instruction.<br/>
		/// <br/>
		/// <c>BLSI r32, r/m32</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W0 F3 /3</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void blsi(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.VEX_Blsi_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>blsi instruction.<br/>
		/// <br/>
		/// <c>BLSI r64, r/m64</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W1 F3 /3</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void blsi(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.VEX_Blsi_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>blsi instruction.<br/>
		/// <br/>
		/// <c>BLSI r32, r/m32</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W0 F3 /3</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void blsi(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.VEX_Blsi_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>blsi instruction.<br/>
		/// <br/>
		/// <c>BLSI r64, r/m64</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W1 F3 /3</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void blsi(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.VEX_Blsi_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>blsic instruction.<br/>
		/// <br/>
		/// <c>BLSIC r32, r/m32</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W0 01 /6</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void blsic(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.XOP_Blsic_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>blsic instruction.<br/>
		/// <br/>
		/// <c>BLSIC r64, r/m64</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W1 01 /6</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void blsic(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.XOP_Blsic_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>blsic instruction.<br/>
		/// <br/>
		/// <c>BLSIC r32, r/m32</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W0 01 /6</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void blsic(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.XOP_Blsic_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>blsic instruction.<br/>
		/// <br/>
		/// <c>BLSIC r64, r/m64</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W1 01 /6</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void blsic(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.XOP_Blsic_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>blsmsk instruction.<br/>
		/// <br/>
		/// <c>BLSMSK r32, r/m32</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W0 F3 /2</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void blsmsk(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.VEX_Blsmsk_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>blsmsk instruction.<br/>
		/// <br/>
		/// <c>BLSMSK r64, r/m64</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W1 F3 /2</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void blsmsk(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.VEX_Blsmsk_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>blsmsk instruction.<br/>
		/// <br/>
		/// <c>BLSMSK r32, r/m32</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W0 F3 /2</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void blsmsk(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.VEX_Blsmsk_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>blsmsk instruction.<br/>
		/// <br/>
		/// <c>BLSMSK r64, r/m64</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W1 F3 /2</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void blsmsk(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.VEX_Blsmsk_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>blsr instruction.<br/>
		/// <br/>
		/// <c>BLSR r32, r/m32</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W0 F3 /1</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void blsr(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.VEX_Blsr_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>blsr instruction.<br/>
		/// <br/>
		/// <c>BLSR r64, r/m64</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W1 F3 /1</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void blsr(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.VEX_Blsr_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>blsr instruction.<br/>
		/// <br/>
		/// <c>BLSR r32, r/m32</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W0 F3 /1</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void blsr(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.VEX_Blsr_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>blsr instruction.<br/>
		/// <br/>
		/// <c>BLSR r64, r/m64</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W1 F3 /1</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void blsr(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.VEX_Blsr_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>bndcl instruction.<br/>
		/// <br/>
		/// <c>BNDCL bnd, r/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 1A /r</c><br/>
		/// <br/>
		/// <c>MPX</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void bndcl(AssemblerRegisterBND dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Bndcl_bnd_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>bndcl instruction.<br/>
		/// <br/>
		/// <c>BNDCL bnd, r/m64</c><br/>
		/// <br/>
		/// <c>F3 0F 1A /r</c><br/>
		/// <br/>
		/// <c>MPX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void bndcl(AssemblerRegisterBND dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Bndcl_bnd_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>bndcl instruction.<br/>
		/// <br/>
		/// <c>BNDCL bnd, r/m64</c><br/>
		/// <br/>
		/// <c>F3 0F 1A /r</c><br/>
		/// <br/>
		/// <c>MPX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>BNDCL bnd, r/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 1A /r</c><br/>
		/// <br/>
		/// <c>MPX</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void bndcl(AssemblerRegisterBND dst, AssemblerMemoryOperand src) {
			Code op;
			if (src.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Bndcl_bnd_rm64;
			} else if (src.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Bndcl_bnd_rm32;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Bndcl, dst, src);
			}
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>bndcn instruction.<br/>
		/// <br/>
		/// <c>BNDCN bnd, r/m32</c><br/>
		/// <br/>
		/// <c>F2 0F 1B /r</c><br/>
		/// <br/>
		/// <c>MPX</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void bndcn(AssemblerRegisterBND dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Bndcn_bnd_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>bndcn instruction.<br/>
		/// <br/>
		/// <c>BNDCN bnd, r/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 1B /r</c><br/>
		/// <br/>
		/// <c>MPX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void bndcn(AssemblerRegisterBND dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Bndcn_bnd_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>bndcn instruction.<br/>
		/// <br/>
		/// <c>BNDCN bnd, r/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 1B /r</c><br/>
		/// <br/>
		/// <c>MPX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>BNDCN bnd, r/m32</c><br/>
		/// <br/>
		/// <c>F2 0F 1B /r</c><br/>
		/// <br/>
		/// <c>MPX</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void bndcn(AssemblerRegisterBND dst, AssemblerMemoryOperand src) {
			Code op;
			if (src.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Bndcn_bnd_rm64;
			} else if (src.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Bndcn_bnd_rm32;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Bndcn, dst, src);
			}
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>bndcu instruction.<br/>
		/// <br/>
		/// <c>BNDCU bnd, r/m32</c><br/>
		/// <br/>
		/// <c>F2 0F 1A /r</c><br/>
		/// <br/>
		/// <c>MPX</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void bndcu(AssemblerRegisterBND dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Bndcu_bnd_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>bndcu instruction.<br/>
		/// <br/>
		/// <c>BNDCU bnd, r/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 1A /r</c><br/>
		/// <br/>
		/// <c>MPX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void bndcu(AssemblerRegisterBND dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Bndcu_bnd_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>bndcu instruction.<br/>
		/// <br/>
		/// <c>BNDCU bnd, r/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 1A /r</c><br/>
		/// <br/>
		/// <c>MPX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>BNDCU bnd, r/m32</c><br/>
		/// <br/>
		/// <c>F2 0F 1A /r</c><br/>
		/// <br/>
		/// <c>MPX</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void bndcu(AssemblerRegisterBND dst, AssemblerMemoryOperand src) {
			Code op;
			if (src.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Bndcu_bnd_rm64;
			} else if (src.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Bndcu_bnd_rm32;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Bndcu, dst, src);
			}
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>bndldx instruction.<br/>
		/// <br/>
		/// <c>BNDLDX bnd, mib</c><br/>
		/// <br/>
		/// <c>NP 0F 1A /r</c><br/>
		/// <br/>
		/// <c>MPX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void bndldx(AssemblerRegisterBND dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Bndldx_bnd_mib;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>bndmk instruction.<br/>
		/// <br/>
		/// <c>BNDMK bnd, m64</c><br/>
		/// <br/>
		/// <c>F3 0F 1B /r</c><br/>
		/// <br/>
		/// <c>MPX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>BNDMK bnd, m32</c><br/>
		/// <br/>
		/// <c>F3 0F 1B /r</c><br/>
		/// <br/>
		/// <c>MPX</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void bndmk(AssemblerRegisterBND dst, AssemblerMemoryOperand src) {
			Code op;
			if (src.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Bndmk_bnd_m64;
			} else if (src.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Bndmk_bnd_m32;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Bndmk, dst, src);
			}
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>bndmov instruction.<br/>
		/// <br/>
		/// <c>BNDMOV bnd1, bnd2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 1A /r</c><br/>
		/// <br/>
		/// <c>MPX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>BNDMOV bnd1, bnd2/m64</c><br/>
		/// <br/>
		/// <c>66 0F 1A /r</c><br/>
		/// <br/>
		/// <c>MPX</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void bndmov(AssemblerRegisterBND dst, AssemblerRegisterBND src) {
			Code op;
			op = Bitness == 64 ? Code.Bndmov_bnd_bndm128 : Code.Bndmov_bnd_bndm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>bndmov instruction.<br/>
		/// <br/>
		/// <c>BNDMOV bnd1/m128, bnd2</c><br/>
		/// <br/>
		/// <c>66 0F 1B /r</c><br/>
		/// <br/>
		/// <c>MPX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>BNDMOV bnd1/m64, bnd2</c><br/>
		/// <br/>
		/// <c>66 0F 1B /r</c><br/>
		/// <br/>
		/// <c>MPX</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void bndmov(AssemblerMemoryOperand dst, AssemblerRegisterBND src) {
			Code op;
			op = Bitness == 64 ? Code.Bndmov_bndm128_bnd : Code.Bndmov_bndm64_bnd;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>bndmov instruction.<br/>
		/// <br/>
		/// <c>BNDMOV bnd1, bnd2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 1A /r</c><br/>
		/// <br/>
		/// <c>MPX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>BNDMOV bnd1, bnd2/m64</c><br/>
		/// <br/>
		/// <c>66 0F 1A /r</c><br/>
		/// <br/>
		/// <c>MPX</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void bndmov(AssemblerRegisterBND dst, AssemblerMemoryOperand src) {
			Code op;
			op = Bitness == 64 ? Code.Bndmov_bnd_bndm128 : Code.Bndmov_bnd_bndm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>bndstx instruction.<br/>
		/// <br/>
		/// <c>BNDSTX mib, bnd</c><br/>
		/// <br/>
		/// <c>NP 0F 1B /r</c><br/>
		/// <br/>
		/// <c>MPX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void bndstx(AssemblerMemoryOperand dst, AssemblerRegisterBND src) {
			Code op;
			op = Code.Bndstx_mib_bnd;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>bound instruction.<br/>
		/// <br/>
		/// <c>BOUND r16, m16&amp;16</c><br/>
		/// <br/>
		/// <c>o16 62 /r</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void bound(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Bound_r16_m1616;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>bound instruction.<br/>
		/// <br/>
		/// <c>BOUND r32, m32&amp;32</c><br/>
		/// <br/>
		/// <c>o32 62 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void bound(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Bound_r32_m3232;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>bsf instruction.<br/>
		/// <br/>
		/// <c>BSF r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F BC /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void bsf(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Bsf_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>bsf instruction.<br/>
		/// <br/>
		/// <c>BSF r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F BC /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void bsf(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Bsf_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>bsf instruction.<br/>
		/// <br/>
		/// <c>BSF r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 0F BC /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void bsf(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Bsf_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>bsf instruction.<br/>
		/// <br/>
		/// <c>BSF r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F BC /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void bsf(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Bsf_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>bsf instruction.<br/>
		/// <br/>
		/// <c>BSF r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F BC /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void bsf(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Bsf_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>bsf instruction.<br/>
		/// <br/>
		/// <c>BSF r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 0F BC /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void bsf(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Bsf_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>bsr instruction.<br/>
		/// <br/>
		/// <c>BSR r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F BD /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void bsr(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Bsr_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>bsr instruction.<br/>
		/// <br/>
		/// <c>BSR r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F BD /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void bsr(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Bsr_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>bsr instruction.<br/>
		/// <br/>
		/// <c>BSR r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 0F BD /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void bsr(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Bsr_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>bsr instruction.<br/>
		/// <br/>
		/// <c>BSR r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F BD /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void bsr(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Bsr_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>bsr instruction.<br/>
		/// <br/>
		/// <c>BSR r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F BD /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void bsr(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Bsr_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>bsr instruction.<br/>
		/// <br/>
		/// <c>BSR r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 0F BD /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void bsr(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Bsr_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>bswap instruction.<br/>
		/// <br/>
		/// <c>BSWAP r16</c><br/>
		/// <br/>
		/// <c>o16 0F C8+rw</c><br/>
		/// <br/>
		/// <c>486+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void bswap(AssemblerRegister16 dst) {
			Code op;
			op = Code.Bswap_r16;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>bswap instruction.<br/>
		/// <br/>
		/// <c>BSWAP r32</c><br/>
		/// <br/>
		/// <c>o32 0F C8+rd</c><br/>
		/// <br/>
		/// <c>486+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void bswap(AssemblerRegister32 dst) {
			Code op;
			op = Code.Bswap_r32;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>bswap instruction.<br/>
		/// <br/>
		/// <c>BSWAP r64</c><br/>
		/// <br/>
		/// <c>REX.W 0F C8+ro</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void bswap(AssemblerRegister64 dst) {
			Code op;
			op = Code.Bswap_r64;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>bt instruction.<br/>
		/// <br/>
		/// <c>BT r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F A3 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void bt(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Bt_rm16_r16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>bt instruction.<br/>
		/// <br/>
		/// <c>BT r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F A3 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void bt(AssemblerMemoryOperand dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Bt_rm16_r16;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>bt instruction.<br/>
		/// <br/>
		/// <c>BT r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F A3 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void bt(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Bt_rm32_r32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>bt instruction.<br/>
		/// <br/>
		/// <c>BT r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F A3 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void bt(AssemblerMemoryOperand dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Bt_rm32_r32;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>bt instruction.<br/>
		/// <br/>
		/// <c>BT r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 0F A3 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void bt(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Bt_rm64_r64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>bt instruction.<br/>
		/// <br/>
		/// <c>BT r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 0F A3 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void bt(AssemblerMemoryOperand dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Bt_rm64_r64;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>bt instruction.<br/>
		/// <br/>
		/// <c>BT r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F BA /4 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void bt(AssemblerRegister16 dst, sbyte imm) {
			Code op;
			op = Code.Bt_rm16_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>bt instruction.<br/>
		/// <br/>
		/// <c>BT r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F BA /4 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void bt(AssemblerRegister32 dst, sbyte imm) {
			Code op;
			op = Code.Bt_rm32_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>bt instruction.<br/>
		/// <br/>
		/// <c>BT r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W 0F BA /4 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void bt(AssemblerRegister64 dst, sbyte imm) {
			Code op;
			op = Code.Bt_rm64_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>bt instruction.<br/>
		/// <br/>
		/// <c>BT r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W 0F BA /4 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>BT r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F BA /4 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>BT r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F BA /4 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void bt(AssemblerMemoryOperand dst, sbyte imm) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Bt_rm64_imm8;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Bt_rm32_imm8;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Bt_rm16_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Bt, dst, imm);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>bt instruction.<br/>
		/// <br/>
		/// <c>BT r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F BA /4 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void bt(AssemblerRegister16 dst, byte imm) {
			Code op;
			op = Code.Bt_rm16_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>bt instruction.<br/>
		/// <br/>
		/// <c>BT r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F BA /4 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void bt(AssemblerRegister32 dst, byte imm) {
			Code op;
			op = Code.Bt_rm32_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>bt instruction.<br/>
		/// <br/>
		/// <c>BT r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W 0F BA /4 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void bt(AssemblerRegister64 dst, byte imm) {
			Code op;
			op = Code.Bt_rm64_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>bt instruction.<br/>
		/// <br/>
		/// <c>BT r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W 0F BA /4 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>BT r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F BA /4 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>BT r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F BA /4 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void bt(AssemblerMemoryOperand dst, byte imm) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Bt_rm64_imm8;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Bt_rm32_imm8;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Bt_rm16_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Bt, dst, imm);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>btc instruction.<br/>
		/// <br/>
		/// <c>BTC r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F BB /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void btc(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Btc_rm16_r16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>btc instruction.<br/>
		/// <br/>
		/// <c>BTC r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F BB /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void btc(AssemblerMemoryOperand dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Btc_rm16_r16;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>btc instruction.<br/>
		/// <br/>
		/// <c>BTC r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F BB /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void btc(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Btc_rm32_r32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>btc instruction.<br/>
		/// <br/>
		/// <c>BTC r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F BB /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void btc(AssemblerMemoryOperand dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Btc_rm32_r32;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>btc instruction.<br/>
		/// <br/>
		/// <c>BTC r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 0F BB /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void btc(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Btc_rm64_r64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>btc instruction.<br/>
		/// <br/>
		/// <c>BTC r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 0F BB /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void btc(AssemblerMemoryOperand dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Btc_rm64_r64;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>btc instruction.<br/>
		/// <br/>
		/// <c>BTC r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F BA /7 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void btc(AssemblerRegister16 dst, sbyte imm) {
			Code op;
			op = Code.Btc_rm16_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>btc instruction.<br/>
		/// <br/>
		/// <c>BTC r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F BA /7 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void btc(AssemblerRegister32 dst, sbyte imm) {
			Code op;
			op = Code.Btc_rm32_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>btc instruction.<br/>
		/// <br/>
		/// <c>BTC r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W 0F BA /7 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void btc(AssemblerRegister64 dst, sbyte imm) {
			Code op;
			op = Code.Btc_rm64_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>btc instruction.<br/>
		/// <br/>
		/// <c>BTC r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W 0F BA /7 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>BTC r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F BA /7 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>BTC r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F BA /7 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void btc(AssemblerMemoryOperand dst, sbyte imm) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Btc_rm64_imm8;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Btc_rm32_imm8;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Btc_rm16_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Btc, dst, imm);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>btc instruction.<br/>
		/// <br/>
		/// <c>BTC r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F BA /7 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void btc(AssemblerRegister16 dst, byte imm) {
			Code op;
			op = Code.Btc_rm16_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>btc instruction.<br/>
		/// <br/>
		/// <c>BTC r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F BA /7 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void btc(AssemblerRegister32 dst, byte imm) {
			Code op;
			op = Code.Btc_rm32_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>btc instruction.<br/>
		/// <br/>
		/// <c>BTC r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W 0F BA /7 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void btc(AssemblerRegister64 dst, byte imm) {
			Code op;
			op = Code.Btc_rm64_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>btc instruction.<br/>
		/// <br/>
		/// <c>BTC r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W 0F BA /7 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>BTC r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F BA /7 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>BTC r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F BA /7 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void btc(AssemblerMemoryOperand dst, byte imm) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Btc_rm64_imm8;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Btc_rm32_imm8;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Btc_rm16_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Btc, dst, imm);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>btr instruction.<br/>
		/// <br/>
		/// <c>BTR r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F B3 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void btr(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Btr_rm16_r16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>btr instruction.<br/>
		/// <br/>
		/// <c>BTR r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F B3 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void btr(AssemblerMemoryOperand dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Btr_rm16_r16;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>btr instruction.<br/>
		/// <br/>
		/// <c>BTR r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F B3 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void btr(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Btr_rm32_r32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>btr instruction.<br/>
		/// <br/>
		/// <c>BTR r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F B3 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void btr(AssemblerMemoryOperand dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Btr_rm32_r32;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>btr instruction.<br/>
		/// <br/>
		/// <c>BTR r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 0F B3 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void btr(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Btr_rm64_r64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>btr instruction.<br/>
		/// <br/>
		/// <c>BTR r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 0F B3 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void btr(AssemblerMemoryOperand dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Btr_rm64_r64;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>btr instruction.<br/>
		/// <br/>
		/// <c>BTR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F BA /6 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void btr(AssemblerRegister16 dst, sbyte imm) {
			Code op;
			op = Code.Btr_rm16_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>btr instruction.<br/>
		/// <br/>
		/// <c>BTR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F BA /6 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void btr(AssemblerRegister32 dst, sbyte imm) {
			Code op;
			op = Code.Btr_rm32_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>btr instruction.<br/>
		/// <br/>
		/// <c>BTR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W 0F BA /6 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void btr(AssemblerRegister64 dst, sbyte imm) {
			Code op;
			op = Code.Btr_rm64_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>btr instruction.<br/>
		/// <br/>
		/// <c>BTR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W 0F BA /6 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>BTR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F BA /6 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>BTR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F BA /6 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void btr(AssemblerMemoryOperand dst, sbyte imm) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Btr_rm64_imm8;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Btr_rm32_imm8;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Btr_rm16_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Btr, dst, imm);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>btr instruction.<br/>
		/// <br/>
		/// <c>BTR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F BA /6 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void btr(AssemblerRegister16 dst, byte imm) {
			Code op;
			op = Code.Btr_rm16_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>btr instruction.<br/>
		/// <br/>
		/// <c>BTR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F BA /6 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void btr(AssemblerRegister32 dst, byte imm) {
			Code op;
			op = Code.Btr_rm32_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>btr instruction.<br/>
		/// <br/>
		/// <c>BTR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W 0F BA /6 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void btr(AssemblerRegister64 dst, byte imm) {
			Code op;
			op = Code.Btr_rm64_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>btr instruction.<br/>
		/// <br/>
		/// <c>BTR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W 0F BA /6 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>BTR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F BA /6 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>BTR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F BA /6 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void btr(AssemblerMemoryOperand dst, byte imm) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Btr_rm64_imm8;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Btr_rm32_imm8;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Btr_rm16_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Btr, dst, imm);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>bts instruction.<br/>
		/// <br/>
		/// <c>BTS r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F AB /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void bts(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Bts_rm16_r16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>bts instruction.<br/>
		/// <br/>
		/// <c>BTS r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F AB /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void bts(AssemblerMemoryOperand dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Bts_rm16_r16;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>bts instruction.<br/>
		/// <br/>
		/// <c>BTS r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F AB /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void bts(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Bts_rm32_r32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>bts instruction.<br/>
		/// <br/>
		/// <c>BTS r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F AB /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void bts(AssemblerMemoryOperand dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Bts_rm32_r32;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>bts instruction.<br/>
		/// <br/>
		/// <c>BTS r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 0F AB /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void bts(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Bts_rm64_r64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>bts instruction.<br/>
		/// <br/>
		/// <c>BTS r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 0F AB /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void bts(AssemblerMemoryOperand dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Bts_rm64_r64;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>bts instruction.<br/>
		/// <br/>
		/// <c>BTS r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F BA /5 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void bts(AssemblerRegister16 dst, sbyte imm) {
			Code op;
			op = Code.Bts_rm16_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>bts instruction.<br/>
		/// <br/>
		/// <c>BTS r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F BA /5 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void bts(AssemblerRegister32 dst, sbyte imm) {
			Code op;
			op = Code.Bts_rm32_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>bts instruction.<br/>
		/// <br/>
		/// <c>BTS r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W 0F BA /5 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void bts(AssemblerRegister64 dst, sbyte imm) {
			Code op;
			op = Code.Bts_rm64_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>bts instruction.<br/>
		/// <br/>
		/// <c>BTS r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W 0F BA /5 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>BTS r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F BA /5 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>BTS r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F BA /5 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void bts(AssemblerMemoryOperand dst, sbyte imm) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Bts_rm64_imm8;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Bts_rm32_imm8;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Bts_rm16_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Bts, dst, imm);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>bts instruction.<br/>
		/// <br/>
		/// <c>BTS r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F BA /5 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void bts(AssemblerRegister16 dst, byte imm) {
			Code op;
			op = Code.Bts_rm16_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>bts instruction.<br/>
		/// <br/>
		/// <c>BTS r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F BA /5 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void bts(AssemblerRegister32 dst, byte imm) {
			Code op;
			op = Code.Bts_rm32_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>bts instruction.<br/>
		/// <br/>
		/// <c>BTS r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W 0F BA /5 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void bts(AssemblerRegister64 dst, byte imm) {
			Code op;
			op = Code.Bts_rm64_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>bts instruction.<br/>
		/// <br/>
		/// <c>BTS r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W 0F BA /5 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>BTS r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F BA /5 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>BTS r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F BA /5 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void bts(AssemblerMemoryOperand dst, byte imm) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Bts_rm64_imm8;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Bts_rm32_imm8;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Bts_rm16_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Bts, dst, imm);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>bzhi instruction.<br/>
		/// <br/>
		/// <c>BZHI r32a, r/m32, r32b</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W0 F5 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void bzhi(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerRegister32 src2) {
			Code op;
			op = Code.VEX_Bzhi_r32_rm32_r32;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>bzhi instruction.<br/>
		/// <br/>
		/// <c>BZHI r32a, r/m32, r32b</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W0 F5 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void bzhi(AssemblerRegister32 dst, AssemblerMemoryOperand src1, AssemblerRegister32 src2) {
			Code op;
			op = Code.VEX_Bzhi_r32_rm32_r32;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), src2));
		}
		/// <summary>bzhi instruction.<br/>
		/// <br/>
		/// <c>BZHI r64a, r/m64, r64b</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W1 F5 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void bzhi(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerRegister64 src2) {
			Code op;
			op = Code.VEX_Bzhi_r64_rm64_r64;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>bzhi instruction.<br/>
		/// <br/>
		/// <c>BZHI r64a, r/m64, r64b</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W1 F5 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void bzhi(AssemblerRegister64 dst, AssemblerMemoryOperand src1, AssemblerRegister64 src2) {
			Code op;
			op = Code.VEX_Bzhi_r64_rm64_r64;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), src2));
		}
		/// <summary>call instruction.<br/>
		/// <br/>
		/// <c>CALL r/m16</c><br/>
		/// <br/>
		/// <c>o16 FF /2</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void call(AssemblerRegister16 dst) {
			Code op;
			op = Code.Call_rm16;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>call instruction.<br/>
		/// <br/>
		/// <c>CALL r/m32</c><br/>
		/// <br/>
		/// <c>o32 FF /2</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void call(AssemblerRegister32 dst) {
			Code op;
			op = Code.Call_rm32;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>call instruction.<br/>
		/// <br/>
		/// <c>CALL r/m64</c><br/>
		/// <br/>
		/// <c>FF /2</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void call(AssemblerRegister64 dst) {
			Code op;
			op = Code.Call_rm64;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>call instruction.<br/>
		/// <br/>
		/// <c>CALL m16:64</c><br/>
		/// <br/>
		/// <c>REX.W FF /3</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>CALL r/m64</c><br/>
		/// <br/>
		/// <c>FF /2</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>CALL m16:32</c><br/>
		/// <br/>
		/// <c>o32 FF /3</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CALL r/m32</c><br/>
		/// <br/>
		/// <c>o32 FF /2</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>CALL m16:16</c><br/>
		/// <br/>
		/// <c>o16 FF /3</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CALL r/m16</c><br/>
		/// <br/>
		/// <c>o16 FF /2</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void call(AssemblerMemoryOperand dst) {
			Code op;
			if (dst.Size == MemoryOperandSize.TwordPtr) {
				op = Code.Call_m1664;
			} else if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Call_rm64;
			} else if (dst.Size == MemoryOperandSize.FwordPtr) {
				op = Code.Call_m1632;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Bitness >= 32 ? Code.Call_rm32 : Code.Call_m1616;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Call_rm16;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Call, dst);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>call instruction.<br/>
		/// <br/>
		/// <c>CALL rel32</c><br/>
		/// <br/>
		/// <c>E8 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>CALL rel32</c><br/>
		/// <br/>
		/// <c>o32 E8 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>CALL rel16</c><br/>
		/// <br/>
		/// <c>o16 E8 cw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void call(Label dst) {
			Code op;
			if (Bitness == 64) {
				op = Code.Call_rel32_64;
			} else op = Bitness >= 32 ? Code.Call_rel32_32 : Code.Call_rel16;
			AddInstruction(Instruction.CreateBranch(op, dst.Id));
		}
		/// <summary>call instruction.<br/>
		/// <br/>
		/// <c>CALL rel32</c><br/>
		/// <br/>
		/// <c>E8 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>CALL rel32</c><br/>
		/// <br/>
		/// <c>o32 E8 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>CALL rel16</c><br/>
		/// <br/>
		/// <c>o16 E8 cw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void call(ulong dst) {
			Code op;
			if (Bitness == 64) {
				op = Code.Call_rel32_64;
			} else op = Bitness >= 32 ? Code.Call_rel32_32 : Code.Call_rel16;
			AddInstruction(Instruction.CreateBranch(op, dst));
		}
		/// <summary>cbw instruction.<br/>
		/// <br/>
		/// <c>CBW</c><br/>
		/// <br/>
		/// <c>o16 98</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cbw() {
			Code op;
			op = Code.Cbw;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>cdq instruction.<br/>
		/// <br/>
		/// <c>CDQ</c><br/>
		/// <br/>
		/// <c>o32 99</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cdq() {
			Code op;
			op = Code.Cdq;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>cdqe instruction.<br/>
		/// <br/>
		/// <c>CDQE</c><br/>
		/// <br/>
		/// <c>REX.W 98</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cdqe() {
			Code op;
			op = Code.Cdqe;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>cl1invmb instruction.<br/>
		/// <br/>
		/// <c>CL1INVMB</c><br/>
		/// <br/>
		/// <c>0F 0A</c><br/>
		/// <br/>
		/// <c>CL1INVMB</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void cl1invmb() {
			Code op;
			op = Code.Cl1invmb;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>clac instruction.<br/>
		/// <br/>
		/// <c>CLAC</c><br/>
		/// <br/>
		/// <c>NP 0F 01 CA</c><br/>
		/// <br/>
		/// <c>SMAP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void clac() {
			Code op;
			op = Code.Clac;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>clc instruction.<br/>
		/// <br/>
		/// <c>CLC</c><br/>
		/// <br/>
		/// <c>F8</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void clc() {
			Code op;
			op = Code.Clc;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>cld instruction.<br/>
		/// <br/>
		/// <c>CLD</c><br/>
		/// <br/>
		/// <c>FC</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cld() {
			Code op;
			op = Code.Cld;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>cldemote instruction.<br/>
		/// <br/>
		/// <c>CLDEMOTE m8</c><br/>
		/// <br/>
		/// <c>NP 0F 1C /0</c><br/>
		/// <br/>
		/// <c>CLDEMOTE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cldemote(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Cldemote_m8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>clflush instruction.<br/>
		/// <br/>
		/// <c>CLFLUSH m8</c><br/>
		/// <br/>
		/// <c>NP 0F AE /7</c><br/>
		/// <br/>
		/// <c>CLFSH</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void clflush(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Clflush_m8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>clflushopt instruction.<br/>
		/// <br/>
		/// <c>CLFLUSHOPT m8</c><br/>
		/// <br/>
		/// <c>66 0F AE /7</c><br/>
		/// <br/>
		/// <c>CLFLUSHOPT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void clflushopt(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Clflushopt_m8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>clgi instruction.<br/>
		/// <br/>
		/// <c>CLGI</c><br/>
		/// <br/>
		/// <c>0F 01 DD</c><br/>
		/// <br/>
		/// <c>SVM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void clgi() {
			Code op;
			op = Code.Clgi;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>cli instruction.<br/>
		/// <br/>
		/// <c>CLI</c><br/>
		/// <br/>
		/// <c>FA</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cli() {
			Code op;
			op = Code.Cli;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>clrssbsy instruction.<br/>
		/// <br/>
		/// <c>CLRSSBSY m64</c><br/>
		/// <br/>
		/// <c>F3 0F AE /6</c><br/>
		/// <br/>
		/// <c>CET_SS</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void clrssbsy(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Clrssbsy_m64;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>clts instruction.<br/>
		/// <br/>
		/// <c>CLTS</c><br/>
		/// <br/>
		/// <c>0F 06</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void clts() {
			Code op;
			op = Code.Clts;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>clwb instruction.<br/>
		/// <br/>
		/// <c>CLWB m8</c><br/>
		/// <br/>
		/// <c>66 0F AE /6</c><br/>
		/// <br/>
		/// <c>CLWB</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void clwb(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Clwb_m8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>clzero instruction.<br/>
		/// <br/>
		/// <c>CLZERO</c><br/>
		/// <br/>
		/// <c>0F 01 FC</c><br/>
		/// <br/>
		/// <c>CLZERO</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>CLZERO</c><br/>
		/// <br/>
		/// <c>a32 0F 01 FC</c><br/>
		/// <br/>
		/// <c>CLZERO</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CLZERO</c><br/>
		/// <br/>
		/// <c>a16 0F 01 FC</c><br/>
		/// <br/>
		/// <c>CLZERO</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void clzero() {
			Code op;
			if (Bitness == 64) {
				op = Code.Clzeroq;
			} else op = Bitness >= 32 ? Code.Clzerod : Code.Clzerow;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>cmc instruction.<br/>
		/// <br/>
		/// <c>CMC</c><br/>
		/// <br/>
		/// <c>F5</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmc() {
			Code op;
			op = Code.Cmc;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>cmova instruction.<br/>
		/// <br/>
		/// <c>CMOVA r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 47 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmova(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Cmova_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmova instruction.<br/>
		/// <br/>
		/// <c>CMOVA r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 47 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmova(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Cmova_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmova instruction.<br/>
		/// <br/>
		/// <c>CMOVA r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 47 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cmova(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Cmova_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmova instruction.<br/>
		/// <br/>
		/// <c>CMOVA r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 47 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmova(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmova_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmova instruction.<br/>
		/// <br/>
		/// <c>CMOVA r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 47 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmova(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmova_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmova instruction.<br/>
		/// <br/>
		/// <c>CMOVA r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 47 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cmova(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmova_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmovae instruction.<br/>
		/// <br/>
		/// <c>CMOVAE r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 43 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovae(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Cmovae_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmovae instruction.<br/>
		/// <br/>
		/// <c>CMOVAE r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 43 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovae(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Cmovae_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmovae instruction.<br/>
		/// <br/>
		/// <c>CMOVAE r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 43 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cmovae(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Cmovae_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmovae instruction.<br/>
		/// <br/>
		/// <c>CMOVAE r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 43 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovae(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmovae_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmovae instruction.<br/>
		/// <br/>
		/// <c>CMOVAE r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 43 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovae(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmovae_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmovae instruction.<br/>
		/// <br/>
		/// <c>CMOVAE r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 43 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cmovae(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmovae_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmovb instruction.<br/>
		/// <br/>
		/// <c>CMOVB r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 42 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovb(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Cmovb_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmovb instruction.<br/>
		/// <br/>
		/// <c>CMOVB r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 42 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovb(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Cmovb_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmovb instruction.<br/>
		/// <br/>
		/// <c>CMOVB r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 42 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cmovb(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Cmovb_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmovb instruction.<br/>
		/// <br/>
		/// <c>CMOVB r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 42 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovb(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmovb_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmovb instruction.<br/>
		/// <br/>
		/// <c>CMOVB r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 42 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovb(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmovb_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmovb instruction.<br/>
		/// <br/>
		/// <c>CMOVB r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 42 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cmovb(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmovb_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmovbe instruction.<br/>
		/// <br/>
		/// <c>CMOVBE r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 46 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovbe(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Cmovbe_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmovbe instruction.<br/>
		/// <br/>
		/// <c>CMOVBE r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 46 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovbe(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Cmovbe_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmovbe instruction.<br/>
		/// <br/>
		/// <c>CMOVBE r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 46 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cmovbe(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Cmovbe_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmovbe instruction.<br/>
		/// <br/>
		/// <c>CMOVBE r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 46 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovbe(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmovbe_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmovbe instruction.<br/>
		/// <br/>
		/// <c>CMOVBE r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 46 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovbe(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmovbe_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmovbe instruction.<br/>
		/// <br/>
		/// <c>CMOVBE r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 46 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cmovbe(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmovbe_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmove instruction.<br/>
		/// <br/>
		/// <c>CMOVE r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 44 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmove(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Cmove_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmove instruction.<br/>
		/// <br/>
		/// <c>CMOVE r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 44 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmove(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Cmove_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmove instruction.<br/>
		/// <br/>
		/// <c>CMOVE r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 44 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cmove(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Cmove_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmove instruction.<br/>
		/// <br/>
		/// <c>CMOVE r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 44 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmove(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmove_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmove instruction.<br/>
		/// <br/>
		/// <c>CMOVE r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 44 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmove(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmove_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmove instruction.<br/>
		/// <br/>
		/// <c>CMOVE r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 44 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cmove(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmove_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmovg instruction.<br/>
		/// <br/>
		/// <c>CMOVG r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 4F /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovg(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Cmovg_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmovg instruction.<br/>
		/// <br/>
		/// <c>CMOVG r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 4F /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovg(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Cmovg_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmovg instruction.<br/>
		/// <br/>
		/// <c>CMOVG r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 4F /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cmovg(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Cmovg_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmovg instruction.<br/>
		/// <br/>
		/// <c>CMOVG r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 4F /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovg(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmovg_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmovg instruction.<br/>
		/// <br/>
		/// <c>CMOVG r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 4F /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovg(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmovg_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmovg instruction.<br/>
		/// <br/>
		/// <c>CMOVG r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 4F /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cmovg(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmovg_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmovge instruction.<br/>
		/// <br/>
		/// <c>CMOVGE r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 4D /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovge(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Cmovge_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmovge instruction.<br/>
		/// <br/>
		/// <c>CMOVGE r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 4D /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovge(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Cmovge_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmovge instruction.<br/>
		/// <br/>
		/// <c>CMOVGE r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 4D /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cmovge(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Cmovge_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmovge instruction.<br/>
		/// <br/>
		/// <c>CMOVGE r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 4D /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovge(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmovge_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmovge instruction.<br/>
		/// <br/>
		/// <c>CMOVGE r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 4D /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovge(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmovge_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmovge instruction.<br/>
		/// <br/>
		/// <c>CMOVGE r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 4D /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cmovge(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmovge_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmovl instruction.<br/>
		/// <br/>
		/// <c>CMOVL r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 4C /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovl(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Cmovl_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmovl instruction.<br/>
		/// <br/>
		/// <c>CMOVL r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 4C /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovl(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Cmovl_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmovl instruction.<br/>
		/// <br/>
		/// <c>CMOVL r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 4C /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cmovl(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Cmovl_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmovl instruction.<br/>
		/// <br/>
		/// <c>CMOVL r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 4C /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovl(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmovl_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmovl instruction.<br/>
		/// <br/>
		/// <c>CMOVL r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 4C /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovl(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmovl_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmovl instruction.<br/>
		/// <br/>
		/// <c>CMOVL r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 4C /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cmovl(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmovl_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmovle instruction.<br/>
		/// <br/>
		/// <c>CMOVLE r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 4E /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovle(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Cmovle_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmovle instruction.<br/>
		/// <br/>
		/// <c>CMOVLE r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 4E /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovle(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Cmovle_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmovle instruction.<br/>
		/// <br/>
		/// <c>CMOVLE r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 4E /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cmovle(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Cmovle_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmovle instruction.<br/>
		/// <br/>
		/// <c>CMOVLE r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 4E /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovle(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmovle_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmovle instruction.<br/>
		/// <br/>
		/// <c>CMOVLE r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 4E /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovle(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmovle_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmovle instruction.<br/>
		/// <br/>
		/// <c>CMOVLE r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 4E /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cmovle(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmovle_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmovne instruction.<br/>
		/// <br/>
		/// <c>CMOVNE r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 45 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovne(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Cmovne_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmovne instruction.<br/>
		/// <br/>
		/// <c>CMOVNE r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 45 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovne(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Cmovne_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmovne instruction.<br/>
		/// <br/>
		/// <c>CMOVNE r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 45 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cmovne(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Cmovne_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmovne instruction.<br/>
		/// <br/>
		/// <c>CMOVNE r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 45 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovne(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmovne_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmovne instruction.<br/>
		/// <br/>
		/// <c>CMOVNE r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 45 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovne(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmovne_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmovne instruction.<br/>
		/// <br/>
		/// <c>CMOVNE r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 45 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cmovne(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmovne_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmovno instruction.<br/>
		/// <br/>
		/// <c>CMOVNO r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 41 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovno(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Cmovno_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmovno instruction.<br/>
		/// <br/>
		/// <c>CMOVNO r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 41 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovno(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Cmovno_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmovno instruction.<br/>
		/// <br/>
		/// <c>CMOVNO r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 41 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cmovno(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Cmovno_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmovno instruction.<br/>
		/// <br/>
		/// <c>CMOVNO r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 41 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovno(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmovno_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmovno instruction.<br/>
		/// <br/>
		/// <c>CMOVNO r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 41 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovno(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmovno_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmovno instruction.<br/>
		/// <br/>
		/// <c>CMOVNO r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 41 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cmovno(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmovno_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmovnp instruction.<br/>
		/// <br/>
		/// <c>CMOVNP r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 4B /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovnp(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Cmovnp_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmovnp instruction.<br/>
		/// <br/>
		/// <c>CMOVNP r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 4B /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovnp(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Cmovnp_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmovnp instruction.<br/>
		/// <br/>
		/// <c>CMOVNP r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 4B /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cmovnp(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Cmovnp_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmovnp instruction.<br/>
		/// <br/>
		/// <c>CMOVNP r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 4B /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovnp(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmovnp_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmovnp instruction.<br/>
		/// <br/>
		/// <c>CMOVNP r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 4B /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovnp(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmovnp_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmovnp instruction.<br/>
		/// <br/>
		/// <c>CMOVNP r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 4B /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cmovnp(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmovnp_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmovns instruction.<br/>
		/// <br/>
		/// <c>CMOVNS r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 49 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovns(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Cmovns_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmovns instruction.<br/>
		/// <br/>
		/// <c>CMOVNS r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 49 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovns(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Cmovns_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmovns instruction.<br/>
		/// <br/>
		/// <c>CMOVNS r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 49 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cmovns(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Cmovns_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmovns instruction.<br/>
		/// <br/>
		/// <c>CMOVNS r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 49 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovns(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmovns_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmovns instruction.<br/>
		/// <br/>
		/// <c>CMOVNS r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 49 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovns(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmovns_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmovns instruction.<br/>
		/// <br/>
		/// <c>CMOVNS r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 49 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cmovns(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmovns_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmovo instruction.<br/>
		/// <br/>
		/// <c>CMOVO r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 40 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovo(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Cmovo_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmovo instruction.<br/>
		/// <br/>
		/// <c>CMOVO r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 40 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovo(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Cmovo_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmovo instruction.<br/>
		/// <br/>
		/// <c>CMOVO r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 40 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cmovo(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Cmovo_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmovo instruction.<br/>
		/// <br/>
		/// <c>CMOVO r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 40 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovo(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmovo_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmovo instruction.<br/>
		/// <br/>
		/// <c>CMOVO r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 40 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovo(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmovo_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmovo instruction.<br/>
		/// <br/>
		/// <c>CMOVO r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 40 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cmovo(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmovo_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmovp instruction.<br/>
		/// <br/>
		/// <c>CMOVP r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 4A /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovp(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Cmovp_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmovp instruction.<br/>
		/// <br/>
		/// <c>CMOVP r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 4A /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovp(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Cmovp_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmovp instruction.<br/>
		/// <br/>
		/// <c>CMOVP r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 4A /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cmovp(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Cmovp_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmovp instruction.<br/>
		/// <br/>
		/// <c>CMOVP r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 4A /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovp(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmovp_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmovp instruction.<br/>
		/// <br/>
		/// <c>CMOVP r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 4A /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovp(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmovp_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmovp instruction.<br/>
		/// <br/>
		/// <c>CMOVP r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 4A /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cmovp(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmovp_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmovs instruction.<br/>
		/// <br/>
		/// <c>CMOVS r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 48 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovs(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Cmovs_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmovs instruction.<br/>
		/// <br/>
		/// <c>CMOVS r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 48 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovs(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Cmovs_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmovs instruction.<br/>
		/// <br/>
		/// <c>CMOVS r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 48 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cmovs(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Cmovs_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmovs instruction.<br/>
		/// <br/>
		/// <c>CMOVS r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 48 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovs(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmovs_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmovs instruction.<br/>
		/// <br/>
		/// <c>CMOVS r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 48 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmovs(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmovs_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmovs instruction.<br/>
		/// <br/>
		/// <c>CMOVS r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 48 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cmovs(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmovs_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmp instruction.<br/>
		/// <br/>
		/// <c>CMP r/m8, r8</c><br/>
		/// <br/>
		/// <c>38 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmp(AssemblerRegister8 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Cmp_rm8_r8;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmp instruction.<br/>
		/// <br/>
		/// <c>CMP r/m8, r8</c><br/>
		/// <br/>
		/// <c>38 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmp(AssemblerMemoryOperand dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Cmp_rm8_r8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>cmp instruction.<br/>
		/// <br/>
		/// <c>CMP r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 39 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmp(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Cmp_rm16_r16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmp instruction.<br/>
		/// <br/>
		/// <c>CMP r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 39 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmp(AssemblerMemoryOperand dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Cmp_rm16_r16;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>cmp instruction.<br/>
		/// <br/>
		/// <c>CMP r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 39 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmp(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Cmp_rm32_r32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmp instruction.<br/>
		/// <br/>
		/// <c>CMP r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 39 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmp(AssemblerMemoryOperand dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Cmp_rm32_r32;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>cmp instruction.<br/>
		/// <br/>
		/// <c>CMP r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 39 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cmp(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Cmp_rm64_r64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmp instruction.<br/>
		/// <br/>
		/// <c>CMP r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 39 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cmp(AssemblerMemoryOperand dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Cmp_rm64_r64;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>cmp instruction.<br/>
		/// <br/>
		/// <c>CMP r8, r/m8</c><br/>
		/// <br/>
		/// <c>3A /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmp(AssemblerRegister8 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmp_r8_rm8;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmp instruction.<br/>
		/// <br/>
		/// <c>CMP r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 3B /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmp(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmp_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmp instruction.<br/>
		/// <br/>
		/// <c>CMP r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 3B /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmp(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmp_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmp instruction.<br/>
		/// <br/>
		/// <c>CMP r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 3B /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cmp(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cmp_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmp instruction.<br/>
		/// <br/>
		/// <c>CMP AL, imm8</c><br/>
		/// <br/>
		/// <c>3C ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CMP r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /7 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmp(AssemblerRegister8 dst, sbyte imm) {
			Code op;
			op = dst == Register.AL ? Code.Cmp_AL_imm8 : Code.Cmp_rm8_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>cmp instruction.<br/>
		/// <br/>
		/// <c>CMP AX, imm16</c><br/>
		/// <br/>
		/// <c>o16 3D iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CMP r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /7 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CMP r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /7 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmp(AssemblerRegister16 dst, short imm) {
			Code op;
			if (dst == Register.AX) {
				op = Code.Cmp_AX_imm16;
			} else op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Cmp_rm16_imm8 : Code.Cmp_rm16_imm16;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>cmp instruction.<br/>
		/// <br/>
		/// <c>CMP EAX, imm32</c><br/>
		/// <br/>
		/// <c>o32 3D id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CMP r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /7 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CMP r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /7 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmp(AssemblerRegister32 dst, int imm) {
			Code op;
			if (dst == Register.EAX) {
				op = Code.Cmp_EAX_imm32;
			} else op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Cmp_rm32_imm8 : Code.Cmp_rm32_imm32;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>cmp instruction.<br/>
		/// <br/>
		/// <c>CMP RAX, imm32</c><br/>
		/// <br/>
		/// <c>REX.W 3D id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>CMP r/m64, imm32</c><br/>
		/// <br/>
		/// <c>REX.W 81 /7 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>CMP r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W 83 /7 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cmp(AssemblerRegister64 dst, int imm) {
			Code op;
			if (dst == Register.RAX) {
				op = Code.Cmp_RAX_imm32;
			} else op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Cmp_rm64_imm8 : Code.Cmp_rm64_imm32;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>cmp instruction.<br/>
		/// <br/>
		/// <c>CMP r/m64, imm32</c><br/>
		/// <br/>
		/// <c>REX.W 81 /7 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>CMP r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W 83 /7 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>CMP r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /7 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CMP r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /7 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CMP r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /7 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CMP r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /7 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CMP r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /7 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmp(AssemblerMemoryOperand dst, int imm) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Cmp_rm64_imm8 : Code.Cmp_rm64_imm32;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Cmp_rm32_imm8 : Code.Cmp_rm32_imm32;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Cmp_rm16_imm8 : Code.Cmp_rm16_imm16;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Cmp_rm8_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Cmp, dst, imm);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>cmp instruction.<br/>
		/// <br/>
		/// <c>CMP AL, imm8</c><br/>
		/// <br/>
		/// <c>3C ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CMP r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /7 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmp(AssemblerRegister8 dst, byte imm) {
			Code op;
			op = dst == Register.AL ? Code.Cmp_AL_imm8 : Code.Cmp_rm8_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>cmp instruction.<br/>
		/// <br/>
		/// <c>CMP AX, imm16</c><br/>
		/// <br/>
		/// <c>o16 3D iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CMP r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /7 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CMP r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /7 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmp(AssemblerRegister16 dst, ushort imm) {
			Code op;
			if (dst == Register.AX) {
				op = Code.Cmp_AX_imm16;
			} else op = imm <= (ushort)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF) ? Code.Cmp_rm16_imm8 : Code.Cmp_rm16_imm16;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>cmp instruction.<br/>
		/// <br/>
		/// <c>CMP EAX, imm32</c><br/>
		/// <br/>
		/// <c>o32 3D id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CMP r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /7 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CMP r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /7 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmp(AssemblerRegister32 dst, uint imm) {
			Code op;
			if (dst == Register.EAX) {
				op = Code.Cmp_EAX_imm32;
			} else op = imm <= (uint)sbyte.MaxValue || (0xFFFF_FF80 <= imm && imm <= 0xFFFF_FFFF) ? Code.Cmp_rm32_imm8 : Code.Cmp_rm32_imm32;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>cmp instruction.<br/>
		/// <br/>
		/// <c>CMP r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /7 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CMP r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /7 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CMP r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /7 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CMP r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /7 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CMP r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /7 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmp(AssemblerMemoryOperand dst, uint imm) {
			Code op;
			if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = imm <= (uint)sbyte.MaxValue || (0xFFFF_FF80 <= imm && imm <= 0xFFFF_FFFF) ? Code.Cmp_rm32_imm8 : Code.Cmp_rm32_imm32;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = imm <= (uint)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF) ? Code.Cmp_rm16_imm8 : Code.Cmp_rm16_imm16;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Cmp_rm8_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Cmp, dst, imm);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>cmpeqpd instruction.</summary>
		public void cmpeqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			cmppd(dst, src, 0);
		}
		/// <summary>cmpeqpd instruction.</summary>
		public void cmpeqpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			cmppd(dst, src, 0);
		}
		/// <summary>cmpeqps instruction.</summary>
		public void cmpeqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			cmpps(dst, src, 0);
		}
		/// <summary>cmpeqps instruction.</summary>
		public void cmpeqps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			cmpps(dst, src, 0);
		}
		/// <summary>cmpeqsd instruction.</summary>
		public void cmpeqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			cmpsd(dst, src, 0);
		}
		/// <summary>cmpeqsd instruction.</summary>
		public void cmpeqsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			cmpsd(dst, src, 0);
		}
		/// <summary>cmpeqss instruction.</summary>
		public void cmpeqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			cmpss(dst, src, 0);
		}
		/// <summary>cmpeqss instruction.</summary>
		public void cmpeqss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			cmpss(dst, src, 0);
		}
		/// <summary>cmplepd instruction.</summary>
		public void cmplepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			cmppd(dst, src, 2);
		}
		/// <summary>cmplepd instruction.</summary>
		public void cmplepd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			cmppd(dst, src, 2);
		}
		/// <summary>cmpleps instruction.</summary>
		public void cmpleps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			cmpps(dst, src, 2);
		}
		/// <summary>cmpleps instruction.</summary>
		public void cmpleps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			cmpps(dst, src, 2);
		}
		/// <summary>cmplesd instruction.</summary>
		public void cmplesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			cmpsd(dst, src, 2);
		}
		/// <summary>cmplesd instruction.</summary>
		public void cmplesd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			cmpsd(dst, src, 2);
		}
		/// <summary>cmpless instruction.</summary>
		public void cmpless(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			cmpss(dst, src, 2);
		}
		/// <summary>cmpless instruction.</summary>
		public void cmpless(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			cmpss(dst, src, 2);
		}
		/// <summary>cmpltpd instruction.</summary>
		public void cmpltpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			cmppd(dst, src, 1);
		}
		/// <summary>cmpltpd instruction.</summary>
		public void cmpltpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			cmppd(dst, src, 1);
		}
		/// <summary>cmpltps instruction.</summary>
		public void cmpltps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			cmpps(dst, src, 1);
		}
		/// <summary>cmpltps instruction.</summary>
		public void cmpltps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			cmpps(dst, src, 1);
		}
		/// <summary>cmpltsd instruction.</summary>
		public void cmpltsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			cmpsd(dst, src, 1);
		}
		/// <summary>cmpltsd instruction.</summary>
		public void cmpltsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			cmpsd(dst, src, 1);
		}
		/// <summary>cmpltss instruction.</summary>
		public void cmpltss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			cmpss(dst, src, 1);
		}
		/// <summary>cmpltss instruction.</summary>
		public void cmpltss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			cmpss(dst, src, 1);
		}
		/// <summary>cmpneqpd instruction.</summary>
		public void cmpneqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			cmppd(dst, src, 4);
		}
		/// <summary>cmpneqpd instruction.</summary>
		public void cmpneqpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			cmppd(dst, src, 4);
		}
		/// <summary>cmpneqps instruction.</summary>
		public void cmpneqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			cmpps(dst, src, 4);
		}
		/// <summary>cmpneqps instruction.</summary>
		public void cmpneqps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			cmpps(dst, src, 4);
		}
		/// <summary>cmpneqsd instruction.</summary>
		public void cmpneqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			cmpsd(dst, src, 4);
		}
		/// <summary>cmpneqsd instruction.</summary>
		public void cmpneqsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			cmpsd(dst, src, 4);
		}
		/// <summary>cmpneqss instruction.</summary>
		public void cmpneqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			cmpss(dst, src, 4);
		}
		/// <summary>cmpneqss instruction.</summary>
		public void cmpneqss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			cmpss(dst, src, 4);
		}
		/// <summary>cmpnlepd instruction.</summary>
		public void cmpnlepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			cmppd(dst, src, 6);
		}
		/// <summary>cmpnlepd instruction.</summary>
		public void cmpnlepd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			cmppd(dst, src, 6);
		}
		/// <summary>cmpnleps instruction.</summary>
		public void cmpnleps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			cmpps(dst, src, 6);
		}
		/// <summary>cmpnleps instruction.</summary>
		public void cmpnleps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			cmpps(dst, src, 6);
		}
		/// <summary>cmpnlesd instruction.</summary>
		public void cmpnlesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			cmpsd(dst, src, 6);
		}
		/// <summary>cmpnlesd instruction.</summary>
		public void cmpnlesd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			cmpsd(dst, src, 6);
		}
		/// <summary>cmpnless instruction.</summary>
		public void cmpnless(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			cmpss(dst, src, 6);
		}
		/// <summary>cmpnless instruction.</summary>
		public void cmpnless(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			cmpss(dst, src, 6);
		}
		/// <summary>cmpnltpd instruction.</summary>
		public void cmpnltpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			cmppd(dst, src, 5);
		}
		/// <summary>cmpnltpd instruction.</summary>
		public void cmpnltpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			cmppd(dst, src, 5);
		}
		/// <summary>cmpnltps instruction.</summary>
		public void cmpnltps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			cmpps(dst, src, 5);
		}
		/// <summary>cmpnltps instruction.</summary>
		public void cmpnltps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			cmpps(dst, src, 5);
		}
		/// <summary>cmpnltsd instruction.</summary>
		public void cmpnltsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			cmpsd(dst, src, 5);
		}
		/// <summary>cmpnltsd instruction.</summary>
		public void cmpnltsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			cmpsd(dst, src, 5);
		}
		/// <summary>cmpnltss instruction.</summary>
		public void cmpnltss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			cmpss(dst, src, 5);
		}
		/// <summary>cmpnltss instruction.</summary>
		public void cmpnltss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			cmpss(dst, src, 5);
		}
		/// <summary>cmpordpd instruction.</summary>
		public void cmpordpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			cmppd(dst, src, 7);
		}
		/// <summary>cmpordpd instruction.</summary>
		public void cmpordpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			cmppd(dst, src, 7);
		}
		/// <summary>cmpordps instruction.</summary>
		public void cmpordps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			cmpps(dst, src, 7);
		}
		/// <summary>cmpordps instruction.</summary>
		public void cmpordps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			cmpps(dst, src, 7);
		}
		/// <summary>cmpordsd instruction.</summary>
		public void cmpordsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			cmpsd(dst, src, 7);
		}
		/// <summary>cmpordsd instruction.</summary>
		public void cmpordsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			cmpsd(dst, src, 7);
		}
		/// <summary>cmpordss instruction.</summary>
		public void cmpordss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			cmpss(dst, src, 7);
		}
		/// <summary>cmpordss instruction.</summary>
		public void cmpordss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			cmpss(dst, src, 7);
		}
		/// <summary>cmppd instruction.<br/>
		/// <br/>
		/// <c>CMPPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.Cmppd_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>cmppd instruction.<br/>
		/// <br/>
		/// <c>CMPPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmppd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.Cmppd_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>cmppd instruction.<br/>
		/// <br/>
		/// <c>CMPPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.Cmppd_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>cmppd instruction.<br/>
		/// <br/>
		/// <c>CMPPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmppd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.Cmppd_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>cmpps instruction.<br/>
		/// <br/>
		/// <c>CMPPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.Cmpps_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>cmpps instruction.<br/>
		/// <br/>
		/// <c>CMPPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmpps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.Cmpps_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>cmpps instruction.<br/>
		/// <br/>
		/// <c>CMPPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.Cmpps_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>cmpps instruction.<br/>
		/// <br/>
		/// <c>CMPPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmpps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.Cmpps_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>cmpsb instruction.<br/>
		/// <br/>
		/// <c>CMPSB</c><br/>
		/// <br/>
		/// <c>A6</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmpsb() {
			AddInstruction(Instruction.CreateCmpsb(Bitness));
		}
		/// <summary>cmpsd instruction.<br/>
		/// <br/>
		/// <c>CMPSD</c><br/>
		/// <br/>
		/// <c>o32 A7</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmpsd() {
			AddInstruction(Instruction.CreateCmpsd(Bitness));
		}
		/// <summary>cmpsd instruction.<br/>
		/// <br/>
		/// <c>CMPSD xmm1, xmm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>F2 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmpsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.Cmpsd_xmm_xmmm64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>cmpsd instruction.<br/>
		/// <br/>
		/// <c>CMPSD xmm1, xmm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>F2 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmpsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.Cmpsd_xmm_xmmm64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>cmpsd instruction.<br/>
		/// <br/>
		/// <c>CMPSD xmm1, xmm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>F2 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmpsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.Cmpsd_xmm_xmmm64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>cmpsd instruction.<br/>
		/// <br/>
		/// <c>CMPSD xmm1, xmm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>F2 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmpsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.Cmpsd_xmm_xmmm64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>cmpsq instruction.<br/>
		/// <br/>
		/// <c>CMPSQ</c><br/>
		/// <br/>
		/// <c>REX.W A7</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cmpsq() {
			AddInstruction(Instruction.CreateCmpsq(Bitness));
		}
		/// <summary>cmpss instruction.<br/>
		/// <br/>
		/// <c>CMPSS xmm1, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>F3 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmpss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.Cmpss_xmm_xmmm32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>cmpss instruction.<br/>
		/// <br/>
		/// <c>CMPSS xmm1, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>F3 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmpss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.Cmpss_xmm_xmmm32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>cmpss instruction.<br/>
		/// <br/>
		/// <c>CMPSS xmm1, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>F3 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmpss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.Cmpss_xmm_xmmm32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>cmpss instruction.<br/>
		/// <br/>
		/// <c>CMPSS xmm1, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>F3 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmpss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.Cmpss_xmm_xmmm32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>cmpsw instruction.<br/>
		/// <br/>
		/// <c>CMPSW</c><br/>
		/// <br/>
		/// <c>o16 A7</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmpsw() {
			AddInstruction(Instruction.CreateCmpsw(Bitness));
		}
		/// <summary>cmpunordpd instruction.</summary>
		public void cmpunordpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			cmppd(dst, src, 3);
		}
		/// <summary>cmpunordpd instruction.</summary>
		public void cmpunordpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			cmppd(dst, src, 3);
		}
		/// <summary>cmpunordps instruction.</summary>
		public void cmpunordps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			cmpps(dst, src, 3);
		}
		/// <summary>cmpunordps instruction.</summary>
		public void cmpunordps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			cmpps(dst, src, 3);
		}
		/// <summary>cmpunordsd instruction.</summary>
		public void cmpunordsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			cmpsd(dst, src, 3);
		}
		/// <summary>cmpunordsd instruction.</summary>
		public void cmpunordsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			cmpsd(dst, src, 3);
		}
		/// <summary>cmpunordss instruction.</summary>
		public void cmpunordss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			cmpss(dst, src, 3);
		}
		/// <summary>cmpunordss instruction.</summary>
		public void cmpunordss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			cmpss(dst, src, 3);
		}
		/// <summary>cmpxchg instruction.<br/>
		/// <br/>
		/// <c>CMPXCHG r/m8, r8</c><br/>
		/// <br/>
		/// <c>0F B0 /r</c><br/>
		/// <br/>
		/// <c>486+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmpxchg(AssemblerRegister8 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Cmpxchg_rm8_r8;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmpxchg instruction.<br/>
		/// <br/>
		/// <c>CMPXCHG r/m8, r8</c><br/>
		/// <br/>
		/// <c>0F B0 /r</c><br/>
		/// <br/>
		/// <c>486+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmpxchg(AssemblerMemoryOperand dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Cmpxchg_rm8_r8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>cmpxchg instruction.<br/>
		/// <br/>
		/// <c>CMPXCHG r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F B1 /r</c><br/>
		/// <br/>
		/// <c>486+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmpxchg(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Cmpxchg_rm16_r16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmpxchg instruction.<br/>
		/// <br/>
		/// <c>CMPXCHG r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F B1 /r</c><br/>
		/// <br/>
		/// <c>486+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmpxchg(AssemblerMemoryOperand dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Cmpxchg_rm16_r16;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>cmpxchg instruction.<br/>
		/// <br/>
		/// <c>CMPXCHG r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F B1 /r</c><br/>
		/// <br/>
		/// <c>486+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmpxchg(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Cmpxchg_rm32_r32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmpxchg instruction.<br/>
		/// <br/>
		/// <c>CMPXCHG r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F B1 /r</c><br/>
		/// <br/>
		/// <c>486+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmpxchg(AssemblerMemoryOperand dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Cmpxchg_rm32_r32;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>cmpxchg instruction.<br/>
		/// <br/>
		/// <c>CMPXCHG r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 0F B1 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cmpxchg(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Cmpxchg_rm64_r64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cmpxchg instruction.<br/>
		/// <br/>
		/// <c>CMPXCHG r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 0F B1 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cmpxchg(AssemblerMemoryOperand dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Cmpxchg_rm64_r64;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>cmpxchg16b instruction.<br/>
		/// <br/>
		/// <c>CMPXCHG16B m128</c><br/>
		/// <br/>
		/// <c>REX.W 0F C7 /1</c><br/>
		/// <br/>
		/// <c>CMPXCHG16B</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cmpxchg16b(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Cmpxchg16b_m128;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>cmpxchg8b instruction.<br/>
		/// <br/>
		/// <c>CMPXCHG8B m64</c><br/>
		/// <br/>
		/// <c>0F C7 /1</c><br/>
		/// <br/>
		/// <c>CX8</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cmpxchg8b(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Cmpxchg8b_m64;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>comisd instruction.<br/>
		/// <br/>
		/// <c>COMISD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>66 0F 2F /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void comisd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Comisd_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>comisd instruction.<br/>
		/// <br/>
		/// <c>COMISD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>66 0F 2F /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void comisd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Comisd_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>comiss instruction.<br/>
		/// <br/>
		/// <c>COMISS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>NP 0F 2F /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void comiss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Comiss_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>comiss instruction.<br/>
		/// <br/>
		/// <c>COMISS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>NP 0F 2F /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void comiss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Comiss_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cpuid instruction.<br/>
		/// <br/>
		/// <c>CPUID</c><br/>
		/// <br/>
		/// <c>0F A2</c><br/>
		/// <br/>
		/// <c>CPUID</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cpuid() {
			Code op;
			op = Code.Cpuid;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>cqo instruction.<br/>
		/// <br/>
		/// <c>CQO</c><br/>
		/// <br/>
		/// <c>REX.W 99</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cqo() {
			Code op;
			op = Code.Cqo;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>crc32 instruction.<br/>
		/// <br/>
		/// <c>CRC32 r32, r/m8</c><br/>
		/// <br/>
		/// <c>F2 0F 38 F0 /r</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void crc32(AssemblerRegister32 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Crc32_r32_rm8;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>crc32 instruction.<br/>
		/// <br/>
		/// <c>CRC32 r64, r/m8</c><br/>
		/// <br/>
		/// <c>F2 REX.W 0F 38 F0 /r</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void crc32(AssemblerRegister64 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Crc32_r64_rm8;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>crc32 instruction.<br/>
		/// <br/>
		/// <c>CRC32 r32, r/m16</c><br/>
		/// <br/>
		/// <c>o16 F2 0F 38 F1 /r</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void crc32(AssemblerRegister32 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Crc32_r32_rm16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>crc32 instruction.<br/>
		/// <br/>
		/// <c>CRC32 r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 F2 0F 38 F1 /r</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void crc32(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Crc32_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>crc32 instruction.<br/>
		/// <br/>
		/// <c>CRC32 r64, r/m64</c><br/>
		/// <br/>
		/// <c>F2 REX.W 0F 38 F1 /r</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void crc32(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Crc32_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>crc32 instruction.<br/>
		/// <br/>
		/// <c>CRC32 r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 F2 0F 38 F1 /r</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CRC32 r32, r/m16</c><br/>
		/// <br/>
		/// <c>o16 F2 0F 38 F1 /r</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CRC32 r32, r/m8</c><br/>
		/// <br/>
		/// <c>F2 0F 38 F0 /r</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void crc32(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			if (src.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Crc32_r32_rm32;
			} else if (src.Size == MemoryOperandSize.WordPtr) {
				op = Code.Crc32_r32_rm16;
			} else if (src.Size == MemoryOperandSize.BytePtr) {
				op = Code.Crc32_r32_rm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Crc32, dst, src);
			}
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>crc32 instruction.<br/>
		/// <br/>
		/// <c>CRC32 r64, r/m64</c><br/>
		/// <br/>
		/// <c>F2 REX.W 0F 38 F1 /r</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>CRC32 r64, r/m8</c><br/>
		/// <br/>
		/// <c>F2 REX.W 0F 38 F0 /r</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void crc32(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			if (src.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Crc32_r64_rm64;
			} else if (src.Size == MemoryOperandSize.BytePtr) {
				op = Code.Crc32_r64_rm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Crc32, dst, src);
			}
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cvtdq2pd instruction.<br/>
		/// <br/>
		/// <c>CVTDQ2PD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F3 0F E6 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cvtdq2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Cvtdq2pd_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cvtdq2pd instruction.<br/>
		/// <br/>
		/// <c>CVTDQ2PD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F3 0F E6 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cvtdq2pd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cvtdq2pd_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cvtdq2ps instruction.<br/>
		/// <br/>
		/// <c>CVTDQ2PS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 5B /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cvtdq2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Cvtdq2ps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cvtdq2ps instruction.<br/>
		/// <br/>
		/// <c>CVTDQ2PS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 5B /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cvtdq2ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cvtdq2ps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cvtpd2dq instruction.<br/>
		/// <br/>
		/// <c>CVTPD2DQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>F2 0F E6 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cvtpd2dq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Cvtpd2dq_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cvtpd2dq instruction.<br/>
		/// <br/>
		/// <c>CVTPD2DQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>F2 0F E6 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cvtpd2dq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cvtpd2dq_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cvtpd2pi instruction.<br/>
		/// <br/>
		/// <c>CVTPD2PI mm, xmm/m128</c><br/>
		/// <br/>
		/// <c>66 0F 2D /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cvtpd2pi(AssemblerRegisterMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Cvtpd2pi_mm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cvtpd2pi instruction.<br/>
		/// <br/>
		/// <c>CVTPD2PI mm, xmm/m128</c><br/>
		/// <br/>
		/// <c>66 0F 2D /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cvtpd2pi(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cvtpd2pi_mm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cvtpd2ps instruction.<br/>
		/// <br/>
		/// <c>CVTPD2PS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 5A /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cvtpd2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Cvtpd2ps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cvtpd2ps instruction.<br/>
		/// <br/>
		/// <c>CVTPD2PS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 5A /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cvtpd2ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cvtpd2ps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cvtpi2pd instruction.<br/>
		/// <br/>
		/// <c>CVTPI2PD xmm, mm/m64</c><br/>
		/// <br/>
		/// <c>66 0F 2A /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cvtpi2pd(AssemblerRegisterXMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Cvtpi2pd_xmm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cvtpi2pd instruction.<br/>
		/// <br/>
		/// <c>CVTPI2PD xmm, mm/m64</c><br/>
		/// <br/>
		/// <c>66 0F 2A /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cvtpi2pd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cvtpi2pd_xmm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cvtpi2ps instruction.<br/>
		/// <br/>
		/// <c>CVTPI2PS xmm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 2A /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cvtpi2ps(AssemblerRegisterXMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Cvtpi2ps_xmm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cvtpi2ps instruction.<br/>
		/// <br/>
		/// <c>CVTPI2PS xmm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 2A /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cvtpi2ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cvtpi2ps_xmm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cvtps2dq instruction.<br/>
		/// <br/>
		/// <c>CVTPS2DQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 5B /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cvtps2dq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Cvtps2dq_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cvtps2dq instruction.<br/>
		/// <br/>
		/// <c>CVTPS2DQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 5B /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cvtps2dq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cvtps2dq_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cvtps2pd instruction.<br/>
		/// <br/>
		/// <c>CVTPS2PD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 5A /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cvtps2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Cvtps2pd_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cvtps2pd instruction.<br/>
		/// <br/>
		/// <c>CVTPS2PD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 5A /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cvtps2pd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cvtps2pd_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cvtps2pi instruction.<br/>
		/// <br/>
		/// <c>CVTPS2PI mm, xmm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 2D /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cvtps2pi(AssemblerRegisterMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Cvtps2pi_mm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cvtps2pi instruction.<br/>
		/// <br/>
		/// <c>CVTPS2PI mm, xmm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 2D /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cvtps2pi(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cvtps2pi_mm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cvtsd2si instruction.<br/>
		/// <br/>
		/// <c>CVTSD2SI r32, xmm1/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 2D /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cvtsd2si(AssemblerRegister32 dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Cvtsd2si_r32_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cvtsd2si instruction.<br/>
		/// <br/>
		/// <c>CVTSD2SI r64, xmm1/m64</c><br/>
		/// <br/>
		/// <c>F2 REX.W 0F 2D /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cvtsd2si(AssemblerRegister64 dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Cvtsd2si_r64_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cvtsd2si instruction.<br/>
		/// <br/>
		/// <c>CVTSD2SI r32, xmm1/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 2D /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cvtsd2si(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cvtsd2si_r32_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cvtsd2si instruction.<br/>
		/// <br/>
		/// <c>CVTSD2SI r64, xmm1/m64</c><br/>
		/// <br/>
		/// <c>F2 REX.W 0F 2D /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cvtsd2si(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cvtsd2si_r64_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cvtsd2ss instruction.<br/>
		/// <br/>
		/// <c>CVTSD2SS xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 5A /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cvtsd2ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Cvtsd2ss_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cvtsd2ss instruction.<br/>
		/// <br/>
		/// <c>CVTSD2SS xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 5A /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cvtsd2ss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cvtsd2ss_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cvtsi2sd instruction.<br/>
		/// <br/>
		/// <c>CVTSI2SD xmm1, r/m32</c><br/>
		/// <br/>
		/// <c>F2 0F 2A /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cvtsi2sd(AssemblerRegisterXMM dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Cvtsi2sd_xmm_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cvtsi2sd instruction.<br/>
		/// <br/>
		/// <c>CVTSI2SD xmm1, r/m64</c><br/>
		/// <br/>
		/// <c>F2 REX.W 0F 2A /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cvtsi2sd(AssemblerRegisterXMM dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Cvtsi2sd_xmm_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cvtsi2sd instruction.<br/>
		/// <br/>
		/// <c>CVTSI2SD xmm1, r/m64</c><br/>
		/// <br/>
		/// <c>F2 REX.W 0F 2A /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>CVTSI2SD xmm1, r/m32</c><br/>
		/// <br/>
		/// <c>F2 0F 2A /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cvtsi2sd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			if (src.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Cvtsi2sd_xmm_rm64;
			} else if (src.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Cvtsi2sd_xmm_rm32;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Cvtsi2sd, dst, src);
			}
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cvtsi2ss instruction.<br/>
		/// <br/>
		/// <c>CVTSI2SS xmm1, r/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 2A /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cvtsi2ss(AssemblerRegisterXMM dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Cvtsi2ss_xmm_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cvtsi2ss instruction.<br/>
		/// <br/>
		/// <c>CVTSI2SS xmm1, r/m64</c><br/>
		/// <br/>
		/// <c>F3 REX.W 0F 2A /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cvtsi2ss(AssemblerRegisterXMM dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Cvtsi2ss_xmm_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cvtsi2ss instruction.<br/>
		/// <br/>
		/// <c>CVTSI2SS xmm1, r/m64</c><br/>
		/// <br/>
		/// <c>F3 REX.W 0F 2A /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>CVTSI2SS xmm1, r/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 2A /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cvtsi2ss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			if (src.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Cvtsi2ss_xmm_rm64;
			} else if (src.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Cvtsi2ss_xmm_rm32;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Cvtsi2ss, dst, src);
			}
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cvtss2sd instruction.<br/>
		/// <br/>
		/// <c>CVTSS2SD xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 5A /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cvtss2sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Cvtss2sd_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cvtss2sd instruction.<br/>
		/// <br/>
		/// <c>CVTSS2SD xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 5A /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cvtss2sd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cvtss2sd_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cvtss2si instruction.<br/>
		/// <br/>
		/// <c>CVTSS2SI r32, xmm1/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 2D /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cvtss2si(AssemblerRegister32 dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Cvtss2si_r32_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cvtss2si instruction.<br/>
		/// <br/>
		/// <c>CVTSS2SI r64, xmm1/m32</c><br/>
		/// <br/>
		/// <c>F3 REX.W 0F 2D /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cvtss2si(AssemblerRegister64 dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Cvtss2si_r64_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cvtss2si instruction.<br/>
		/// <br/>
		/// <c>CVTSS2SI r32, xmm1/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 2D /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cvtss2si(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cvtss2si_r32_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cvtss2si instruction.<br/>
		/// <br/>
		/// <c>CVTSS2SI r64, xmm1/m32</c><br/>
		/// <br/>
		/// <c>F3 REX.W 0F 2D /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cvtss2si(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cvtss2si_r64_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cvttpd2dq instruction.<br/>
		/// <br/>
		/// <c>CVTTPD2DQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F E6 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cvttpd2dq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Cvttpd2dq_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cvttpd2dq instruction.<br/>
		/// <br/>
		/// <c>CVTTPD2DQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F E6 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cvttpd2dq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cvttpd2dq_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cvttpd2pi instruction.<br/>
		/// <br/>
		/// <c>CVTTPD2PI mm, xmm/m128</c><br/>
		/// <br/>
		/// <c>66 0F 2C /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cvttpd2pi(AssemblerRegisterMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Cvttpd2pi_mm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cvttpd2pi instruction.<br/>
		/// <br/>
		/// <c>CVTTPD2PI mm, xmm/m128</c><br/>
		/// <br/>
		/// <c>66 0F 2C /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cvttpd2pi(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cvttpd2pi_mm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cvttps2dq instruction.<br/>
		/// <br/>
		/// <c>CVTTPS2DQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>F3 0F 5B /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cvttps2dq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Cvttps2dq_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cvttps2dq instruction.<br/>
		/// <br/>
		/// <c>CVTTPS2DQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>F3 0F 5B /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cvttps2dq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cvttps2dq_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cvttps2pi instruction.<br/>
		/// <br/>
		/// <c>CVTTPS2PI mm, xmm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 2C /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cvttps2pi(AssemblerRegisterMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Cvttps2pi_mm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cvttps2pi instruction.<br/>
		/// <br/>
		/// <c>CVTTPS2PI mm, xmm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 2C /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cvttps2pi(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cvttps2pi_mm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cvttsd2si instruction.<br/>
		/// <br/>
		/// <c>CVTTSD2SI r32, xmm1/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 2C /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cvttsd2si(AssemblerRegister32 dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Cvttsd2si_r32_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cvttsd2si instruction.<br/>
		/// <br/>
		/// <c>CVTTSD2SI r64, xmm1/m64</c><br/>
		/// <br/>
		/// <c>F2 REX.W 0F 2C /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cvttsd2si(AssemblerRegister64 dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Cvttsd2si_r64_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cvttsd2si instruction.<br/>
		/// <br/>
		/// <c>CVTTSD2SI r32, xmm1/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 2C /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cvttsd2si(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cvttsd2si_r32_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cvttsd2si instruction.<br/>
		/// <br/>
		/// <c>CVTTSD2SI r64, xmm1/m64</c><br/>
		/// <br/>
		/// <c>F2 REX.W 0F 2C /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cvttsd2si(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cvttsd2si_r64_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cvttss2si instruction.<br/>
		/// <br/>
		/// <c>CVTTSS2SI r32, xmm1/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 2C /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cvttss2si(AssemblerRegister32 dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Cvttss2si_r32_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cvttss2si instruction.<br/>
		/// <br/>
		/// <c>CVTTSS2SI r64, xmm1/m32</c><br/>
		/// <br/>
		/// <c>F3 REX.W 0F 2C /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cvttss2si(AssemblerRegister64 dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Cvttss2si_r64_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>cvttss2si instruction.<br/>
		/// <br/>
		/// <c>CVTTSS2SI r32, xmm1/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 2C /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cvttss2si(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cvttss2si_r32_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cvttss2si instruction.<br/>
		/// <br/>
		/// <c>CVTTSS2SI r64, xmm1/m32</c><br/>
		/// <br/>
		/// <c>F3 REX.W 0F 2C /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void cvttss2si(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Cvttss2si_r64_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>cwd instruction.<br/>
		/// <br/>
		/// <c>CWD</c><br/>
		/// <br/>
		/// <c>o16 99</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cwd() {
			Code op;
			op = Code.Cwd;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>cwde instruction.<br/>
		/// <br/>
		/// <c>CWDE</c><br/>
		/// <br/>
		/// <c>o32 98</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void cwde() {
			Code op;
			op = Code.Cwde;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>daa instruction.<br/>
		/// <br/>
		/// <c>DAA</c><br/>
		/// <br/>
		/// <c>27</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void daa() {
			Code op;
			op = Code.Daa;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>das instruction.<br/>
		/// <br/>
		/// <c>DAS</c><br/>
		/// <br/>
		/// <c>2F</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void das() {
			Code op;
			op = Code.Das;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>dec instruction.<br/>
		/// <br/>
		/// <c>DEC r/m8</c><br/>
		/// <br/>
		/// <c>FE /1</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void dec(AssemblerRegister8 dst) {
			Code op;
			op = Code.Dec_rm8;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>dec instruction.<br/>
		/// <br/>
		/// <c>DEC r/m16</c><br/>
		/// <br/>
		/// <c>o16 FF /1</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>DEC r16</c><br/>
		/// <br/>
		/// <c>o16 48+rw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void dec(AssemblerRegister16 dst) {
			Code op;
			op = Bitness == 64 ? Code.Dec_rm16 : Code.Dec_r16;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>dec instruction.<br/>
		/// <br/>
		/// <c>DEC r/m32</c><br/>
		/// <br/>
		/// <c>o32 FF /1</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>DEC r32</c><br/>
		/// <br/>
		/// <c>o32 48+rd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void dec(AssemblerRegister32 dst) {
			Code op;
			op = Bitness == 64 ? Code.Dec_rm32 : Code.Dec_r32;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>dec instruction.<br/>
		/// <br/>
		/// <c>DEC r/m64</c><br/>
		/// <br/>
		/// <c>REX.W FF /1</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void dec(AssemblerRegister64 dst) {
			Code op;
			op = Code.Dec_rm64;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>dec instruction.<br/>
		/// <br/>
		/// <c>DEC r/m64</c><br/>
		/// <br/>
		/// <c>REX.W FF /1</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>DEC r/m32</c><br/>
		/// <br/>
		/// <c>o32 FF /1</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>DEC r/m16</c><br/>
		/// <br/>
		/// <c>o16 FF /1</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>DEC r/m8</c><br/>
		/// <br/>
		/// <c>FE /1</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void dec(AssemblerMemoryOperand dst) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Dec_rm64;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Dec_rm32;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Dec_rm16;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Dec_rm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Dec, dst);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>div instruction.<br/>
		/// <br/>
		/// <c>DIV r/m8</c><br/>
		/// <br/>
		/// <c>F6 /6</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void div(AssemblerRegister8 dst) {
			Code op;
			op = Code.Div_rm8;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>div instruction.<br/>
		/// <br/>
		/// <c>DIV r/m16</c><br/>
		/// <br/>
		/// <c>o16 F7 /6</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void div(AssemblerRegister16 dst) {
			Code op;
			op = Code.Div_rm16;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>div instruction.<br/>
		/// <br/>
		/// <c>DIV r/m32</c><br/>
		/// <br/>
		/// <c>o32 F7 /6</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void div(AssemblerRegister32 dst) {
			Code op;
			op = Code.Div_rm32;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>div instruction.<br/>
		/// <br/>
		/// <c>DIV r/m64</c><br/>
		/// <br/>
		/// <c>REX.W F7 /6</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void div(AssemblerRegister64 dst) {
			Code op;
			op = Code.Div_rm64;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>div instruction.<br/>
		/// <br/>
		/// <c>DIV r/m64</c><br/>
		/// <br/>
		/// <c>REX.W F7 /6</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>DIV r/m32</c><br/>
		/// <br/>
		/// <c>o32 F7 /6</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>DIV r/m16</c><br/>
		/// <br/>
		/// <c>o16 F7 /6</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>DIV r/m8</c><br/>
		/// <br/>
		/// <c>F6 /6</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void div(AssemblerMemoryOperand dst) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Div_rm64;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Div_rm32;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Div_rm16;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Div_rm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Div, dst);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>divpd instruction.<br/>
		/// <br/>
		/// <c>DIVPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 5E /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void divpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Divpd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>divpd instruction.<br/>
		/// <br/>
		/// <c>DIVPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 5E /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void divpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Divpd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>divps instruction.<br/>
		/// <br/>
		/// <c>DIVPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 5E /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void divps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Divps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>divps instruction.<br/>
		/// <br/>
		/// <c>DIVPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 5E /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void divps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Divps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>divsd instruction.<br/>
		/// <br/>
		/// <c>DIVSD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 5E /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void divsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Divsd_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>divsd instruction.<br/>
		/// <br/>
		/// <c>DIVSD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 5E /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void divsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Divsd_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>divss instruction.<br/>
		/// <br/>
		/// <c>DIVSS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 5E /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void divss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Divss_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>divss instruction.<br/>
		/// <br/>
		/// <c>DIVSS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 5E /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void divss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Divss_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>dppd instruction.<br/>
		/// <br/>
		/// <c>DPPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 41 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void dppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.Dppd_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>dppd instruction.<br/>
		/// <br/>
		/// <c>DPPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 41 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void dppd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.Dppd_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>dppd instruction.<br/>
		/// <br/>
		/// <c>DPPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 41 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void dppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.Dppd_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>dppd instruction.<br/>
		/// <br/>
		/// <c>DPPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 41 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void dppd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.Dppd_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>dpps instruction.<br/>
		/// <br/>
		/// <c>DPPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 40 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void dpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.Dpps_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>dpps instruction.<br/>
		/// <br/>
		/// <c>DPPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 40 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void dpps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.Dpps_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>dpps instruction.<br/>
		/// <br/>
		/// <c>DPPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 40 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void dpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.Dpps_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>dpps instruction.<br/>
		/// <br/>
		/// <c>DPPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 40 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void dpps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.Dpps_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>emms instruction.<br/>
		/// <br/>
		/// <c>EMMS</c><br/>
		/// <br/>
		/// <c>NP 0F 77</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void emms() {
			Code op;
			op = Code.Emms;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>encls instruction.<br/>
		/// <br/>
		/// <c>ENCLS</c><br/>
		/// <br/>
		/// <c>NP 0F 01 CF</c><br/>
		/// <br/>
		/// <c>SGX1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void encls() {
			Code op;
			op = Code.Encls;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>enclu instruction.<br/>
		/// <br/>
		/// <c>ENCLU</c><br/>
		/// <br/>
		/// <c>NP 0F 01 D7</c><br/>
		/// <br/>
		/// <c>SGX1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void enclu() {
			Code op;
			op = Code.Enclu;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>enclv instruction.<br/>
		/// <br/>
		/// <c>ENCLV</c><br/>
		/// <br/>
		/// <c>NP 0F 01 C0</c><br/>
		/// <br/>
		/// <c>ENCLV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void enclv() {
			Code op;
			op = Code.Enclv;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>endbr32 instruction.<br/>
		/// <br/>
		/// <c>ENDBR32</c><br/>
		/// <br/>
		/// <c>F3 0F 1E FB</c><br/>
		/// <br/>
		/// <c>CET_IBT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void endbr32() {
			Code op;
			op = Code.Endbr32;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>endbr64 instruction.<br/>
		/// <br/>
		/// <c>ENDBR64</c><br/>
		/// <br/>
		/// <c>F3 0F 1E FA</c><br/>
		/// <br/>
		/// <c>CET_IBT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void endbr64() {
			Code op;
			op = Code.Endbr64;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>enqcmd instruction.<br/>
		/// <br/>
		/// <c>ENQCMD r16, m512</c><br/>
		/// <br/>
		/// <c>a16 F2 0F 38 F8 /r</c><br/>
		/// <br/>
		/// <c>ENQCMD</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void enqcmd(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Enqcmd_r16_m512;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>enqcmd instruction.<br/>
		/// <br/>
		/// <c>ENQCMD r32, m512</c><br/>
		/// <br/>
		/// <c>a32 F2 0F 38 F8 /r</c><br/>
		/// <br/>
		/// <c>ENQCMD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void enqcmd(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Enqcmd_r32_m512;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>enqcmd instruction.<br/>
		/// <br/>
		/// <c>ENQCMD r64, m512</c><br/>
		/// <br/>
		/// <c>F2 0F 38 F8 /r</c><br/>
		/// <br/>
		/// <c>ENQCMD</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void enqcmd(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Enqcmd_r64_m512;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>enqcmds instruction.<br/>
		/// <br/>
		/// <c>ENQCMDS r16, m512</c><br/>
		/// <br/>
		/// <c>a16 F3 0F 38 F8 /r</c><br/>
		/// <br/>
		/// <c>ENQCMD</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void enqcmds(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Enqcmds_r16_m512;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>enqcmds instruction.<br/>
		/// <br/>
		/// <c>ENQCMDS r32, m512</c><br/>
		/// <br/>
		/// <c>a32 F3 0F 38 F8 /r</c><br/>
		/// <br/>
		/// <c>ENQCMD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void enqcmds(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Enqcmds_r32_m512;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>enqcmds instruction.<br/>
		/// <br/>
		/// <c>ENQCMDS r64, m512</c><br/>
		/// <br/>
		/// <c>F3 0F 38 F8 /r</c><br/>
		/// <br/>
		/// <c>ENQCMD</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void enqcmds(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Enqcmds_r64_m512;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>enter instruction.<br/>
		/// <br/>
		/// <c>ENTER imm16, imm8</c><br/>
		/// <br/>
		/// <c>C8 iw ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ENTER imm16, imm8</c><br/>
		/// <br/>
		/// <c>o32 C8 iw ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>ENTER imm16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C8 iw ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void enter(short imm, sbyte imm1) {
			Code op;
			if (Bitness == 64) {
				op = Code.Enterq_imm16_imm8;
			} else op = Bitness >= 32 ? Code.Enterd_imm16_imm8 : Code.Enterw_imm16_imm8;
			AddInstruction(Instruction.Create(op, imm, imm1));
		}
		/// <summary>enter instruction.<br/>
		/// <br/>
		/// <c>ENTER imm16, imm8</c><br/>
		/// <br/>
		/// <c>C8 iw ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ENTER imm16, imm8</c><br/>
		/// <br/>
		/// <c>o32 C8 iw ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>ENTER imm16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C8 iw ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void enter(ushort imm, byte imm1) {
			Code op;
			if (Bitness == 64) {
				op = Code.Enterq_imm16_imm8;
			} else op = Bitness >= 32 ? Code.Enterd_imm16_imm8 : Code.Enterw_imm16_imm8;
			AddInstruction(Instruction.Create(op, (uint)imm, (uint)imm1));
		}
		/// <summary>extractps instruction.<br/>
		/// <br/>
		/// <c>EXTRACTPS r/m32, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 17 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void extractps(AssemblerRegister32 dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.Extractps_rm32_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>extractps instruction.<br/>
		/// <br/>
		/// <c>EXTRACTPS r64/m32, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 REX.W 0F 3A 17 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void extractps(AssemblerRegister64 dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.Extractps_r64m32_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>extractps instruction.<br/>
		/// <br/>
		/// <c>EXTRACTPS r/m32, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 17 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void extractps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.Extractps_rm32_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, imm));
		}
		/// <summary>extractps instruction.<br/>
		/// <br/>
		/// <c>EXTRACTPS r/m32, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 17 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void extractps(AssemblerRegister32 dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.Extractps_rm32_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>extractps instruction.<br/>
		/// <br/>
		/// <c>EXTRACTPS r64/m32, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 REX.W 0F 3A 17 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void extractps(AssemblerRegister64 dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.Extractps_r64m32_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>extractps instruction.<br/>
		/// <br/>
		/// <c>EXTRACTPS r/m32, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 17 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void extractps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.Extractps_rm32_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, (uint)imm));
		}
		/// <summary>extrq instruction.<br/>
		/// <br/>
		/// <c>EXTRQ xmm1, xmm2</c><br/>
		/// <br/>
		/// <c>66 0F 79 /r</c><br/>
		/// <br/>
		/// <c>SSE4A</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void extrq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Extrq_xmm_xmm;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>extrq instruction.<br/>
		/// <br/>
		/// <c>EXTRQ xmm1, imm8, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 78 /0 ib ib</c><br/>
		/// <br/>
		/// <c>SSE4A</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void extrq(AssemblerRegisterXMM dst, sbyte imm, sbyte imm1) {
			Code op;
			op = Code.Extrq_xmm_imm8_imm8;
			AddInstruction(Instruction.Create(op, dst, imm, imm1));
		}
		/// <summary>extrq instruction.<br/>
		/// <br/>
		/// <c>EXTRQ xmm1, imm8, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 78 /0 ib ib</c><br/>
		/// <br/>
		/// <c>SSE4A</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void extrq(AssemblerRegisterXMM dst, byte imm, byte imm1) {
			Code op;
			op = Code.Extrq_xmm_imm8_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm, (uint)imm1));
		}
		/// <summary>f2xm1 instruction.<br/>
		/// <br/>
		/// <c>F2XM1</c><br/>
		/// <br/>
		/// <c>D9 F0</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void f2xm1() {
			Code op;
			op = Code.F2xm1;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>fabs instruction.<br/>
		/// <br/>
		/// <c>FABS</c><br/>
		/// <br/>
		/// <c>D9 E1</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fabs() {
			Code op;
			op = Code.Fabs;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>fadd instruction.<br/>
		/// <br/>
		/// <c>FADD m64fp</c><br/>
		/// <br/>
		/// <c>DC /0</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FADD m32fp</c><br/>
		/// <br/>
		/// <c>D8 /0</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fadd(AssemblerMemoryOperand dst) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Fadd_m64fp;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Fadd_m32fp;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Fadd, dst);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>fadd instruction.<br/>
		/// <br/>
		/// <c>FADD ST(0), ST(i)</c><br/>
		/// <br/>
		/// <c>D8 C0+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FADD ST(i), ST(0)</c><br/>
		/// <br/>
		/// <c>DC C0+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fadd(AssemblerRegisterST dst, AssemblerRegisterST src) {
			Code op;
			op = dst == Register.ST0 ? Code.Fadd_st0_sti : Code.Fadd_sti_st0;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>faddp instruction.<br/>
		/// <br/>
		/// <c>FADDP ST(i), ST(0)</c><br/>
		/// <br/>
		/// <c>DE C0+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void faddp(AssemblerRegisterST dst, AssemblerRegisterST src) {
			Code op;
			op = Code.Faddp_sti_st0;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>fbld instruction.<br/>
		/// <br/>
		/// <c>FBLD m80bcd</c><br/>
		/// <br/>
		/// <c>DF /4</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fbld(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Fbld_m80bcd;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>fbstp instruction.<br/>
		/// <br/>
		/// <c>FBSTP m80bcd</c><br/>
		/// <br/>
		/// <c>DF /6</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fbstp(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Fbstp_m80bcd;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>fchs instruction.<br/>
		/// <br/>
		/// <c>FCHS</c><br/>
		/// <br/>
		/// <c>D9 E0</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fchs() {
			Code op;
			op = Code.Fchs;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>fclex instruction.<br/>
		/// <br/>
		/// <c>FCLEX</c><br/>
		/// <br/>
		/// <c>9B DB E2</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fclex() {
			Code op;
			op = Code.Fclex;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>fcmovb instruction.<br/>
		/// <br/>
		/// <c>FCMOVB ST(0), ST(i)</c><br/>
		/// <br/>
		/// <c>DA C0+i</c><br/>
		/// <br/>
		/// <c>8087+ and CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fcmovb(AssemblerRegisterST dst, AssemblerRegisterST src) {
			Code op;
			op = Code.Fcmovb_st0_sti;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>fcmovbe instruction.<br/>
		/// <br/>
		/// <c>FCMOVBE ST(0), ST(i)</c><br/>
		/// <br/>
		/// <c>DA D0+i</c><br/>
		/// <br/>
		/// <c>8087+ and CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fcmovbe(AssemblerRegisterST dst, AssemblerRegisterST src) {
			Code op;
			op = Code.Fcmovbe_st0_sti;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>fcmove instruction.<br/>
		/// <br/>
		/// <c>FCMOVE ST(0), ST(i)</c><br/>
		/// <br/>
		/// <c>DA C8+i</c><br/>
		/// <br/>
		/// <c>8087+ and CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fcmove(AssemblerRegisterST dst, AssemblerRegisterST src) {
			Code op;
			op = Code.Fcmove_st0_sti;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>fcmovnb instruction.<br/>
		/// <br/>
		/// <c>FCMOVNB ST(0), ST(i)</c><br/>
		/// <br/>
		/// <c>DB C0+i</c><br/>
		/// <br/>
		/// <c>8087+ and CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fcmovnb(AssemblerRegisterST dst, AssemblerRegisterST src) {
			Code op;
			op = Code.Fcmovnb_st0_sti;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>fcmovnbe instruction.<br/>
		/// <br/>
		/// <c>FCMOVNBE ST(0), ST(i)</c><br/>
		/// <br/>
		/// <c>DB D0+i</c><br/>
		/// <br/>
		/// <c>8087+ and CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fcmovnbe(AssemblerRegisterST dst, AssemblerRegisterST src) {
			Code op;
			op = Code.Fcmovnbe_st0_sti;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>fcmovne instruction.<br/>
		/// <br/>
		/// <c>FCMOVNE ST(0), ST(i)</c><br/>
		/// <br/>
		/// <c>DB C8+i</c><br/>
		/// <br/>
		/// <c>8087+ and CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fcmovne(AssemblerRegisterST dst, AssemblerRegisterST src) {
			Code op;
			op = Code.Fcmovne_st0_sti;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>fcmovnu instruction.<br/>
		/// <br/>
		/// <c>FCMOVNU ST(0), ST(i)</c><br/>
		/// <br/>
		/// <c>DB D8+i</c><br/>
		/// <br/>
		/// <c>8087+ and CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fcmovnu(AssemblerRegisterST dst, AssemblerRegisterST src) {
			Code op;
			op = Code.Fcmovnu_st0_sti;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>fcmovu instruction.<br/>
		/// <br/>
		/// <c>FCMOVU ST(0), ST(i)</c><br/>
		/// <br/>
		/// <c>DA D8+i</c><br/>
		/// <br/>
		/// <c>8087+ and CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fcmovu(AssemblerRegisterST dst, AssemblerRegisterST src) {
			Code op;
			op = Code.Fcmovu_st0_sti;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>fcom instruction.<br/>
		/// <br/>
		/// <c>FCOM m64fp</c><br/>
		/// <br/>
		/// <c>DC /2</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FCOM m32fp</c><br/>
		/// <br/>
		/// <c>D8 /2</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fcom(AssemblerMemoryOperand dst) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Fcom_m64fp;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Fcom_m32fp;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Fcom, dst);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>fcom instruction.<br/>
		/// <br/>
		/// <c>FCOM ST(i)</c><br/>
		/// <br/>
		/// <c>D8 D0+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fcom(AssemblerRegisterST dst, AssemblerRegisterST src) {
			Code op;
			op = Code.Fcom_st0_sti;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>fcomi instruction.<br/>
		/// <br/>
		/// <c>FCOMI ST, ST(i)</c><br/>
		/// <br/>
		/// <c>DB F0+i</c><br/>
		/// <br/>
		/// <c>8087+ and CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fcomi(AssemblerRegisterST dst, AssemblerRegisterST src) {
			Code op;
			op = Code.Fcomi_st0_sti;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>fcomip instruction.<br/>
		/// <br/>
		/// <c>FCOMIP ST, ST(i)</c><br/>
		/// <br/>
		/// <c>DF F0+i</c><br/>
		/// <br/>
		/// <c>8087+ and CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fcomip(AssemblerRegisterST dst, AssemblerRegisterST src) {
			Code op;
			op = Code.Fcomip_st0_sti;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>fcomp instruction.<br/>
		/// <br/>
		/// <c>FCOMP m64fp</c><br/>
		/// <br/>
		/// <c>DC /3</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FCOMP m32fp</c><br/>
		/// <br/>
		/// <c>D8 /3</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fcomp(AssemblerMemoryOperand dst) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Fcomp_m64fp;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Fcomp_m32fp;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Fcomp, dst);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>fcomp instruction.<br/>
		/// <br/>
		/// <c>FCOMP ST(i)</c><br/>
		/// <br/>
		/// <c>D8 D8+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fcomp(AssemblerRegisterST dst, AssemblerRegisterST src) {
			Code op;
			op = Code.Fcomp_st0_sti;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>fcompp instruction.<br/>
		/// <br/>
		/// <c>FCOMPP</c><br/>
		/// <br/>
		/// <c>DE D9</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fcompp() {
			Code op;
			op = Code.Fcompp;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>fcos instruction.<br/>
		/// <br/>
		/// <c>FCOS</c><br/>
		/// <br/>
		/// <c>D9 FF</c><br/>
		/// <br/>
		/// <c>387+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fcos() {
			Code op;
			op = Code.Fcos;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>fdecstp instruction.<br/>
		/// <br/>
		/// <c>FDECSTP</c><br/>
		/// <br/>
		/// <c>D9 F6</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fdecstp() {
			Code op;
			op = Code.Fdecstp;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>fdisi instruction.<br/>
		/// <br/>
		/// <c>FDISI</c><br/>
		/// <br/>
		/// <c>9B DB E1</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fdisi() {
			Code op;
			op = Code.Fdisi;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>fdiv instruction.<br/>
		/// <br/>
		/// <c>FDIV m64fp</c><br/>
		/// <br/>
		/// <c>DC /6</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FDIV m32fp</c><br/>
		/// <br/>
		/// <c>D8 /6</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fdiv(AssemblerMemoryOperand dst) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Fdiv_m64fp;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Fdiv_m32fp;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Fdiv, dst);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>fdiv instruction.<br/>
		/// <br/>
		/// <c>FDIV ST(0), ST(i)</c><br/>
		/// <br/>
		/// <c>D8 F0+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FDIV ST(i), ST(0)</c><br/>
		/// <br/>
		/// <c>DC F8+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fdiv(AssemblerRegisterST dst, AssemblerRegisterST src) {
			Code op;
			op = dst == Register.ST0 ? Code.Fdiv_st0_sti : Code.Fdiv_sti_st0;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>fdivp instruction.<br/>
		/// <br/>
		/// <c>FDIVP ST(i), ST(0)</c><br/>
		/// <br/>
		/// <c>DE F8+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fdivp(AssemblerRegisterST dst, AssemblerRegisterST src) {
			Code op;
			op = Code.Fdivp_sti_st0;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>fdivr instruction.<br/>
		/// <br/>
		/// <c>FDIVR m64fp</c><br/>
		/// <br/>
		/// <c>DC /7</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FDIVR m32fp</c><br/>
		/// <br/>
		/// <c>D8 /7</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fdivr(AssemblerMemoryOperand dst) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Fdivr_m64fp;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Fdivr_m32fp;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Fdivr, dst);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>fdivr instruction.<br/>
		/// <br/>
		/// <c>FDIVR ST(0), ST(i)</c><br/>
		/// <br/>
		/// <c>D8 F8+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FDIVR ST(i), ST(0)</c><br/>
		/// <br/>
		/// <c>DC F0+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fdivr(AssemblerRegisterST dst, AssemblerRegisterST src) {
			Code op;
			op = dst == Register.ST0 ? Code.Fdivr_st0_sti : Code.Fdivr_sti_st0;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>fdivrp instruction.<br/>
		/// <br/>
		/// <c>FDIVRP ST(i), ST(0)</c><br/>
		/// <br/>
		/// <c>DE F0+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fdivrp(AssemblerRegisterST dst, AssemblerRegisterST src) {
			Code op;
			op = Code.Fdivrp_sti_st0;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>femms instruction.<br/>
		/// <br/>
		/// <c>FEMMS</c><br/>
		/// <br/>
		/// <c>0F 0E</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void femms() {
			Code op;
			op = Code.Femms;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>feni instruction.<br/>
		/// <br/>
		/// <c>FENI</c><br/>
		/// <br/>
		/// <c>9B DB E0</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void feni() {
			Code op;
			op = Code.Feni;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>ffree instruction.<br/>
		/// <br/>
		/// <c>FFREE ST(i)</c><br/>
		/// <br/>
		/// <c>DD C0+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ffree(AssemblerRegisterST dst) {
			Code op;
			op = Code.Ffree_sti;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>ffreep instruction.<br/>
		/// <br/>
		/// <c>FFREEP ST(i)</c><br/>
		/// <br/>
		/// <c>DF C0+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ffreep(AssemblerRegisterST dst) {
			Code op;
			op = Code.Ffreep_sti;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>fiadd instruction.<br/>
		/// <br/>
		/// <c>FIADD m32int</c><br/>
		/// <br/>
		/// <c>DA /0</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FIADD m16int</c><br/>
		/// <br/>
		/// <c>DE /0</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fiadd(AssemblerMemoryOperand dst) {
			Code op;
			if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Fiadd_m32int;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Fiadd_m16int;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Fiadd, dst);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>ficom instruction.<br/>
		/// <br/>
		/// <c>FICOM m32int</c><br/>
		/// <br/>
		/// <c>DA /2</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FICOM m16int</c><br/>
		/// <br/>
		/// <c>DE /2</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ficom(AssemblerMemoryOperand dst) {
			Code op;
			if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Ficom_m32int;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Ficom_m16int;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Ficom, dst);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>ficomp instruction.<br/>
		/// <br/>
		/// <c>FICOMP m32int</c><br/>
		/// <br/>
		/// <c>DA /3</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FICOMP m16int</c><br/>
		/// <br/>
		/// <c>DE /3</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ficomp(AssemblerMemoryOperand dst) {
			Code op;
			if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Ficomp_m32int;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Ficomp_m16int;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Ficomp, dst);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>fidiv instruction.<br/>
		/// <br/>
		/// <c>FIDIV m32int</c><br/>
		/// <br/>
		/// <c>DA /6</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FIDIV m16int</c><br/>
		/// <br/>
		/// <c>DE /6</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fidiv(AssemblerMemoryOperand dst) {
			Code op;
			if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Fidiv_m32int;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Fidiv_m16int;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Fidiv, dst);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>fidivr instruction.<br/>
		/// <br/>
		/// <c>FIDIVR m32int</c><br/>
		/// <br/>
		/// <c>DA /7</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FIDIVR m16int</c><br/>
		/// <br/>
		/// <c>DE /7</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fidivr(AssemblerMemoryOperand dst) {
			Code op;
			if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Fidivr_m32int;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Fidivr_m16int;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Fidivr, dst);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>fild instruction.<br/>
		/// <br/>
		/// <c>FILD m64int</c><br/>
		/// <br/>
		/// <c>DF /5</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FILD m32int</c><br/>
		/// <br/>
		/// <c>DB /0</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FILD m16int</c><br/>
		/// <br/>
		/// <c>DF /0</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fild(AssemblerMemoryOperand dst) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Fild_m64int;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Fild_m32int;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Fild_m16int;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Fild, dst);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>fimul instruction.<br/>
		/// <br/>
		/// <c>FIMUL m32int</c><br/>
		/// <br/>
		/// <c>DA /1</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FIMUL m16int</c><br/>
		/// <br/>
		/// <c>DE /1</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fimul(AssemblerMemoryOperand dst) {
			Code op;
			if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Fimul_m32int;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Fimul_m16int;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Fimul, dst);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>fincstp instruction.<br/>
		/// <br/>
		/// <c>FINCSTP</c><br/>
		/// <br/>
		/// <c>D9 F7</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fincstp() {
			Code op;
			op = Code.Fincstp;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>finit instruction.<br/>
		/// <br/>
		/// <c>FINIT</c><br/>
		/// <br/>
		/// <c>9B DB E3</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void finit() {
			Code op;
			op = Code.Finit;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>fist instruction.<br/>
		/// <br/>
		/// <c>FIST m32int</c><br/>
		/// <br/>
		/// <c>DB /2</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FIST m16int</c><br/>
		/// <br/>
		/// <c>DF /2</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fist(AssemblerMemoryOperand dst) {
			Code op;
			if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Fist_m32int;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Fist_m16int;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Fist, dst);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>fistp instruction.<br/>
		/// <br/>
		/// <c>FISTP m64int</c><br/>
		/// <br/>
		/// <c>DF /7</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FISTP m32int</c><br/>
		/// <br/>
		/// <c>DB /3</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FISTP m16int</c><br/>
		/// <br/>
		/// <c>DF /3</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fistp(AssemblerMemoryOperand dst) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Fistp_m64int;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Fistp_m32int;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Fistp_m16int;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Fistp, dst);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>fisttp instruction.<br/>
		/// <br/>
		/// <c>FISTTP m64int</c><br/>
		/// <br/>
		/// <c>DD /1</c><br/>
		/// <br/>
		/// <c>8087+ and SSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FISTTP m32int</c><br/>
		/// <br/>
		/// <c>DB /1</c><br/>
		/// <br/>
		/// <c>8087+ and SSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FISTTP m16int</c><br/>
		/// <br/>
		/// <c>DF /1</c><br/>
		/// <br/>
		/// <c>8087+ and SSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fisttp(AssemblerMemoryOperand dst) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Fisttp_m64int;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Fisttp_m32int;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Fisttp_m16int;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Fisttp, dst);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>fisub instruction.<br/>
		/// <br/>
		/// <c>FISUB m32int</c><br/>
		/// <br/>
		/// <c>DA /4</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FISUB m16int</c><br/>
		/// <br/>
		/// <c>DE /4</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fisub(AssemblerMemoryOperand dst) {
			Code op;
			if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Fisub_m32int;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Fisub_m16int;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Fisub, dst);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>fisubr instruction.<br/>
		/// <br/>
		/// <c>FISUBR m32int</c><br/>
		/// <br/>
		/// <c>DA /5</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FISUBR m16int</c><br/>
		/// <br/>
		/// <c>DE /5</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fisubr(AssemblerMemoryOperand dst) {
			Code op;
			if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Fisubr_m32int;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Fisubr_m16int;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Fisubr, dst);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>fld instruction.<br/>
		/// <br/>
		/// <c>FLD m80fp</c><br/>
		/// <br/>
		/// <c>DB /5</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FLD m64fp</c><br/>
		/// <br/>
		/// <c>DD /0</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FLD m32fp</c><br/>
		/// <br/>
		/// <c>D9 /0</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fld(AssemblerMemoryOperand dst) {
			Code op;
			if (dst.Size == MemoryOperandSize.TwordPtr) {
				op = Code.Fld_m80fp;
			} else if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Fld_m64fp;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Fld_m32fp;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Fld, dst);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>fld instruction.<br/>
		/// <br/>
		/// <c>FLD ST(i)</c><br/>
		/// <br/>
		/// <c>D9 C0+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fld(AssemblerRegisterST dst, AssemblerRegisterST src) {
			Code op;
			op = Code.Fld_st0_sti;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>fld1 instruction.<br/>
		/// <br/>
		/// <c>FLD1</c><br/>
		/// <br/>
		/// <c>D9 E8</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fld1() {
			Code op;
			op = Code.Fld1;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>fldcw instruction.<br/>
		/// <br/>
		/// <c>FLDCW m2byte</c><br/>
		/// <br/>
		/// <c>D9 /5</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fldcw(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Fldcw_m2byte;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>fldenv instruction.<br/>
		/// <br/>
		/// <c>FLDENV m28byte</c><br/>
		/// <br/>
		/// <c>o32 D9 /4</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FLDENV m14byte</c><br/>
		/// <br/>
		/// <c>o16 D9 /4</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fldenv(AssemblerMemoryOperand dst) {
			Code op;
			op = Bitness >= 32 ? Code.Fldenv_m28byte : Code.Fldenv_m14byte;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>fldl2e instruction.<br/>
		/// <br/>
		/// <c>FLDL2E</c><br/>
		/// <br/>
		/// <c>D9 EA</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fldl2e() {
			Code op;
			op = Code.Fldl2e;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>fldl2t instruction.<br/>
		/// <br/>
		/// <c>FLDL2T</c><br/>
		/// <br/>
		/// <c>D9 E9</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fldl2t() {
			Code op;
			op = Code.Fldl2t;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>fldlg2 instruction.<br/>
		/// <br/>
		/// <c>FLDLG2</c><br/>
		/// <br/>
		/// <c>D9 EC</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fldlg2() {
			Code op;
			op = Code.Fldlg2;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>fldln2 instruction.<br/>
		/// <br/>
		/// <c>FLDLN2</c><br/>
		/// <br/>
		/// <c>D9 ED</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fldln2() {
			Code op;
			op = Code.Fldln2;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>fldpi instruction.<br/>
		/// <br/>
		/// <c>FLDPI</c><br/>
		/// <br/>
		/// <c>D9 EB</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fldpi() {
			Code op;
			op = Code.Fldpi;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>fldz instruction.<br/>
		/// <br/>
		/// <c>FLDZ</c><br/>
		/// <br/>
		/// <c>D9 EE</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fldz() {
			Code op;
			op = Code.Fldz;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>fmul instruction.<br/>
		/// <br/>
		/// <c>FMUL m64fp</c><br/>
		/// <br/>
		/// <c>DC /1</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FMUL m32fp</c><br/>
		/// <br/>
		/// <c>D8 /1</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fmul(AssemblerMemoryOperand dst) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Fmul_m64fp;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Fmul_m32fp;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Fmul, dst);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>fmul instruction.<br/>
		/// <br/>
		/// <c>FMUL ST(0), ST(i)</c><br/>
		/// <br/>
		/// <c>D8 C8+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FMUL ST(i), ST(0)</c><br/>
		/// <br/>
		/// <c>DC C8+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fmul(AssemblerRegisterST dst, AssemblerRegisterST src) {
			Code op;
			op = dst == Register.ST0 ? Code.Fmul_st0_sti : Code.Fmul_sti_st0;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>fmulp instruction.<br/>
		/// <br/>
		/// <c>FMULP ST(i), ST(0)</c><br/>
		/// <br/>
		/// <c>DE C8+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fmulp(AssemblerRegisterST dst, AssemblerRegisterST src) {
			Code op;
			op = Code.Fmulp_sti_st0;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>fnclex instruction.<br/>
		/// <br/>
		/// <c>FNCLEX</c><br/>
		/// <br/>
		/// <c>DB E2</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fnclex() {
			Code op;
			op = Code.Fnclex;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>fndisi instruction.<br/>
		/// <br/>
		/// <c>FNDISI</c><br/>
		/// <br/>
		/// <c>DB E1</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fndisi() {
			Code op;
			op = Code.Fndisi;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>fneni instruction.<br/>
		/// <br/>
		/// <c>FNENI</c><br/>
		/// <br/>
		/// <c>DB E0</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fneni() {
			Code op;
			op = Code.Fneni;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>fninit instruction.<br/>
		/// <br/>
		/// <c>FNINIT</c><br/>
		/// <br/>
		/// <c>DB E3</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fninit() {
			Code op;
			op = Code.Fninit;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>fnop instruction.<br/>
		/// <br/>
		/// <c>FNOP</c><br/>
		/// <br/>
		/// <c>D9 D0</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fnop() {
			Code op;
			op = Code.Fnop;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>fnsave instruction.<br/>
		/// <br/>
		/// <c>FNSAVE m108byte</c><br/>
		/// <br/>
		/// <c>o32 DD /6</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FNSAVE m94byte</c><br/>
		/// <br/>
		/// <c>o16 DD /6</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fnsave(AssemblerMemoryOperand dst) {
			Code op;
			op = Bitness >= 32 ? Code.Fnsave_m108byte : Code.Fnsave_m94byte;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>fnsetpm instruction.<br/>
		/// <br/>
		/// <c>FNSETPM</c><br/>
		/// <br/>
		/// <c>DB E4</c><br/>
		/// <br/>
		/// <c>287+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fnsetpm() {
			Code op;
			op = Code.Fnsetpm;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>fnstcw instruction.<br/>
		/// <br/>
		/// <c>FNSTCW m2byte</c><br/>
		/// <br/>
		/// <c>D9 /7</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fnstcw(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Fnstcw_m2byte;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>fnstenv instruction.<br/>
		/// <br/>
		/// <c>FNSTENV m28byte</c><br/>
		/// <br/>
		/// <c>o32 D9 /6</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FNSTENV m14byte</c><br/>
		/// <br/>
		/// <c>o16 D9 /6</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fnstenv(AssemblerMemoryOperand dst) {
			Code op;
			op = Bitness >= 32 ? Code.Fnstenv_m28byte : Code.Fnstenv_m14byte;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>fnstsw instruction.<br/>
		/// <br/>
		/// <c>FNSTSW AX</c><br/>
		/// <br/>
		/// <c>DF E0</c><br/>
		/// <br/>
		/// <c>287+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fnstsw(AssemblerRegister16 dst) {
			Code op;
			op = Code.Fnstsw_AX;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>fnstsw instruction.<br/>
		/// <br/>
		/// <c>FNSTSW m2byte</c><br/>
		/// <br/>
		/// <c>DD /7</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fnstsw(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Fnstsw_m2byte;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>fpatan instruction.<br/>
		/// <br/>
		/// <c>FPATAN</c><br/>
		/// <br/>
		/// <c>D9 F3</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fpatan() {
			Code op;
			op = Code.Fpatan;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>fprem instruction.<br/>
		/// <br/>
		/// <c>FPREM</c><br/>
		/// <br/>
		/// <c>D9 F8</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fprem() {
			Code op;
			op = Code.Fprem;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>fprem1 instruction.<br/>
		/// <br/>
		/// <c>FPREM1</c><br/>
		/// <br/>
		/// <c>D9 F5</c><br/>
		/// <br/>
		/// <c>387+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fprem1() {
			Code op;
			op = Code.Fprem1;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>fptan instruction.<br/>
		/// <br/>
		/// <c>FPTAN</c><br/>
		/// <br/>
		/// <c>D9 F2</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fptan() {
			Code op;
			op = Code.Fptan;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>frndint instruction.<br/>
		/// <br/>
		/// <c>FRNDINT</c><br/>
		/// <br/>
		/// <c>D9 FC</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void frndint() {
			Code op;
			op = Code.Frndint;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>frstor instruction.<br/>
		/// <br/>
		/// <c>FRSTOR m108byte</c><br/>
		/// <br/>
		/// <c>o32 DD /4</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FRSTOR m94byte</c><br/>
		/// <br/>
		/// <c>o16 DD /4</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void frstor(AssemblerMemoryOperand dst) {
			Code op;
			op = Bitness >= 32 ? Code.Frstor_m108byte : Code.Frstor_m94byte;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>frstpm instruction.<br/>
		/// <br/>
		/// <c>FRSTPM</c><br/>
		/// <br/>
		/// <c>DB E5</c><br/>
		/// <br/>
		/// <c>287 XL</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void frstpm() {
			Code op;
			op = Code.Frstpm;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>fsave instruction.<br/>
		/// <br/>
		/// <c>FSAVE m108byte</c><br/>
		/// <br/>
		/// <c>9B o32 DD /6</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FSAVE m94byte</c><br/>
		/// <br/>
		/// <c>9B o16 DD /6</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fsave(AssemblerMemoryOperand dst) {
			Code op;
			op = Bitness >= 32 ? Code.Fsave_m108byte : Code.Fsave_m94byte;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>fscale instruction.<br/>
		/// <br/>
		/// <c>FSCALE</c><br/>
		/// <br/>
		/// <c>D9 FD</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fscale() {
			Code op;
			op = Code.Fscale;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>fsetpm instruction.<br/>
		/// <br/>
		/// <c>FSETPM</c><br/>
		/// <br/>
		/// <c>9B DB E4</c><br/>
		/// <br/>
		/// <c>287+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fsetpm() {
			Code op;
			op = Code.Fsetpm;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>fsin instruction.<br/>
		/// <br/>
		/// <c>FSIN</c><br/>
		/// <br/>
		/// <c>D9 FE</c><br/>
		/// <br/>
		/// <c>387+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fsin() {
			Code op;
			op = Code.Fsin;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>fsincos instruction.<br/>
		/// <br/>
		/// <c>FSINCOS</c><br/>
		/// <br/>
		/// <c>D9 FB</c><br/>
		/// <br/>
		/// <c>387+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fsincos() {
			Code op;
			op = Code.Fsincos;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>fsqrt instruction.<br/>
		/// <br/>
		/// <c>FSQRT</c><br/>
		/// <br/>
		/// <c>D9 FA</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fsqrt() {
			Code op;
			op = Code.Fsqrt;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>fst instruction.<br/>
		/// <br/>
		/// <c>FST ST(i)</c><br/>
		/// <br/>
		/// <c>DD D0+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fst(AssemblerRegisterST dst) {
			Code op;
			op = Code.Fst_sti;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>fst instruction.<br/>
		/// <br/>
		/// <c>FST m64fp</c><br/>
		/// <br/>
		/// <c>DD /2</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FST m32fp</c><br/>
		/// <br/>
		/// <c>D9 /2</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fst(AssemblerMemoryOperand dst) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Fst_m64fp;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Fst_m32fp;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Fst, dst);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>fstcw instruction.<br/>
		/// <br/>
		/// <c>FSTCW m2byte</c><br/>
		/// <br/>
		/// <c>9B D9 /7</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fstcw(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Fstcw_m2byte;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>fstdw instruction.<br/>
		/// <br/>
		/// <c>FSTDW AX</c><br/>
		/// <br/>
		/// <c>DF E1</c><br/>
		/// <br/>
		/// <c>387 SL</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void fstdw(AssemblerRegister16 dst) {
			Code op;
			op = Code.Fstdw_AX;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>fstenv instruction.<br/>
		/// <br/>
		/// <c>FSTENV m28byte</c><br/>
		/// <br/>
		/// <c>9B o32 D9 /6</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FSTENV m14byte</c><br/>
		/// <br/>
		/// <c>9B o16 D9 /6</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fstenv(AssemblerMemoryOperand dst) {
			Code op;
			op = Bitness >= 32 ? Code.Fstenv_m28byte : Code.Fstenv_m14byte;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>fstp instruction.<br/>
		/// <br/>
		/// <c>FSTP ST(i)</c><br/>
		/// <br/>
		/// <c>DD D8+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fstp(AssemblerRegisterST dst) {
			Code op;
			op = Code.Fstp_sti;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>fstp instruction.<br/>
		/// <br/>
		/// <c>FSTP m80fp</c><br/>
		/// <br/>
		/// <c>DB /7</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FSTP m64fp</c><br/>
		/// <br/>
		/// <c>DD /3</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FSTP m32fp</c><br/>
		/// <br/>
		/// <c>D9 /3</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fstp(AssemblerMemoryOperand dst) {
			Code op;
			if (dst.Size == MemoryOperandSize.TwordPtr) {
				op = Code.Fstp_m80fp;
			} else if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Fstp_m64fp;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Fstp_m32fp;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Fstp, dst);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>fstpnce instruction.<br/>
		/// <br/>
		/// <c>FSTPNCE ST(i)</c><br/>
		/// <br/>
		/// <c>D9 D8+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fstpnce(AssemblerRegisterST dst) {
			Code op;
			op = Code.Fstpnce_sti;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>fstsg instruction.<br/>
		/// <br/>
		/// <c>FSTSG AX</c><br/>
		/// <br/>
		/// <c>DF E2</c><br/>
		/// <br/>
		/// <c>387 SL</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void fstsg(AssemblerRegister16 dst) {
			Code op;
			op = Code.Fstsg_AX;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>fstsw instruction.<br/>
		/// <br/>
		/// <c>FSTSW AX</c><br/>
		/// <br/>
		/// <c>9B DF E0</c><br/>
		/// <br/>
		/// <c>287+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fstsw(AssemblerRegister16 dst) {
			Code op;
			op = Code.Fstsw_AX;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>fstsw instruction.<br/>
		/// <br/>
		/// <c>FSTSW m2byte</c><br/>
		/// <br/>
		/// <c>9B DD /7</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fstsw(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Fstsw_m2byte;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>fsub instruction.<br/>
		/// <br/>
		/// <c>FSUB m64fp</c><br/>
		/// <br/>
		/// <c>DC /4</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FSUB m32fp</c><br/>
		/// <br/>
		/// <c>D8 /4</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fsub(AssemblerMemoryOperand dst) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Fsub_m64fp;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Fsub_m32fp;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Fsub, dst);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>fsub instruction.<br/>
		/// <br/>
		/// <c>FSUB ST(0), ST(i)</c><br/>
		/// <br/>
		/// <c>D8 E0+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FSUB ST(i), ST(0)</c><br/>
		/// <br/>
		/// <c>DC E8+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fsub(AssemblerRegisterST dst, AssemblerRegisterST src) {
			Code op;
			op = dst == Register.ST0 ? Code.Fsub_st0_sti : Code.Fsub_sti_st0;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>fsubp instruction.<br/>
		/// <br/>
		/// <c>FSUBP ST(i), ST(0)</c><br/>
		/// <br/>
		/// <c>DE E8+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fsubp(AssemblerRegisterST dst, AssemblerRegisterST src) {
			Code op;
			op = Code.Fsubp_sti_st0;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>fsubr instruction.<br/>
		/// <br/>
		/// <c>FSUBR m64fp</c><br/>
		/// <br/>
		/// <c>DC /5</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FSUBR m32fp</c><br/>
		/// <br/>
		/// <c>D8 /5</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fsubr(AssemblerMemoryOperand dst) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Fsubr_m64fp;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Fsubr_m32fp;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Fsubr, dst);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>fsubr instruction.<br/>
		/// <br/>
		/// <c>FSUBR ST(0), ST(i)</c><br/>
		/// <br/>
		/// <c>D8 E8+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FSUBR ST(i), ST(0)</c><br/>
		/// <br/>
		/// <c>DC E0+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fsubr(AssemblerRegisterST dst, AssemblerRegisterST src) {
			Code op;
			op = dst == Register.ST0 ? Code.Fsubr_st0_sti : Code.Fsubr_sti_st0;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>fsubrp instruction.<br/>
		/// <br/>
		/// <c>FSUBRP ST(i), ST(0)</c><br/>
		/// <br/>
		/// <c>DE E0+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fsubrp(AssemblerRegisterST dst, AssemblerRegisterST src) {
			Code op;
			op = Code.Fsubrp_sti_st0;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>ftst instruction.<br/>
		/// <br/>
		/// <c>FTST</c><br/>
		/// <br/>
		/// <c>D9 E4</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ftst() {
			Code op;
			op = Code.Ftst;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>fucom instruction.<br/>
		/// <br/>
		/// <c>FUCOM ST(i)</c><br/>
		/// <br/>
		/// <c>DD E0+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fucom(AssemblerRegisterST dst, AssemblerRegisterST src) {
			Code op;
			op = Code.Fucom_st0_sti;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>fucomi instruction.<br/>
		/// <br/>
		/// <c>FUCOMI ST, ST(i)</c><br/>
		/// <br/>
		/// <c>DB E8+i</c><br/>
		/// <br/>
		/// <c>8087+ and CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fucomi(AssemblerRegisterST dst, AssemblerRegisterST src) {
			Code op;
			op = Code.Fucomi_st0_sti;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>fucomip instruction.<br/>
		/// <br/>
		/// <c>FUCOMIP ST, ST(i)</c><br/>
		/// <br/>
		/// <c>DF E8+i</c><br/>
		/// <br/>
		/// <c>8087+ and CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fucomip(AssemblerRegisterST dst, AssemblerRegisterST src) {
			Code op;
			op = Code.Fucomip_st0_sti;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>fucomp instruction.<br/>
		/// <br/>
		/// <c>FUCOMP ST(i)</c><br/>
		/// <br/>
		/// <c>DD E8+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fucomp(AssemblerRegisterST dst, AssemblerRegisterST src) {
			Code op;
			op = Code.Fucomp_st0_sti;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>fucompp instruction.<br/>
		/// <br/>
		/// <c>FUCOMPP</c><br/>
		/// <br/>
		/// <c>DA E9</c><br/>
		/// <br/>
		/// <c>387+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fucompp() {
			Code op;
			op = Code.Fucompp;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>fxam instruction.<br/>
		/// <br/>
		/// <c>FXAM</c><br/>
		/// <br/>
		/// <c>D9 E5</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fxam() {
			Code op;
			op = Code.Fxam;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>fxch instruction.<br/>
		/// <br/>
		/// <c>FXCH ST(i)</c><br/>
		/// <br/>
		/// <c>D9 C8+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fxch(AssemblerRegisterST dst, AssemblerRegisterST src) {
			Code op;
			op = Code.Fxch_st0_sti;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>fxrstor instruction.<br/>
		/// <br/>
		/// <c>FXRSTOR m512byte</c><br/>
		/// <br/>
		/// <c>NP 0F AE /1</c><br/>
		/// <br/>
		/// <c>FXSR</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fxrstor(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Fxrstor_m512byte;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>fxrstor64 instruction.<br/>
		/// <br/>
		/// <c>FXRSTOR64 m512byte</c><br/>
		/// <br/>
		/// <c>NP REX.W 0F AE /1</c><br/>
		/// <br/>
		/// <c>FXSR</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void fxrstor64(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Fxrstor64_m512byte;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>fxsave instruction.<br/>
		/// <br/>
		/// <c>FXSAVE m512byte</c><br/>
		/// <br/>
		/// <c>NP 0F AE /0</c><br/>
		/// <br/>
		/// <c>FXSR</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fxsave(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Fxsave_m512byte;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>fxsave64 instruction.<br/>
		/// <br/>
		/// <c>FXSAVE64 m512byte</c><br/>
		/// <br/>
		/// <c>NP REX.W 0F AE /0</c><br/>
		/// <br/>
		/// <c>FXSR</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void fxsave64(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Fxsave64_m512byte;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>fxtract instruction.<br/>
		/// <br/>
		/// <c>FXTRACT</c><br/>
		/// <br/>
		/// <c>D9 F4</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fxtract() {
			Code op;
			op = Code.Fxtract;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>fyl2x instruction.<br/>
		/// <br/>
		/// <c>FYL2X</c><br/>
		/// <br/>
		/// <c>D9 F1</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fyl2x() {
			Code op;
			op = Code.Fyl2x;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>fyl2xp1 instruction.<br/>
		/// <br/>
		/// <c>FYL2XP1</c><br/>
		/// <br/>
		/// <c>D9 F9</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void fyl2xp1() {
			Code op;
			op = Code.Fyl2xp1;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>getsec instruction.<br/>
		/// <br/>
		/// <c>GETSEC</c><br/>
		/// <br/>
		/// <c>NP 0F 37</c><br/>
		/// <br/>
		/// <c>SMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void getsec() {
			Code op;
			op = Code.Getsecd;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>getsecq instruction.<br/>
		/// <br/>
		/// <c>GETSECQ</c><br/>
		/// <br/>
		/// <c>NP REX.W 0F 37</c><br/>
		/// <br/>
		/// <c>SMX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void getsecq() {
			Code op;
			op = Code.Getsecq;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>gf2p8affineinvqb instruction.<br/>
		/// <br/>
		/// <c>GF2P8AFFINEINVQB xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A CF /r ib</c><br/>
		/// <br/>
		/// <c>GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void gf2p8affineinvqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.Gf2p8affineinvqb_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>gf2p8affineinvqb instruction.<br/>
		/// <br/>
		/// <c>GF2P8AFFINEINVQB xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A CF /r ib</c><br/>
		/// <br/>
		/// <c>GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void gf2p8affineinvqb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.Gf2p8affineinvqb_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>gf2p8affineinvqb instruction.<br/>
		/// <br/>
		/// <c>GF2P8AFFINEINVQB xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A CF /r ib</c><br/>
		/// <br/>
		/// <c>GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void gf2p8affineinvqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.Gf2p8affineinvqb_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>gf2p8affineinvqb instruction.<br/>
		/// <br/>
		/// <c>GF2P8AFFINEINVQB xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A CF /r ib</c><br/>
		/// <br/>
		/// <c>GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void gf2p8affineinvqb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.Gf2p8affineinvqb_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>gf2p8affineqb instruction.<br/>
		/// <br/>
		/// <c>GF2P8AFFINEQB xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A CE /r ib</c><br/>
		/// <br/>
		/// <c>GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void gf2p8affineqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.Gf2p8affineqb_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>gf2p8affineqb instruction.<br/>
		/// <br/>
		/// <c>GF2P8AFFINEQB xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A CE /r ib</c><br/>
		/// <br/>
		/// <c>GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void gf2p8affineqb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.Gf2p8affineqb_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>gf2p8affineqb instruction.<br/>
		/// <br/>
		/// <c>GF2P8AFFINEQB xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A CE /r ib</c><br/>
		/// <br/>
		/// <c>GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void gf2p8affineqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.Gf2p8affineqb_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>gf2p8affineqb instruction.<br/>
		/// <br/>
		/// <c>GF2P8AFFINEQB xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A CE /r ib</c><br/>
		/// <br/>
		/// <c>GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void gf2p8affineqb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.Gf2p8affineqb_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>gf2p8mulb instruction.<br/>
		/// <br/>
		/// <c>GF2P8MULB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 CF /r</c><br/>
		/// <br/>
		/// <c>GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void gf2p8mulb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Gf2p8mulb_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>gf2p8mulb instruction.<br/>
		/// <br/>
		/// <c>GF2P8MULB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 CF /r</c><br/>
		/// <br/>
		/// <c>GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void gf2p8mulb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Gf2p8mulb_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>haddpd instruction.<br/>
		/// <br/>
		/// <c>HADDPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 7C /r</c><br/>
		/// <br/>
		/// <c>SSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void haddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Haddpd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>haddpd instruction.<br/>
		/// <br/>
		/// <c>HADDPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 7C /r</c><br/>
		/// <br/>
		/// <c>SSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void haddpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Haddpd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>haddps instruction.<br/>
		/// <br/>
		/// <c>HADDPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>F2 0F 7C /r</c><br/>
		/// <br/>
		/// <c>SSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void haddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Haddps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>haddps instruction.<br/>
		/// <br/>
		/// <c>HADDPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>F2 0F 7C /r</c><br/>
		/// <br/>
		/// <c>SSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void haddps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Haddps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>hlt instruction.<br/>
		/// <br/>
		/// <c>HLT</c><br/>
		/// <br/>
		/// <c>F4</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void hlt() {
			Code op;
			op = Code.Hlt;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>hsubpd instruction.<br/>
		/// <br/>
		/// <c>HSUBPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 7D /r</c><br/>
		/// <br/>
		/// <c>SSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void hsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Hsubpd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>hsubpd instruction.<br/>
		/// <br/>
		/// <c>HSUBPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 7D /r</c><br/>
		/// <br/>
		/// <c>SSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void hsubpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Hsubpd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>hsubps instruction.<br/>
		/// <br/>
		/// <c>HSUBPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>F2 0F 7D /r</c><br/>
		/// <br/>
		/// <c>SSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void hsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Hsubps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>hsubps instruction.<br/>
		/// <br/>
		/// <c>HSUBPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>F2 0F 7D /r</c><br/>
		/// <br/>
		/// <c>SSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void hsubps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Hsubps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>ibts instruction.<br/>
		/// <br/>
		/// <c>IBTS r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F A7 /r</c><br/>
		/// <br/>
		/// <c>386 A0</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void ibts(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Ibts_rm16_r16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>ibts instruction.<br/>
		/// <br/>
		/// <c>IBTS r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F A7 /r</c><br/>
		/// <br/>
		/// <c>386 A0</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void ibts(AssemblerMemoryOperand dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Ibts_rm16_r16;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>ibts instruction.<br/>
		/// <br/>
		/// <c>IBTS r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F A7 /r</c><br/>
		/// <br/>
		/// <c>386 A0</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void ibts(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Ibts_rm32_r32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>ibts instruction.<br/>
		/// <br/>
		/// <c>IBTS r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F A7 /r</c><br/>
		/// <br/>
		/// <c>386 A0</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void ibts(AssemblerMemoryOperand dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Ibts_rm32_r32;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>idiv instruction.<br/>
		/// <br/>
		/// <c>IDIV r/m8</c><br/>
		/// <br/>
		/// <c>F6 /7</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void idiv(AssemblerRegister8 dst) {
			Code op;
			op = Code.Idiv_rm8;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>idiv instruction.<br/>
		/// <br/>
		/// <c>IDIV r/m16</c><br/>
		/// <br/>
		/// <c>o16 F7 /7</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void idiv(AssemblerRegister16 dst) {
			Code op;
			op = Code.Idiv_rm16;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>idiv instruction.<br/>
		/// <br/>
		/// <c>IDIV r/m32</c><br/>
		/// <br/>
		/// <c>o32 F7 /7</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void idiv(AssemblerRegister32 dst) {
			Code op;
			op = Code.Idiv_rm32;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>idiv instruction.<br/>
		/// <br/>
		/// <c>IDIV r/m64</c><br/>
		/// <br/>
		/// <c>REX.W F7 /7</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void idiv(AssemblerRegister64 dst) {
			Code op;
			op = Code.Idiv_rm64;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>idiv instruction.<br/>
		/// <br/>
		/// <c>IDIV r/m64</c><br/>
		/// <br/>
		/// <c>REX.W F7 /7</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>IDIV r/m32</c><br/>
		/// <br/>
		/// <c>o32 F7 /7</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>IDIV r/m16</c><br/>
		/// <br/>
		/// <c>o16 F7 /7</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>IDIV r/m8</c><br/>
		/// <br/>
		/// <c>F6 /7</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void idiv(AssemblerMemoryOperand dst) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Idiv_rm64;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Idiv_rm32;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Idiv_rm16;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Idiv_rm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Idiv, dst);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>imul instruction.<br/>
		/// <br/>
		/// <c>IMUL r/m8</c><br/>
		/// <br/>
		/// <c>F6 /5</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void imul(AssemblerRegister8 dst) {
			Code op;
			op = Code.Imul_rm8;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>imul instruction.<br/>
		/// <br/>
		/// <c>IMUL r/m16</c><br/>
		/// <br/>
		/// <c>o16 F7 /5</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void imul(AssemblerRegister16 dst) {
			Code op;
			op = Code.Imul_rm16;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>imul instruction.<br/>
		/// <br/>
		/// <c>IMUL r/m32</c><br/>
		/// <br/>
		/// <c>o32 F7 /5</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void imul(AssemblerRegister32 dst) {
			Code op;
			op = Code.Imul_rm32;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>imul instruction.<br/>
		/// <br/>
		/// <c>IMUL r/m64</c><br/>
		/// <br/>
		/// <c>REX.W F7 /5</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void imul(AssemblerRegister64 dst) {
			Code op;
			op = Code.Imul_rm64;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>imul instruction.<br/>
		/// <br/>
		/// <c>IMUL r/m64</c><br/>
		/// <br/>
		/// <c>REX.W F7 /5</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>IMUL r/m32</c><br/>
		/// <br/>
		/// <c>o32 F7 /5</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>IMUL r/m16</c><br/>
		/// <br/>
		/// <c>o16 F7 /5</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>IMUL r/m8</c><br/>
		/// <br/>
		/// <c>F6 /5</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void imul(AssemblerMemoryOperand dst) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Imul_rm64;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Imul_rm32;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Imul_rm16;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Imul_rm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Imul, dst);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>imul instruction.<br/>
		/// <br/>
		/// <c>IMUL r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F AF /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void imul(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Imul_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>imul instruction.<br/>
		/// <br/>
		/// <c>IMUL r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F AF /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void imul(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Imul_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>imul instruction.<br/>
		/// <br/>
		/// <c>IMUL r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 0F AF /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void imul(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Imul_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>imul instruction.<br/>
		/// <br/>
		/// <c>IMUL r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F AF /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void imul(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Imul_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>imul instruction.<br/>
		/// <br/>
		/// <c>IMUL r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F AF /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void imul(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Imul_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>imul instruction.<br/>
		/// <br/>
		/// <c>IMUL r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 0F AF /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void imul(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Imul_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>imul instruction.<br/>
		/// <br/>
		/// <c>IMUL r16, r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 69 /r iw</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>IMUL r16, r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 6B /r ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void imul(AssemblerRegister16 dst, AssemblerRegister16 src1, short imm) {
			Code op;
			op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Imul_r16_rm16_imm8 : Code.Imul_r16_rm16_imm16;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>imul instruction.<br/>
		/// <br/>
		/// <c>IMUL r32, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 69 /r id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>IMUL r32, r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 6B /r ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void imul(AssemblerRegister32 dst, AssemblerRegister32 src1, int imm) {
			Code op;
			op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Imul_r32_rm32_imm8 : Code.Imul_r32_rm32_imm32;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>imul instruction.<br/>
		/// <br/>
		/// <c>IMUL r64, r/m64, imm32</c><br/>
		/// <br/>
		/// <c>REX.W 69 /r id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>IMUL r64, r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W 6B /r ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void imul(AssemblerRegister64 dst, AssemblerRegister64 src1, int imm) {
			Code op;
			op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Imul_r64_rm64_imm8 : Code.Imul_r64_rm64_imm32;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>imul instruction.<br/>
		/// <br/>
		/// <c>IMUL r16, r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 69 /r iw</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>IMUL r16, r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 6B /r ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void imul(AssemblerRegister16 dst, AssemblerMemoryOperand src1, short imm) {
			Code op;
			op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Imul_r16_rm16_imm8 : Code.Imul_r16_rm16_imm16;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>imul instruction.<br/>
		/// <br/>
		/// <c>IMUL r32, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 69 /r id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>IMUL r32, r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 6B /r ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void imul(AssemblerRegister32 dst, AssemblerMemoryOperand src1, int imm) {
			Code op;
			op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Imul_r32_rm32_imm8 : Code.Imul_r32_rm32_imm32;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>imul instruction.<br/>
		/// <br/>
		/// <c>IMUL r64, r/m64, imm32</c><br/>
		/// <br/>
		/// <c>REX.W 69 /r id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>IMUL r64, r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W 6B /r ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void imul(AssemblerRegister64 dst, AssemblerMemoryOperand src1, int imm) {
			Code op;
			op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Imul_r64_rm64_imm8 : Code.Imul_r64_rm64_imm32;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>imul instruction.<br/>
		/// <br/>
		/// <c>IMUL r16, r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 69 /r iw</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>IMUL r16, r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 6B /r ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void imul(AssemblerRegister16 dst, AssemblerRegister16 src1, ushort imm) {
			Code op;
			op = imm <= (ushort)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF) ? Code.Imul_r16_rm16_imm8 : Code.Imul_r16_rm16_imm16;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>imul instruction.<br/>
		/// <br/>
		/// <c>IMUL r32, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 69 /r id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>IMUL r32, r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 6B /r ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void imul(AssemblerRegister32 dst, AssemblerRegister32 src1, uint imm) {
			Code op;
			op = imm <= (uint)sbyte.MaxValue || (0xFFFF_FF80 <= imm && imm <= 0xFFFF_FFFF) ? Code.Imul_r32_rm32_imm8 : Code.Imul_r32_rm32_imm32;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>imul instruction.<br/>
		/// <br/>
		/// <c>IMUL r16, r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 69 /r iw</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>IMUL r16, r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 6B /r ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void imul(AssemblerRegister16 dst, AssemblerMemoryOperand src1, ushort imm) {
			Code op;
			op = imm <= (ushort)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF) ? Code.Imul_r16_rm16_imm8 : Code.Imul_r16_rm16_imm16;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>imul instruction.<br/>
		/// <br/>
		/// <c>IMUL r32, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 69 /r id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>IMUL r32, r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 6B /r ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void imul(AssemblerRegister32 dst, AssemblerMemoryOperand src1, uint imm) {
			Code op;
			op = imm <= (uint)sbyte.MaxValue || (0xFFFF_FF80 <= imm && imm <= 0xFFFF_FFFF) ? Code.Imul_r32_rm32_imm8 : Code.Imul_r32_rm32_imm32;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>in instruction.<br/>
		/// <br/>
		/// <c>IN AL, DX</c><br/>
		/// <br/>
		/// <c>EC</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void @in(AssemblerRegister8 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.In_AL_DX;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>in instruction.<br/>
		/// <br/>
		/// <c>IN AX, DX</c><br/>
		/// <br/>
		/// <c>o16 ED</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void @in(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.In_AX_DX;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>in instruction.<br/>
		/// <br/>
		/// <c>IN EAX, DX</c><br/>
		/// <br/>
		/// <c>o32 ED</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void @in(AssemblerRegister32 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.In_EAX_DX;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>in instruction.<br/>
		/// <br/>
		/// <c>IN AL, imm8</c><br/>
		/// <br/>
		/// <c>E4 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void @in(AssemblerRegister8 dst, sbyte imm) {
			Code op;
			op = Code.In_AL_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>in instruction.<br/>
		/// <br/>
		/// <c>IN AX, imm8</c><br/>
		/// <br/>
		/// <c>o16 E5 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void @in(AssemblerRegister16 dst, sbyte imm) {
			Code op;
			op = Code.In_AX_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>in instruction.<br/>
		/// <br/>
		/// <c>IN EAX, imm8</c><br/>
		/// <br/>
		/// <c>o32 E5 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void @in(AssemblerRegister32 dst, sbyte imm) {
			Code op;
			op = Code.In_EAX_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>in instruction.<br/>
		/// <br/>
		/// <c>IN AL, imm8</c><br/>
		/// <br/>
		/// <c>E4 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void @in(AssemblerRegister8 dst, byte imm) {
			Code op;
			op = Code.In_AL_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>in instruction.<br/>
		/// <br/>
		/// <c>IN AX, imm8</c><br/>
		/// <br/>
		/// <c>o16 E5 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void @in(AssemblerRegister16 dst, byte imm) {
			Code op;
			op = Code.In_AX_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>in instruction.<br/>
		/// <br/>
		/// <c>IN EAX, imm8</c><br/>
		/// <br/>
		/// <c>o32 E5 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void @in(AssemblerRegister32 dst, byte imm) {
			Code op;
			op = Code.In_EAX_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>inc instruction.<br/>
		/// <br/>
		/// <c>INC r/m8</c><br/>
		/// <br/>
		/// <c>FE /0</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void inc(AssemblerRegister8 dst) {
			Code op;
			op = Code.Inc_rm8;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>inc instruction.<br/>
		/// <br/>
		/// <c>INC r/m16</c><br/>
		/// <br/>
		/// <c>o16 FF /0</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>INC r16</c><br/>
		/// <br/>
		/// <c>o16 40+rw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void inc(AssemblerRegister16 dst) {
			Code op;
			op = Bitness == 64 ? Code.Inc_rm16 : Code.Inc_r16;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>inc instruction.<br/>
		/// <br/>
		/// <c>INC r/m32</c><br/>
		/// <br/>
		/// <c>o32 FF /0</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>INC r32</c><br/>
		/// <br/>
		/// <c>o32 40+rd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void inc(AssemblerRegister32 dst) {
			Code op;
			op = Bitness == 64 ? Code.Inc_rm32 : Code.Inc_r32;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>inc instruction.<br/>
		/// <br/>
		/// <c>INC r/m64</c><br/>
		/// <br/>
		/// <c>REX.W FF /0</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void inc(AssemblerRegister64 dst) {
			Code op;
			op = Code.Inc_rm64;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>inc instruction.<br/>
		/// <br/>
		/// <c>INC r/m64</c><br/>
		/// <br/>
		/// <c>REX.W FF /0</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>INC r/m32</c><br/>
		/// <br/>
		/// <c>o32 FF /0</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>INC r/m16</c><br/>
		/// <br/>
		/// <c>o16 FF /0</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>INC r/m8</c><br/>
		/// <br/>
		/// <c>FE /0</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void inc(AssemblerMemoryOperand dst) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Inc_rm64;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Inc_rm32;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Inc_rm16;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Inc_rm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Inc, dst);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>incsspd instruction.<br/>
		/// <br/>
		/// <c>INCSSPD r32</c><br/>
		/// <br/>
		/// <c>F3 0F AE /5</c><br/>
		/// <br/>
		/// <c>CET_SS</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void incsspd(AssemblerRegister32 dst) {
			Code op;
			op = Code.Incsspd_r32;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>incsspq instruction.<br/>
		/// <br/>
		/// <c>INCSSPQ r64</c><br/>
		/// <br/>
		/// <c>F3 REX.W 0F AE /5</c><br/>
		/// <br/>
		/// <c>CET_SS</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void incsspq(AssemblerRegister64 dst) {
			Code op;
			op = Code.Incsspq_r64;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>insb instruction.<br/>
		/// <br/>
		/// <c>INSB</c><br/>
		/// <br/>
		/// <c>6C</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void insb() {
			AddInstruction(Instruction.CreateInsb(Bitness));
		}
		/// <summary>insd instruction.<br/>
		/// <br/>
		/// <c>INSD</c><br/>
		/// <br/>
		/// <c>o32 6D</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void insd() {
			AddInstruction(Instruction.CreateInsd(Bitness));
		}
		/// <summary>insertps instruction.<br/>
		/// <br/>
		/// <c>INSERTPS xmm1, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 21 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void insertps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.Insertps_xmm_xmmm32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>insertps instruction.<br/>
		/// <br/>
		/// <c>INSERTPS xmm1, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 21 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void insertps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.Insertps_xmm_xmmm32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>insertps instruction.<br/>
		/// <br/>
		/// <c>INSERTPS xmm1, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 21 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void insertps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.Insertps_xmm_xmmm32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>insertps instruction.<br/>
		/// <br/>
		/// <c>INSERTPS xmm1, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 21 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void insertps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.Insertps_xmm_xmmm32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>insertq instruction.<br/>
		/// <br/>
		/// <c>INSERTQ xmm1, xmm2</c><br/>
		/// <br/>
		/// <c>F2 0F 79 /r</c><br/>
		/// <br/>
		/// <c>SSE4A</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void insertq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Insertq_xmm_xmm;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>insertq instruction.<br/>
		/// <br/>
		/// <c>INSERTQ xmm1, xmm2, imm8, imm8</c><br/>
		/// <br/>
		/// <c>F2 0F 78 /r ib ib</c><br/>
		/// <br/>
		/// <c>SSE4A</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void insertq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm, sbyte imm1) {
			Code op;
			op = Code.Insertq_xmm_xmm_imm8_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm, imm1));
		}
		/// <summary>insertq instruction.<br/>
		/// <br/>
		/// <c>INSERTQ xmm1, xmm2, imm8, imm8</c><br/>
		/// <br/>
		/// <c>F2 0F 78 /r ib ib</c><br/>
		/// <br/>
		/// <c>SSE4A</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void insertq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm, byte imm1) {
			Code op;
			op = Code.Insertq_xmm_xmm_imm8_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm, (uint)imm1));
		}
		/// <summary>insw instruction.<br/>
		/// <br/>
		/// <c>INSW</c><br/>
		/// <br/>
		/// <c>o16 6D</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void insw() {
			AddInstruction(Instruction.CreateInsw(Bitness));
		}
		/// <summary>int instruction.<br/>
		/// <br/>
		/// <c>INT imm8</c><br/>
		/// <br/>
		/// <c>CD ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void @int(sbyte imm) {
			Code op;
			op = Code.Int_imm8;
			AddInstruction(Instruction.Create(op, imm));
		}
		/// <summary>int instruction.<br/>
		/// <br/>
		/// <c>INT imm8</c><br/>
		/// <br/>
		/// <c>CD ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void @int(byte imm) {
			Code op;
			op = Code.Int_imm8;
			AddInstruction(Instruction.Create(op, (uint)imm));
		}
		/// <summary>int1 instruction.<br/>
		/// <br/>
		/// <c>INT1</c><br/>
		/// <br/>
		/// <c>F1</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void int1() {
			Code op;
			op = Code.Int1;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>int3 instruction.<br/>
		/// <br/>
		/// <c>INT3</c><br/>
		/// <br/>
		/// <c>CC</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void int3() {
			Code op;
			op = Code.Int3;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>into instruction.<br/>
		/// <br/>
		/// <c>INTO</c><br/>
		/// <br/>
		/// <c>CE</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void into() {
			Code op;
			op = Code.Into;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>invd instruction.<br/>
		/// <br/>
		/// <c>INVD</c><br/>
		/// <br/>
		/// <c>0F 08</c><br/>
		/// <br/>
		/// <c>486+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void invd() {
			Code op;
			op = Code.Invd;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>invept instruction.<br/>
		/// <br/>
		/// <c>INVEPT r32, m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 80 /r</c><br/>
		/// <br/>
		/// <c>VMX and IA32_VMX_EPT_VPID_CAP[bit 20]</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void invept(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Invept_r32_m128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>invept instruction.<br/>
		/// <br/>
		/// <c>INVEPT r64, m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 80 /r</c><br/>
		/// <br/>
		/// <c>VMX and IA32_VMX_EPT_VPID_CAP[bit 20]</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void invept(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Invept_r64_m128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>invlpg instruction.<br/>
		/// <br/>
		/// <c>INVLPG m</c><br/>
		/// <br/>
		/// <c>0F 01 /7</c><br/>
		/// <br/>
		/// <c>486+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void invlpg(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Invlpg_m;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>invlpga instruction.<br/>
		/// <br/>
		/// <c>INVLPGA</c><br/>
		/// <br/>
		/// <c>0F 01 DF</c><br/>
		/// <br/>
		/// <c>SVM</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>INVLPGA</c><br/>
		/// <br/>
		/// <c>a32 0F 01 DF</c><br/>
		/// <br/>
		/// <c>SVM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>INVLPGA</c><br/>
		/// <br/>
		/// <c>a16 0F 01 DF</c><br/>
		/// <br/>
		/// <c>SVM</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void invlpga() {
			Code op;
			if (Bitness == 64) {
				op = Code.Invlpgaq;
			} else op = Bitness >= 32 ? Code.Invlpgad : Code.Invlpgaw;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>invlpgb instruction.<br/>
		/// <br/>
		/// <c>INVLPGB</c><br/>
		/// <br/>
		/// <c>NP 0F 01 FE</c><br/>
		/// <br/>
		/// <c>INVLPGB</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>INVLPGB</c><br/>
		/// <br/>
		/// <c>a32 NP 0F 01 FE</c><br/>
		/// <br/>
		/// <c>INVLPGB</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>INVLPGB</c><br/>
		/// <br/>
		/// <c>a16 NP 0F 01 FE</c><br/>
		/// <br/>
		/// <c>INVLPGB</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void invlpgb() {
			Code op;
			if (Bitness == 64) {
				op = Code.Invlpgbq;
			} else op = Bitness >= 32 ? Code.Invlpgbd : Code.Invlpgbw;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>invpcid instruction.<br/>
		/// <br/>
		/// <c>INVPCID r32, m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 82 /r</c><br/>
		/// <br/>
		/// <c>INVPCID</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void invpcid(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Invpcid_r32_m128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>invpcid instruction.<br/>
		/// <br/>
		/// <c>INVPCID r64, m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 82 /r</c><br/>
		/// <br/>
		/// <c>INVPCID</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void invpcid(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Invpcid_r64_m128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>invvpid instruction.<br/>
		/// <br/>
		/// <c>INVVPID r32, m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 81 /r</c><br/>
		/// <br/>
		/// <c>VMX and IA32_VMX_EPT_VPID_CAP[bit 32]</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void invvpid(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Invvpid_r32_m128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>invvpid instruction.<br/>
		/// <br/>
		/// <c>INVVPID r64, m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 81 /r</c><br/>
		/// <br/>
		/// <c>VMX and IA32_VMX_EPT_VPID_CAP[bit 32]</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void invvpid(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Invvpid_r64_m128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>iret instruction.<br/>
		/// <br/>
		/// <c>IRET</c><br/>
		/// <br/>
		/// <c>o16 CF</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void iret() {
			Code op;
			op = Code.Iretw;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>iretd instruction.<br/>
		/// <br/>
		/// <c>IRETD</c><br/>
		/// <br/>
		/// <c>o32 CF</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void iretd() {
			Code op;
			op = Code.Iretd;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>iretq instruction.<br/>
		/// <br/>
		/// <c>IRETQ</c><br/>
		/// <br/>
		/// <c>REX.W CF</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void iretq() {
			Code op;
			op = Code.Iretq;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>ja instruction.<br/>
		/// <br/>
		/// <c>JA rel8</c><br/>
		/// <br/>
		/// <c>77 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JA rel32</c><br/>
		/// <br/>
		/// <c>0F 87 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JA rel8</c><br/>
		/// <br/>
		/// <c>o32 77 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JA rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 87 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JA rel8</c><br/>
		/// <br/>
		/// <c>o16 77 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JA rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 87 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ja(Label dst) {
			Code op;
			if (PreferBranchShort) {
				if (Bitness == 64) {
					op = Code.Ja_rel8_64;
				} else op = Bitness >= 32 ? Code.Ja_rel8_32 : Code.Ja_rel8_16;
			} else if (Bitness == 64) {
				op = Code.Ja_rel32_64;
			} else op = Bitness >= 32 ? Code.Ja_rel32_32 : Code.Ja_rel16;
			AddInstruction(Instruction.CreateBranch(op, dst.Id));
		}
		/// <summary>ja instruction.<br/>
		/// <br/>
		/// <c>JA rel8</c><br/>
		/// <br/>
		/// <c>77 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JA rel32</c><br/>
		/// <br/>
		/// <c>0F 87 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JA rel8</c><br/>
		/// <br/>
		/// <c>o32 77 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JA rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 87 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JA rel8</c><br/>
		/// <br/>
		/// <c>o16 77 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JA rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 87 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ja(ulong dst) {
			Code op;
			if (PreferBranchShort) {
				if (Bitness == 64) {
					op = Code.Ja_rel8_64;
				} else op = Bitness >= 32 ? Code.Ja_rel8_32 : Code.Ja_rel8_16;
			} else if (Bitness == 64) {
				op = Code.Ja_rel32_64;
			} else op = Bitness >= 32 ? Code.Ja_rel32_32 : Code.Ja_rel16;
			AddInstruction(Instruction.CreateBranch(op, dst));
		}
		/// <summary>jae instruction.<br/>
		/// <br/>
		/// <c>JAE rel8</c><br/>
		/// <br/>
		/// <c>73 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JAE rel32</c><br/>
		/// <br/>
		/// <c>0F 83 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JAE rel8</c><br/>
		/// <br/>
		/// <c>o32 73 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JAE rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 83 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JAE rel8</c><br/>
		/// <br/>
		/// <c>o16 73 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JAE rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 83 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void jae(Label dst) {
			Code op;
			if (PreferBranchShort) {
				if (Bitness == 64) {
					op = Code.Jae_rel8_64;
				} else op = Bitness >= 32 ? Code.Jae_rel8_32 : Code.Jae_rel8_16;
			} else if (Bitness == 64) {
				op = Code.Jae_rel32_64;
			} else op = Bitness >= 32 ? Code.Jae_rel32_32 : Code.Jae_rel16;
			AddInstruction(Instruction.CreateBranch(op, dst.Id));
		}
		/// <summary>jae instruction.<br/>
		/// <br/>
		/// <c>JAE rel8</c><br/>
		/// <br/>
		/// <c>73 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JAE rel32</c><br/>
		/// <br/>
		/// <c>0F 83 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JAE rel8</c><br/>
		/// <br/>
		/// <c>o32 73 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JAE rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 83 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JAE rel8</c><br/>
		/// <br/>
		/// <c>o16 73 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JAE rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 83 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void jae(ulong dst) {
			Code op;
			if (PreferBranchShort) {
				if (Bitness == 64) {
					op = Code.Jae_rel8_64;
				} else op = Bitness >= 32 ? Code.Jae_rel8_32 : Code.Jae_rel8_16;
			} else if (Bitness == 64) {
				op = Code.Jae_rel32_64;
			} else op = Bitness >= 32 ? Code.Jae_rel32_32 : Code.Jae_rel16;
			AddInstruction(Instruction.CreateBranch(op, dst));
		}
		/// <summary>jb instruction.<br/>
		/// <br/>
		/// <c>JB rel8</c><br/>
		/// <br/>
		/// <c>72 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JB rel32</c><br/>
		/// <br/>
		/// <c>0F 82 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JB rel8</c><br/>
		/// <br/>
		/// <c>o32 72 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JB rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 82 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JB rel8</c><br/>
		/// <br/>
		/// <c>o16 72 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JB rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 82 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void jb(Label dst) {
			Code op;
			if (PreferBranchShort) {
				if (Bitness == 64) {
					op = Code.Jb_rel8_64;
				} else op = Bitness >= 32 ? Code.Jb_rel8_32 : Code.Jb_rel8_16;
			} else if (Bitness == 64) {
				op = Code.Jb_rel32_64;
			} else op = Bitness >= 32 ? Code.Jb_rel32_32 : Code.Jb_rel16;
			AddInstruction(Instruction.CreateBranch(op, dst.Id));
		}
		/// <summary>jb instruction.<br/>
		/// <br/>
		/// <c>JB rel8</c><br/>
		/// <br/>
		/// <c>72 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JB rel32</c><br/>
		/// <br/>
		/// <c>0F 82 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JB rel8</c><br/>
		/// <br/>
		/// <c>o32 72 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JB rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 82 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JB rel8</c><br/>
		/// <br/>
		/// <c>o16 72 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JB rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 82 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void jb(ulong dst) {
			Code op;
			if (PreferBranchShort) {
				if (Bitness == 64) {
					op = Code.Jb_rel8_64;
				} else op = Bitness >= 32 ? Code.Jb_rel8_32 : Code.Jb_rel8_16;
			} else if (Bitness == 64) {
				op = Code.Jb_rel32_64;
			} else op = Bitness >= 32 ? Code.Jb_rel32_32 : Code.Jb_rel16;
			AddInstruction(Instruction.CreateBranch(op, dst));
		}
		/// <summary>jbe instruction.<br/>
		/// <br/>
		/// <c>JBE rel8</c><br/>
		/// <br/>
		/// <c>76 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JBE rel32</c><br/>
		/// <br/>
		/// <c>0F 86 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JBE rel8</c><br/>
		/// <br/>
		/// <c>o32 76 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JBE rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 86 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JBE rel8</c><br/>
		/// <br/>
		/// <c>o16 76 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JBE rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 86 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void jbe(Label dst) {
			Code op;
			if (PreferBranchShort) {
				if (Bitness == 64) {
					op = Code.Jbe_rel8_64;
				} else op = Bitness >= 32 ? Code.Jbe_rel8_32 : Code.Jbe_rel8_16;
			} else if (Bitness == 64) {
				op = Code.Jbe_rel32_64;
			} else op = Bitness >= 32 ? Code.Jbe_rel32_32 : Code.Jbe_rel16;
			AddInstruction(Instruction.CreateBranch(op, dst.Id));
		}
		/// <summary>jbe instruction.<br/>
		/// <br/>
		/// <c>JBE rel8</c><br/>
		/// <br/>
		/// <c>76 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JBE rel32</c><br/>
		/// <br/>
		/// <c>0F 86 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JBE rel8</c><br/>
		/// <br/>
		/// <c>o32 76 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JBE rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 86 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JBE rel8</c><br/>
		/// <br/>
		/// <c>o16 76 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JBE rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 86 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void jbe(ulong dst) {
			Code op;
			if (PreferBranchShort) {
				if (Bitness == 64) {
					op = Code.Jbe_rel8_64;
				} else op = Bitness >= 32 ? Code.Jbe_rel8_32 : Code.Jbe_rel8_16;
			} else if (Bitness == 64) {
				op = Code.Jbe_rel32_64;
			} else op = Bitness >= 32 ? Code.Jbe_rel32_32 : Code.Jbe_rel16;
			AddInstruction(Instruction.CreateBranch(op, dst));
		}
		/// <summary>jcxz instruction.<br/>
		/// <br/>
		/// <c>JCXZ rel8</c><br/>
		/// <br/>
		/// <c>a16 o16 E3 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void jcxz(Label dst) {
			Code op;
			op = Code.Jcxz_rel8_16;
			AddInstruction(Instruction.CreateBranch(op, dst.Id));
		}
		/// <summary>jcxz instruction.<br/>
		/// <br/>
		/// <c>JCXZ rel8</c><br/>
		/// <br/>
		/// <c>a16 o16 E3 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void jcxz(ulong dst) {
			Code op;
			op = Code.Jcxz_rel8_16;
			AddInstruction(Instruction.CreateBranch(op, dst));
		}
		/// <summary>je instruction.<br/>
		/// <br/>
		/// <c>JE rel8</c><br/>
		/// <br/>
		/// <c>74 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JE rel32</c><br/>
		/// <br/>
		/// <c>0F 84 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JE rel8</c><br/>
		/// <br/>
		/// <c>o32 74 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JE rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 84 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JE rel8</c><br/>
		/// <br/>
		/// <c>o16 74 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JE rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 84 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void je(Label dst) {
			Code op;
			if (PreferBranchShort) {
				if (Bitness == 64) {
					op = Code.Je_rel8_64;
				} else op = Bitness >= 32 ? Code.Je_rel8_32 : Code.Je_rel8_16;
			} else if (Bitness == 64) {
				op = Code.Je_rel32_64;
			} else op = Bitness >= 32 ? Code.Je_rel32_32 : Code.Je_rel16;
			AddInstruction(Instruction.CreateBranch(op, dst.Id));
		}
		/// <summary>je instruction.<br/>
		/// <br/>
		/// <c>JE rel8</c><br/>
		/// <br/>
		/// <c>74 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JE rel32</c><br/>
		/// <br/>
		/// <c>0F 84 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JE rel8</c><br/>
		/// <br/>
		/// <c>o32 74 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JE rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 84 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JE rel8</c><br/>
		/// <br/>
		/// <c>o16 74 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JE rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 84 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void je(ulong dst) {
			Code op;
			if (PreferBranchShort) {
				if (Bitness == 64) {
					op = Code.Je_rel8_64;
				} else op = Bitness >= 32 ? Code.Je_rel8_32 : Code.Je_rel8_16;
			} else if (Bitness == 64) {
				op = Code.Je_rel32_64;
			} else op = Bitness >= 32 ? Code.Je_rel32_32 : Code.Je_rel16;
			AddInstruction(Instruction.CreateBranch(op, dst));
		}
		/// <summary>jecxz instruction.<br/>
		/// <br/>
		/// <c>JECXZ rel8</c><br/>
		/// <br/>
		/// <c>a32 o32 E3 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void jecxz(Label dst) {
			Code op;
			op = Code.Jecxz_rel8_32;
			AddInstruction(Instruction.CreateBranch(op, dst.Id));
		}
		/// <summary>jecxz instruction.<br/>
		/// <br/>
		/// <c>JECXZ rel8</c><br/>
		/// <br/>
		/// <c>a32 o32 E3 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void jecxz(ulong dst) {
			Code op;
			op = Code.Jecxz_rel8_32;
			AddInstruction(Instruction.CreateBranch(op, dst));
		}
		/// <summary>jg instruction.<br/>
		/// <br/>
		/// <c>JG rel8</c><br/>
		/// <br/>
		/// <c>7F cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JG rel32</c><br/>
		/// <br/>
		/// <c>0F 8F cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JG rel8</c><br/>
		/// <br/>
		/// <c>o32 7F cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JG rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 8F cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JG rel8</c><br/>
		/// <br/>
		/// <c>o16 7F cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JG rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 8F cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void jg(Label dst) {
			Code op;
			if (PreferBranchShort) {
				if (Bitness == 64) {
					op = Code.Jg_rel8_64;
				} else op = Bitness >= 32 ? Code.Jg_rel8_32 : Code.Jg_rel8_16;
			} else if (Bitness == 64) {
				op = Code.Jg_rel32_64;
			} else op = Bitness >= 32 ? Code.Jg_rel32_32 : Code.Jg_rel16;
			AddInstruction(Instruction.CreateBranch(op, dst.Id));
		}
		/// <summary>jg instruction.<br/>
		/// <br/>
		/// <c>JG rel8</c><br/>
		/// <br/>
		/// <c>7F cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JG rel32</c><br/>
		/// <br/>
		/// <c>0F 8F cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JG rel8</c><br/>
		/// <br/>
		/// <c>o32 7F cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JG rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 8F cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JG rel8</c><br/>
		/// <br/>
		/// <c>o16 7F cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JG rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 8F cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void jg(ulong dst) {
			Code op;
			if (PreferBranchShort) {
				if (Bitness == 64) {
					op = Code.Jg_rel8_64;
				} else op = Bitness >= 32 ? Code.Jg_rel8_32 : Code.Jg_rel8_16;
			} else if (Bitness == 64) {
				op = Code.Jg_rel32_64;
			} else op = Bitness >= 32 ? Code.Jg_rel32_32 : Code.Jg_rel16;
			AddInstruction(Instruction.CreateBranch(op, dst));
		}
		/// <summary>jge instruction.<br/>
		/// <br/>
		/// <c>JGE rel8</c><br/>
		/// <br/>
		/// <c>7D cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JGE rel32</c><br/>
		/// <br/>
		/// <c>0F 8D cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JGE rel8</c><br/>
		/// <br/>
		/// <c>o32 7D cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JGE rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 8D cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JGE rel8</c><br/>
		/// <br/>
		/// <c>o16 7D cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JGE rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 8D cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void jge(Label dst) {
			Code op;
			if (PreferBranchShort) {
				if (Bitness == 64) {
					op = Code.Jge_rel8_64;
				} else op = Bitness >= 32 ? Code.Jge_rel8_32 : Code.Jge_rel8_16;
			} else if (Bitness == 64) {
				op = Code.Jge_rel32_64;
			} else op = Bitness >= 32 ? Code.Jge_rel32_32 : Code.Jge_rel16;
			AddInstruction(Instruction.CreateBranch(op, dst.Id));
		}
		/// <summary>jge instruction.<br/>
		/// <br/>
		/// <c>JGE rel8</c><br/>
		/// <br/>
		/// <c>7D cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JGE rel32</c><br/>
		/// <br/>
		/// <c>0F 8D cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JGE rel8</c><br/>
		/// <br/>
		/// <c>o32 7D cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JGE rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 8D cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JGE rel8</c><br/>
		/// <br/>
		/// <c>o16 7D cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JGE rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 8D cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void jge(ulong dst) {
			Code op;
			if (PreferBranchShort) {
				if (Bitness == 64) {
					op = Code.Jge_rel8_64;
				} else op = Bitness >= 32 ? Code.Jge_rel8_32 : Code.Jge_rel8_16;
			} else if (Bitness == 64) {
				op = Code.Jge_rel32_64;
			} else op = Bitness >= 32 ? Code.Jge_rel32_32 : Code.Jge_rel16;
			AddInstruction(Instruction.CreateBranch(op, dst));
		}
		/// <summary>jl instruction.<br/>
		/// <br/>
		/// <c>JL rel8</c><br/>
		/// <br/>
		/// <c>7C cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JL rel32</c><br/>
		/// <br/>
		/// <c>0F 8C cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JL rel8</c><br/>
		/// <br/>
		/// <c>o32 7C cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JL rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 8C cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JL rel8</c><br/>
		/// <br/>
		/// <c>o16 7C cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JL rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 8C cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void jl(Label dst) {
			Code op;
			if (PreferBranchShort) {
				if (Bitness == 64) {
					op = Code.Jl_rel8_64;
				} else op = Bitness >= 32 ? Code.Jl_rel8_32 : Code.Jl_rel8_16;
			} else if (Bitness == 64) {
				op = Code.Jl_rel32_64;
			} else op = Bitness >= 32 ? Code.Jl_rel32_32 : Code.Jl_rel16;
			AddInstruction(Instruction.CreateBranch(op, dst.Id));
		}
		/// <summary>jl instruction.<br/>
		/// <br/>
		/// <c>JL rel8</c><br/>
		/// <br/>
		/// <c>7C cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JL rel32</c><br/>
		/// <br/>
		/// <c>0F 8C cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JL rel8</c><br/>
		/// <br/>
		/// <c>o32 7C cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JL rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 8C cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JL rel8</c><br/>
		/// <br/>
		/// <c>o16 7C cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JL rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 8C cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void jl(ulong dst) {
			Code op;
			if (PreferBranchShort) {
				if (Bitness == 64) {
					op = Code.Jl_rel8_64;
				} else op = Bitness >= 32 ? Code.Jl_rel8_32 : Code.Jl_rel8_16;
			} else if (Bitness == 64) {
				op = Code.Jl_rel32_64;
			} else op = Bitness >= 32 ? Code.Jl_rel32_32 : Code.Jl_rel16;
			AddInstruction(Instruction.CreateBranch(op, dst));
		}
		/// <summary>jle instruction.<br/>
		/// <br/>
		/// <c>JLE rel8</c><br/>
		/// <br/>
		/// <c>7E cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JLE rel32</c><br/>
		/// <br/>
		/// <c>0F 8E cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JLE rel8</c><br/>
		/// <br/>
		/// <c>o32 7E cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JLE rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 8E cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JLE rel8</c><br/>
		/// <br/>
		/// <c>o16 7E cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JLE rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 8E cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void jle(Label dst) {
			Code op;
			if (PreferBranchShort) {
				if (Bitness == 64) {
					op = Code.Jle_rel8_64;
				} else op = Bitness >= 32 ? Code.Jle_rel8_32 : Code.Jle_rel8_16;
			} else if (Bitness == 64) {
				op = Code.Jle_rel32_64;
			} else op = Bitness >= 32 ? Code.Jle_rel32_32 : Code.Jle_rel16;
			AddInstruction(Instruction.CreateBranch(op, dst.Id));
		}
		/// <summary>jle instruction.<br/>
		/// <br/>
		/// <c>JLE rel8</c><br/>
		/// <br/>
		/// <c>7E cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JLE rel32</c><br/>
		/// <br/>
		/// <c>0F 8E cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JLE rel8</c><br/>
		/// <br/>
		/// <c>o32 7E cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JLE rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 8E cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JLE rel8</c><br/>
		/// <br/>
		/// <c>o16 7E cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JLE rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 8E cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void jle(ulong dst) {
			Code op;
			if (PreferBranchShort) {
				if (Bitness == 64) {
					op = Code.Jle_rel8_64;
				} else op = Bitness >= 32 ? Code.Jle_rel8_32 : Code.Jle_rel8_16;
			} else if (Bitness == 64) {
				op = Code.Jle_rel32_64;
			} else op = Bitness >= 32 ? Code.Jle_rel32_32 : Code.Jle_rel16;
			AddInstruction(Instruction.CreateBranch(op, dst));
		}
		/// <summary>jmp instruction.<br/>
		/// <br/>
		/// <c>JMP r/m16</c><br/>
		/// <br/>
		/// <c>o16 FF /4</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void jmp(AssemblerRegister16 dst) {
			Code op;
			op = Code.Jmp_rm16;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>jmp instruction.<br/>
		/// <br/>
		/// <c>JMP r/m32</c><br/>
		/// <br/>
		/// <c>o32 FF /4</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void jmp(AssemblerRegister32 dst) {
			Code op;
			op = Code.Jmp_rm32;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>jmp instruction.<br/>
		/// <br/>
		/// <c>JMP r/m64</c><br/>
		/// <br/>
		/// <c>FF /4</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void jmp(AssemblerRegister64 dst) {
			Code op;
			op = Code.Jmp_rm64;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>jmp instruction.<br/>
		/// <br/>
		/// <c>JMP m16:64</c><br/>
		/// <br/>
		/// <c>REX.W FF /5</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JMP r/m64</c><br/>
		/// <br/>
		/// <c>FF /4</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JMP m16:32</c><br/>
		/// <br/>
		/// <c>o32 FF /5</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JMP r/m32</c><br/>
		/// <br/>
		/// <c>o32 FF /4</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JMP m16:16</c><br/>
		/// <br/>
		/// <c>o16 FF /5</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JMP r/m16</c><br/>
		/// <br/>
		/// <c>o16 FF /4</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void jmp(AssemblerMemoryOperand dst) {
			Code op;
			if (dst.Size == MemoryOperandSize.TwordPtr) {
				op = Code.Jmp_m1664;
			} else if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Jmp_rm64;
			} else if (dst.Size == MemoryOperandSize.FwordPtr) {
				op = Code.Jmp_m1632;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Bitness >= 32 ? Code.Jmp_rm32 : Code.Jmp_m1616;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Jmp_rm16;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Jmp, dst);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>jmp instruction.<br/>
		/// <br/>
		/// <c>JMP rel32</c><br/>
		/// <br/>
		/// <c>E9 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JMP rel8</c><br/>
		/// <br/>
		/// <c>EB cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JMP rel32</c><br/>
		/// <br/>
		/// <c>o32 E9 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JMP rel8</c><br/>
		/// <br/>
		/// <c>o32 EB cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JMP rel16</c><br/>
		/// <br/>
		/// <c>o16 E9 cw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JMP rel8</c><br/>
		/// <br/>
		/// <c>o16 EB cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void jmp(Label dst) {
			Code op;
			if (PreferBranchShort) {
				if (Bitness == 64) {
					op = Code.Jmp_rel8_64;
				} else op = Bitness >= 32 ? Code.Jmp_rel8_32 : Code.Jmp_rel8_16;
			} else if (Bitness == 64) {
				op = Code.Jmp_rel32_64;
			} else op = Bitness >= 32 ? Code.Jmp_rel32_32 : Code.Jmp_rel16;
			AddInstruction(Instruction.CreateBranch(op, dst.Id));
		}
		/// <summary>jmp instruction.<br/>
		/// <br/>
		/// <c>JMP rel32</c><br/>
		/// <br/>
		/// <c>E9 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JMP rel8</c><br/>
		/// <br/>
		/// <c>EB cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JMP rel32</c><br/>
		/// <br/>
		/// <c>o32 E9 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JMP rel8</c><br/>
		/// <br/>
		/// <c>o32 EB cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JMP rel16</c><br/>
		/// <br/>
		/// <c>o16 E9 cw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JMP rel8</c><br/>
		/// <br/>
		/// <c>o16 EB cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void jmp(ulong dst) {
			Code op;
			if (PreferBranchShort) {
				if (Bitness == 64) {
					op = Code.Jmp_rel8_64;
				} else op = Bitness >= 32 ? Code.Jmp_rel8_32 : Code.Jmp_rel8_16;
			} else if (Bitness == 64) {
				op = Code.Jmp_rel32_64;
			} else op = Bitness >= 32 ? Code.Jmp_rel32_32 : Code.Jmp_rel16;
			AddInstruction(Instruction.CreateBranch(op, dst));
		}
		/// <summary>jmpe instruction.<br/>
		/// <br/>
		/// <c>JMPE r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 00 /6</c><br/>
		/// <br/>
		/// <c>IA-64</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void jmpe(AssemblerRegister16 dst) {
			Code op;
			op = Code.Jmpe_rm16;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>jmpe instruction.<br/>
		/// <br/>
		/// <c>JMPE r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 00 /6</c><br/>
		/// <br/>
		/// <c>IA-64</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void jmpe(AssemblerRegister32 dst) {
			Code op;
			op = Code.Jmpe_rm32;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>jmpe instruction.<br/>
		/// <br/>
		/// <c>JMPE r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 00 /6</c><br/>
		/// <br/>
		/// <c>IA-64</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JMPE r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 00 /6</c><br/>
		/// <br/>
		/// <c>IA-64</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void jmpe(AssemblerMemoryOperand dst) {
			Code op;
			op = Bitness >= 32 ? Code.Jmpe_rm32 : Code.Jmpe_rm16;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>jmpe instruction.<br/>
		/// <br/>
		/// <c>JMPE disp32</c><br/>
		/// <br/>
		/// <c>o32 0F B8 cd</c><br/>
		/// <br/>
		/// <c>IA-64</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JMPE disp16</c><br/>
		/// <br/>
		/// <c>o16 0F B8 cw</c><br/>
		/// <br/>
		/// <c>IA-64</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void jmpe(Label dst) {
			Code op;
			op = Bitness >= 32 ? Code.Jmpe_disp32 : Code.Jmpe_disp16;
			AddInstruction(Instruction.CreateBranch(op, dst.Id));
		}
		/// <summary>jmpe instruction.<br/>
		/// <br/>
		/// <c>JMPE disp32</c><br/>
		/// <br/>
		/// <c>o32 0F B8 cd</c><br/>
		/// <br/>
		/// <c>IA-64</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JMPE disp16</c><br/>
		/// <br/>
		/// <c>o16 0F B8 cw</c><br/>
		/// <br/>
		/// <c>IA-64</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void jmpe(ulong dst) {
			Code op;
			op = Bitness >= 32 ? Code.Jmpe_disp32 : Code.Jmpe_disp16;
			AddInstruction(Instruction.CreateBranch(op, dst));
		}
		/// <summary>jne instruction.<br/>
		/// <br/>
		/// <c>JNE rel8</c><br/>
		/// <br/>
		/// <c>75 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JNE rel32</c><br/>
		/// <br/>
		/// <c>0F 85 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JNE rel8</c><br/>
		/// <br/>
		/// <c>o32 75 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JNE rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 85 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JNE rel8</c><br/>
		/// <br/>
		/// <c>o16 75 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JNE rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 85 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void jne(Label dst) {
			Code op;
			if (PreferBranchShort) {
				if (Bitness == 64) {
					op = Code.Jne_rel8_64;
				} else op = Bitness >= 32 ? Code.Jne_rel8_32 : Code.Jne_rel8_16;
			} else if (Bitness == 64) {
				op = Code.Jne_rel32_64;
			} else op = Bitness >= 32 ? Code.Jne_rel32_32 : Code.Jne_rel16;
			AddInstruction(Instruction.CreateBranch(op, dst.Id));
		}
		/// <summary>jne instruction.<br/>
		/// <br/>
		/// <c>JNE rel8</c><br/>
		/// <br/>
		/// <c>75 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JNE rel32</c><br/>
		/// <br/>
		/// <c>0F 85 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JNE rel8</c><br/>
		/// <br/>
		/// <c>o32 75 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JNE rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 85 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JNE rel8</c><br/>
		/// <br/>
		/// <c>o16 75 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JNE rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 85 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void jne(ulong dst) {
			Code op;
			if (PreferBranchShort) {
				if (Bitness == 64) {
					op = Code.Jne_rel8_64;
				} else op = Bitness >= 32 ? Code.Jne_rel8_32 : Code.Jne_rel8_16;
			} else if (Bitness == 64) {
				op = Code.Jne_rel32_64;
			} else op = Bitness >= 32 ? Code.Jne_rel32_32 : Code.Jne_rel16;
			AddInstruction(Instruction.CreateBranch(op, dst));
		}
		/// <summary>jno instruction.<br/>
		/// <br/>
		/// <c>JNO rel8</c><br/>
		/// <br/>
		/// <c>71 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JNO rel32</c><br/>
		/// <br/>
		/// <c>0F 81 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JNO rel8</c><br/>
		/// <br/>
		/// <c>o32 71 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JNO rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 81 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JNO rel8</c><br/>
		/// <br/>
		/// <c>o16 71 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JNO rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 81 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void jno(Label dst) {
			Code op;
			if (PreferBranchShort) {
				if (Bitness == 64) {
					op = Code.Jno_rel8_64;
				} else op = Bitness >= 32 ? Code.Jno_rel8_32 : Code.Jno_rel8_16;
			} else if (Bitness == 64) {
				op = Code.Jno_rel32_64;
			} else op = Bitness >= 32 ? Code.Jno_rel32_32 : Code.Jno_rel16;
			AddInstruction(Instruction.CreateBranch(op, dst.Id));
		}
		/// <summary>jno instruction.<br/>
		/// <br/>
		/// <c>JNO rel8</c><br/>
		/// <br/>
		/// <c>71 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JNO rel32</c><br/>
		/// <br/>
		/// <c>0F 81 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JNO rel8</c><br/>
		/// <br/>
		/// <c>o32 71 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JNO rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 81 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JNO rel8</c><br/>
		/// <br/>
		/// <c>o16 71 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JNO rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 81 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void jno(ulong dst) {
			Code op;
			if (PreferBranchShort) {
				if (Bitness == 64) {
					op = Code.Jno_rel8_64;
				} else op = Bitness >= 32 ? Code.Jno_rel8_32 : Code.Jno_rel8_16;
			} else if (Bitness == 64) {
				op = Code.Jno_rel32_64;
			} else op = Bitness >= 32 ? Code.Jno_rel32_32 : Code.Jno_rel16;
			AddInstruction(Instruction.CreateBranch(op, dst));
		}
		/// <summary>jnp instruction.<br/>
		/// <br/>
		/// <c>JNP rel8</c><br/>
		/// <br/>
		/// <c>7B cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JNP rel32</c><br/>
		/// <br/>
		/// <c>0F 8B cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JNP rel8</c><br/>
		/// <br/>
		/// <c>o32 7B cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JNP rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 8B cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JNP rel8</c><br/>
		/// <br/>
		/// <c>o16 7B cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JNP rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 8B cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void jnp(Label dst) {
			Code op;
			if (PreferBranchShort) {
				if (Bitness == 64) {
					op = Code.Jnp_rel8_64;
				} else op = Bitness >= 32 ? Code.Jnp_rel8_32 : Code.Jnp_rel8_16;
			} else if (Bitness == 64) {
				op = Code.Jnp_rel32_64;
			} else op = Bitness >= 32 ? Code.Jnp_rel32_32 : Code.Jnp_rel16;
			AddInstruction(Instruction.CreateBranch(op, dst.Id));
		}
		/// <summary>jnp instruction.<br/>
		/// <br/>
		/// <c>JNP rel8</c><br/>
		/// <br/>
		/// <c>7B cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JNP rel32</c><br/>
		/// <br/>
		/// <c>0F 8B cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JNP rel8</c><br/>
		/// <br/>
		/// <c>o32 7B cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JNP rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 8B cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JNP rel8</c><br/>
		/// <br/>
		/// <c>o16 7B cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JNP rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 8B cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void jnp(ulong dst) {
			Code op;
			if (PreferBranchShort) {
				if (Bitness == 64) {
					op = Code.Jnp_rel8_64;
				} else op = Bitness >= 32 ? Code.Jnp_rel8_32 : Code.Jnp_rel8_16;
			} else if (Bitness == 64) {
				op = Code.Jnp_rel32_64;
			} else op = Bitness >= 32 ? Code.Jnp_rel32_32 : Code.Jnp_rel16;
			AddInstruction(Instruction.CreateBranch(op, dst));
		}
		/// <summary>jns instruction.<br/>
		/// <br/>
		/// <c>JNS rel8</c><br/>
		/// <br/>
		/// <c>79 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JNS rel32</c><br/>
		/// <br/>
		/// <c>0F 89 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JNS rel8</c><br/>
		/// <br/>
		/// <c>o32 79 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JNS rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 89 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JNS rel8</c><br/>
		/// <br/>
		/// <c>o16 79 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JNS rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 89 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void jns(Label dst) {
			Code op;
			if (PreferBranchShort) {
				if (Bitness == 64) {
					op = Code.Jns_rel8_64;
				} else op = Bitness >= 32 ? Code.Jns_rel8_32 : Code.Jns_rel8_16;
			} else if (Bitness == 64) {
				op = Code.Jns_rel32_64;
			} else op = Bitness >= 32 ? Code.Jns_rel32_32 : Code.Jns_rel16;
			AddInstruction(Instruction.CreateBranch(op, dst.Id));
		}
		/// <summary>jns instruction.<br/>
		/// <br/>
		/// <c>JNS rel8</c><br/>
		/// <br/>
		/// <c>79 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JNS rel32</c><br/>
		/// <br/>
		/// <c>0F 89 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JNS rel8</c><br/>
		/// <br/>
		/// <c>o32 79 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JNS rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 89 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JNS rel8</c><br/>
		/// <br/>
		/// <c>o16 79 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JNS rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 89 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void jns(ulong dst) {
			Code op;
			if (PreferBranchShort) {
				if (Bitness == 64) {
					op = Code.Jns_rel8_64;
				} else op = Bitness >= 32 ? Code.Jns_rel8_32 : Code.Jns_rel8_16;
			} else if (Bitness == 64) {
				op = Code.Jns_rel32_64;
			} else op = Bitness >= 32 ? Code.Jns_rel32_32 : Code.Jns_rel16;
			AddInstruction(Instruction.CreateBranch(op, dst));
		}
		/// <summary>jo instruction.<br/>
		/// <br/>
		/// <c>JO rel8</c><br/>
		/// <br/>
		/// <c>70 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JO rel32</c><br/>
		/// <br/>
		/// <c>0F 80 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JO rel8</c><br/>
		/// <br/>
		/// <c>o32 70 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JO rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 80 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JO rel8</c><br/>
		/// <br/>
		/// <c>o16 70 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JO rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 80 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void jo(Label dst) {
			Code op;
			if (PreferBranchShort) {
				if (Bitness == 64) {
					op = Code.Jo_rel8_64;
				} else op = Bitness >= 32 ? Code.Jo_rel8_32 : Code.Jo_rel8_16;
			} else if (Bitness == 64) {
				op = Code.Jo_rel32_64;
			} else op = Bitness >= 32 ? Code.Jo_rel32_32 : Code.Jo_rel16;
			AddInstruction(Instruction.CreateBranch(op, dst.Id));
		}
		/// <summary>jo instruction.<br/>
		/// <br/>
		/// <c>JO rel8</c><br/>
		/// <br/>
		/// <c>70 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JO rel32</c><br/>
		/// <br/>
		/// <c>0F 80 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JO rel8</c><br/>
		/// <br/>
		/// <c>o32 70 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JO rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 80 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JO rel8</c><br/>
		/// <br/>
		/// <c>o16 70 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JO rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 80 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void jo(ulong dst) {
			Code op;
			if (PreferBranchShort) {
				if (Bitness == 64) {
					op = Code.Jo_rel8_64;
				} else op = Bitness >= 32 ? Code.Jo_rel8_32 : Code.Jo_rel8_16;
			} else if (Bitness == 64) {
				op = Code.Jo_rel32_64;
			} else op = Bitness >= 32 ? Code.Jo_rel32_32 : Code.Jo_rel16;
			AddInstruction(Instruction.CreateBranch(op, dst));
		}
		/// <summary>jp instruction.<br/>
		/// <br/>
		/// <c>JP rel8</c><br/>
		/// <br/>
		/// <c>7A cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JP rel32</c><br/>
		/// <br/>
		/// <c>0F 8A cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JP rel8</c><br/>
		/// <br/>
		/// <c>o32 7A cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JP rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 8A cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JP rel8</c><br/>
		/// <br/>
		/// <c>o16 7A cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JP rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 8A cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void jp(Label dst) {
			Code op;
			if (PreferBranchShort) {
				if (Bitness == 64) {
					op = Code.Jp_rel8_64;
				} else op = Bitness >= 32 ? Code.Jp_rel8_32 : Code.Jp_rel8_16;
			} else if (Bitness == 64) {
				op = Code.Jp_rel32_64;
			} else op = Bitness >= 32 ? Code.Jp_rel32_32 : Code.Jp_rel16;
			AddInstruction(Instruction.CreateBranch(op, dst.Id));
		}
		/// <summary>jp instruction.<br/>
		/// <br/>
		/// <c>JP rel8</c><br/>
		/// <br/>
		/// <c>7A cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JP rel32</c><br/>
		/// <br/>
		/// <c>0F 8A cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JP rel8</c><br/>
		/// <br/>
		/// <c>o32 7A cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JP rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 8A cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JP rel8</c><br/>
		/// <br/>
		/// <c>o16 7A cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JP rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 8A cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void jp(ulong dst) {
			Code op;
			if (PreferBranchShort) {
				if (Bitness == 64) {
					op = Code.Jp_rel8_64;
				} else op = Bitness >= 32 ? Code.Jp_rel8_32 : Code.Jp_rel8_16;
			} else if (Bitness == 64) {
				op = Code.Jp_rel32_64;
			} else op = Bitness >= 32 ? Code.Jp_rel32_32 : Code.Jp_rel16;
			AddInstruction(Instruction.CreateBranch(op, dst));
		}
		/// <summary>jrcxz instruction.<br/>
		/// <br/>
		/// <c>JRCXZ rel8</c><br/>
		/// <br/>
		/// <c>E3 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void jrcxz(Label dst) {
			Code op;
			op = Code.Jrcxz_rel8_64;
			AddInstruction(Instruction.CreateBranch(op, dst.Id));
		}
		/// <summary>jrcxz instruction.<br/>
		/// <br/>
		/// <c>JRCXZ rel8</c><br/>
		/// <br/>
		/// <c>E3 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void jrcxz(ulong dst) {
			Code op;
			op = Code.Jrcxz_rel8_64;
			AddInstruction(Instruction.CreateBranch(op, dst));
		}
		/// <summary>js instruction.<br/>
		/// <br/>
		/// <c>JS rel8</c><br/>
		/// <br/>
		/// <c>78 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JS rel32</c><br/>
		/// <br/>
		/// <c>0F 88 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JS rel8</c><br/>
		/// <br/>
		/// <c>o32 78 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JS rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 88 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JS rel8</c><br/>
		/// <br/>
		/// <c>o16 78 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JS rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 88 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void js(Label dst) {
			Code op;
			if (PreferBranchShort) {
				if (Bitness == 64) {
					op = Code.Js_rel8_64;
				} else op = Bitness >= 32 ? Code.Js_rel8_32 : Code.Js_rel8_16;
			} else if (Bitness == 64) {
				op = Code.Js_rel32_64;
			} else op = Bitness >= 32 ? Code.Js_rel32_32 : Code.Js_rel16;
			AddInstruction(Instruction.CreateBranch(op, dst.Id));
		}
		/// <summary>js instruction.<br/>
		/// <br/>
		/// <c>JS rel8</c><br/>
		/// <br/>
		/// <c>78 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JS rel32</c><br/>
		/// <br/>
		/// <c>0F 88 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JS rel8</c><br/>
		/// <br/>
		/// <c>o32 78 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JS rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 88 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JS rel8</c><br/>
		/// <br/>
		/// <c>o16 78 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JS rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 88 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void js(ulong dst) {
			Code op;
			if (PreferBranchShort) {
				if (Bitness == 64) {
					op = Code.Js_rel8_64;
				} else op = Bitness >= 32 ? Code.Js_rel8_32 : Code.Js_rel8_16;
			} else if (Bitness == 64) {
				op = Code.Js_rel32_64;
			} else op = Bitness >= 32 ? Code.Js_rel32_32 : Code.Js_rel16;
			AddInstruction(Instruction.CreateBranch(op, dst));
		}
		/// <summary>kaddb instruction.<br/>
		/// <br/>
		/// <c>KADDB k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.66.0F.W0 4A /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kaddb(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2) {
			Code op;
			op = Code.VEX_Kaddb_kr_kr_kr;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>kaddd instruction.<br/>
		/// <br/>
		/// <c>KADDD k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.66.0F.W1 4A /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kaddd(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2) {
			Code op;
			op = Code.VEX_Kaddd_kr_kr_kr;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>kaddq instruction.<br/>
		/// <br/>
		/// <c>KADDQ k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.0F.W1 4A /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kaddq(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2) {
			Code op;
			op = Code.VEX_Kaddq_kr_kr_kr;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>kaddw instruction.<br/>
		/// <br/>
		/// <c>KADDW k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.0F.W0 4A /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kaddw(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2) {
			Code op;
			op = Code.VEX_Kaddw_kr_kr_kr;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>kandb instruction.<br/>
		/// <br/>
		/// <c>KANDB k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.66.0F.W0 41 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kandb(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2) {
			Code op;
			op = Code.VEX_Kandb_kr_kr_kr;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>kandd instruction.<br/>
		/// <br/>
		/// <c>KANDD k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.66.0F.W1 41 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kandd(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2) {
			Code op;
			op = Code.VEX_Kandd_kr_kr_kr;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>kandnb instruction.<br/>
		/// <br/>
		/// <c>KANDNB k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.66.0F.W0 42 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kandnb(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2) {
			Code op;
			op = Code.VEX_Kandnb_kr_kr_kr;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>kandnd instruction.<br/>
		/// <br/>
		/// <c>KANDND k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.66.0F.W1 42 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kandnd(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2) {
			Code op;
			op = Code.VEX_Kandnd_kr_kr_kr;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>kandnq instruction.<br/>
		/// <br/>
		/// <c>KANDNQ k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.0F.W1 42 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kandnq(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2) {
			Code op;
			op = Code.VEX_Kandnq_kr_kr_kr;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>kandnw instruction.<br/>
		/// <br/>
		/// <c>KANDNW k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.0F.W0 42 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kandnw(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2) {
			Code op;
			op = Code.VEX_Kandnw_kr_kr_kr;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>kandq instruction.<br/>
		/// <br/>
		/// <c>KANDQ k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.0F.W1 41 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kandq(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2) {
			Code op;
			op = Code.VEX_Kandq_kr_kr_kr;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>kandw instruction.<br/>
		/// <br/>
		/// <c>KANDW k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.0F.W0 41 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kandw(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2) {
			Code op;
			op = Code.VEX_Kandw_kr_kr_kr;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>kmovb instruction.<br/>
		/// <br/>
		/// <c>KMOVB k1, r32</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F.W0 92 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kmovb(AssemblerRegisterK dst, AssemblerRegister32 src) {
			Code op;
			op = Code.VEX_Kmovb_kr_r32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>kmovb instruction.<br/>
		/// <br/>
		/// <c>KMOVB r32, k1</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F.W0 93 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kmovb(AssemblerRegister32 dst, AssemblerRegisterK src) {
			Code op;
			op = Code.VEX_Kmovb_r32_kr;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>kmovb instruction.<br/>
		/// <br/>
		/// <c>KMOVB k1, k2/m8</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F.W0 90 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kmovb(AssemblerRegisterK dst, AssemblerRegisterK src) {
			Code op;
			op = Code.VEX_Kmovb_kr_km8;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>kmovb instruction.<br/>
		/// <br/>
		/// <c>KMOVB m8, k1</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F.W0 91 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kmovb(AssemblerMemoryOperand dst, AssemblerRegisterK src) {
			Code op;
			op = Code.VEX_Kmovb_m8_kr;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>kmovb instruction.<br/>
		/// <br/>
		/// <c>KMOVB k1, k2/m8</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F.W0 90 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kmovb(AssemblerRegisterK dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.VEX_Kmovb_kr_km8;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>kmovd instruction.<br/>
		/// <br/>
		/// <c>KMOVD k1, r32</c><br/>
		/// <br/>
		/// <c>VEX.L0.F2.0F.W0 92 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kmovd(AssemblerRegisterK dst, AssemblerRegister32 src) {
			Code op;
			op = Code.VEX_Kmovd_kr_r32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>kmovd instruction.<br/>
		/// <br/>
		/// <c>KMOVD r32, k1</c><br/>
		/// <br/>
		/// <c>VEX.L0.F2.0F.W0 93 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kmovd(AssemblerRegister32 dst, AssemblerRegisterK src) {
			Code op;
			op = Code.VEX_Kmovd_r32_kr;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>kmovd instruction.<br/>
		/// <br/>
		/// <c>KMOVD k1, k2/m32</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F.W1 90 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kmovd(AssemblerRegisterK dst, AssemblerRegisterK src) {
			Code op;
			op = Code.VEX_Kmovd_kr_km32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>kmovd instruction.<br/>
		/// <br/>
		/// <c>KMOVD m32, k1</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F.W1 91 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kmovd(AssemblerMemoryOperand dst, AssemblerRegisterK src) {
			Code op;
			op = Code.VEX_Kmovd_m32_kr;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>kmovd instruction.<br/>
		/// <br/>
		/// <c>KMOVD k1, k2/m32</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F.W1 90 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kmovd(AssemblerRegisterK dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.VEX_Kmovd_kr_km32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>kmovq instruction.<br/>
		/// <br/>
		/// <c>KMOVQ k1, r64</c><br/>
		/// <br/>
		/// <c>VEX.L0.F2.0F.W1 92 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void kmovq(AssemblerRegisterK dst, AssemblerRegister64 src) {
			Code op;
			op = Code.VEX_Kmovq_kr_r64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>kmovq instruction.<br/>
		/// <br/>
		/// <c>KMOVQ r64, k1</c><br/>
		/// <br/>
		/// <c>VEX.L0.F2.0F.W1 93 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void kmovq(AssemblerRegister64 dst, AssemblerRegisterK src) {
			Code op;
			op = Code.VEX_Kmovq_r64_kr;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>kmovq instruction.<br/>
		/// <br/>
		/// <c>KMOVQ k1, k2/m64</c><br/>
		/// <br/>
		/// <c>VEX.L0.0F.W1 90 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kmovq(AssemblerRegisterK dst, AssemblerRegisterK src) {
			Code op;
			op = Code.VEX_Kmovq_kr_km64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>kmovq instruction.<br/>
		/// <br/>
		/// <c>KMOVQ m64, k1</c><br/>
		/// <br/>
		/// <c>VEX.L0.0F.W1 91 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kmovq(AssemblerMemoryOperand dst, AssemblerRegisterK src) {
			Code op;
			op = Code.VEX_Kmovq_m64_kr;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>kmovq instruction.<br/>
		/// <br/>
		/// <c>KMOVQ k1, k2/m64</c><br/>
		/// <br/>
		/// <c>VEX.L0.0F.W1 90 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kmovq(AssemblerRegisterK dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.VEX_Kmovq_kr_km64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>kmovw instruction.<br/>
		/// <br/>
		/// <c>KMOVW k1, r32</c><br/>
		/// <br/>
		/// <c>VEX.L0.0F.W0 92 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kmovw(AssemblerRegisterK dst, AssemblerRegister32 src) {
			Code op;
			op = Code.VEX_Kmovw_kr_r32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>kmovw instruction.<br/>
		/// <br/>
		/// <c>KMOVW r32, k1</c><br/>
		/// <br/>
		/// <c>VEX.L0.0F.W0 93 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kmovw(AssemblerRegister32 dst, AssemblerRegisterK src) {
			Code op;
			op = Code.VEX_Kmovw_r32_kr;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>kmovw instruction.<br/>
		/// <br/>
		/// <c>KMOVW k1, k2/m16</c><br/>
		/// <br/>
		/// <c>VEX.L0.0F.W0 90 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kmovw(AssemblerRegisterK dst, AssemblerRegisterK src) {
			Code op;
			op = Code.VEX_Kmovw_kr_km16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>kmovw instruction.<br/>
		/// <br/>
		/// <c>KMOVW m16, k1</c><br/>
		/// <br/>
		/// <c>VEX.L0.0F.W0 91 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kmovw(AssemblerMemoryOperand dst, AssemblerRegisterK src) {
			Code op;
			op = Code.VEX_Kmovw_m16_kr;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>kmovw instruction.<br/>
		/// <br/>
		/// <c>KMOVW k1, k2/m16</c><br/>
		/// <br/>
		/// <c>VEX.L0.0F.W0 90 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kmovw(AssemblerRegisterK dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.VEX_Kmovw_kr_km16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>knotb instruction.<br/>
		/// <br/>
		/// <c>KNOTB k1, k2</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F.W0 44 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void knotb(AssemblerRegisterK dst, AssemblerRegisterK src) {
			Code op;
			op = Code.VEX_Knotb_kr_kr;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>knotd instruction.<br/>
		/// <br/>
		/// <c>KNOTD k1, k2</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F.W1 44 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void knotd(AssemblerRegisterK dst, AssemblerRegisterK src) {
			Code op;
			op = Code.VEX_Knotd_kr_kr;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>knotq instruction.<br/>
		/// <br/>
		/// <c>KNOTQ k1, k2</c><br/>
		/// <br/>
		/// <c>VEX.L0.0F.W1 44 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void knotq(AssemblerRegisterK dst, AssemblerRegisterK src) {
			Code op;
			op = Code.VEX_Knotq_kr_kr;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>knotw instruction.<br/>
		/// <br/>
		/// <c>KNOTW k1, k2</c><br/>
		/// <br/>
		/// <c>VEX.L0.0F.W0 44 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void knotw(AssemblerRegisterK dst, AssemblerRegisterK src) {
			Code op;
			op = Code.VEX_Knotw_kr_kr;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>korb instruction.<br/>
		/// <br/>
		/// <c>KORB k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.66.0F.W0 45 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void korb(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2) {
			Code op;
			op = Code.VEX_Korb_kr_kr_kr;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>kord instruction.<br/>
		/// <br/>
		/// <c>KORD k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.66.0F.W1 45 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kord(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2) {
			Code op;
			op = Code.VEX_Kord_kr_kr_kr;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>korq instruction.<br/>
		/// <br/>
		/// <c>KORQ k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.0F.W1 45 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void korq(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2) {
			Code op;
			op = Code.VEX_Korq_kr_kr_kr;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>kortestb instruction.<br/>
		/// <br/>
		/// <c>KORTESTB k1, k2</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F.W0 98 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kortestb(AssemblerRegisterK dst, AssemblerRegisterK src) {
			Code op;
			op = Code.VEX_Kortestb_kr_kr;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>kortestd instruction.<br/>
		/// <br/>
		/// <c>KORTESTD k1, k2</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F.W1 98 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kortestd(AssemblerRegisterK dst, AssemblerRegisterK src) {
			Code op;
			op = Code.VEX_Kortestd_kr_kr;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>kortestq instruction.<br/>
		/// <br/>
		/// <c>KORTESTQ k1, k2</c><br/>
		/// <br/>
		/// <c>VEX.L0.0F.W1 98 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kortestq(AssemblerRegisterK dst, AssemblerRegisterK src) {
			Code op;
			op = Code.VEX_Kortestq_kr_kr;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>kortestw instruction.<br/>
		/// <br/>
		/// <c>KORTESTW k1, k2</c><br/>
		/// <br/>
		/// <c>VEX.L0.0F.W0 98 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kortestw(AssemblerRegisterK dst, AssemblerRegisterK src) {
			Code op;
			op = Code.VEX_Kortestw_kr_kr;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>korw instruction.<br/>
		/// <br/>
		/// <c>KORW k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.0F.W0 45 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void korw(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2) {
			Code op;
			op = Code.VEX_Korw_kr_kr_kr;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>kshiftlb instruction.<br/>
		/// <br/>
		/// <c>KSHIFTLB k1, k2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F3A.W0 32 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kshiftlb(AssemblerRegisterK dst, AssemblerRegisterK src1, sbyte imm) {
			Code op;
			op = Code.VEX_Kshiftlb_kr_kr_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>kshiftlb instruction.<br/>
		/// <br/>
		/// <c>KSHIFTLB k1, k2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F3A.W0 32 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kshiftlb(AssemblerRegisterK dst, AssemblerRegisterK src1, byte imm) {
			Code op;
			op = Code.VEX_Kshiftlb_kr_kr_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>kshiftld instruction.<br/>
		/// <br/>
		/// <c>KSHIFTLD k1, k2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F3A.W0 33 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kshiftld(AssemblerRegisterK dst, AssemblerRegisterK src1, sbyte imm) {
			Code op;
			op = Code.VEX_Kshiftld_kr_kr_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>kshiftld instruction.<br/>
		/// <br/>
		/// <c>KSHIFTLD k1, k2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F3A.W0 33 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kshiftld(AssemblerRegisterK dst, AssemblerRegisterK src1, byte imm) {
			Code op;
			op = Code.VEX_Kshiftld_kr_kr_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>kshiftlq instruction.<br/>
		/// <br/>
		/// <c>KSHIFTLQ k1, k2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F3A.W1 33 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kshiftlq(AssemblerRegisterK dst, AssemblerRegisterK src1, sbyte imm) {
			Code op;
			op = Code.VEX_Kshiftlq_kr_kr_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>kshiftlq instruction.<br/>
		/// <br/>
		/// <c>KSHIFTLQ k1, k2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F3A.W1 33 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kshiftlq(AssemblerRegisterK dst, AssemblerRegisterK src1, byte imm) {
			Code op;
			op = Code.VEX_Kshiftlq_kr_kr_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>kshiftlw instruction.<br/>
		/// <br/>
		/// <c>KSHIFTLW k1, k2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F3A.W1 32 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kshiftlw(AssemblerRegisterK dst, AssemblerRegisterK src1, sbyte imm) {
			Code op;
			op = Code.VEX_Kshiftlw_kr_kr_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>kshiftlw instruction.<br/>
		/// <br/>
		/// <c>KSHIFTLW k1, k2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F3A.W1 32 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kshiftlw(AssemblerRegisterK dst, AssemblerRegisterK src1, byte imm) {
			Code op;
			op = Code.VEX_Kshiftlw_kr_kr_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>kshiftrb instruction.<br/>
		/// <br/>
		/// <c>KSHIFTRB k1, k2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F3A.W0 30 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kshiftrb(AssemblerRegisterK dst, AssemblerRegisterK src1, sbyte imm) {
			Code op;
			op = Code.VEX_Kshiftrb_kr_kr_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>kshiftrb instruction.<br/>
		/// <br/>
		/// <c>KSHIFTRB k1, k2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F3A.W0 30 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kshiftrb(AssemblerRegisterK dst, AssemblerRegisterK src1, byte imm) {
			Code op;
			op = Code.VEX_Kshiftrb_kr_kr_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>kshiftrd instruction.<br/>
		/// <br/>
		/// <c>KSHIFTRD k1, k2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F3A.W0 31 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kshiftrd(AssemblerRegisterK dst, AssemblerRegisterK src1, sbyte imm) {
			Code op;
			op = Code.VEX_Kshiftrd_kr_kr_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>kshiftrd instruction.<br/>
		/// <br/>
		/// <c>KSHIFTRD k1, k2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F3A.W0 31 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kshiftrd(AssemblerRegisterK dst, AssemblerRegisterK src1, byte imm) {
			Code op;
			op = Code.VEX_Kshiftrd_kr_kr_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>kshiftrq instruction.<br/>
		/// <br/>
		/// <c>KSHIFTRQ k1, k2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F3A.W1 31 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kshiftrq(AssemblerRegisterK dst, AssemblerRegisterK src1, sbyte imm) {
			Code op;
			op = Code.VEX_Kshiftrq_kr_kr_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>kshiftrq instruction.<br/>
		/// <br/>
		/// <c>KSHIFTRQ k1, k2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F3A.W1 31 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kshiftrq(AssemblerRegisterK dst, AssemblerRegisterK src1, byte imm) {
			Code op;
			op = Code.VEX_Kshiftrq_kr_kr_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>kshiftrw instruction.<br/>
		/// <br/>
		/// <c>KSHIFTRW k1, k2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F3A.W1 30 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kshiftrw(AssemblerRegisterK dst, AssemblerRegisterK src1, sbyte imm) {
			Code op;
			op = Code.VEX_Kshiftrw_kr_kr_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>kshiftrw instruction.<br/>
		/// <br/>
		/// <c>KSHIFTRW k1, k2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F3A.W1 30 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kshiftrw(AssemblerRegisterK dst, AssemblerRegisterK src1, byte imm) {
			Code op;
			op = Code.VEX_Kshiftrw_kr_kr_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>ktestb instruction.<br/>
		/// <br/>
		/// <c>KTESTB k1, k2</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F.W0 99 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ktestb(AssemblerRegisterK dst, AssemblerRegisterK src) {
			Code op;
			op = Code.VEX_Ktestb_kr_kr;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>ktestd instruction.<br/>
		/// <br/>
		/// <c>KTESTD k1, k2</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F.W1 99 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ktestd(AssemblerRegisterK dst, AssemblerRegisterK src) {
			Code op;
			op = Code.VEX_Ktestd_kr_kr;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>ktestq instruction.<br/>
		/// <br/>
		/// <c>KTESTQ k1, k2</c><br/>
		/// <br/>
		/// <c>VEX.L0.0F.W1 99 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ktestq(AssemblerRegisterK dst, AssemblerRegisterK src) {
			Code op;
			op = Code.VEX_Ktestq_kr_kr;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>ktestw instruction.<br/>
		/// <br/>
		/// <c>KTESTW k1, k2</c><br/>
		/// <br/>
		/// <c>VEX.L0.0F.W0 99 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ktestw(AssemblerRegisterK dst, AssemblerRegisterK src) {
			Code op;
			op = Code.VEX_Ktestw_kr_kr;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>kunpckbw instruction.<br/>
		/// <br/>
		/// <c>KUNPCKBW k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.66.0F.W0 4B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kunpckbw(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2) {
			Code op;
			op = Code.VEX_Kunpckbw_kr_kr_kr;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>kunpckdq instruction.<br/>
		/// <br/>
		/// <c>KUNPCKDQ k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.0F.W1 4B /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kunpckdq(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2) {
			Code op;
			op = Code.VEX_Kunpckdq_kr_kr_kr;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>kunpckwd instruction.<br/>
		/// <br/>
		/// <c>KUNPCKWD k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.0F.W0 4B /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kunpckwd(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2) {
			Code op;
			op = Code.VEX_Kunpckwd_kr_kr_kr;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>kxnorb instruction.<br/>
		/// <br/>
		/// <c>KXNORB k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.66.0F.W0 46 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kxnorb(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2) {
			Code op;
			op = Code.VEX_Kxnorb_kr_kr_kr;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>kxnord instruction.<br/>
		/// <br/>
		/// <c>KXNORD k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.66.0F.W1 46 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kxnord(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2) {
			Code op;
			op = Code.VEX_Kxnord_kr_kr_kr;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>kxnorq instruction.<br/>
		/// <br/>
		/// <c>KXNORQ k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.0F.W1 46 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kxnorq(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2) {
			Code op;
			op = Code.VEX_Kxnorq_kr_kr_kr;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>kxnorw instruction.<br/>
		/// <br/>
		/// <c>KXNORW k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.0F.W0 46 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kxnorw(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2) {
			Code op;
			op = Code.VEX_Kxnorw_kr_kr_kr;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>kxorb instruction.<br/>
		/// <br/>
		/// <c>KXORB k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.66.0F.W0 47 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kxorb(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2) {
			Code op;
			op = Code.VEX_Kxorb_kr_kr_kr;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>kxord instruction.<br/>
		/// <br/>
		/// <c>KXORD k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.66.0F.W1 47 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kxord(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2) {
			Code op;
			op = Code.VEX_Kxord_kr_kr_kr;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>kxorq instruction.<br/>
		/// <br/>
		/// <c>KXORQ k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.0F.W1 47 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kxorq(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2) {
			Code op;
			op = Code.VEX_Kxorq_kr_kr_kr;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>kxorw instruction.<br/>
		/// <br/>
		/// <c>KXORW k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.0F.W0 47 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void kxorw(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2) {
			Code op;
			op = Code.VEX_Kxorw_kr_kr_kr;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>lahf instruction.<br/>
		/// <br/>
		/// <c>LAHF</c><br/>
		/// <br/>
		/// <c>9F</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void lahf() {
			Code op;
			op = Code.Lahf;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>lar instruction.<br/>
		/// <br/>
		/// <c>LAR r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 02 /r</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void lar(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Lar_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>lar instruction.<br/>
		/// <br/>
		/// <c>LAR r32, r32/m16</c><br/>
		/// <br/>
		/// <c>o32 0F 02 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void lar(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Lar_r32_r32m16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>lar instruction.<br/>
		/// <br/>
		/// <c>LAR r64, r64/m16</c><br/>
		/// <br/>
		/// <c>REX.W 0F 02 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void lar(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Lar_r64_r64m16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>lar instruction.<br/>
		/// <br/>
		/// <c>LAR r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 02 /r</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void lar(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Lar_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>lar instruction.<br/>
		/// <br/>
		/// <c>LAR r32, r32/m16</c><br/>
		/// <br/>
		/// <c>o32 0F 02 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void lar(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Lar_r32_r32m16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>lddqu instruction.<br/>
		/// <br/>
		/// <c>LDDQU xmm1, m128</c><br/>
		/// <br/>
		/// <c>F2 0F F0 /r</c><br/>
		/// <br/>
		/// <c>SSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void lddqu(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Lddqu_xmm_m128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>ldmxcsr instruction.<br/>
		/// <br/>
		/// <c>LDMXCSR m32</c><br/>
		/// <br/>
		/// <c>NP 0F AE /2</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ldmxcsr(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Ldmxcsr_m32;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>lds instruction.<br/>
		/// <br/>
		/// <c>LDS r16, m16:16</c><br/>
		/// <br/>
		/// <c>o16 C5 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void lds(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Lds_r16_m1616;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>lds instruction.<br/>
		/// <br/>
		/// <c>LDS r32, m16:32</c><br/>
		/// <br/>
		/// <c>o32 C5 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void lds(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Lds_r32_m1632;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>lea instruction.<br/>
		/// <br/>
		/// <c>LEA r16, m</c><br/>
		/// <br/>
		/// <c>o16 8D /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void lea(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Lea_r16_m;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>lea instruction.<br/>
		/// <br/>
		/// <c>LEA r32, m</c><br/>
		/// <br/>
		/// <c>o32 8D /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void lea(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Lea_r32_m;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>lea instruction.<br/>
		/// <br/>
		/// <c>LEA r64, m</c><br/>
		/// <br/>
		/// <c>REX.W 8D /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void lea(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Lea_r64_m;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>leave instruction.<br/>
		/// <br/>
		/// <c>LEAVE</c><br/>
		/// <br/>
		/// <c>C9</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>LEAVE</c><br/>
		/// <br/>
		/// <c>o32 C9</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>LEAVE</c><br/>
		/// <br/>
		/// <c>o16 C9</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void leave() {
			Code op;
			if (Bitness == 64) {
				op = Code.Leaveq;
			} else op = Bitness >= 32 ? Code.Leaved : Code.Leavew;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>les instruction.<br/>
		/// <br/>
		/// <c>LES r16, m16:16</c><br/>
		/// <br/>
		/// <c>o16 C4 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void les(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Les_r16_m1616;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>les instruction.<br/>
		/// <br/>
		/// <c>LES r32, m16:32</c><br/>
		/// <br/>
		/// <c>o32 C4 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void les(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Les_r32_m1632;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>lfence instruction.<br/>
		/// <br/>
		/// <c>LFENCE</c><br/>
		/// <br/>
		/// <c>NP 0F AE E8</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void lfence() {
			Code op;
			op = Code.Lfence;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>lfs instruction.<br/>
		/// <br/>
		/// <c>LFS r16, m16:16</c><br/>
		/// <br/>
		/// <c>o16 0F B4 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void lfs(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Lfs_r16_m1616;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>lfs instruction.<br/>
		/// <br/>
		/// <c>LFS r32, m16:32</c><br/>
		/// <br/>
		/// <c>o32 0F B4 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void lfs(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Lfs_r32_m1632;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>lfs instruction.<br/>
		/// <br/>
		/// <c>LFS r64, m16:64</c><br/>
		/// <br/>
		/// <c>REX.W 0F B4 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void lfs(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Lfs_r64_m1664;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>lgdt instruction.<br/>
		/// <br/>
		/// <c>LGDT m16&amp;64</c><br/>
		/// <br/>
		/// <c>0F 01 /2</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>LGDT m16&amp;32</c><br/>
		/// <br/>
		/// <c>o32 0F 01 /2</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>LGDT m16&amp;32</c><br/>
		/// <br/>
		/// <c>o16 0F 01 /2</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void lgdt(AssemblerMemoryOperand dst) {
			Code op;
			if (Bitness == 64) {
				op = Code.Lgdt_m1664;
			} else op = Bitness >= 32 ? Code.Lgdt_m1632 : Code.Lgdt_m1632_16;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>lgs instruction.<br/>
		/// <br/>
		/// <c>LGS r16, m16:16</c><br/>
		/// <br/>
		/// <c>o16 0F B5 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void lgs(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Lgs_r16_m1616;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>lgs instruction.<br/>
		/// <br/>
		/// <c>LGS r32, m16:32</c><br/>
		/// <br/>
		/// <c>o32 0F B5 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void lgs(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Lgs_r32_m1632;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>lgs instruction.<br/>
		/// <br/>
		/// <c>LGS r64, m16:64</c><br/>
		/// <br/>
		/// <c>REX.W 0F B5 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void lgs(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Lgs_r64_m1664;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>lidt instruction.<br/>
		/// <br/>
		/// <c>LIDT m16&amp;64</c><br/>
		/// <br/>
		/// <c>0F 01 /3</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>LIDT m16&amp;32</c><br/>
		/// <br/>
		/// <c>o32 0F 01 /3</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>LIDT m16&amp;32</c><br/>
		/// <br/>
		/// <c>o16 0F 01 /3</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void lidt(AssemblerMemoryOperand dst) {
			Code op;
			if (Bitness == 64) {
				op = Code.Lidt_m1664;
			} else op = Bitness >= 32 ? Code.Lidt_m1632 : Code.Lidt_m1632_16;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>lldt instruction.<br/>
		/// <br/>
		/// <c>LLDT r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 00 /2</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void lldt(AssemblerRegister16 dst) {
			Code op;
			op = Code.Lldt_rm16;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>lldt instruction.<br/>
		/// <br/>
		/// <c>LLDT r32/m16</c><br/>
		/// <br/>
		/// <c>o32 0F 00 /2</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void lldt(AssemblerRegister32 dst) {
			Code op;
			op = Code.Lldt_r32m16;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>lldt instruction.<br/>
		/// <br/>
		/// <c>LLDT r64/m16</c><br/>
		/// <br/>
		/// <c>REX.W 0F 00 /2</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void lldt(AssemblerRegister64 dst) {
			Code op;
			op = Code.Lldt_r64m16;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>lldt instruction.<br/>
		/// <br/>
		/// <c>LLDT r32/m16</c><br/>
		/// <br/>
		/// <c>o32 0F 00 /2</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>LLDT r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 00 /2</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void lldt(AssemblerMemoryOperand dst) {
			Code op;
			op = Bitness >= 32 ? Code.Lldt_r32m16 : Code.Lldt_rm16;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>llwpcb instruction.<br/>
		/// <br/>
		/// <c>LLWPCB r32</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W0 12 /0</c><br/>
		/// <br/>
		/// <c>LWP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void llwpcb(AssemblerRegister32 dst) {
			Code op;
			op = Code.XOP_Llwpcb_r32;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>llwpcb instruction.<br/>
		/// <br/>
		/// <c>LLWPCB r64</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W1 12 /0</c><br/>
		/// <br/>
		/// <c>LWP</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void llwpcb(AssemblerRegister64 dst) {
			Code op;
			op = Code.XOP_Llwpcb_r64;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>lmsw instruction.<br/>
		/// <br/>
		/// <c>LMSW r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 01 /6</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void lmsw(AssemblerRegister16 dst) {
			Code op;
			op = Code.Lmsw_rm16;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>lmsw instruction.<br/>
		/// <br/>
		/// <c>LMSW r32/m16</c><br/>
		/// <br/>
		/// <c>o32 0F 01 /6</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void lmsw(AssemblerRegister32 dst) {
			Code op;
			op = Code.Lmsw_r32m16;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>lmsw instruction.<br/>
		/// <br/>
		/// <c>LMSW r64/m16</c><br/>
		/// <br/>
		/// <c>REX.W 0F 01 /6</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void lmsw(AssemblerRegister64 dst) {
			Code op;
			op = Code.Lmsw_r64m16;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>lmsw instruction.<br/>
		/// <br/>
		/// <c>LMSW r32/m16</c><br/>
		/// <br/>
		/// <c>o32 0F 01 /6</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>LMSW r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 01 /6</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void lmsw(AssemblerMemoryOperand dst) {
			Code op;
			op = Bitness >= 32 ? Code.Lmsw_r32m16 : Code.Lmsw_rm16;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>loadall instruction.<br/>
		/// <br/>
		/// <c>LOADALL</c><br/>
		/// <br/>
		/// <c>0F 07</c><br/>
		/// <br/>
		/// <c>386</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void loadall() {
			Code op;
			op = Code.Loadall386;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>lodsb instruction.<br/>
		/// <br/>
		/// <c>LODSB</c><br/>
		/// <br/>
		/// <c>AC</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void lodsb() {
			AddInstruction(Instruction.CreateLodsb(Bitness));
		}
		/// <summary>lodsd instruction.<br/>
		/// <br/>
		/// <c>LODSD</c><br/>
		/// <br/>
		/// <c>o32 AD</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void lodsd() {
			AddInstruction(Instruction.CreateLodsd(Bitness));
		}
		/// <summary>lodsq instruction.<br/>
		/// <br/>
		/// <c>LODSQ</c><br/>
		/// <br/>
		/// <c>REX.W AD</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void lodsq() {
			AddInstruction(Instruction.CreateLodsq(Bitness));
		}
		/// <summary>lodsw instruction.<br/>
		/// <br/>
		/// <c>LODSW</c><br/>
		/// <br/>
		/// <c>o16 AD</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void lodsw() {
			AddInstruction(Instruction.CreateLodsw(Bitness));
		}
		/// <summary>loop instruction.<br/>
		/// <br/>
		/// <c>LOOP rel8</c><br/>
		/// <br/>
		/// <c>E2 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>LOOP rel8</c><br/>
		/// <br/>
		/// <c>a32 o32 E2 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>LOOP rel8</c><br/>
		/// <br/>
		/// <c>a16 o16 E2 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void loop(Label dst) {
			Code op;
			if (Bitness == 64) {
				op = Code.Loop_rel8_64_RCX;
			} else op = Bitness >= 32 ? Code.Loop_rel8_32_ECX : Code.Loop_rel8_16_CX;
			AddInstruction(Instruction.CreateBranch(op, dst.Id));
		}
		/// <summary>loop instruction.<br/>
		/// <br/>
		/// <c>LOOP rel8</c><br/>
		/// <br/>
		/// <c>E2 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>LOOP rel8</c><br/>
		/// <br/>
		/// <c>a32 o32 E2 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>LOOP rel8</c><br/>
		/// <br/>
		/// <c>a16 o16 E2 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void loop(ulong dst) {
			Code op;
			if (Bitness == 64) {
				op = Code.Loop_rel8_64_RCX;
			} else op = Bitness >= 32 ? Code.Loop_rel8_32_ECX : Code.Loop_rel8_16_CX;
			AddInstruction(Instruction.CreateBranch(op, dst));
		}
		/// <summary>loope instruction.<br/>
		/// <br/>
		/// <c>LOOPE rel8</c><br/>
		/// <br/>
		/// <c>E1 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>LOOPE rel8</c><br/>
		/// <br/>
		/// <c>a32 o32 E1 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>LOOPE rel8</c><br/>
		/// <br/>
		/// <c>a16 o16 E1 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void loope(Label dst) {
			Code op;
			if (Bitness == 64) {
				op = Code.Loope_rel8_64_RCX;
			} else op = Bitness >= 32 ? Code.Loope_rel8_32_ECX : Code.Loope_rel8_16_CX;
			AddInstruction(Instruction.CreateBranch(op, dst.Id));
		}
		/// <summary>loope instruction.<br/>
		/// <br/>
		/// <c>LOOPE rel8</c><br/>
		/// <br/>
		/// <c>E1 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>LOOPE rel8</c><br/>
		/// <br/>
		/// <c>a32 o32 E1 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>LOOPE rel8</c><br/>
		/// <br/>
		/// <c>a16 o16 E1 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void loope(ulong dst) {
			Code op;
			if (Bitness == 64) {
				op = Code.Loope_rel8_64_RCX;
			} else op = Bitness >= 32 ? Code.Loope_rel8_32_ECX : Code.Loope_rel8_16_CX;
			AddInstruction(Instruction.CreateBranch(op, dst));
		}
		/// <summary>loopne instruction.<br/>
		/// <br/>
		/// <c>LOOPNE rel8</c><br/>
		/// <br/>
		/// <c>E0 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>LOOPNE rel8</c><br/>
		/// <br/>
		/// <c>a32 o32 E0 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>LOOPNE rel8</c><br/>
		/// <br/>
		/// <c>a16 o16 E0 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void loopne(Label dst) {
			Code op;
			if (Bitness == 64) {
				op = Code.Loopne_rel8_64_RCX;
			} else op = Bitness >= 32 ? Code.Loopne_rel8_32_ECX : Code.Loopne_rel8_16_CX;
			AddInstruction(Instruction.CreateBranch(op, dst.Id));
		}
		/// <summary>loopne instruction.<br/>
		/// <br/>
		/// <c>LOOPNE rel8</c><br/>
		/// <br/>
		/// <c>E0 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>LOOPNE rel8</c><br/>
		/// <br/>
		/// <c>a32 o32 E0 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>LOOPNE rel8</c><br/>
		/// <br/>
		/// <c>a16 o16 E0 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void loopne(ulong dst) {
			Code op;
			if (Bitness == 64) {
				op = Code.Loopne_rel8_64_RCX;
			} else op = Bitness >= 32 ? Code.Loopne_rel8_32_ECX : Code.Loopne_rel8_16_CX;
			AddInstruction(Instruction.CreateBranch(op, dst));
		}
		/// <summary>lsl instruction.<br/>
		/// <br/>
		/// <c>LSL r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 03 /r</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void lsl(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Lsl_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>lsl instruction.<br/>
		/// <br/>
		/// <c>LSL r32, r32/m16</c><br/>
		/// <br/>
		/// <c>o32 0F 03 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void lsl(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Lsl_r32_r32m16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>lsl instruction.<br/>
		/// <br/>
		/// <c>LSL r64, r64/m16</c><br/>
		/// <br/>
		/// <c>REX.W 0F 03 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void lsl(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Lsl_r64_r64m16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>lsl instruction.<br/>
		/// <br/>
		/// <c>LSL r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 03 /r</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void lsl(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Lsl_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>lsl instruction.<br/>
		/// <br/>
		/// <c>LSL r32, r32/m16</c><br/>
		/// <br/>
		/// <c>o32 0F 03 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void lsl(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Lsl_r32_r32m16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>lss instruction.<br/>
		/// <br/>
		/// <c>LSS r16, m16:16</c><br/>
		/// <br/>
		/// <c>o16 0F B2 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void lss(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Lss_r16_m1616;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>lss instruction.<br/>
		/// <br/>
		/// <c>LSS r32, m16:32</c><br/>
		/// <br/>
		/// <c>o32 0F B2 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void lss(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Lss_r32_m1632;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>lss instruction.<br/>
		/// <br/>
		/// <c>LSS r64, m16:64</c><br/>
		/// <br/>
		/// <c>REX.W 0F B2 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void lss(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Lss_r64_m1664;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>ltr instruction.<br/>
		/// <br/>
		/// <c>LTR r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 00 /3</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ltr(AssemblerRegister16 dst) {
			Code op;
			op = Code.Ltr_rm16;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>ltr instruction.<br/>
		/// <br/>
		/// <c>LTR r32/m16</c><br/>
		/// <br/>
		/// <c>o32 0F 00 /3</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ltr(AssemblerRegister32 dst) {
			Code op;
			op = Code.Ltr_r32m16;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>ltr instruction.<br/>
		/// <br/>
		/// <c>LTR r64/m16</c><br/>
		/// <br/>
		/// <c>REX.W 0F 00 /3</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void ltr(AssemblerRegister64 dst) {
			Code op;
			op = Code.Ltr_r64m16;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>ltr instruction.<br/>
		/// <br/>
		/// <c>LTR r32/m16</c><br/>
		/// <br/>
		/// <c>o32 0F 00 /3</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>LTR r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 00 /3</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ltr(AssemblerMemoryOperand dst) {
			Code op;
			op = Bitness >= 32 ? Code.Ltr_r32m16 : Code.Ltr_rm16;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>lwpins instruction.<br/>
		/// <br/>
		/// <c>LWPINS r32, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W0 12 /0 id</c><br/>
		/// <br/>
		/// <c>LWP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void lwpins(AssemblerRegister32 dst, AssemblerRegister32 src1, int imm) {
			Code op;
			op = Code.XOP_Lwpins_r32_rm32_imm32;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>lwpins instruction.<br/>
		/// <br/>
		/// <c>LWPINS r64, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W1 12 /0 id</c><br/>
		/// <br/>
		/// <c>LWP</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void lwpins(AssemblerRegister64 dst, AssemblerRegister32 src1, int imm) {
			Code op;
			op = Code.XOP_Lwpins_r64_rm32_imm32;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>lwpins instruction.<br/>
		/// <br/>
		/// <c>LWPINS r32, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W0 12 /0 id</c><br/>
		/// <br/>
		/// <c>LWP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void lwpins(AssemblerRegister32 dst, AssemblerMemoryOperand src1, int imm) {
			Code op;
			op = Code.XOP_Lwpins_r32_rm32_imm32;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>lwpins instruction.<br/>
		/// <br/>
		/// <c>LWPINS r64, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W1 12 /0 id</c><br/>
		/// <br/>
		/// <c>LWP</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void lwpins(AssemblerRegister64 dst, AssemblerMemoryOperand src1, int imm) {
			Code op;
			op = Code.XOP_Lwpins_r64_rm32_imm32;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>lwpins instruction.<br/>
		/// <br/>
		/// <c>LWPINS r32, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W0 12 /0 id</c><br/>
		/// <br/>
		/// <c>LWP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void lwpins(AssemblerRegister32 dst, AssemblerRegister32 src1, uint imm) {
			Code op;
			op = Code.XOP_Lwpins_r32_rm32_imm32;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>lwpins instruction.<br/>
		/// <br/>
		/// <c>LWPINS r64, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W1 12 /0 id</c><br/>
		/// <br/>
		/// <c>LWP</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void lwpins(AssemblerRegister64 dst, AssemblerRegister32 src1, uint imm) {
			Code op;
			op = Code.XOP_Lwpins_r64_rm32_imm32;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>lwpins instruction.<br/>
		/// <br/>
		/// <c>LWPINS r32, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W0 12 /0 id</c><br/>
		/// <br/>
		/// <c>LWP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void lwpins(AssemblerRegister32 dst, AssemblerMemoryOperand src1, uint imm) {
			Code op;
			op = Code.XOP_Lwpins_r32_rm32_imm32;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>lwpins instruction.<br/>
		/// <br/>
		/// <c>LWPINS r64, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W1 12 /0 id</c><br/>
		/// <br/>
		/// <c>LWP</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void lwpins(AssemblerRegister64 dst, AssemblerMemoryOperand src1, uint imm) {
			Code op;
			op = Code.XOP_Lwpins_r64_rm32_imm32;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>lwpval instruction.<br/>
		/// <br/>
		/// <c>LWPVAL r32, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W0 12 /1 id</c><br/>
		/// <br/>
		/// <c>LWP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void lwpval(AssemblerRegister32 dst, AssemblerRegister32 src1, int imm) {
			Code op;
			op = Code.XOP_Lwpval_r32_rm32_imm32;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>lwpval instruction.<br/>
		/// <br/>
		/// <c>LWPVAL r64, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W1 12 /1 id</c><br/>
		/// <br/>
		/// <c>LWP</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void lwpval(AssemblerRegister64 dst, AssemblerRegister32 src1, int imm) {
			Code op;
			op = Code.XOP_Lwpval_r64_rm32_imm32;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>lwpval instruction.<br/>
		/// <br/>
		/// <c>LWPVAL r32, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W0 12 /1 id</c><br/>
		/// <br/>
		/// <c>LWP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void lwpval(AssemblerRegister32 dst, AssemblerMemoryOperand src1, int imm) {
			Code op;
			op = Code.XOP_Lwpval_r32_rm32_imm32;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>lwpval instruction.<br/>
		/// <br/>
		/// <c>LWPVAL r64, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W1 12 /1 id</c><br/>
		/// <br/>
		/// <c>LWP</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void lwpval(AssemblerRegister64 dst, AssemblerMemoryOperand src1, int imm) {
			Code op;
			op = Code.XOP_Lwpval_r64_rm32_imm32;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>lwpval instruction.<br/>
		/// <br/>
		/// <c>LWPVAL r32, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W0 12 /1 id</c><br/>
		/// <br/>
		/// <c>LWP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void lwpval(AssemblerRegister32 dst, AssemblerRegister32 src1, uint imm) {
			Code op;
			op = Code.XOP_Lwpval_r32_rm32_imm32;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>lwpval instruction.<br/>
		/// <br/>
		/// <c>LWPVAL r64, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W1 12 /1 id</c><br/>
		/// <br/>
		/// <c>LWP</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void lwpval(AssemblerRegister64 dst, AssemblerRegister32 src1, uint imm) {
			Code op;
			op = Code.XOP_Lwpval_r64_rm32_imm32;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>lwpval instruction.<br/>
		/// <br/>
		/// <c>LWPVAL r32, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W0 12 /1 id</c><br/>
		/// <br/>
		/// <c>LWP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void lwpval(AssemblerRegister32 dst, AssemblerMemoryOperand src1, uint imm) {
			Code op;
			op = Code.XOP_Lwpval_r32_rm32_imm32;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>lwpval instruction.<br/>
		/// <br/>
		/// <c>LWPVAL r64, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W1 12 /1 id</c><br/>
		/// <br/>
		/// <c>LWP</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void lwpval(AssemblerRegister64 dst, AssemblerMemoryOperand src1, uint imm) {
			Code op;
			op = Code.XOP_Lwpval_r64_rm32_imm32;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>lzcnt instruction.<br/>
		/// <br/>
		/// <c>LZCNT r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 F3 0F BD /r</c><br/>
		/// <br/>
		/// <c>LZCNT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void lzcnt(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Lzcnt_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>lzcnt instruction.<br/>
		/// <br/>
		/// <c>LZCNT r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 F3 0F BD /r</c><br/>
		/// <br/>
		/// <c>LZCNT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void lzcnt(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Lzcnt_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>lzcnt instruction.<br/>
		/// <br/>
		/// <c>LZCNT r64, r/m64</c><br/>
		/// <br/>
		/// <c>F3 REX.W 0F BD /r</c><br/>
		/// <br/>
		/// <c>LZCNT</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void lzcnt(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Lzcnt_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>lzcnt instruction.<br/>
		/// <br/>
		/// <c>LZCNT r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 F3 0F BD /r</c><br/>
		/// <br/>
		/// <c>LZCNT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void lzcnt(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Lzcnt_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>lzcnt instruction.<br/>
		/// <br/>
		/// <c>LZCNT r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 F3 0F BD /r</c><br/>
		/// <br/>
		/// <c>LZCNT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void lzcnt(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Lzcnt_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>lzcnt instruction.<br/>
		/// <br/>
		/// <c>LZCNT r64, r/m64</c><br/>
		/// <br/>
		/// <c>F3 REX.W 0F BD /r</c><br/>
		/// <br/>
		/// <c>LZCNT</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void lzcnt(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Lzcnt_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>maskmovdqu instruction.<br/>
		/// <br/>
		/// <c>MASKMOVDQU xmm1, xmm2</c><br/>
		/// <br/>
		/// <c>66 0F F7 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void maskmovdqu(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			AddInstruction(Instruction.CreateMaskmovdqu(Bitness, dst, src));
		}
		/// <summary>maskmovq instruction.<br/>
		/// <br/>
		/// <c>MASKMOVQ mm1, mm2</c><br/>
		/// <br/>
		/// <c>NP 0F F7 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void maskmovq(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			AddInstruction(Instruction.CreateMaskmovq(Bitness, dst, src));
		}
		/// <summary>maxpd instruction.<br/>
		/// <br/>
		/// <c>MAXPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 5F /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void maxpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Maxpd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>maxpd instruction.<br/>
		/// <br/>
		/// <c>MAXPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 5F /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void maxpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Maxpd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>maxps instruction.<br/>
		/// <br/>
		/// <c>MAXPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 5F /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void maxps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Maxps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>maxps instruction.<br/>
		/// <br/>
		/// <c>MAXPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 5F /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void maxps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Maxps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>maxsd instruction.<br/>
		/// <br/>
		/// <c>MAXSD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 5F /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void maxsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Maxsd_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>maxsd instruction.<br/>
		/// <br/>
		/// <c>MAXSD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 5F /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void maxsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Maxsd_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>maxss instruction.<br/>
		/// <br/>
		/// <c>MAXSS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 5F /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void maxss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Maxss_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>maxss instruction.<br/>
		/// <br/>
		/// <c>MAXSS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 5F /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void maxss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Maxss_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>mcommit instruction.<br/>
		/// <br/>
		/// <c>MCOMMIT</c><br/>
		/// <br/>
		/// <c>F3 0F 01 FA</c><br/>
		/// <br/>
		/// <c>MCOMMIT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void mcommit() {
			Code op;
			op = Code.Mcommit;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>mfence instruction.<br/>
		/// <br/>
		/// <c>MFENCE</c><br/>
		/// <br/>
		/// <c>NP 0F AE F0</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void mfence() {
			Code op;
			op = Code.Mfence;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>minpd instruction.<br/>
		/// <br/>
		/// <c>MINPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 5D /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void minpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Minpd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>minpd instruction.<br/>
		/// <br/>
		/// <c>MINPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 5D /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void minpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Minpd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>minps instruction.<br/>
		/// <br/>
		/// <c>MINPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 5D /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void minps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Minps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>minps instruction.<br/>
		/// <br/>
		/// <c>MINPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 5D /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void minps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Minps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>minsd instruction.<br/>
		/// <br/>
		/// <c>MINSD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 5D /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void minsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Minsd_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>minsd instruction.<br/>
		/// <br/>
		/// <c>MINSD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 5D /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void minsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Minsd_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>minss instruction.<br/>
		/// <br/>
		/// <c>MINSS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 5D /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void minss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Minss_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>minss instruction.<br/>
		/// <br/>
		/// <c>MINSS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 5D /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void minss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Minss_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>monitor instruction.<br/>
		/// <br/>
		/// <c>MONITOR</c><br/>
		/// <br/>
		/// <c>0F 01 C8</c><br/>
		/// <br/>
		/// <c>MONITOR</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>MONITOR</c><br/>
		/// <br/>
		/// <c>a32 0F 01 C8</c><br/>
		/// <br/>
		/// <c>MONITOR</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>MONITOR</c><br/>
		/// <br/>
		/// <c>a16 0F 01 C8</c><br/>
		/// <br/>
		/// <c>MONITOR</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void monitor() {
			Code op;
			if (Bitness == 64) {
				op = Code.Monitorq;
			} else op = Bitness >= 32 ? Code.Monitord : Code.Monitorw;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>monitorx instruction.<br/>
		/// <br/>
		/// <c>MONITORX</c><br/>
		/// <br/>
		/// <c>NP 0F 01 FA</c><br/>
		/// <br/>
		/// <c>MONITORX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>MONITORX</c><br/>
		/// <br/>
		/// <c>a32 NP 0F 01 FA</c><br/>
		/// <br/>
		/// <c>MONITORX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>MONITORX</c><br/>
		/// <br/>
		/// <c>a16 NP 0F 01 FA</c><br/>
		/// <br/>
		/// <c>MONITORX</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void monitorx() {
			Code op;
			if (Bitness == 64) {
				op = Code.Monitorxq;
			} else op = Bitness >= 32 ? Code.Monitorxd : Code.Monitorxw;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>montmul instruction.<br/>
		/// <br/>
		/// <c>MONTMUL</c><br/>
		/// <br/>
		/// <c>0F A6 C0</c><br/>
		/// <br/>
		/// <c>PADLOCK_PMM</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>MONTMUL</c><br/>
		/// <br/>
		/// <c>a32 0F A6 C0</c><br/>
		/// <br/>
		/// <c>PADLOCK_PMM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>MONTMUL</c><br/>
		/// <br/>
		/// <c>a16 0F A6 C0</c><br/>
		/// <br/>
		/// <c>PADLOCK_PMM</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void montmul() {
			Code op;
			if (Bitness == 64) {
				op = Code.Montmul_64;
			} else op = Bitness >= 32 ? Code.Montmul_32 : Code.Montmul_16;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV r/m8, r8</c><br/>
		/// <br/>
		/// <c>88 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void mov(AssemblerRegister8 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Mov_rm8_r8;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV moffs8, AL</c><br/>
		/// <br/>
		/// <c>A2 mo</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>MOV r/m8, r8</c><br/>
		/// <br/>
		/// <c>88 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void mov(AssemblerMemoryOperand dst, AssemblerRegister8 src) {
			Code op;
			if (src.Value == Register.AL && Bitness == 64 && dst.IsDisplacementOnly) {
				op = Code.Mov_moffs8_AL;
				AddInstruction(Instruction.CreateMemory64(op, (ulong)dst.Displacement, src, dst.Prefix));
				return;
			} else op = src.Value == Register.AL && Bitness < 64 && dst.IsDisplacementOnly ? Code.Mov_moffs8_AL : Code.Mov_rm8_r8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 89 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void mov(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Mov_rm16_r16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV Sreg, r/m16</c><br/>
		/// <br/>
		/// <c>o16 8E /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void mov(AssemblerRegisterSegment dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Mov_Sreg_rm16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV moffs16, AX</c><br/>
		/// <br/>
		/// <c>o16 A3 mo</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>MOV r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 89 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void mov(AssemblerMemoryOperand dst, AssemblerRegister16 src) {
			Code op;
			if (src.Value == Register.AX && Bitness == 64 && dst.IsDisplacementOnly) {
				op = Code.Mov_moffs16_AX;
				AddInstruction(Instruction.CreateMemory64(op, (ulong)dst.Displacement, src, dst.Prefix));
				return;
			} else op = src.Value == Register.AX && Bitness < 64 && dst.IsDisplacementOnly ? Code.Mov_moffs16_AX : Code.Mov_rm16_r16;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 89 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void mov(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Mov_rm32_r32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV Sreg, r32/m16</c><br/>
		/// <br/>
		/// <c>o32 8E /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void mov(AssemblerRegisterSegment dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Mov_Sreg_r32m16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV cr, r32</c><br/>
		/// <br/>
		/// <c>0F 22 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void mov(AssemblerRegisterCR dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Mov_cr_r32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV dr, r32</c><br/>
		/// <br/>
		/// <c>0F 23 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void mov(AssemblerRegisterDR dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Mov_dr_r32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV tr, r32</c><br/>
		/// <br/>
		/// <c>0F 26 /r</c><br/>
		/// <br/>
		/// <c>386/486</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void mov(AssemblerRegisterTR dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Mov_tr_r32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV moffs32, EAX</c><br/>
		/// <br/>
		/// <c>o32 A3 mo</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>MOV r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 89 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void mov(AssemblerMemoryOperand dst, AssemblerRegister32 src) {
			Code op;
			if (src.Value == Register.EAX && Bitness == 64 && dst.IsDisplacementOnly) {
				op = Code.Mov_moffs32_EAX;
				AddInstruction(Instruction.CreateMemory64(op, (ulong)dst.Displacement, src, dst.Prefix));
				return;
			} else op = src.Value == Register.EAX && Bitness < 64 && dst.IsDisplacementOnly ? Code.Mov_moffs32_EAX : Code.Mov_rm32_r32;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 89 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void mov(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Mov_rm64_r64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV Sreg, r64/m16</c><br/>
		/// <br/>
		/// <c>REX.W 8E /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void mov(AssemblerRegisterSegment dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Mov_Sreg_r64m16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV cr, r64</c><br/>
		/// <br/>
		/// <c>0F 22 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void mov(AssemblerRegisterCR dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Mov_cr_r64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV dr, r64</c><br/>
		/// <br/>
		/// <c>0F 23 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void mov(AssemblerRegisterDR dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Mov_dr_r64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV moffs64, RAX</c><br/>
		/// <br/>
		/// <c>REX.W A3 mo</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>MOV r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 89 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void mov(AssemblerMemoryOperand dst, AssemblerRegister64 src) {
			Code op;
			if (src.Value == Register.RAX && Bitness == 64 && dst.IsDisplacementOnly) {
				op = Code.Mov_moffs64_RAX;
				AddInstruction(Instruction.CreateMemory64(op, (ulong)dst.Displacement, src, dst.Prefix));
				return;
			} else op = src.Value == Register.RAX && Bitness < 64 && dst.IsDisplacementOnly ? Code.Mov_moffs64_RAX : Code.Mov_rm64_r64;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV r/m16, Sreg</c><br/>
		/// <br/>
		/// <c>o16 8C /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void mov(AssemblerRegister16 dst, AssemblerRegisterSegment src) {
			Code op;
			op = Code.Mov_rm16_Sreg;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV r32/m16, Sreg</c><br/>
		/// <br/>
		/// <c>o32 8C /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void mov(AssemblerRegister32 dst, AssemblerRegisterSegment src) {
			Code op;
			op = Code.Mov_r32m16_Sreg;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV r64/m16, Sreg</c><br/>
		/// <br/>
		/// <c>REX.W 8C /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void mov(AssemblerRegister64 dst, AssemblerRegisterSegment src) {
			Code op;
			op = Code.Mov_r64m16_Sreg;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV r32/m16, Sreg</c><br/>
		/// <br/>
		/// <c>o32 8C /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>MOV r/m16, Sreg</c><br/>
		/// <br/>
		/// <c>o16 8C /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void mov(AssemblerMemoryOperand dst, AssemblerRegisterSegment src) {
			Code op;
			op = Bitness >= 32 ? Code.Mov_r32m16_Sreg : Code.Mov_rm16_Sreg;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV r32, cr</c><br/>
		/// <br/>
		/// <c>0F 20 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void mov(AssemblerRegister32 dst, AssemblerRegisterCR src) {
			Code op;
			op = Code.Mov_r32_cr;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV r64, cr</c><br/>
		/// <br/>
		/// <c>0F 20 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void mov(AssemblerRegister64 dst, AssemblerRegisterCR src) {
			Code op;
			op = Code.Mov_r64_cr;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV r32, dr</c><br/>
		/// <br/>
		/// <c>0F 21 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void mov(AssemblerRegister32 dst, AssemblerRegisterDR src) {
			Code op;
			op = Code.Mov_r32_dr;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV r64, dr</c><br/>
		/// <br/>
		/// <c>0F 21 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void mov(AssemblerRegister64 dst, AssemblerRegisterDR src) {
			Code op;
			op = Code.Mov_r64_dr;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV r32, tr</c><br/>
		/// <br/>
		/// <c>0F 24 /r</c><br/>
		/// <br/>
		/// <c>386/486</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void mov(AssemblerRegister32 dst, AssemblerRegisterTR src) {
			Code op;
			op = Code.Mov_r32_tr;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV AL, moffs8</c><br/>
		/// <br/>
		/// <c>A0 mo</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>MOV r8, r/m8</c><br/>
		/// <br/>
		/// <c>8A /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void mov(AssemblerRegister8 dst, AssemblerMemoryOperand src) {
			Code op;
			if (dst.Value == Register.AL && Bitness == 64 && src.IsDisplacementOnly) {
				op = Code.Mov_AL_moffs8;
				AddInstruction(Instruction.CreateMemory64(op, dst, (ulong)src.Displacement, src.Prefix));
				return;
			} else op = dst.Value == Register.AL && Bitness < 64 && src.IsDisplacementOnly ? Code.Mov_AL_moffs8 : Code.Mov_r8_rm8;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV AX, moffs16</c><br/>
		/// <br/>
		/// <c>o16 A1 mo</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>MOV r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 8B /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void mov(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			if (dst.Value == Register.AX && Bitness == 64 && src.IsDisplacementOnly) {
				op = Code.Mov_AX_moffs16;
				AddInstruction(Instruction.CreateMemory64(op, dst, (ulong)src.Displacement, src.Prefix));
				return;
			} else op = dst.Value == Register.AX && Bitness < 64 && src.IsDisplacementOnly ? Code.Mov_AX_moffs16 : Code.Mov_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV EAX, moffs32</c><br/>
		/// <br/>
		/// <c>o32 A1 mo</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>MOV r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 8B /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void mov(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			if (dst.Value == Register.EAX && Bitness == 64 && src.IsDisplacementOnly) {
				op = Code.Mov_EAX_moffs32;
				AddInstruction(Instruction.CreateMemory64(op, dst, (ulong)src.Displacement, src.Prefix));
				return;
			} else op = dst.Value == Register.EAX && Bitness < 64 && src.IsDisplacementOnly ? Code.Mov_EAX_moffs32 : Code.Mov_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV RAX, moffs64</c><br/>
		/// <br/>
		/// <c>REX.W A1 mo</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>MOV r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 8B /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void mov(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			if (dst.Value == Register.RAX && Bitness == 64 && src.IsDisplacementOnly) {
				op = Code.Mov_RAX_moffs64;
				AddInstruction(Instruction.CreateMemory64(op, dst, (ulong)src.Displacement, src.Prefix));
				return;
			} else op = dst.Value == Register.RAX && Bitness < 64 && src.IsDisplacementOnly ? Code.Mov_RAX_moffs64 : Code.Mov_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV Sreg, r32/m16</c><br/>
		/// <br/>
		/// <c>o32 8E /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>MOV Sreg, r/m16</c><br/>
		/// <br/>
		/// <c>o16 8E /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void mov(AssemblerRegisterSegment dst, AssemblerMemoryOperand src) {
			Code op;
			op = Bitness >= 32 ? Code.Mov_Sreg_r32m16 : Code.Mov_Sreg_rm16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV r8, imm8</c><br/>
		/// <br/>
		/// <c>B0+rb ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void mov(AssemblerRegister8 dst, sbyte imm) {
			Code op;
			op = Code.Mov_r8_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV r16, imm16</c><br/>
		/// <br/>
		/// <c>o16 B8+rw iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void mov(AssemblerRegister16 dst, short imm) {
			Code op;
			op = Code.Mov_r16_imm16;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV r32, imm32</c><br/>
		/// <br/>
		/// <c>o32 B8+rd id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void mov(AssemblerRegister32 dst, int imm) {
			Code op;
			op = Code.Mov_r32_imm32;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV r64, imm64</c><br/>
		/// <br/>
		/// <c>REX.W B8+ro io</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void mov(AssemblerRegister64 dst, long imm) {
			Code op;
			op = Code.Mov_r64_imm64;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV r/m64, imm32</c><br/>
		/// <br/>
		/// <c>REX.W C7 /0 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>MOV r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 C7 /0 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>MOV r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 C7 /0 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>MOV r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C6 /0 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void mov(AssemblerMemoryOperand dst, int imm) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Mov_rm64_imm32;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Mov_rm32_imm32;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Mov_rm16_imm16;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Mov_rm8_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Mov, dst, imm);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV r8, imm8</c><br/>
		/// <br/>
		/// <c>B0+rb ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void mov(AssemblerRegister8 dst, byte imm) {
			Code op;
			op = Code.Mov_r8_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV r16, imm16</c><br/>
		/// <br/>
		/// <c>o16 B8+rw iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void mov(AssemblerRegister16 dst, ushort imm) {
			Code op;
			op = Code.Mov_r16_imm16;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV r32, imm32</c><br/>
		/// <br/>
		/// <c>o32 B8+rd id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void mov(AssemblerRegister32 dst, uint imm) {
			Code op;
			op = Code.Mov_r32_imm32;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV r64, imm64</c><br/>
		/// <br/>
		/// <c>REX.W B8+ro io</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void mov(AssemblerRegister64 dst, ulong imm) {
			Code op;
			op = Code.Mov_r64_imm64;
			AddInstruction(Instruction.Create(op, dst, (ulong)imm));
		}
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 C7 /0 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>MOV r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 C7 /0 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>MOV r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C6 /0 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void mov(AssemblerMemoryOperand dst, uint imm) {
			Code op;
			if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Mov_rm32_imm32;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Mov_rm16_imm16;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Mov_rm8_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Mov, dst, imm);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>movapd instruction.<br/>
		/// <br/>
		/// <c>MOVAPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 28 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movapd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Movapd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>movapd instruction.<br/>
		/// <br/>
		/// <c>MOVAPD xmm2/m128, xmm1</c><br/>
		/// <br/>
		/// <c>66 0F 29 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movapd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Movapd_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>movapd instruction.<br/>
		/// <br/>
		/// <c>MOVAPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 28 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movapd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Movapd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>movaps instruction.<br/>
		/// <br/>
		/// <c>MOVAPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 28 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movaps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Movaps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>movaps instruction.<br/>
		/// <br/>
		/// <c>MOVAPS xmm2/m128, xmm1</c><br/>
		/// <br/>
		/// <c>NP 0F 29 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movaps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Movaps_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>movaps instruction.<br/>
		/// <br/>
		/// <c>MOVAPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 28 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movaps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Movaps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>movbe instruction.<br/>
		/// <br/>
		/// <c>MOVBE m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F 38 F1 /r</c><br/>
		/// <br/>
		/// <c>MOVBE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movbe(AssemblerMemoryOperand dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Movbe_m16_r16;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>movbe instruction.<br/>
		/// <br/>
		/// <c>MOVBE m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F 38 F1 /r</c><br/>
		/// <br/>
		/// <c>MOVBE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movbe(AssemblerMemoryOperand dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Movbe_m32_r32;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>movbe instruction.<br/>
		/// <br/>
		/// <c>MOVBE m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 38 F1 /r</c><br/>
		/// <br/>
		/// <c>MOVBE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void movbe(AssemblerMemoryOperand dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Movbe_m64_r64;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>movbe instruction.<br/>
		/// <br/>
		/// <c>MOVBE r16, m16</c><br/>
		/// <br/>
		/// <c>o16 0F 38 F0 /r</c><br/>
		/// <br/>
		/// <c>MOVBE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movbe(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Movbe_r16_m16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>movbe instruction.<br/>
		/// <br/>
		/// <c>MOVBE r32, m32</c><br/>
		/// <br/>
		/// <c>o32 0F 38 F0 /r</c><br/>
		/// <br/>
		/// <c>MOVBE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movbe(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Movbe_r32_m32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>movbe instruction.<br/>
		/// <br/>
		/// <c>MOVBE r64, m64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 38 F0 /r</c><br/>
		/// <br/>
		/// <c>MOVBE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void movbe(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Movbe_r64_m64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>movd instruction.<br/>
		/// <br/>
		/// <c>MOVD mm, r/m32</c><br/>
		/// <br/>
		/// <c>NP 0F 6E /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movd(AssemblerRegisterMM dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Movd_mm_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>movd instruction.<br/>
		/// <br/>
		/// <c>MOVD xmm, r/m32</c><br/>
		/// <br/>
		/// <c>66 0F 6E /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movd(AssemblerRegisterXMM dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Movd_xmm_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>movd instruction.<br/>
		/// <br/>
		/// <c>MOVD r/m32, mm</c><br/>
		/// <br/>
		/// <c>NP 0F 7E /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movd(AssemblerRegister32 dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Movd_rm32_mm;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>movd instruction.<br/>
		/// <br/>
		/// <c>MOVD r/m32, mm</c><br/>
		/// <br/>
		/// <c>NP 0F 7E /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movd(AssemblerMemoryOperand dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Movd_rm32_mm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>movd instruction.<br/>
		/// <br/>
		/// <c>MOVD r/m32, xmm</c><br/>
		/// <br/>
		/// <c>66 0F 7E /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movd(AssemblerRegister32 dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Movd_rm32_xmm;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>movd instruction.<br/>
		/// <br/>
		/// <c>MOVD r/m32, xmm</c><br/>
		/// <br/>
		/// <c>66 0F 7E /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Movd_rm32_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>movd instruction.<br/>
		/// <br/>
		/// <c>MOVD mm, r/m32</c><br/>
		/// <br/>
		/// <c>NP 0F 6E /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movd(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Movd_mm_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>movd instruction.<br/>
		/// <br/>
		/// <c>MOVD xmm, r/m32</c><br/>
		/// <br/>
		/// <c>66 0F 6E /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Movd_xmm_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>movddup instruction.<br/>
		/// <br/>
		/// <c>MOVDDUP xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 12 /r</c><br/>
		/// <br/>
		/// <c>SSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movddup(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Movddup_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>movddup instruction.<br/>
		/// <br/>
		/// <c>MOVDDUP xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 12 /r</c><br/>
		/// <br/>
		/// <c>SSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movddup(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Movddup_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>movdir64b instruction.<br/>
		/// <br/>
		/// <c>MOVDIR64B r16, m512</c><br/>
		/// <br/>
		/// <c>a16 66 0F 38 F8 /r</c><br/>
		/// <br/>
		/// <c>MOVDIR64B</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void movdir64b(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Movdir64b_r16_m512;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>movdir64b instruction.<br/>
		/// <br/>
		/// <c>MOVDIR64B r32, m512</c><br/>
		/// <br/>
		/// <c>a32 66 0F 38 F8 /r</c><br/>
		/// <br/>
		/// <c>MOVDIR64B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movdir64b(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Movdir64b_r32_m512;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>movdir64b instruction.<br/>
		/// <br/>
		/// <c>MOVDIR64B r64, m512</c><br/>
		/// <br/>
		/// <c>66 0F 38 F8 /r</c><br/>
		/// <br/>
		/// <c>MOVDIR64B</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void movdir64b(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Movdir64b_r64_m512;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>movdiri instruction.<br/>
		/// <br/>
		/// <c>MOVDIRI m32, r32</c><br/>
		/// <br/>
		/// <c>NP 0F 38 F9 /r</c><br/>
		/// <br/>
		/// <c>MOVDIRI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movdiri(AssemblerMemoryOperand dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Movdiri_m32_r32;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>movdiri instruction.<br/>
		/// <br/>
		/// <c>MOVDIRI m64, r64</c><br/>
		/// <br/>
		/// <c>NP REX.W 0F 38 F9 /r</c><br/>
		/// <br/>
		/// <c>MOVDIRI</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void movdiri(AssemblerMemoryOperand dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Movdiri_m64_r64;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>movdq2q instruction.<br/>
		/// <br/>
		/// <c>MOVDQ2Q mm, xmm</c><br/>
		/// <br/>
		/// <c>F2 0F D6 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movdq2q(AssemblerRegisterMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Movdq2q_mm_xmm;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>movdqa instruction.<br/>
		/// <br/>
		/// <c>MOVDQA xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 6F /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movdqa(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Movdqa_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>movdqa instruction.<br/>
		/// <br/>
		/// <c>MOVDQA xmm2/m128, xmm1</c><br/>
		/// <br/>
		/// <c>66 0F 7F /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movdqa(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Movdqa_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>movdqa instruction.<br/>
		/// <br/>
		/// <c>MOVDQA xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 6F /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movdqa(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Movdqa_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>movdqu instruction.<br/>
		/// <br/>
		/// <c>MOVDQU xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>F3 0F 6F /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movdqu(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Movdqu_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>movdqu instruction.<br/>
		/// <br/>
		/// <c>MOVDQU xmm2/m128, xmm1</c><br/>
		/// <br/>
		/// <c>F3 0F 7F /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movdqu(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Movdqu_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>movdqu instruction.<br/>
		/// <br/>
		/// <c>MOVDQU xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>F3 0F 6F /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movdqu(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Movdqu_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>movhlps instruction.<br/>
		/// <br/>
		/// <c>MOVHLPS xmm1, xmm2</c><br/>
		/// <br/>
		/// <c>NP 0F 12 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movhlps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Movhlps_xmm_xmm;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>movhpd instruction.<br/>
		/// <br/>
		/// <c>MOVHPD m64, xmm1</c><br/>
		/// <br/>
		/// <c>66 0F 17 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movhpd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Movhpd_m64_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>movhpd instruction.<br/>
		/// <br/>
		/// <c>MOVHPD xmm1, m64</c><br/>
		/// <br/>
		/// <c>66 0F 16 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movhpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Movhpd_xmm_m64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>movhps instruction.<br/>
		/// <br/>
		/// <c>MOVHPS m64, xmm1</c><br/>
		/// <br/>
		/// <c>NP 0F 17 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movhps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Movhps_m64_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>movhps instruction.<br/>
		/// <br/>
		/// <c>MOVHPS xmm1, m64</c><br/>
		/// <br/>
		/// <c>NP 0F 16 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movhps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Movhps_xmm_m64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>movlhps instruction.<br/>
		/// <br/>
		/// <c>MOVLHPS xmm1, xmm2</c><br/>
		/// <br/>
		/// <c>NP 0F 16 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movlhps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Movlhps_xmm_xmm;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>movlpd instruction.<br/>
		/// <br/>
		/// <c>MOVLPD m64, xmm1</c><br/>
		/// <br/>
		/// <c>66 0F 13 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movlpd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Movlpd_m64_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>movlpd instruction.<br/>
		/// <br/>
		/// <c>MOVLPD xmm1, m64</c><br/>
		/// <br/>
		/// <c>66 0F 12 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movlpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Movlpd_xmm_m64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>movlps instruction.<br/>
		/// <br/>
		/// <c>MOVLPS m64, xmm1</c><br/>
		/// <br/>
		/// <c>NP 0F 13 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movlps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Movlps_m64_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>movlps instruction.<br/>
		/// <br/>
		/// <c>MOVLPS xmm1, m64</c><br/>
		/// <br/>
		/// <c>NP 0F 12 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movlps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Movlps_xmm_m64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>movmskpd instruction.<br/>
		/// <br/>
		/// <c>MOVMSKPD r32, xmm</c><br/>
		/// <br/>
		/// <c>66 0F 50 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movmskpd(AssemblerRegister32 dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Movmskpd_r32_xmm;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>movmskpd instruction.<br/>
		/// <br/>
		/// <c>MOVMSKPD r64, xmm</c><br/>
		/// <br/>
		/// <c>66 REX.W 0F 50 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void movmskpd(AssemblerRegister64 dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Movmskpd_r64_xmm;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>movmskps instruction.<br/>
		/// <br/>
		/// <c>MOVMSKPS r32, xmm</c><br/>
		/// <br/>
		/// <c>NP 0F 50 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movmskps(AssemblerRegister32 dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Movmskps_r32_xmm;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>movmskps instruction.<br/>
		/// <br/>
		/// <c>MOVMSKPS r64, xmm</c><br/>
		/// <br/>
		/// <c>NP REX.W 0F 50 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void movmskps(AssemblerRegister64 dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Movmskps_r64_xmm;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>movntdq instruction.<br/>
		/// <br/>
		/// <c>MOVNTDQ m128, xmm1</c><br/>
		/// <br/>
		/// <c>66 0F E7 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movntdq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Movntdq_m128_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>movntdqa instruction.<br/>
		/// <br/>
		/// <c>MOVNTDQA xmm1, m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 2A /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movntdqa(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Movntdqa_xmm_m128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>movnti instruction.<br/>
		/// <br/>
		/// <c>MOVNTI m32, r32</c><br/>
		/// <br/>
		/// <c>NP 0F C3 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movnti(AssemblerMemoryOperand dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Movnti_m32_r32;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>movnti instruction.<br/>
		/// <br/>
		/// <c>MOVNTI m64, r64</c><br/>
		/// <br/>
		/// <c>NP REX.W 0F C3 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void movnti(AssemblerMemoryOperand dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Movnti_m64_r64;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>movntpd instruction.<br/>
		/// <br/>
		/// <c>MOVNTPD m128, xmm1</c><br/>
		/// <br/>
		/// <c>66 0F 2B /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movntpd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Movntpd_m128_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>movntps instruction.<br/>
		/// <br/>
		/// <c>MOVNTPS m128, xmm1</c><br/>
		/// <br/>
		/// <c>NP 0F 2B /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movntps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Movntps_m128_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>movntq instruction.<br/>
		/// <br/>
		/// <c>MOVNTQ m64, mm</c><br/>
		/// <br/>
		/// <c>NP 0F E7 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movntq(AssemblerMemoryOperand dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Movntq_m64_mm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>movntsd instruction.<br/>
		/// <br/>
		/// <c>MOVNTSD m64, xmm1</c><br/>
		/// <br/>
		/// <c>F2 0F 2B /r</c><br/>
		/// <br/>
		/// <c>SSE4A</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movntsd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Movntsd_m64_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>movntss instruction.<br/>
		/// <br/>
		/// <c>MOVNTSS m32, xmm1</c><br/>
		/// <br/>
		/// <c>F3 0F 2B /r</c><br/>
		/// <br/>
		/// <c>SSE4A</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movntss(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Movntss_m32_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>movq instruction.<br/>
		/// <br/>
		/// <c>MOVQ mm, r/m64</c><br/>
		/// <br/>
		/// <c>NP REX.W 0F 6E /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void movq(AssemblerRegisterMM dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Movq_mm_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>movq instruction.<br/>
		/// <br/>
		/// <c>MOVQ xmm, r/m64</c><br/>
		/// <br/>
		/// <c>66 REX.W 0F 6E /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void movq(AssemblerRegisterXMM dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Movq_xmm_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>movq instruction.<br/>
		/// <br/>
		/// <c>MOVQ r/m64, mm</c><br/>
		/// <br/>
		/// <c>NP REX.W 0F 7E /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void movq(AssemblerRegister64 dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Movq_rm64_mm;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>movq instruction.<br/>
		/// <br/>
		/// <c>MOVQ mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 6F /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movq(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Movq_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>movq instruction.<br/>
		/// <br/>
		/// <c>MOVQ mm/m64, mm</c><br/>
		/// <br/>
		/// <c>NP 0F 7F /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movq(AssemblerMemoryOperand dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Movq_mmm64_mm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>movq instruction.<br/>
		/// <br/>
		/// <c>MOVQ r/m64, xmm</c><br/>
		/// <br/>
		/// <c>66 REX.W 0F 7E /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void movq(AssemblerRegister64 dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Movq_rm64_xmm;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>movq instruction.<br/>
		/// <br/>
		/// <c>MOVQ xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F3 0F 7E /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Movq_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>movq instruction.<br/>
		/// <br/>
		/// <c>MOVQ xmm2/m64, xmm1</c><br/>
		/// <br/>
		/// <c>66 0F D6 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Movq_xmmm64_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>movq instruction.<br/>
		/// <br/>
		/// <c>MOVQ mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 6F /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movq(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Movq_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>movq instruction.<br/>
		/// <br/>
		/// <c>MOVQ xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F3 0F 7E /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Movq_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>movq2dq instruction.<br/>
		/// <br/>
		/// <c>MOVQ2DQ xmm, mm</c><br/>
		/// <br/>
		/// <c>F3 0F D6 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movq2dq(AssemblerRegisterXMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Movq2dq_xmm_mm;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>movsb instruction.<br/>
		/// <br/>
		/// <c>MOVSB</c><br/>
		/// <br/>
		/// <c>A4</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movsb() {
			AddInstruction(Instruction.CreateMovsb(Bitness));
		}
		/// <summary>movsd instruction.<br/>
		/// <br/>
		/// <c>MOVSD</c><br/>
		/// <br/>
		/// <c>o32 A5</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movsd() {
			AddInstruction(Instruction.CreateMovsd(Bitness));
		}
		/// <summary>movsd instruction.<br/>
		/// <br/>
		/// <c>MOVSD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 10 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Movsd_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>movsd instruction.<br/>
		/// <br/>
		/// <c>MOVSD xmm1/m64, xmm2</c><br/>
		/// <br/>
		/// <c>F2 0F 11 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movsd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Movsd_xmmm64_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>movsd instruction.<br/>
		/// <br/>
		/// <c>MOVSD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 10 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Movsd_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>movshdup instruction.<br/>
		/// <br/>
		/// <c>MOVSHDUP xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>F3 0F 16 /r</c><br/>
		/// <br/>
		/// <c>SSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movshdup(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Movshdup_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>movshdup instruction.<br/>
		/// <br/>
		/// <c>MOVSHDUP xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>F3 0F 16 /r</c><br/>
		/// <br/>
		/// <c>SSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movshdup(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Movshdup_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>movsldup instruction.<br/>
		/// <br/>
		/// <c>MOVSLDUP xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>F3 0F 12 /r</c><br/>
		/// <br/>
		/// <c>SSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movsldup(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Movsldup_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>movsldup instruction.<br/>
		/// <br/>
		/// <c>MOVSLDUP xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>F3 0F 12 /r</c><br/>
		/// <br/>
		/// <c>SSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movsldup(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Movsldup_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>movsq instruction.<br/>
		/// <br/>
		/// <c>MOVSQ</c><br/>
		/// <br/>
		/// <c>REX.W A5</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void movsq() {
			AddInstruction(Instruction.CreateMovsq(Bitness));
		}
		/// <summary>movss instruction.<br/>
		/// <br/>
		/// <c>MOVSS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 10 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Movss_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>movss instruction.<br/>
		/// <br/>
		/// <c>MOVSS xmm2/m32, xmm1</c><br/>
		/// <br/>
		/// <c>F3 0F 11 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movss(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Movss_xmmm32_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>movss instruction.<br/>
		/// <br/>
		/// <c>MOVSS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 10 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Movss_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>movsw instruction.<br/>
		/// <br/>
		/// <c>MOVSW</c><br/>
		/// <br/>
		/// <c>o16 A5</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movsw() {
			AddInstruction(Instruction.CreateMovsw(Bitness));
		}
		/// <summary>movsx instruction.<br/>
		/// <br/>
		/// <c>MOVSX r16, r/m8</c><br/>
		/// <br/>
		/// <c>o16 0F BE /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movsx(AssemblerRegister16 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Movsx_r16_rm8;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>movsx instruction.<br/>
		/// <br/>
		/// <c>MOVSX r32, r/m8</c><br/>
		/// <br/>
		/// <c>o32 0F BE /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movsx(AssemblerRegister32 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Movsx_r32_rm8;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>movsx instruction.<br/>
		/// <br/>
		/// <c>MOVSX r64, r/m8</c><br/>
		/// <br/>
		/// <c>REX.W 0F BE /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void movsx(AssemblerRegister64 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Movsx_r64_rm8;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>movsx instruction.<br/>
		/// <br/>
		/// <c>MOVSX r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F BF /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movsx(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Movsx_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>movsx instruction.<br/>
		/// <br/>
		/// <c>MOVSX r32, r/m16</c><br/>
		/// <br/>
		/// <c>o32 0F BF /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movsx(AssemblerRegister32 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Movsx_r32_rm16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>movsx instruction.<br/>
		/// <br/>
		/// <c>MOVSX r64, r/m16</c><br/>
		/// <br/>
		/// <c>REX.W 0F BF /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void movsx(AssemblerRegister64 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Movsx_r64_rm16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>movsx instruction.<br/>
		/// <br/>
		/// <c>MOVSX r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F BF /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>MOVSX r16, r/m8</c><br/>
		/// <br/>
		/// <c>o16 0F BE /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movsx(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			if (src.Size == MemoryOperandSize.WordPtr) {
				op = Code.Movsx_r16_rm16;
			} else if (src.Size == MemoryOperandSize.BytePtr) {
				op = Code.Movsx_r16_rm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Movsx, dst, src);
			}
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>movsx instruction.<br/>
		/// <br/>
		/// <c>MOVSX r32, r/m16</c><br/>
		/// <br/>
		/// <c>o32 0F BF /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>MOVSX r32, r/m8</c><br/>
		/// <br/>
		/// <c>o32 0F BE /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movsx(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			if (src.Size == MemoryOperandSize.WordPtr) {
				op = Code.Movsx_r32_rm16;
			} else if (src.Size == MemoryOperandSize.BytePtr) {
				op = Code.Movsx_r32_rm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Movsx, dst, src);
			}
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>movsx instruction.<br/>
		/// <br/>
		/// <c>MOVSX r64, r/m16</c><br/>
		/// <br/>
		/// <c>REX.W 0F BF /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>MOVSX r64, r/m8</c><br/>
		/// <br/>
		/// <c>REX.W 0F BE /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void movsx(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			if (src.Size == MemoryOperandSize.WordPtr) {
				op = Code.Movsx_r64_rm16;
			} else if (src.Size == MemoryOperandSize.BytePtr) {
				op = Code.Movsx_r64_rm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Movsx, dst, src);
			}
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>movsxd instruction.<br/>
		/// <br/>
		/// <c>MOVSXD r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 63 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void movsxd(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Movsxd_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>movsxd instruction.<br/>
		/// <br/>
		/// <c>MOVSXD r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 63 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void movsxd(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Movsxd_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>movsxd instruction.<br/>
		/// <br/>
		/// <c>MOVSXD r64, r/m32</c><br/>
		/// <br/>
		/// <c>REX.W 63 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void movsxd(AssemblerRegister64 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Movsxd_r64_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>movsxd instruction.<br/>
		/// <br/>
		/// <c>MOVSXD r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 63 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void movsxd(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Movsxd_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>movsxd instruction.<br/>
		/// <br/>
		/// <c>MOVSXD r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 63 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void movsxd(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Movsxd_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>movsxd instruction.<br/>
		/// <br/>
		/// <c>MOVSXD r64, r/m32</c><br/>
		/// <br/>
		/// <c>REX.W 63 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void movsxd(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Movsxd_r64_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>movupd instruction.<br/>
		/// <br/>
		/// <c>MOVUPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 10 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movupd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Movupd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>movupd instruction.<br/>
		/// <br/>
		/// <c>MOVUPD xmm2/m128, xmm1</c><br/>
		/// <br/>
		/// <c>66 0F 11 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movupd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Movupd_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>movupd instruction.<br/>
		/// <br/>
		/// <c>MOVUPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 10 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movupd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Movupd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>movups instruction.<br/>
		/// <br/>
		/// <c>MOVUPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 10 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movups(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Movups_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>movups instruction.<br/>
		/// <br/>
		/// <c>MOVUPS xmm2/m128, xmm1</c><br/>
		/// <br/>
		/// <c>NP 0F 11 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movups(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Movups_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>movups instruction.<br/>
		/// <br/>
		/// <c>MOVUPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 10 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movups(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Movups_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>movzx instruction.<br/>
		/// <br/>
		/// <c>MOVZX r16, r/m8</c><br/>
		/// <br/>
		/// <c>o16 0F B6 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movzx(AssemblerRegister16 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Movzx_r16_rm8;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>movzx instruction.<br/>
		/// <br/>
		/// <c>MOVZX r32, r/m8</c><br/>
		/// <br/>
		/// <c>o32 0F B6 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movzx(AssemblerRegister32 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Movzx_r32_rm8;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>movzx instruction.<br/>
		/// <br/>
		/// <c>MOVZX r64, r/m8</c><br/>
		/// <br/>
		/// <c>REX.W 0F B6 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void movzx(AssemblerRegister64 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Movzx_r64_rm8;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>movzx instruction.<br/>
		/// <br/>
		/// <c>MOVZX r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F B7 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movzx(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Movzx_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>movzx instruction.<br/>
		/// <br/>
		/// <c>MOVZX r32, r/m16</c><br/>
		/// <br/>
		/// <c>o32 0F B7 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movzx(AssemblerRegister32 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Movzx_r32_rm16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>movzx instruction.<br/>
		/// <br/>
		/// <c>MOVZX r64, r/m16</c><br/>
		/// <br/>
		/// <c>REX.W 0F B7 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void movzx(AssemblerRegister64 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Movzx_r64_rm16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>movzx instruction.<br/>
		/// <br/>
		/// <c>MOVZX r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F B7 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>MOVZX r16, r/m8</c><br/>
		/// <br/>
		/// <c>o16 0F B6 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movzx(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			if (src.Size == MemoryOperandSize.WordPtr) {
				op = Code.Movzx_r16_rm16;
			} else if (src.Size == MemoryOperandSize.BytePtr) {
				op = Code.Movzx_r16_rm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Movzx, dst, src);
			}
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>movzx instruction.<br/>
		/// <br/>
		/// <c>MOVZX r32, r/m16</c><br/>
		/// <br/>
		/// <c>o32 0F B7 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>MOVZX r32, r/m8</c><br/>
		/// <br/>
		/// <c>o32 0F B6 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void movzx(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			if (src.Size == MemoryOperandSize.WordPtr) {
				op = Code.Movzx_r32_rm16;
			} else if (src.Size == MemoryOperandSize.BytePtr) {
				op = Code.Movzx_r32_rm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Movzx, dst, src);
			}
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>movzx instruction.<br/>
		/// <br/>
		/// <c>MOVZX r64, r/m16</c><br/>
		/// <br/>
		/// <c>REX.W 0F B7 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>MOVZX r64, r/m8</c><br/>
		/// <br/>
		/// <c>REX.W 0F B6 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void movzx(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			if (src.Size == MemoryOperandSize.WordPtr) {
				op = Code.Movzx_r64_rm16;
			} else if (src.Size == MemoryOperandSize.BytePtr) {
				op = Code.Movzx_r64_rm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Movzx, dst, src);
			}
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>mpsadbw instruction.<br/>
		/// <br/>
		/// <c>MPSADBW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 42 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void mpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.Mpsadbw_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>mpsadbw instruction.<br/>
		/// <br/>
		/// <c>MPSADBW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 42 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void mpsadbw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.Mpsadbw_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>mpsadbw instruction.<br/>
		/// <br/>
		/// <c>MPSADBW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 42 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void mpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.Mpsadbw_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>mpsadbw instruction.<br/>
		/// <br/>
		/// <c>MPSADBW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 42 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void mpsadbw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.Mpsadbw_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>mul instruction.<br/>
		/// <br/>
		/// <c>MUL r/m8</c><br/>
		/// <br/>
		/// <c>F6 /4</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void mul(AssemblerRegister8 dst) {
			Code op;
			op = Code.Mul_rm8;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>mul instruction.<br/>
		/// <br/>
		/// <c>MUL r/m16</c><br/>
		/// <br/>
		/// <c>o16 F7 /4</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void mul(AssemblerRegister16 dst) {
			Code op;
			op = Code.Mul_rm16;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>mul instruction.<br/>
		/// <br/>
		/// <c>MUL r/m32</c><br/>
		/// <br/>
		/// <c>o32 F7 /4</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void mul(AssemblerRegister32 dst) {
			Code op;
			op = Code.Mul_rm32;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>mul instruction.<br/>
		/// <br/>
		/// <c>MUL r/m64</c><br/>
		/// <br/>
		/// <c>REX.W F7 /4</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void mul(AssemblerRegister64 dst) {
			Code op;
			op = Code.Mul_rm64;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>mul instruction.<br/>
		/// <br/>
		/// <c>MUL r/m64</c><br/>
		/// <br/>
		/// <c>REX.W F7 /4</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>MUL r/m32</c><br/>
		/// <br/>
		/// <c>o32 F7 /4</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>MUL r/m16</c><br/>
		/// <br/>
		/// <c>o16 F7 /4</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>MUL r/m8</c><br/>
		/// <br/>
		/// <c>F6 /4</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void mul(AssemblerMemoryOperand dst) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Mul_rm64;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Mul_rm32;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Mul_rm16;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Mul_rm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Mul, dst);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>mulpd instruction.<br/>
		/// <br/>
		/// <c>MULPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 59 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void mulpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Mulpd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>mulpd instruction.<br/>
		/// <br/>
		/// <c>MULPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 59 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void mulpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Mulpd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>mulps instruction.<br/>
		/// <br/>
		/// <c>MULPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 59 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void mulps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Mulps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>mulps instruction.<br/>
		/// <br/>
		/// <c>MULPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 59 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void mulps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Mulps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>mulsd instruction.<br/>
		/// <br/>
		/// <c>MULSD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 59 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void mulsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Mulsd_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>mulsd instruction.<br/>
		/// <br/>
		/// <c>MULSD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 59 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void mulsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Mulsd_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>mulss instruction.<br/>
		/// <br/>
		/// <c>MULSS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 59 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void mulss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Mulss_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>mulss instruction.<br/>
		/// <br/>
		/// <c>MULSS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 59 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void mulss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Mulss_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>mulx instruction.<br/>
		/// <br/>
		/// <c>MULX r32a, r32b, r/m32</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F2.0F38.W0 F6 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void mulx(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerRegister32 src2) {
			Code op;
			op = Code.VEX_Mulx_r32_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>mulx instruction.<br/>
		/// <br/>
		/// <c>MULX r64a, r64b, r/m64</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F2.0F38.W1 F6 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void mulx(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerRegister64 src2) {
			Code op;
			op = Code.VEX_Mulx_r64_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>mulx instruction.<br/>
		/// <br/>
		/// <c>MULX r32a, r32b, r/m32</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F2.0F38.W0 F6 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void mulx(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Mulx_r32_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>mulx instruction.<br/>
		/// <br/>
		/// <c>MULX r64a, r64b, r/m64</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F2.0F38.W1 F6 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void mulx(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Mulx_r64_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>mwait instruction.<br/>
		/// <br/>
		/// <c>MWAIT</c><br/>
		/// <br/>
		/// <c>0F 01 C9</c><br/>
		/// <br/>
		/// <c>MONITOR</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void mwait() {
			Code op;
			op = Code.Mwait;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>mwaitx instruction.<br/>
		/// <br/>
		/// <c>MWAITX</c><br/>
		/// <br/>
		/// <c>NP 0F 01 FB</c><br/>
		/// <br/>
		/// <c>MONITORX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void mwaitx() {
			Code op;
			op = Code.Mwaitx;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>neg instruction.<br/>
		/// <br/>
		/// <c>NEG r/m8</c><br/>
		/// <br/>
		/// <c>F6 /3</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void neg(AssemblerRegister8 dst) {
			Code op;
			op = Code.Neg_rm8;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>neg instruction.<br/>
		/// <br/>
		/// <c>NEG r/m16</c><br/>
		/// <br/>
		/// <c>o16 F7 /3</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void neg(AssemblerRegister16 dst) {
			Code op;
			op = Code.Neg_rm16;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>neg instruction.<br/>
		/// <br/>
		/// <c>NEG r/m32</c><br/>
		/// <br/>
		/// <c>o32 F7 /3</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void neg(AssemblerRegister32 dst) {
			Code op;
			op = Code.Neg_rm32;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>neg instruction.<br/>
		/// <br/>
		/// <c>NEG r/m64</c><br/>
		/// <br/>
		/// <c>REX.W F7 /3</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void neg(AssemblerRegister64 dst) {
			Code op;
			op = Code.Neg_rm64;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>neg instruction.<br/>
		/// <br/>
		/// <c>NEG r/m64</c><br/>
		/// <br/>
		/// <c>REX.W F7 /3</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>NEG r/m32</c><br/>
		/// <br/>
		/// <c>o32 F7 /3</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>NEG r/m16</c><br/>
		/// <br/>
		/// <c>o16 F7 /3</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>NEG r/m8</c><br/>
		/// <br/>
		/// <c>F6 /3</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void neg(AssemblerMemoryOperand dst) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Neg_rm64;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Neg_rm32;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Neg_rm16;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Neg_rm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Neg, dst);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>nop instruction.<br/>
		/// <br/>
		/// <c>NOP</c><br/>
		/// <br/>
		/// <c>o32 90</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>NOP</c><br/>
		/// <br/>
		/// <c>o16 90</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void nop() {
			Code op;
			op = Bitness >= 32 ? Code.Nopd : Code.Nopw;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>nop instruction.<br/>
		/// <br/>
		/// <c>NOP r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 1F /0</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void nop(AssemblerRegister16 dst) {
			Code op;
			op = Code.Nop_rm16;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>nop instruction.<br/>
		/// <br/>
		/// <c>NOP r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 1F /0</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void nop(AssemblerRegister32 dst) {
			Code op;
			op = Code.Nop_rm32;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>nop instruction.<br/>
		/// <br/>
		/// <c>NOP r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 1F /0</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void nop(AssemblerRegister64 dst) {
			Code op;
			op = Code.Nop_rm64;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>nop instruction.<br/>
		/// <br/>
		/// <c>NOP r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 1F /0</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>NOP r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 1F /0</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>NOP r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 1F /0</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void nop(AssemblerMemoryOperand dst) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Nop_rm64;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Nop_rm32;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Nop_rm16;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Nop, dst);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>not instruction.<br/>
		/// <br/>
		/// <c>NOT r/m8</c><br/>
		/// <br/>
		/// <c>F6 /2</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void not(AssemblerRegister8 dst) {
			Code op;
			op = Code.Not_rm8;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>not instruction.<br/>
		/// <br/>
		/// <c>NOT r/m16</c><br/>
		/// <br/>
		/// <c>o16 F7 /2</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void not(AssemblerRegister16 dst) {
			Code op;
			op = Code.Not_rm16;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>not instruction.<br/>
		/// <br/>
		/// <c>NOT r/m32</c><br/>
		/// <br/>
		/// <c>o32 F7 /2</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void not(AssemblerRegister32 dst) {
			Code op;
			op = Code.Not_rm32;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>not instruction.<br/>
		/// <br/>
		/// <c>NOT r/m64</c><br/>
		/// <br/>
		/// <c>REX.W F7 /2</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void not(AssemblerRegister64 dst) {
			Code op;
			op = Code.Not_rm64;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>not instruction.<br/>
		/// <br/>
		/// <c>NOT r/m64</c><br/>
		/// <br/>
		/// <c>REX.W F7 /2</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>NOT r/m32</c><br/>
		/// <br/>
		/// <c>o32 F7 /2</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>NOT r/m16</c><br/>
		/// <br/>
		/// <c>o16 F7 /2</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>NOT r/m8</c><br/>
		/// <br/>
		/// <c>F6 /2</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void not(AssemblerMemoryOperand dst) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Not_rm64;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Not_rm32;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Not_rm16;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Not_rm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Not, dst);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>or instruction.<br/>
		/// <br/>
		/// <c>OR r/m8, r8</c><br/>
		/// <br/>
		/// <c>08 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void or(AssemblerRegister8 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Or_rm8_r8;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>or instruction.<br/>
		/// <br/>
		/// <c>OR r/m8, r8</c><br/>
		/// <br/>
		/// <c>08 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void or(AssemblerMemoryOperand dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Or_rm8_r8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>or instruction.<br/>
		/// <br/>
		/// <c>OR r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 09 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void or(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Or_rm16_r16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>or instruction.<br/>
		/// <br/>
		/// <c>OR r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 09 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void or(AssemblerMemoryOperand dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Or_rm16_r16;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>or instruction.<br/>
		/// <br/>
		/// <c>OR r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 09 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void or(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Or_rm32_r32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>or instruction.<br/>
		/// <br/>
		/// <c>OR r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 09 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void or(AssemblerMemoryOperand dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Or_rm32_r32;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>or instruction.<br/>
		/// <br/>
		/// <c>OR r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 09 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void or(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Or_rm64_r64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>or instruction.<br/>
		/// <br/>
		/// <c>OR r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 09 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void or(AssemblerMemoryOperand dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Or_rm64_r64;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>or instruction.<br/>
		/// <br/>
		/// <c>OR r8, r/m8</c><br/>
		/// <br/>
		/// <c>0A /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void or(AssemblerRegister8 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Or_r8_rm8;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>or instruction.<br/>
		/// <br/>
		/// <c>OR r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0B /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void or(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Or_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>or instruction.<br/>
		/// <br/>
		/// <c>OR r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0B /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void or(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Or_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>or instruction.<br/>
		/// <br/>
		/// <c>OR r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 0B /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void or(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Or_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>or instruction.<br/>
		/// <br/>
		/// <c>OR AL, imm8</c><br/>
		/// <br/>
		/// <c>0C ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>OR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /1 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void or(AssemblerRegister8 dst, sbyte imm) {
			Code op;
			op = dst == Register.AL ? Code.Or_AL_imm8 : Code.Or_rm8_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>or instruction.<br/>
		/// <br/>
		/// <c>OR AX, imm16</c><br/>
		/// <br/>
		/// <c>o16 0D iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>OR r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /1 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>OR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /1 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void or(AssemblerRegister16 dst, short imm) {
			Code op;
			if (dst == Register.AX) {
				op = Code.Or_AX_imm16;
			} else op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Or_rm16_imm8 : Code.Or_rm16_imm16;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>or instruction.<br/>
		/// <br/>
		/// <c>OR EAX, imm32</c><br/>
		/// <br/>
		/// <c>o32 0D id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>OR r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /1 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>OR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /1 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void or(AssemblerRegister32 dst, int imm) {
			Code op;
			if (dst == Register.EAX) {
				op = Code.Or_EAX_imm32;
			} else op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Or_rm32_imm8 : Code.Or_rm32_imm32;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>or instruction.<br/>
		/// <br/>
		/// <c>OR RAX, imm32</c><br/>
		/// <br/>
		/// <c>REX.W 0D id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>OR r/m64, imm32</c><br/>
		/// <br/>
		/// <c>REX.W 81 /1 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>OR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W 83 /1 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void or(AssemblerRegister64 dst, int imm) {
			Code op;
			if (dst == Register.RAX) {
				op = Code.Or_RAX_imm32;
			} else op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Or_rm64_imm8 : Code.Or_rm64_imm32;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>or instruction.<br/>
		/// <br/>
		/// <c>OR r/m64, imm32</c><br/>
		/// <br/>
		/// <c>REX.W 81 /1 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>OR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W 83 /1 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>OR r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /1 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>OR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /1 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>OR r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /1 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>OR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /1 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>OR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /1 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void or(AssemblerMemoryOperand dst, int imm) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Or_rm64_imm8 : Code.Or_rm64_imm32;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Or_rm32_imm8 : Code.Or_rm32_imm32;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Or_rm16_imm8 : Code.Or_rm16_imm16;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Or_rm8_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Or, dst, imm);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>or instruction.<br/>
		/// <br/>
		/// <c>OR AL, imm8</c><br/>
		/// <br/>
		/// <c>0C ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>OR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /1 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void or(AssemblerRegister8 dst, byte imm) {
			Code op;
			op = dst == Register.AL ? Code.Or_AL_imm8 : Code.Or_rm8_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>or instruction.<br/>
		/// <br/>
		/// <c>OR AX, imm16</c><br/>
		/// <br/>
		/// <c>o16 0D iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>OR r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /1 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>OR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /1 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void or(AssemblerRegister16 dst, ushort imm) {
			Code op;
			if (dst == Register.AX) {
				op = Code.Or_AX_imm16;
			} else op = imm <= (ushort)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF) ? Code.Or_rm16_imm8 : Code.Or_rm16_imm16;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>or instruction.<br/>
		/// <br/>
		/// <c>OR EAX, imm32</c><br/>
		/// <br/>
		/// <c>o32 0D id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>OR r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /1 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>OR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /1 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void or(AssemblerRegister32 dst, uint imm) {
			Code op;
			if (dst == Register.EAX) {
				op = Code.Or_EAX_imm32;
			} else op = imm <= (uint)sbyte.MaxValue || (0xFFFF_FF80 <= imm && imm <= 0xFFFF_FFFF) ? Code.Or_rm32_imm8 : Code.Or_rm32_imm32;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>or instruction.<br/>
		/// <br/>
		/// <c>OR r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /1 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>OR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /1 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>OR r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /1 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>OR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /1 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>OR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /1 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void or(AssemblerMemoryOperand dst, uint imm) {
			Code op;
			if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = imm <= (uint)sbyte.MaxValue || (0xFFFF_FF80 <= imm && imm <= 0xFFFF_FFFF) ? Code.Or_rm32_imm8 : Code.Or_rm32_imm32;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = imm <= (uint)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF) ? Code.Or_rm16_imm8 : Code.Or_rm16_imm16;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Or_rm8_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Or, dst, imm);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>orpd instruction.<br/>
		/// <br/>
		/// <c>ORPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 56 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void orpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Orpd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>orpd instruction.<br/>
		/// <br/>
		/// <c>ORPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 56 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void orpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Orpd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>orps instruction.<br/>
		/// <br/>
		/// <c>ORPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 56 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void orps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Orps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>orps instruction.<br/>
		/// <br/>
		/// <c>ORPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 56 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void orps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Orps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>out instruction.<br/>
		/// <br/>
		/// <c>OUT DX, AL</c><br/>
		/// <br/>
		/// <c>EE</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void @out(AssemblerRegister16 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Out_DX_AL;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>out instruction.<br/>
		/// <br/>
		/// <c>OUT imm8, AL</c><br/>
		/// <br/>
		/// <c>E6 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void @out(sbyte imm, AssemblerRegister8 src) {
			Code op;
			op = Code.Out_imm8_AL;
			AddInstruction(Instruction.Create(op, imm, src));
		}
		/// <summary>out instruction.<br/>
		/// <br/>
		/// <c>OUT imm8, AL</c><br/>
		/// <br/>
		/// <c>E6 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void @out(byte imm, AssemblerRegister8 src) {
			Code op;
			op = Code.Out_imm8_AL;
			AddInstruction(Instruction.Create(op, (uint)imm, src));
		}
		/// <summary>out instruction.<br/>
		/// <br/>
		/// <c>OUT DX, AX</c><br/>
		/// <br/>
		/// <c>o16 EF</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void @out(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Out_DX_AX;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>out instruction.<br/>
		/// <br/>
		/// <c>OUT imm8, AX</c><br/>
		/// <br/>
		/// <c>o16 E7 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void @out(sbyte imm, AssemblerRegister16 src) {
			Code op;
			op = Code.Out_imm8_AX;
			AddInstruction(Instruction.Create(op, imm, src));
		}
		/// <summary>out instruction.<br/>
		/// <br/>
		/// <c>OUT imm8, AX</c><br/>
		/// <br/>
		/// <c>o16 E7 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void @out(byte imm, AssemblerRegister16 src) {
			Code op;
			op = Code.Out_imm8_AX;
			AddInstruction(Instruction.Create(op, (uint)imm, src));
		}
		/// <summary>out instruction.<br/>
		/// <br/>
		/// <c>OUT DX, EAX</c><br/>
		/// <br/>
		/// <c>o32 EF</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void @out(AssemblerRegister16 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Out_DX_EAX;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>out instruction.<br/>
		/// <br/>
		/// <c>OUT imm8, EAX</c><br/>
		/// <br/>
		/// <c>o32 E7 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void @out(sbyte imm, AssemblerRegister32 src) {
			Code op;
			op = Code.Out_imm8_EAX;
			AddInstruction(Instruction.Create(op, imm, src));
		}
		/// <summary>out instruction.<br/>
		/// <br/>
		/// <c>OUT imm8, EAX</c><br/>
		/// <br/>
		/// <c>o32 E7 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void @out(byte imm, AssemblerRegister32 src) {
			Code op;
			op = Code.Out_imm8_EAX;
			AddInstruction(Instruction.Create(op, (uint)imm, src));
		}
		/// <summary>outsb instruction.<br/>
		/// <br/>
		/// <c>OUTSB</c><br/>
		/// <br/>
		/// <c>6E</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void outsb() {
			AddInstruction(Instruction.CreateOutsb(Bitness));
		}
		/// <summary>outsd instruction.<br/>
		/// <br/>
		/// <c>OUTSD</c><br/>
		/// <br/>
		/// <c>o32 6F</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void outsd() {
			AddInstruction(Instruction.CreateOutsd(Bitness));
		}
		/// <summary>outsw instruction.<br/>
		/// <br/>
		/// <c>OUTSW</c><br/>
		/// <br/>
		/// <c>o16 6F</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void outsw() {
			AddInstruction(Instruction.CreateOutsw(Bitness));
		}
		/// <summary>pabsb instruction.<br/>
		/// <br/>
		/// <c>PABSB mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 1C /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pabsb(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Pabsb_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pabsb instruction.<br/>
		/// <br/>
		/// <c>PABSB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 1C /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pabsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pabsb_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pabsb instruction.<br/>
		/// <br/>
		/// <c>PABSB mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 1C /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pabsb(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pabsb_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pabsb instruction.<br/>
		/// <br/>
		/// <c>PABSB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 1C /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pabsb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pabsb_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pabsd instruction.<br/>
		/// <br/>
		/// <c>PABSD mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 1E /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pabsd(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Pabsd_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pabsd instruction.<br/>
		/// <br/>
		/// <c>PABSD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 1E /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pabsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pabsd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pabsd instruction.<br/>
		/// <br/>
		/// <c>PABSD mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 1E /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pabsd(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pabsd_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pabsd instruction.<br/>
		/// <br/>
		/// <c>PABSD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 1E /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pabsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pabsd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pabsw instruction.<br/>
		/// <br/>
		/// <c>PABSW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 1D /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pabsw(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Pabsw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pabsw instruction.<br/>
		/// <br/>
		/// <c>PABSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 1D /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pabsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pabsw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pabsw instruction.<br/>
		/// <br/>
		/// <c>PABSW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 1D /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pabsw(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pabsw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pabsw instruction.<br/>
		/// <br/>
		/// <c>PABSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 1D /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pabsw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pabsw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>packssdw instruction.<br/>
		/// <br/>
		/// <c>PACKSSDW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 6B /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void packssdw(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Packssdw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>packssdw instruction.<br/>
		/// <br/>
		/// <c>PACKSSDW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 6B /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void packssdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Packssdw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>packssdw instruction.<br/>
		/// <br/>
		/// <c>PACKSSDW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 6B /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void packssdw(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Packssdw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>packssdw instruction.<br/>
		/// <br/>
		/// <c>PACKSSDW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 6B /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void packssdw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Packssdw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>packsswb instruction.<br/>
		/// <br/>
		/// <c>PACKSSWB mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 63 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void packsswb(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Packsswb_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>packsswb instruction.<br/>
		/// <br/>
		/// <c>PACKSSWB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 63 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void packsswb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Packsswb_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>packsswb instruction.<br/>
		/// <br/>
		/// <c>PACKSSWB mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 63 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void packsswb(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Packsswb_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>packsswb instruction.<br/>
		/// <br/>
		/// <c>PACKSSWB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 63 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void packsswb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Packsswb_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>packusdw instruction.<br/>
		/// <br/>
		/// <c>PACKUSDW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 2B /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void packusdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Packusdw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>packusdw instruction.<br/>
		/// <br/>
		/// <c>PACKUSDW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 2B /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void packusdw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Packusdw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>packuswb instruction.<br/>
		/// <br/>
		/// <c>PACKUSWB mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 67 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void packuswb(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Packuswb_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>packuswb instruction.<br/>
		/// <br/>
		/// <c>PACKUSWB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 67 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void packuswb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Packuswb_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>packuswb instruction.<br/>
		/// <br/>
		/// <c>PACKUSWB mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 67 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void packuswb(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Packuswb_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>packuswb instruction.<br/>
		/// <br/>
		/// <c>PACKUSWB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 67 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void packuswb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Packuswb_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>paddb instruction.<br/>
		/// <br/>
		/// <c>PADDB mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F FC /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void paddb(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Paddb_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>paddb instruction.<br/>
		/// <br/>
		/// <c>PADDB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F FC /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void paddb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Paddb_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>paddb instruction.<br/>
		/// <br/>
		/// <c>PADDB mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F FC /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void paddb(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Paddb_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>paddb instruction.<br/>
		/// <br/>
		/// <c>PADDB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F FC /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void paddb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Paddb_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>paddd instruction.<br/>
		/// <br/>
		/// <c>PADDD mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F FE /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void paddd(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Paddd_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>paddd instruction.<br/>
		/// <br/>
		/// <c>PADDD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F FE /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void paddd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Paddd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>paddd instruction.<br/>
		/// <br/>
		/// <c>PADDD mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F FE /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void paddd(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Paddd_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>paddd instruction.<br/>
		/// <br/>
		/// <c>PADDD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F FE /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void paddd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Paddd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>paddq instruction.<br/>
		/// <br/>
		/// <c>PADDQ mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F D4 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void paddq(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Paddq_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>paddq instruction.<br/>
		/// <br/>
		/// <c>PADDQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F D4 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void paddq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Paddq_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>paddq instruction.<br/>
		/// <br/>
		/// <c>PADDQ mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F D4 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void paddq(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Paddq_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>paddq instruction.<br/>
		/// <br/>
		/// <c>PADDQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F D4 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void paddq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Paddq_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>paddsb instruction.<br/>
		/// <br/>
		/// <c>PADDSB mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F EC /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void paddsb(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Paddsb_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>paddsb instruction.<br/>
		/// <br/>
		/// <c>PADDSB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F EC /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void paddsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Paddsb_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>paddsb instruction.<br/>
		/// <br/>
		/// <c>PADDSB mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F EC /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void paddsb(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Paddsb_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>paddsb instruction.<br/>
		/// <br/>
		/// <c>PADDSB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F EC /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void paddsb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Paddsb_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>paddsw instruction.<br/>
		/// <br/>
		/// <c>PADDSW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F ED /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void paddsw(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Paddsw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>paddsw instruction.<br/>
		/// <br/>
		/// <c>PADDSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F ED /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void paddsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Paddsw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>paddsw instruction.<br/>
		/// <br/>
		/// <c>PADDSW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F ED /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void paddsw(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Paddsw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>paddsw instruction.<br/>
		/// <br/>
		/// <c>PADDSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F ED /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void paddsw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Paddsw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>paddusb instruction.<br/>
		/// <br/>
		/// <c>PADDUSB mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F DC /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void paddusb(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Paddusb_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>paddusb instruction.<br/>
		/// <br/>
		/// <c>PADDUSB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F DC /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void paddusb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Paddusb_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>paddusb instruction.<br/>
		/// <br/>
		/// <c>PADDUSB mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F DC /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void paddusb(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Paddusb_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>paddusb instruction.<br/>
		/// <br/>
		/// <c>PADDUSB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F DC /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void paddusb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Paddusb_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>paddusw instruction.<br/>
		/// <br/>
		/// <c>PADDUSW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F DD /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void paddusw(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Paddusw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>paddusw instruction.<br/>
		/// <br/>
		/// <c>PADDUSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F DD /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void paddusw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Paddusw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>paddusw instruction.<br/>
		/// <br/>
		/// <c>PADDUSW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F DD /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void paddusw(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Paddusw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>paddusw instruction.<br/>
		/// <br/>
		/// <c>PADDUSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F DD /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void paddusw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Paddusw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>paddw instruction.<br/>
		/// <br/>
		/// <c>PADDW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F FD /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void paddw(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Paddw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>paddw instruction.<br/>
		/// <br/>
		/// <c>PADDW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F FD /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void paddw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Paddw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>paddw instruction.<br/>
		/// <br/>
		/// <c>PADDW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F FD /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void paddw(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Paddw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>paddw instruction.<br/>
		/// <br/>
		/// <c>PADDW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F FD /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void paddw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Paddw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>palignr instruction.<br/>
		/// <br/>
		/// <c>PALIGNR mm1, mm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 3A 0F /r ib</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void palignr(AssemblerRegisterMM dst, AssemblerRegisterMM src1, sbyte imm) {
			Code op;
			op = Code.Palignr_mm_mmm64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>palignr instruction.<br/>
		/// <br/>
		/// <c>PALIGNR xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0F /r ib</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void palignr(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.Palignr_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>palignr instruction.<br/>
		/// <br/>
		/// <c>PALIGNR mm1, mm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 3A 0F /r ib</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void palignr(AssemblerRegisterMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.Palignr_mm_mmm64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>palignr instruction.<br/>
		/// <br/>
		/// <c>PALIGNR xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0F /r ib</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void palignr(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.Palignr_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>palignr instruction.<br/>
		/// <br/>
		/// <c>PALIGNR mm1, mm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 3A 0F /r ib</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void palignr(AssemblerRegisterMM dst, AssemblerRegisterMM src1, byte imm) {
			Code op;
			op = Code.Palignr_mm_mmm64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>palignr instruction.<br/>
		/// <br/>
		/// <c>PALIGNR xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0F /r ib</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void palignr(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.Palignr_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>palignr instruction.<br/>
		/// <br/>
		/// <c>PALIGNR mm1, mm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 3A 0F /r ib</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void palignr(AssemblerRegisterMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.Palignr_mm_mmm64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>palignr instruction.<br/>
		/// <br/>
		/// <c>PALIGNR xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0F /r ib</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void palignr(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.Palignr_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>pand instruction.<br/>
		/// <br/>
		/// <c>PAND mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F DB /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pand(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Pand_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pand instruction.<br/>
		/// <br/>
		/// <c>PAND xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F DB /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pand(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pand_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pand instruction.<br/>
		/// <br/>
		/// <c>PAND mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F DB /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pand(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pand_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pand instruction.<br/>
		/// <br/>
		/// <c>PAND xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F DB /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pand(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pand_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pandn instruction.<br/>
		/// <br/>
		/// <c>PANDN mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F DF /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pandn(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Pandn_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pandn instruction.<br/>
		/// <br/>
		/// <c>PANDN xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F DF /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pandn(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pandn_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pandn instruction.<br/>
		/// <br/>
		/// <c>PANDN mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F DF /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pandn(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pandn_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pandn instruction.<br/>
		/// <br/>
		/// <c>PANDN xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F DF /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pandn(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pandn_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pause instruction.<br/>
		/// <br/>
		/// <c>PAUSE</c><br/>
		/// <br/>
		/// <c>F3 90</c><br/>
		/// <br/>
		/// <c>Pentium 4 or later</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pause() {
			Code op;
			op = Code.Pause;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>pavgb instruction.<br/>
		/// <br/>
		/// <c>PAVGB mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F E0 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pavgb(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Pavgb_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pavgb instruction.<br/>
		/// <br/>
		/// <c>PAVGB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F E0 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pavgb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pavgb_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pavgb instruction.<br/>
		/// <br/>
		/// <c>PAVGB mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F E0 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pavgb(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pavgb_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pavgb instruction.<br/>
		/// <br/>
		/// <c>PAVGB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F E0 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pavgb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pavgb_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pavgusb instruction.<br/>
		/// <br/>
		/// <c>PAVGUSB mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r BF</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pavgusb(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.D3NOW_Pavgusb_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pavgusb instruction.<br/>
		/// <br/>
		/// <c>PAVGUSB mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r BF</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pavgusb(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.D3NOW_Pavgusb_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pavgw instruction.<br/>
		/// <br/>
		/// <c>PAVGW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F E3 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pavgw(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Pavgw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pavgw instruction.<br/>
		/// <br/>
		/// <c>PAVGW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F E3 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pavgw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pavgw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pavgw instruction.<br/>
		/// <br/>
		/// <c>PAVGW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F E3 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pavgw(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pavgw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pavgw instruction.<br/>
		/// <br/>
		/// <c>PAVGW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F E3 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pavgw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pavgw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pblendvb instruction.<br/>
		/// <br/>
		/// <c>PBLENDVB xmm1, xmm2/m128, &lt;XMM0&gt;</c><br/>
		/// <br/>
		/// <c>66 0F 38 10 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pblendvb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pblendvb_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pblendvb instruction.<br/>
		/// <br/>
		/// <c>PBLENDVB xmm1, xmm2/m128, &lt;XMM0&gt;</c><br/>
		/// <br/>
		/// <c>66 0F 38 10 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pblendvb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pblendvb_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pblendw instruction.<br/>
		/// <br/>
		/// <c>PBLENDW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0E /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pblendw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.Pblendw_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>pblendw instruction.<br/>
		/// <br/>
		/// <c>PBLENDW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0E /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pblendw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.Pblendw_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>pblendw instruction.<br/>
		/// <br/>
		/// <c>PBLENDW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0E /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pblendw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.Pblendw_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>pblendw instruction.<br/>
		/// <br/>
		/// <c>PBLENDW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0E /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pblendw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.Pblendw_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>pclmulhqhqdq instruction.</summary>
		public void pclmulhqhqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			pclmulqdq(dst, src, 17);
		}
		/// <summary>pclmulhqhqdq instruction.</summary>
		public void pclmulhqhqdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			pclmulqdq(dst, src, 17);
		}
		/// <summary>pclmulhqlqdq instruction.</summary>
		public void pclmulhqlqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			pclmulqdq(dst, src, 1);
		}
		/// <summary>pclmulhqlqdq instruction.</summary>
		public void pclmulhqlqdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			pclmulqdq(dst, src, 1);
		}
		/// <summary>pclmullqhqdq instruction.</summary>
		public void pclmullqhqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			pclmulqdq(dst, src, 16);
		}
		/// <summary>pclmullqhqdq instruction.</summary>
		public void pclmullqhqdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			pclmulqdq(dst, src, 16);
		}
		/// <summary>pclmullqlqdq instruction.</summary>
		public void pclmullqlqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			pclmulqdq(dst, src, 0);
		}
		/// <summary>pclmullqlqdq instruction.</summary>
		public void pclmullqlqdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			pclmulqdq(dst, src, 0);
		}
		/// <summary>pclmulqdq instruction.<br/>
		/// <br/>
		/// <c>PCLMULQDQ xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 44 /r ib</c><br/>
		/// <br/>
		/// <c>PCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pclmulqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.Pclmulqdq_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>pclmulqdq instruction.<br/>
		/// <br/>
		/// <c>PCLMULQDQ xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 44 /r ib</c><br/>
		/// <br/>
		/// <c>PCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pclmulqdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.Pclmulqdq_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>pclmulqdq instruction.<br/>
		/// <br/>
		/// <c>PCLMULQDQ xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 44 /r ib</c><br/>
		/// <br/>
		/// <c>PCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pclmulqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.Pclmulqdq_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>pclmulqdq instruction.<br/>
		/// <br/>
		/// <c>PCLMULQDQ xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 44 /r ib</c><br/>
		/// <br/>
		/// <c>PCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pclmulqdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.Pclmulqdq_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>pcmpeqb instruction.<br/>
		/// <br/>
		/// <c>PCMPEQB mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 74 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pcmpeqb(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Pcmpeqb_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pcmpeqb instruction.<br/>
		/// <br/>
		/// <c>PCMPEQB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 74 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pcmpeqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pcmpeqb_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pcmpeqb instruction.<br/>
		/// <br/>
		/// <c>PCMPEQB mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 74 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pcmpeqb(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pcmpeqb_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pcmpeqb instruction.<br/>
		/// <br/>
		/// <c>PCMPEQB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 74 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pcmpeqb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pcmpeqb_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pcmpeqd instruction.<br/>
		/// <br/>
		/// <c>PCMPEQD mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 76 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pcmpeqd(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Pcmpeqd_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pcmpeqd instruction.<br/>
		/// <br/>
		/// <c>PCMPEQD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 76 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pcmpeqd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pcmpeqd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pcmpeqd instruction.<br/>
		/// <br/>
		/// <c>PCMPEQD mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 76 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pcmpeqd(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pcmpeqd_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pcmpeqd instruction.<br/>
		/// <br/>
		/// <c>PCMPEQD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 76 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pcmpeqd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pcmpeqd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pcmpeqq instruction.<br/>
		/// <br/>
		/// <c>PCMPEQQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 29 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pcmpeqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pcmpeqq_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pcmpeqq instruction.<br/>
		/// <br/>
		/// <c>PCMPEQQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 29 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pcmpeqq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pcmpeqq_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pcmpeqw instruction.<br/>
		/// <br/>
		/// <c>PCMPEQW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 75 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pcmpeqw(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Pcmpeqw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pcmpeqw instruction.<br/>
		/// <br/>
		/// <c>PCMPEQW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 75 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pcmpeqw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pcmpeqw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pcmpeqw instruction.<br/>
		/// <br/>
		/// <c>PCMPEQW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 75 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pcmpeqw(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pcmpeqw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pcmpeqw instruction.<br/>
		/// <br/>
		/// <c>PCMPEQW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 75 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pcmpeqw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pcmpeqw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pcmpestri instruction.<br/>
		/// <br/>
		/// <c>PCMPESTRI xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 61 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pcmpestri(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.Pcmpestri_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>pcmpestri instruction.<br/>
		/// <br/>
		/// <c>PCMPESTRI xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 61 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pcmpestri(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.Pcmpestri_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>pcmpestri instruction.<br/>
		/// <br/>
		/// <c>PCMPESTRI xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 61 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pcmpestri(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.Pcmpestri_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>pcmpestri instruction.<br/>
		/// <br/>
		/// <c>PCMPESTRI xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 61 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pcmpestri(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.Pcmpestri_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>pcmpestri64 instruction.<br/>
		/// <br/>
		/// <c>PCMPESTRI64 xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 REX.W 0F 3A 61 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void pcmpestri64(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.Pcmpestri64_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>pcmpestri64 instruction.<br/>
		/// <br/>
		/// <c>PCMPESTRI64 xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 REX.W 0F 3A 61 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void pcmpestri64(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.Pcmpestri64_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>pcmpestri64 instruction.<br/>
		/// <br/>
		/// <c>PCMPESTRI64 xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 REX.W 0F 3A 61 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void pcmpestri64(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.Pcmpestri64_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>pcmpestri64 instruction.<br/>
		/// <br/>
		/// <c>PCMPESTRI64 xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 REX.W 0F 3A 61 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void pcmpestri64(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.Pcmpestri64_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>pcmpestrm instruction.<br/>
		/// <br/>
		/// <c>PCMPESTRM xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 60 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pcmpestrm(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.Pcmpestrm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>pcmpestrm instruction.<br/>
		/// <br/>
		/// <c>PCMPESTRM xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 60 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pcmpestrm(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.Pcmpestrm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>pcmpestrm instruction.<br/>
		/// <br/>
		/// <c>PCMPESTRM xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 60 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pcmpestrm(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.Pcmpestrm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>pcmpestrm instruction.<br/>
		/// <br/>
		/// <c>PCMPESTRM xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 60 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pcmpestrm(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.Pcmpestrm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>pcmpestrm64 instruction.<br/>
		/// <br/>
		/// <c>PCMPESTRM64 xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 REX.W 0F 3A 60 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void pcmpestrm64(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.Pcmpestrm64_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>pcmpestrm64 instruction.<br/>
		/// <br/>
		/// <c>PCMPESTRM64 xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 REX.W 0F 3A 60 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void pcmpestrm64(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.Pcmpestrm64_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>pcmpestrm64 instruction.<br/>
		/// <br/>
		/// <c>PCMPESTRM64 xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 REX.W 0F 3A 60 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void pcmpestrm64(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.Pcmpestrm64_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>pcmpestrm64 instruction.<br/>
		/// <br/>
		/// <c>PCMPESTRM64 xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 REX.W 0F 3A 60 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void pcmpestrm64(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.Pcmpestrm64_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>pcmpgtb instruction.<br/>
		/// <br/>
		/// <c>PCMPGTB mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 64 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pcmpgtb(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Pcmpgtb_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pcmpgtb instruction.<br/>
		/// <br/>
		/// <c>PCMPGTB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 64 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pcmpgtb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pcmpgtb_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pcmpgtb instruction.<br/>
		/// <br/>
		/// <c>PCMPGTB mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 64 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pcmpgtb(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pcmpgtb_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pcmpgtb instruction.<br/>
		/// <br/>
		/// <c>PCMPGTB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 64 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pcmpgtb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pcmpgtb_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pcmpgtd instruction.<br/>
		/// <br/>
		/// <c>PCMPGTD mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 66 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pcmpgtd(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Pcmpgtd_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pcmpgtd instruction.<br/>
		/// <br/>
		/// <c>PCMPGTD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 66 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pcmpgtd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pcmpgtd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pcmpgtd instruction.<br/>
		/// <br/>
		/// <c>PCMPGTD mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 66 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pcmpgtd(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pcmpgtd_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pcmpgtd instruction.<br/>
		/// <br/>
		/// <c>PCMPGTD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 66 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pcmpgtd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pcmpgtd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pcmpgtq instruction.<br/>
		/// <br/>
		/// <c>PCMPGTQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 37 /r</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pcmpgtq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pcmpgtq_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pcmpgtq instruction.<br/>
		/// <br/>
		/// <c>PCMPGTQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 37 /r</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pcmpgtq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pcmpgtq_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pcmpgtw instruction.<br/>
		/// <br/>
		/// <c>PCMPGTW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 65 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pcmpgtw(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Pcmpgtw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pcmpgtw instruction.<br/>
		/// <br/>
		/// <c>PCMPGTW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 65 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pcmpgtw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pcmpgtw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pcmpgtw instruction.<br/>
		/// <br/>
		/// <c>PCMPGTW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 65 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pcmpgtw(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pcmpgtw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pcmpgtw instruction.<br/>
		/// <br/>
		/// <c>PCMPGTW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 65 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pcmpgtw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pcmpgtw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pcmpistri instruction.<br/>
		/// <br/>
		/// <c>PCMPISTRI xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 63 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pcmpistri(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.Pcmpistri_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>pcmpistri instruction.<br/>
		/// <br/>
		/// <c>PCMPISTRI xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 63 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pcmpistri(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.Pcmpistri_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>pcmpistri instruction.<br/>
		/// <br/>
		/// <c>PCMPISTRI xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 63 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pcmpistri(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.Pcmpistri_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>pcmpistri instruction.<br/>
		/// <br/>
		/// <c>PCMPISTRI xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 63 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pcmpistri(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.Pcmpistri_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>pcmpistrm instruction.<br/>
		/// <br/>
		/// <c>PCMPISTRM xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 62 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pcmpistrm(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.Pcmpistrm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>pcmpistrm instruction.<br/>
		/// <br/>
		/// <c>PCMPISTRM xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 62 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pcmpistrm(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.Pcmpistrm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>pcmpistrm instruction.<br/>
		/// <br/>
		/// <c>PCMPISTRM xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 62 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pcmpistrm(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.Pcmpistrm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>pcmpistrm instruction.<br/>
		/// <br/>
		/// <c>PCMPISTRM xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 62 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pcmpistrm(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.Pcmpistrm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>pcommit instruction.<br/>
		/// <br/>
		/// <c>PCOMMIT</c><br/>
		/// <br/>
		/// <c>66 0F AE F8</c><br/>
		/// <br/>
		/// <c>PCOMMIT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pcommit() {
			Code op;
			op = Code.Pcommit;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>pconfig instruction.<br/>
		/// <br/>
		/// <c>PCONFIG</c><br/>
		/// <br/>
		/// <c>NP 0F 01 C5</c><br/>
		/// <br/>
		/// <c>PCONFIG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pconfig() {
			Code op;
			op = Code.Pconfig;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>pdep instruction.<br/>
		/// <br/>
		/// <c>PDEP r32a, r32b, r/m32</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F2.0F38.W0 F5 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pdep(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerRegister32 src2) {
			Code op;
			op = Code.VEX_Pdep_r32_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>pdep instruction.<br/>
		/// <br/>
		/// <c>PDEP r64a, r64b, r/m64</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F2.0F38.W1 F5 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void pdep(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerRegister64 src2) {
			Code op;
			op = Code.VEX_Pdep_r64_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>pdep instruction.<br/>
		/// <br/>
		/// <c>PDEP r32a, r32b, r/m32</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F2.0F38.W0 F5 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pdep(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Pdep_r32_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>pdep instruction.<br/>
		/// <br/>
		/// <c>PDEP r64a, r64b, r/m64</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F2.0F38.W1 F5 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void pdep(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Pdep_r64_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>pext instruction.<br/>
		/// <br/>
		/// <c>PEXT r32a, r32b, r/m32</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F3.0F38.W0 F5 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pext(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerRegister32 src2) {
			Code op;
			op = Code.VEX_Pext_r32_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>pext instruction.<br/>
		/// <br/>
		/// <c>PEXT r64a, r64b, r/m64</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F3.0F38.W1 F5 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void pext(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerRegister64 src2) {
			Code op;
			op = Code.VEX_Pext_r64_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>pext instruction.<br/>
		/// <br/>
		/// <c>PEXT r32a, r32b, r/m32</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F3.0F38.W0 F5 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pext(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Pext_r32_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>pext instruction.<br/>
		/// <br/>
		/// <c>PEXT r64a, r64b, r/m64</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F3.0F38.W1 F5 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void pext(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Pext_r64_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>pextrb instruction.<br/>
		/// <br/>
		/// <c>PEXTRB r32/m8, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 14 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pextrb(AssemblerRegister32 dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.Pextrb_r32m8_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>pextrb instruction.<br/>
		/// <br/>
		/// <c>PEXTRB r64/m8, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>66 REX.W 0F 3A 14 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void pextrb(AssemblerRegister64 dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.Pextrb_r64m8_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>pextrb instruction.<br/>
		/// <br/>
		/// <c>PEXTRB r32/m8, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 14 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pextrb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.Pextrb_r32m8_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, imm));
		}
		/// <summary>pextrb instruction.<br/>
		/// <br/>
		/// <c>PEXTRB r32/m8, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 14 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pextrb(AssemblerRegister32 dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.Pextrb_r32m8_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>pextrb instruction.<br/>
		/// <br/>
		/// <c>PEXTRB r64/m8, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>66 REX.W 0F 3A 14 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void pextrb(AssemblerRegister64 dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.Pextrb_r64m8_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>pextrb instruction.<br/>
		/// <br/>
		/// <c>PEXTRB r32/m8, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 14 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pextrb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.Pextrb_r32m8_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, (uint)imm));
		}
		/// <summary>pextrd instruction.<br/>
		/// <br/>
		/// <c>PEXTRD r/m32, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 16 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pextrd(AssemblerRegister32 dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.Pextrd_rm32_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>pextrd instruction.<br/>
		/// <br/>
		/// <c>PEXTRD r/m32, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 16 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pextrd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.Pextrd_rm32_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, imm));
		}
		/// <summary>pextrd instruction.<br/>
		/// <br/>
		/// <c>PEXTRD r/m32, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 16 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pextrd(AssemblerRegister32 dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.Pextrd_rm32_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>pextrd instruction.<br/>
		/// <br/>
		/// <c>PEXTRD r/m32, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 16 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pextrd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.Pextrd_rm32_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, (uint)imm));
		}
		/// <summary>pextrq instruction.<br/>
		/// <br/>
		/// <c>PEXTRQ r/m64, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>66 REX.W 0F 3A 16 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void pextrq(AssemblerRegister64 dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.Pextrq_rm64_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>pextrq instruction.<br/>
		/// <br/>
		/// <c>PEXTRQ r/m64, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>66 REX.W 0F 3A 16 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void pextrq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.Pextrq_rm64_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, imm));
		}
		/// <summary>pextrq instruction.<br/>
		/// <br/>
		/// <c>PEXTRQ r/m64, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>66 REX.W 0F 3A 16 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void pextrq(AssemblerRegister64 dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.Pextrq_rm64_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>pextrq instruction.<br/>
		/// <br/>
		/// <c>PEXTRQ r/m64, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>66 REX.W 0F 3A 16 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void pextrq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.Pextrq_rm64_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, (uint)imm));
		}
		/// <summary>pextrw instruction.<br/>
		/// <br/>
		/// <c>PEXTRW r32, mm, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F C5 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pextrw(AssemblerRegister32 dst, AssemblerRegisterMM src1, sbyte imm) {
			Code op;
			op = Code.Pextrw_r32_mm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>pextrw instruction.<br/>
		/// <br/>
		/// <c>PEXTRW r64, mm, imm8</c><br/>
		/// <br/>
		/// <c>NP REX.W 0F C5 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void pextrw(AssemblerRegister64 dst, AssemblerRegisterMM src1, sbyte imm) {
			Code op;
			op = Code.Pextrw_r64_mm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>pextrw instruction.<br/>
		/// <br/>
		/// <c>PEXTRW r32, xmm, imm8</c><br/>
		/// <br/>
		/// <c>66 0F C5 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pextrw(AssemblerRegister32 dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.Pextrw_r32_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>pextrw instruction.<br/>
		/// <br/>
		/// <c>PEXTRW r64, xmm, imm8</c><br/>
		/// <br/>
		/// <c>66 REX.W 0F C5 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void pextrw(AssemblerRegister64 dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.Pextrw_r64_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>pextrw instruction.<br/>
		/// <br/>
		/// <c>PEXTRW r32/m16, xmm, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 15 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pextrw(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.Pextrw_r32m16_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, imm));
		}
		/// <summary>pextrw instruction.<br/>
		/// <br/>
		/// <c>PEXTRW r32, mm, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F C5 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pextrw(AssemblerRegister32 dst, AssemblerRegisterMM src1, byte imm) {
			Code op;
			op = Code.Pextrw_r32_mm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>pextrw instruction.<br/>
		/// <br/>
		/// <c>PEXTRW r64, mm, imm8</c><br/>
		/// <br/>
		/// <c>NP REX.W 0F C5 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void pextrw(AssemblerRegister64 dst, AssemblerRegisterMM src1, byte imm) {
			Code op;
			op = Code.Pextrw_r64_mm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>pextrw instruction.<br/>
		/// <br/>
		/// <c>PEXTRW r32, xmm, imm8</c><br/>
		/// <br/>
		/// <c>66 0F C5 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pextrw(AssemblerRegister32 dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.Pextrw_r32_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>pextrw instruction.<br/>
		/// <br/>
		/// <c>PEXTRW r64, xmm, imm8</c><br/>
		/// <br/>
		/// <c>66 REX.W 0F C5 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void pextrw(AssemblerRegister64 dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.Pextrw_r64_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>pextrw instruction.<br/>
		/// <br/>
		/// <c>PEXTRW r32/m16, xmm, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 15 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pextrw(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.Pextrw_r32m16_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, (uint)imm));
		}
		/// <summary>pf2id instruction.<br/>
		/// <br/>
		/// <c>PF2ID mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 1D</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pf2id(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.D3NOW_Pf2id_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pf2id instruction.<br/>
		/// <br/>
		/// <c>PF2ID mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 1D</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pf2id(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.D3NOW_Pf2id_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pf2iw instruction.<br/>
		/// <br/>
		/// <c>PF2IW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 1C</c><br/>
		/// <br/>
		/// <c>3DNOWEXT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pf2iw(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.D3NOW_Pf2iw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pf2iw instruction.<br/>
		/// <br/>
		/// <c>PF2IW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 1C</c><br/>
		/// <br/>
		/// <c>3DNOWEXT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pf2iw(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.D3NOW_Pf2iw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pfacc instruction.<br/>
		/// <br/>
		/// <c>PFACC mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r AE</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pfacc(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.D3NOW_Pfacc_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pfacc instruction.<br/>
		/// <br/>
		/// <c>PFACC mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r AE</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pfacc(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.D3NOW_Pfacc_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pfadd instruction.<br/>
		/// <br/>
		/// <c>PFADD mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 9E</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pfadd(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.D3NOW_Pfadd_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pfadd instruction.<br/>
		/// <br/>
		/// <c>PFADD mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 9E</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pfadd(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.D3NOW_Pfadd_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pfcmpeq instruction.<br/>
		/// <br/>
		/// <c>PFCMPEQ mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r B0</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pfcmpeq(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.D3NOW_Pfcmpeq_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pfcmpeq instruction.<br/>
		/// <br/>
		/// <c>PFCMPEQ mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r B0</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pfcmpeq(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.D3NOW_Pfcmpeq_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pfcmpge instruction.<br/>
		/// <br/>
		/// <c>PFCMPGE mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 90</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pfcmpge(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.D3NOW_Pfcmpge_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pfcmpge instruction.<br/>
		/// <br/>
		/// <c>PFCMPGE mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 90</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pfcmpge(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.D3NOW_Pfcmpge_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pfcmpgt instruction.<br/>
		/// <br/>
		/// <c>PFCMPGT mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r A0</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pfcmpgt(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.D3NOW_Pfcmpgt_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pfcmpgt instruction.<br/>
		/// <br/>
		/// <c>PFCMPGT mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r A0</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pfcmpgt(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.D3NOW_Pfcmpgt_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pfmax instruction.<br/>
		/// <br/>
		/// <c>PFMAX mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r A4</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pfmax(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.D3NOW_Pfmax_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pfmax instruction.<br/>
		/// <br/>
		/// <c>PFMAX mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r A4</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pfmax(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.D3NOW_Pfmax_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pfmin instruction.<br/>
		/// <br/>
		/// <c>PFMIN mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 94</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pfmin(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.D3NOW_Pfmin_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pfmin instruction.<br/>
		/// <br/>
		/// <c>PFMIN mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 94</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pfmin(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.D3NOW_Pfmin_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pfmul instruction.<br/>
		/// <br/>
		/// <c>PFMUL mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r B4</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pfmul(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.D3NOW_Pfmul_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pfmul instruction.<br/>
		/// <br/>
		/// <c>PFMUL mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r B4</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pfmul(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.D3NOW_Pfmul_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pfnacc instruction.<br/>
		/// <br/>
		/// <c>PFNACC mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 8A</c><br/>
		/// <br/>
		/// <c>3DNOWEXT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pfnacc(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.D3NOW_Pfnacc_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pfnacc instruction.<br/>
		/// <br/>
		/// <c>PFNACC mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 8A</c><br/>
		/// <br/>
		/// <c>3DNOWEXT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pfnacc(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.D3NOW_Pfnacc_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pfpnacc instruction.<br/>
		/// <br/>
		/// <c>PFPNACC mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 8E</c><br/>
		/// <br/>
		/// <c>3DNOWEXT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pfpnacc(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.D3NOW_Pfpnacc_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pfpnacc instruction.<br/>
		/// <br/>
		/// <c>PFPNACC mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 8E</c><br/>
		/// <br/>
		/// <c>3DNOWEXT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pfpnacc(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.D3NOW_Pfpnacc_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pfrcp instruction.<br/>
		/// <br/>
		/// <c>PFRCP mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 96</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pfrcp(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.D3NOW_Pfrcp_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pfrcp instruction.<br/>
		/// <br/>
		/// <c>PFRCP mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 96</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pfrcp(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.D3NOW_Pfrcp_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pfrcpit1 instruction.<br/>
		/// <br/>
		/// <c>PFRCPIT1 mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r A6</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pfrcpit1(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.D3NOW_Pfrcpit1_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pfrcpit1 instruction.<br/>
		/// <br/>
		/// <c>PFRCPIT1 mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r A6</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pfrcpit1(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.D3NOW_Pfrcpit1_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pfrcpit2 instruction.<br/>
		/// <br/>
		/// <c>PFRCPIT2 mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r B6</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pfrcpit2(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.D3NOW_Pfrcpit2_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pfrcpit2 instruction.<br/>
		/// <br/>
		/// <c>PFRCPIT2 mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r B6</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pfrcpit2(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.D3NOW_Pfrcpit2_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pfrcpv instruction.<br/>
		/// <br/>
		/// <c>PFRCPV mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 86</c><br/>
		/// <br/>
		/// <c>AMD Geode LX/GX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pfrcpv(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.D3NOW_Pfrcpv_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pfrcpv instruction.<br/>
		/// <br/>
		/// <c>PFRCPV mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 86</c><br/>
		/// <br/>
		/// <c>AMD Geode LX/GX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pfrcpv(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.D3NOW_Pfrcpv_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pfrsqit1 instruction.<br/>
		/// <br/>
		/// <c>PFRSQIT1 mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r A7</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pfrsqit1(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.D3NOW_Pfrsqit1_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pfrsqit1 instruction.<br/>
		/// <br/>
		/// <c>PFRSQIT1 mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r A7</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pfrsqit1(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.D3NOW_Pfrsqit1_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pfrsqrt instruction.<br/>
		/// <br/>
		/// <c>PFRSQRT mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 97</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pfrsqrt(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.D3NOW_Pfrsqrt_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pfrsqrt instruction.<br/>
		/// <br/>
		/// <c>PFRSQRT mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 97</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pfrsqrt(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.D3NOW_Pfrsqrt_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pfrsqrtv instruction.<br/>
		/// <br/>
		/// <c>PFRSQRTV mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 87</c><br/>
		/// <br/>
		/// <c>AMD Geode LX/GX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pfrsqrtv(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.D3NOW_Pfrsqrtv_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pfrsqrtv instruction.<br/>
		/// <br/>
		/// <c>PFRSQRTV mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 87</c><br/>
		/// <br/>
		/// <c>AMD Geode LX/GX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pfrsqrtv(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.D3NOW_Pfrsqrtv_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pfsub instruction.<br/>
		/// <br/>
		/// <c>PFSUB mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 9A</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pfsub(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.D3NOW_Pfsub_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pfsub instruction.<br/>
		/// <br/>
		/// <c>PFSUB mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 9A</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pfsub(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.D3NOW_Pfsub_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pfsubr instruction.<br/>
		/// <br/>
		/// <c>PFSUBR mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r AA</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pfsubr(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.D3NOW_Pfsubr_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pfsubr instruction.<br/>
		/// <br/>
		/// <c>PFSUBR mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r AA</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pfsubr(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.D3NOW_Pfsubr_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>phaddd instruction.<br/>
		/// <br/>
		/// <c>PHADDD mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 02 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void phaddd(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Phaddd_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>phaddd instruction.<br/>
		/// <br/>
		/// <c>PHADDD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 02 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void phaddd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Phaddd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>phaddd instruction.<br/>
		/// <br/>
		/// <c>PHADDD mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 02 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void phaddd(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Phaddd_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>phaddd instruction.<br/>
		/// <br/>
		/// <c>PHADDD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 02 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void phaddd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Phaddd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>phaddsw instruction.<br/>
		/// <br/>
		/// <c>PHADDSW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 03 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void phaddsw(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Phaddsw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>phaddsw instruction.<br/>
		/// <br/>
		/// <c>PHADDSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 03 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void phaddsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Phaddsw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>phaddsw instruction.<br/>
		/// <br/>
		/// <c>PHADDSW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 03 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void phaddsw(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Phaddsw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>phaddsw instruction.<br/>
		/// <br/>
		/// <c>PHADDSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 03 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void phaddsw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Phaddsw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>phaddw instruction.<br/>
		/// <br/>
		/// <c>PHADDW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 01 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void phaddw(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Phaddw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>phaddw instruction.<br/>
		/// <br/>
		/// <c>PHADDW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 01 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void phaddw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Phaddw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>phaddw instruction.<br/>
		/// <br/>
		/// <c>PHADDW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 01 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void phaddw(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Phaddw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>phaddw instruction.<br/>
		/// <br/>
		/// <c>PHADDW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 01 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void phaddw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Phaddw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>phminposuw instruction.<br/>
		/// <br/>
		/// <c>PHMINPOSUW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 41 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void phminposuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Phminposuw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>phminposuw instruction.<br/>
		/// <br/>
		/// <c>PHMINPOSUW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 41 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void phminposuw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Phminposuw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>phsubd instruction.<br/>
		/// <br/>
		/// <c>PHSUBD mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 06 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void phsubd(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Phsubd_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>phsubd instruction.<br/>
		/// <br/>
		/// <c>PHSUBD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 06 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void phsubd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Phsubd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>phsubd instruction.<br/>
		/// <br/>
		/// <c>PHSUBD mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 06 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void phsubd(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Phsubd_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>phsubd instruction.<br/>
		/// <br/>
		/// <c>PHSUBD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 06 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void phsubd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Phsubd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>phsubsw instruction.<br/>
		/// <br/>
		/// <c>PHSUBSW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 07 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void phsubsw(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Phsubsw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>phsubsw instruction.<br/>
		/// <br/>
		/// <c>PHSUBSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 07 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void phsubsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Phsubsw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>phsubsw instruction.<br/>
		/// <br/>
		/// <c>PHSUBSW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 07 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void phsubsw(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Phsubsw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>phsubsw instruction.<br/>
		/// <br/>
		/// <c>PHSUBSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 07 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void phsubsw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Phsubsw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>phsubw instruction.<br/>
		/// <br/>
		/// <c>PHSUBW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 05 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void phsubw(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Phsubw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>phsubw instruction.<br/>
		/// <br/>
		/// <c>PHSUBW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 05 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void phsubw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Phsubw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>phsubw instruction.<br/>
		/// <br/>
		/// <c>PHSUBW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 05 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void phsubw(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Phsubw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>phsubw instruction.<br/>
		/// <br/>
		/// <c>PHSUBW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 05 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void phsubw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Phsubw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pi2fd instruction.<br/>
		/// <br/>
		/// <c>PI2FD mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 0D</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pi2fd(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.D3NOW_Pi2fd_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pi2fd instruction.<br/>
		/// <br/>
		/// <c>PI2FD mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 0D</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pi2fd(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.D3NOW_Pi2fd_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pi2fw instruction.<br/>
		/// <br/>
		/// <c>PI2FW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 0C</c><br/>
		/// <br/>
		/// <c>3DNOWEXT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pi2fw(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.D3NOW_Pi2fw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pi2fw instruction.<br/>
		/// <br/>
		/// <c>PI2FW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 0C</c><br/>
		/// <br/>
		/// <c>3DNOWEXT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pi2fw(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.D3NOW_Pi2fw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pinsrb instruction.<br/>
		/// <br/>
		/// <c>PINSRB xmm1, r32/m8, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 20 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pinsrb(AssemblerRegisterXMM dst, AssemblerRegister32 src1, sbyte imm) {
			Code op;
			op = Code.Pinsrb_xmm_r32m8_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>pinsrb instruction.<br/>
		/// <br/>
		/// <c>PINSRB xmm1, r64/m8, imm8</c><br/>
		/// <br/>
		/// <c>66 REX.W 0F 3A 20 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void pinsrb(AssemblerRegisterXMM dst, AssemblerRegister64 src1, sbyte imm) {
			Code op;
			op = Code.Pinsrb_xmm_r64m8_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>pinsrb instruction.<br/>
		/// <br/>
		/// <c>PINSRB xmm1, r32/m8, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 20 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pinsrb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.Pinsrb_xmm_r32m8_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>pinsrb instruction.<br/>
		/// <br/>
		/// <c>PINSRB xmm1, r32/m8, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 20 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pinsrb(AssemblerRegisterXMM dst, AssemblerRegister32 src1, byte imm) {
			Code op;
			op = Code.Pinsrb_xmm_r32m8_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>pinsrb instruction.<br/>
		/// <br/>
		/// <c>PINSRB xmm1, r64/m8, imm8</c><br/>
		/// <br/>
		/// <c>66 REX.W 0F 3A 20 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void pinsrb(AssemblerRegisterXMM dst, AssemblerRegister64 src1, byte imm) {
			Code op;
			op = Code.Pinsrb_xmm_r64m8_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>pinsrb instruction.<br/>
		/// <br/>
		/// <c>PINSRB xmm1, r32/m8, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 20 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pinsrb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.Pinsrb_xmm_r32m8_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>pinsrd instruction.<br/>
		/// <br/>
		/// <c>PINSRD xmm1, r/m32, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 22 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pinsrd(AssemblerRegisterXMM dst, AssemblerRegister32 src1, sbyte imm) {
			Code op;
			op = Code.Pinsrd_xmm_rm32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>pinsrd instruction.<br/>
		/// <br/>
		/// <c>PINSRD xmm1, r/m32, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 22 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pinsrd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.Pinsrd_xmm_rm32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>pinsrd instruction.<br/>
		/// <br/>
		/// <c>PINSRD xmm1, r/m32, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 22 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pinsrd(AssemblerRegisterXMM dst, AssemblerRegister32 src1, byte imm) {
			Code op;
			op = Code.Pinsrd_xmm_rm32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>pinsrd instruction.<br/>
		/// <br/>
		/// <c>PINSRD xmm1, r/m32, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 22 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pinsrd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.Pinsrd_xmm_rm32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>pinsrq instruction.<br/>
		/// <br/>
		/// <c>PINSRQ xmm1, r/m64, imm8</c><br/>
		/// <br/>
		/// <c>66 REX.W 0F 3A 22 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void pinsrq(AssemblerRegisterXMM dst, AssemblerRegister64 src1, sbyte imm) {
			Code op;
			op = Code.Pinsrq_xmm_rm64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>pinsrq instruction.<br/>
		/// <br/>
		/// <c>PINSRQ xmm1, r/m64, imm8</c><br/>
		/// <br/>
		/// <c>66 REX.W 0F 3A 22 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void pinsrq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.Pinsrq_xmm_rm64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>pinsrq instruction.<br/>
		/// <br/>
		/// <c>PINSRQ xmm1, r/m64, imm8</c><br/>
		/// <br/>
		/// <c>66 REX.W 0F 3A 22 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void pinsrq(AssemblerRegisterXMM dst, AssemblerRegister64 src1, byte imm) {
			Code op;
			op = Code.Pinsrq_xmm_rm64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>pinsrq instruction.<br/>
		/// <br/>
		/// <c>PINSRQ xmm1, r/m64, imm8</c><br/>
		/// <br/>
		/// <c>66 REX.W 0F 3A 22 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void pinsrq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.Pinsrq_xmm_rm64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>pinsrw instruction.<br/>
		/// <br/>
		/// <c>PINSRW mm, r32/m16, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F C4 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pinsrw(AssemblerRegisterMM dst, AssemblerRegister32 src1, sbyte imm) {
			Code op;
			op = Code.Pinsrw_mm_r32m16_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>pinsrw instruction.<br/>
		/// <br/>
		/// <c>PINSRW xmm, r32/m16, imm8</c><br/>
		/// <br/>
		/// <c>66 0F C4 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pinsrw(AssemblerRegisterXMM dst, AssemblerRegister32 src1, sbyte imm) {
			Code op;
			op = Code.Pinsrw_xmm_r32m16_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>pinsrw instruction.<br/>
		/// <br/>
		/// <c>PINSRW mm, r64/m16, imm8</c><br/>
		/// <br/>
		/// <c>NP REX.W 0F C4 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void pinsrw(AssemblerRegisterMM dst, AssemblerRegister64 src1, sbyte imm) {
			Code op;
			op = Code.Pinsrw_mm_r64m16_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>pinsrw instruction.<br/>
		/// <br/>
		/// <c>PINSRW xmm, r64/m16, imm8</c><br/>
		/// <br/>
		/// <c>66 REX.W 0F C4 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void pinsrw(AssemblerRegisterXMM dst, AssemblerRegister64 src1, sbyte imm) {
			Code op;
			op = Code.Pinsrw_xmm_r64m16_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>pinsrw instruction.<br/>
		/// <br/>
		/// <c>PINSRW mm, r32/m16, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F C4 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pinsrw(AssemblerRegisterMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.Pinsrw_mm_r32m16_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>pinsrw instruction.<br/>
		/// <br/>
		/// <c>PINSRW xmm, r32/m16, imm8</c><br/>
		/// <br/>
		/// <c>66 0F C4 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pinsrw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.Pinsrw_xmm_r32m16_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>pinsrw instruction.<br/>
		/// <br/>
		/// <c>PINSRW mm, r32/m16, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F C4 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pinsrw(AssemblerRegisterMM dst, AssemblerRegister32 src1, byte imm) {
			Code op;
			op = Code.Pinsrw_mm_r32m16_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>pinsrw instruction.<br/>
		/// <br/>
		/// <c>PINSRW xmm, r32/m16, imm8</c><br/>
		/// <br/>
		/// <c>66 0F C4 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pinsrw(AssemblerRegisterXMM dst, AssemblerRegister32 src1, byte imm) {
			Code op;
			op = Code.Pinsrw_xmm_r32m16_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>pinsrw instruction.<br/>
		/// <br/>
		/// <c>PINSRW mm, r64/m16, imm8</c><br/>
		/// <br/>
		/// <c>NP REX.W 0F C4 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void pinsrw(AssemblerRegisterMM dst, AssemblerRegister64 src1, byte imm) {
			Code op;
			op = Code.Pinsrw_mm_r64m16_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>pinsrw instruction.<br/>
		/// <br/>
		/// <c>PINSRW xmm, r64/m16, imm8</c><br/>
		/// <br/>
		/// <c>66 REX.W 0F C4 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void pinsrw(AssemblerRegisterXMM dst, AssemblerRegister64 src1, byte imm) {
			Code op;
			op = Code.Pinsrw_xmm_r64m16_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>pinsrw instruction.<br/>
		/// <br/>
		/// <c>PINSRW mm, r32/m16, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F C4 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pinsrw(AssemblerRegisterMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.Pinsrw_mm_r32m16_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>pinsrw instruction.<br/>
		/// <br/>
		/// <c>PINSRW xmm, r32/m16, imm8</c><br/>
		/// <br/>
		/// <c>66 0F C4 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pinsrw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.Pinsrw_xmm_r32m16_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>pmaddubsw instruction.<br/>
		/// <br/>
		/// <c>PMADDUBSW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 04 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmaddubsw(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Pmaddubsw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pmaddubsw instruction.<br/>
		/// <br/>
		/// <c>PMADDUBSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 04 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmaddubsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pmaddubsw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pmaddubsw instruction.<br/>
		/// <br/>
		/// <c>PMADDUBSW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 04 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmaddubsw(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pmaddubsw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pmaddubsw instruction.<br/>
		/// <br/>
		/// <c>PMADDUBSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 04 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmaddubsw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pmaddubsw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pmaddwd instruction.<br/>
		/// <br/>
		/// <c>PMADDWD mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F F5 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmaddwd(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Pmaddwd_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pmaddwd instruction.<br/>
		/// <br/>
		/// <c>PMADDWD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F F5 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmaddwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pmaddwd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pmaddwd instruction.<br/>
		/// <br/>
		/// <c>PMADDWD mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F F5 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmaddwd(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pmaddwd_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pmaddwd instruction.<br/>
		/// <br/>
		/// <c>PMADDWD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F F5 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmaddwd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pmaddwd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pmaxsb instruction.<br/>
		/// <br/>
		/// <c>PMAXSB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 3C /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmaxsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pmaxsb_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pmaxsb instruction.<br/>
		/// <br/>
		/// <c>PMAXSB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 3C /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmaxsb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pmaxsb_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pmaxsd instruction.<br/>
		/// <br/>
		/// <c>PMAXSD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 3D /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmaxsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pmaxsd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pmaxsd instruction.<br/>
		/// <br/>
		/// <c>PMAXSD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 3D /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmaxsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pmaxsd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pmaxsw instruction.<br/>
		/// <br/>
		/// <c>PMAXSW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F EE /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmaxsw(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Pmaxsw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pmaxsw instruction.<br/>
		/// <br/>
		/// <c>PMAXSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F EE /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmaxsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pmaxsw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pmaxsw instruction.<br/>
		/// <br/>
		/// <c>PMAXSW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F EE /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmaxsw(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pmaxsw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pmaxsw instruction.<br/>
		/// <br/>
		/// <c>PMAXSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F EE /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmaxsw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pmaxsw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pmaxub instruction.<br/>
		/// <br/>
		/// <c>PMAXUB mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F DE /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmaxub(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Pmaxub_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pmaxub instruction.<br/>
		/// <br/>
		/// <c>PMAXUB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F DE /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmaxub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pmaxub_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pmaxub instruction.<br/>
		/// <br/>
		/// <c>PMAXUB mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F DE /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmaxub(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pmaxub_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pmaxub instruction.<br/>
		/// <br/>
		/// <c>PMAXUB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F DE /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmaxub(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pmaxub_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pmaxud instruction.<br/>
		/// <br/>
		/// <c>PMAXUD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 3F /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmaxud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pmaxud_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pmaxud instruction.<br/>
		/// <br/>
		/// <c>PMAXUD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 3F /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmaxud(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pmaxud_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pmaxuw instruction.<br/>
		/// <br/>
		/// <c>PMAXUW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 3E /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmaxuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pmaxuw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pmaxuw instruction.<br/>
		/// <br/>
		/// <c>PMAXUW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 3E /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmaxuw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pmaxuw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pminsb instruction.<br/>
		/// <br/>
		/// <c>PMINSB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 38 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pminsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pminsb_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pminsb instruction.<br/>
		/// <br/>
		/// <c>PMINSB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 38 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pminsb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pminsb_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pminsd instruction.<br/>
		/// <br/>
		/// <c>PMINSD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 39 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pminsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pminsd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pminsd instruction.<br/>
		/// <br/>
		/// <c>PMINSD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 39 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pminsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pminsd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pminsw instruction.<br/>
		/// <br/>
		/// <c>PMINSW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F EA /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pminsw(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Pminsw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pminsw instruction.<br/>
		/// <br/>
		/// <c>PMINSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F EA /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pminsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pminsw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pminsw instruction.<br/>
		/// <br/>
		/// <c>PMINSW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F EA /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pminsw(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pminsw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pminsw instruction.<br/>
		/// <br/>
		/// <c>PMINSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F EA /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pminsw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pminsw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pminub instruction.<br/>
		/// <br/>
		/// <c>PMINUB mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F DA /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pminub(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Pminub_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pminub instruction.<br/>
		/// <br/>
		/// <c>PMINUB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F DA /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pminub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pminub_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pminub instruction.<br/>
		/// <br/>
		/// <c>PMINUB mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F DA /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pminub(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pminub_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pminub instruction.<br/>
		/// <br/>
		/// <c>PMINUB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F DA /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pminub(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pminub_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pminud instruction.<br/>
		/// <br/>
		/// <c>PMINUD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 3B /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pminud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pminud_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pminud instruction.<br/>
		/// <br/>
		/// <c>PMINUD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 3B /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pminud(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pminud_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pminuw instruction.<br/>
		/// <br/>
		/// <c>PMINUW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 3A /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pminuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pminuw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pminuw instruction.<br/>
		/// <br/>
		/// <c>PMINUW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 3A /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pminuw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pminuw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pmovmskb instruction.<br/>
		/// <br/>
		/// <c>PMOVMSKB r32, mm</c><br/>
		/// <br/>
		/// <c>NP 0F D7 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmovmskb(AssemblerRegister32 dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Pmovmskb_r32_mm;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pmovmskb instruction.<br/>
		/// <br/>
		/// <c>PMOVMSKB r64, mm</c><br/>
		/// <br/>
		/// <c>NP REX.W 0F D7 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void pmovmskb(AssemblerRegister64 dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Pmovmskb_r64_mm;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pmovmskb instruction.<br/>
		/// <br/>
		/// <c>PMOVMSKB r32, xmm</c><br/>
		/// <br/>
		/// <c>66 0F D7 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmovmskb(AssemblerRegister32 dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pmovmskb_r32_xmm;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pmovmskb instruction.<br/>
		/// <br/>
		/// <c>PMOVMSKB r64, xmm</c><br/>
		/// <br/>
		/// <c>66 REX.W 0F D7 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void pmovmskb(AssemblerRegister64 dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pmovmskb_r64_xmm;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pmovsxbd instruction.<br/>
		/// <br/>
		/// <c>PMOVSXBD xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>66 0F 38 21 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmovsxbd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pmovsxbd_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pmovsxbd instruction.<br/>
		/// <br/>
		/// <c>PMOVSXBD xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>66 0F 38 21 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmovsxbd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pmovsxbd_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pmovsxbq instruction.<br/>
		/// <br/>
		/// <c>PMOVSXBQ xmm1, xmm2/m16</c><br/>
		/// <br/>
		/// <c>66 0F 38 22 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmovsxbq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pmovsxbq_xmm_xmmm16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pmovsxbq instruction.<br/>
		/// <br/>
		/// <c>PMOVSXBQ xmm1, xmm2/m16</c><br/>
		/// <br/>
		/// <c>66 0F 38 22 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmovsxbq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pmovsxbq_xmm_xmmm16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pmovsxbw instruction.<br/>
		/// <br/>
		/// <c>PMOVSXBW xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>66 0F 38 20 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmovsxbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pmovsxbw_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pmovsxbw instruction.<br/>
		/// <br/>
		/// <c>PMOVSXBW xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>66 0F 38 20 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmovsxbw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pmovsxbw_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pmovsxdq instruction.<br/>
		/// <br/>
		/// <c>PMOVSXDQ xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>66 0F 38 25 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmovsxdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pmovsxdq_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pmovsxdq instruction.<br/>
		/// <br/>
		/// <c>PMOVSXDQ xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>66 0F 38 25 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmovsxdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pmovsxdq_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pmovsxwd instruction.<br/>
		/// <br/>
		/// <c>PMOVSXWD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>66 0F 38 23 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmovsxwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pmovsxwd_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pmovsxwd instruction.<br/>
		/// <br/>
		/// <c>PMOVSXWD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>66 0F 38 23 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmovsxwd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pmovsxwd_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pmovsxwq instruction.<br/>
		/// <br/>
		/// <c>PMOVSXWQ xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>66 0F 38 24 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmovsxwq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pmovsxwq_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pmovsxwq instruction.<br/>
		/// <br/>
		/// <c>PMOVSXWQ xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>66 0F 38 24 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmovsxwq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pmovsxwq_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pmovzxbd instruction.<br/>
		/// <br/>
		/// <c>PMOVZXBD xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>66 0F 38 31 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmovzxbd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pmovzxbd_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pmovzxbd instruction.<br/>
		/// <br/>
		/// <c>PMOVZXBD xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>66 0F 38 31 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmovzxbd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pmovzxbd_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pmovzxbq instruction.<br/>
		/// <br/>
		/// <c>PMOVZXBQ xmm1, xmm2/m16</c><br/>
		/// <br/>
		/// <c>66 0F 38 32 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmovzxbq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pmovzxbq_xmm_xmmm16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pmovzxbq instruction.<br/>
		/// <br/>
		/// <c>PMOVZXBQ xmm1, xmm2/m16</c><br/>
		/// <br/>
		/// <c>66 0F 38 32 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmovzxbq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pmovzxbq_xmm_xmmm16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pmovzxbw instruction.<br/>
		/// <br/>
		/// <c>PMOVZXBW xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>66 0F 38 30 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmovzxbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pmovzxbw_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pmovzxbw instruction.<br/>
		/// <br/>
		/// <c>PMOVZXBW xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>66 0F 38 30 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmovzxbw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pmovzxbw_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pmovzxdq instruction.<br/>
		/// <br/>
		/// <c>PMOVZXDQ xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>66 0F 38 35 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmovzxdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pmovzxdq_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pmovzxdq instruction.<br/>
		/// <br/>
		/// <c>PMOVZXDQ xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>66 0F 38 35 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmovzxdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pmovzxdq_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pmovzxwd instruction.<br/>
		/// <br/>
		/// <c>PMOVZXWD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>66 0F 38 33 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmovzxwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pmovzxwd_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pmovzxwd instruction.<br/>
		/// <br/>
		/// <c>PMOVZXWD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>66 0F 38 33 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmovzxwd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pmovzxwd_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pmovzxwq instruction.<br/>
		/// <br/>
		/// <c>PMOVZXWQ xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>66 0F 38 34 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmovzxwq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pmovzxwq_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pmovzxwq instruction.<br/>
		/// <br/>
		/// <c>PMOVZXWQ xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>66 0F 38 34 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmovzxwq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pmovzxwq_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pmuldq instruction.<br/>
		/// <br/>
		/// <c>PMULDQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 28 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmuldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pmuldq_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pmuldq instruction.<br/>
		/// <br/>
		/// <c>PMULDQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 28 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmuldq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pmuldq_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pmulhrsw instruction.<br/>
		/// <br/>
		/// <c>PMULHRSW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 0B /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmulhrsw(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Pmulhrsw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pmulhrsw instruction.<br/>
		/// <br/>
		/// <c>PMULHRSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 0B /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmulhrsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pmulhrsw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pmulhrsw instruction.<br/>
		/// <br/>
		/// <c>PMULHRSW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 0B /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmulhrsw(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pmulhrsw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pmulhrsw instruction.<br/>
		/// <br/>
		/// <c>PMULHRSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 0B /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmulhrsw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pmulhrsw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pmulhrw instruction.<br/>
		/// <br/>
		/// <c>PMULHRW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r B7</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmulhrw(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.D3NOW_Pmulhrw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pmulhrw instruction.<br/>
		/// <br/>
		/// <c>PMULHRW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r B7</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmulhrw(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.D3NOW_Pmulhrw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pmulhuw instruction.<br/>
		/// <br/>
		/// <c>PMULHUW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F E4 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmulhuw(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Pmulhuw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pmulhuw instruction.<br/>
		/// <br/>
		/// <c>PMULHUW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F E4 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmulhuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pmulhuw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pmulhuw instruction.<br/>
		/// <br/>
		/// <c>PMULHUW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F E4 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmulhuw(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pmulhuw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pmulhuw instruction.<br/>
		/// <br/>
		/// <c>PMULHUW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F E4 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmulhuw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pmulhuw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pmulhw instruction.<br/>
		/// <br/>
		/// <c>PMULHW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F E5 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmulhw(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Pmulhw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pmulhw instruction.<br/>
		/// <br/>
		/// <c>PMULHW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F E5 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmulhw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pmulhw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pmulhw instruction.<br/>
		/// <br/>
		/// <c>PMULHW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F E5 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmulhw(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pmulhw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pmulhw instruction.<br/>
		/// <br/>
		/// <c>PMULHW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F E5 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmulhw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pmulhw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pmulld instruction.<br/>
		/// <br/>
		/// <c>PMULLD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 40 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmulld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pmulld_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pmulld instruction.<br/>
		/// <br/>
		/// <c>PMULLD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 40 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmulld(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pmulld_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pmullw instruction.<br/>
		/// <br/>
		/// <c>PMULLW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F D5 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmullw(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Pmullw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pmullw instruction.<br/>
		/// <br/>
		/// <c>PMULLW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F D5 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmullw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pmullw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pmullw instruction.<br/>
		/// <br/>
		/// <c>PMULLW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F D5 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmullw(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pmullw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pmullw instruction.<br/>
		/// <br/>
		/// <c>PMULLW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F D5 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmullw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pmullw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pmuludq instruction.<br/>
		/// <br/>
		/// <c>PMULUDQ mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F F4 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmuludq(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Pmuludq_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pmuludq instruction.<br/>
		/// <br/>
		/// <c>PMULUDQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F F4 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmuludq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pmuludq_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pmuludq instruction.<br/>
		/// <br/>
		/// <c>PMULUDQ mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F F4 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmuludq(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pmuludq_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pmuludq instruction.<br/>
		/// <br/>
		/// <c>PMULUDQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F F4 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pmuludq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pmuludq_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pop instruction.<br/>
		/// <br/>
		/// <c>POP r16</c><br/>
		/// <br/>
		/// <c>o16 58+rw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pop(AssemblerRegister16 dst) {
			Code op;
			op = Code.Pop_r16;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>pop instruction.<br/>
		/// <br/>
		/// <c>POP r32</c><br/>
		/// <br/>
		/// <c>o32 58+rd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void pop(AssemblerRegister32 dst) {
			Code op;
			op = Code.Pop_r32;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>pop instruction.<br/>
		/// <br/>
		/// <c>POP r64</c><br/>
		/// <br/>
		/// <c>58+ro</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void pop(AssemblerRegister64 dst) {
			Code op;
			op = Code.Pop_r64;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>pop instruction.<br/>
		/// <br/>
		/// <c>POP FS</c><br/>
		/// <br/>
		/// <c>0F A1</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>POP GS</c><br/>
		/// <br/>
		/// <c>0F A9</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>POP ES</c><br/>
		/// <br/>
		/// <c>o32 07</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>POP SS</c><br/>
		/// <br/>
		/// <c>o32 17</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>POP DS</c><br/>
		/// <br/>
		/// <c>o32 1F</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>POP FS</c><br/>
		/// <br/>
		/// <c>o32 0F A1</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>POP GS</c><br/>
		/// <br/>
		/// <c>o32 0F A9</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>POP ES</c><br/>
		/// <br/>
		/// <c>o16 07</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>POP SS</c><br/>
		/// <br/>
		/// <c>o16 17</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>POP DS</c><br/>
		/// <br/>
		/// <c>o16 1F</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>POP FS</c><br/>
		/// <br/>
		/// <c>o16 0F A1</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>POP GS</c><br/>
		/// <br/>
		/// <c>o16 0F A9</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pop(AssemblerRegisterSegment dst) {
			Code op;
			if (dst == Register.FS) {
				if (Bitness == 64) {
					op = Code.Popq_FS;
				} else op = Bitness >= 32 ? Code.Popd_FS : Code.Popw_FS;
			} else if (dst == Register.GS) {
				if (Bitness == 64) {
					op = Code.Popq_GS;
				} else op = Bitness >= 32 ? Code.Popd_GS : Code.Popw_GS;
			} else if (dst == Register.ES) {
				op = Bitness >= 32 ? Code.Popd_ES : Code.Popw_ES;
			} else if (dst == Register.SS) {
				op = Bitness >= 32 ? Code.Popd_SS : Code.Popw_SS;
			} else if (dst == Register.DS) {
				op = Bitness >= 32 ? Code.Popd_DS : Code.Popw_DS;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Pop, dst);
			}
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>pop instruction.<br/>
		/// <br/>
		/// <c>POP r/m64</c><br/>
		/// <br/>
		/// <c>8F /0</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>POP r/m32</c><br/>
		/// <br/>
		/// <c>o32 8F /0</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>POP r/m16</c><br/>
		/// <br/>
		/// <c>o16 8F /0</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pop(AssemblerMemoryOperand dst) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Pop_rm64;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Pop_rm32;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Pop_rm16;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Pop, dst);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>popa instruction.<br/>
		/// <br/>
		/// <c>POPA</c><br/>
		/// <br/>
		/// <c>o16 61</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void popa() {
			Code op;
			op = Code.Popaw;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>popad instruction.<br/>
		/// <br/>
		/// <c>POPAD</c><br/>
		/// <br/>
		/// <c>o32 61</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void popad() {
			Code op;
			op = Code.Popad;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>popcnt instruction.<br/>
		/// <br/>
		/// <c>POPCNT r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 F3 0F B8 /r</c><br/>
		/// <br/>
		/// <c>POPCNT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void popcnt(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Popcnt_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>popcnt instruction.<br/>
		/// <br/>
		/// <c>POPCNT r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 F3 0F B8 /r</c><br/>
		/// <br/>
		/// <c>POPCNT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void popcnt(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Popcnt_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>popcnt instruction.<br/>
		/// <br/>
		/// <c>POPCNT r64, r/m64</c><br/>
		/// <br/>
		/// <c>F3 REX.W 0F B8 /r</c><br/>
		/// <br/>
		/// <c>POPCNT</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void popcnt(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Popcnt_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>popcnt instruction.<br/>
		/// <br/>
		/// <c>POPCNT r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 F3 0F B8 /r</c><br/>
		/// <br/>
		/// <c>POPCNT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void popcnt(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Popcnt_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>popcnt instruction.<br/>
		/// <br/>
		/// <c>POPCNT r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 F3 0F B8 /r</c><br/>
		/// <br/>
		/// <c>POPCNT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void popcnt(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Popcnt_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>popcnt instruction.<br/>
		/// <br/>
		/// <c>POPCNT r64, r/m64</c><br/>
		/// <br/>
		/// <c>F3 REX.W 0F B8 /r</c><br/>
		/// <br/>
		/// <c>POPCNT</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void popcnt(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Popcnt_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>popf instruction.<br/>
		/// <br/>
		/// <c>POPF</c><br/>
		/// <br/>
		/// <c>o16 9D</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void popf() {
			Code op;
			op = Code.Popfw;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>popfd instruction.<br/>
		/// <br/>
		/// <c>POPFD</c><br/>
		/// <br/>
		/// <c>o32 9D</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void popfd() {
			Code op;
			op = Code.Popfd;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>popfq instruction.<br/>
		/// <br/>
		/// <c>POPFQ</c><br/>
		/// <br/>
		/// <c>9D</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void popfq() {
			Code op;
			op = Code.Popfq;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>por instruction.<br/>
		/// <br/>
		/// <c>POR mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F EB /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void por(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Por_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>por instruction.<br/>
		/// <br/>
		/// <c>POR xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F EB /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void por(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Por_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>por instruction.<br/>
		/// <br/>
		/// <c>POR mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F EB /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void por(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Por_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>por instruction.<br/>
		/// <br/>
		/// <c>POR xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F EB /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void por(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Por_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>prefetch instruction.<br/>
		/// <br/>
		/// <c>PREFETCH m8</c><br/>
		/// <br/>
		/// <c>0F 0D /0</c><br/>
		/// <br/>
		/// <c>PREFETCHW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void prefetch(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Prefetch_m8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>prefetchnta instruction.<br/>
		/// <br/>
		/// <c>PREFETCHNTA m8</c><br/>
		/// <br/>
		/// <c>0F 18 /0</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void prefetchnta(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Prefetchnta_m8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>prefetcht0 instruction.<br/>
		/// <br/>
		/// <c>PREFETCHT0 m8</c><br/>
		/// <br/>
		/// <c>0F 18 /1</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void prefetcht0(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Prefetcht0_m8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>prefetcht1 instruction.<br/>
		/// <br/>
		/// <c>PREFETCHT1 m8</c><br/>
		/// <br/>
		/// <c>0F 18 /2</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void prefetcht1(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Prefetcht1_m8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>prefetcht2 instruction.<br/>
		/// <br/>
		/// <c>PREFETCHT2 m8</c><br/>
		/// <br/>
		/// <c>0F 18 /3</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void prefetcht2(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Prefetcht2_m8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>prefetchw instruction.<br/>
		/// <br/>
		/// <c>PREFETCHW m8</c><br/>
		/// <br/>
		/// <c>0F 0D /1</c><br/>
		/// <br/>
		/// <c>PREFETCHW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void prefetchw(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Prefetchw_m8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>prefetchwt1 instruction.<br/>
		/// <br/>
		/// <c>PREFETCHWT1 m8</c><br/>
		/// <br/>
		/// <c>0F 0D /2</c><br/>
		/// <br/>
		/// <c>PREFETCHWT1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void prefetchwt1(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Prefetchwt1_m8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>psadbw instruction.<br/>
		/// <br/>
		/// <c>PSADBW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F F6 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psadbw(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Psadbw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>psadbw instruction.<br/>
		/// <br/>
		/// <c>PSADBW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F F6 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Psadbw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>psadbw instruction.<br/>
		/// <br/>
		/// <c>PSADBW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F F6 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psadbw(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Psadbw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>psadbw instruction.<br/>
		/// <br/>
		/// <c>PSADBW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F F6 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psadbw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Psadbw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pshufb instruction.<br/>
		/// <br/>
		/// <c>PSHUFB mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 00 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pshufb(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Pshufb_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pshufb instruction.<br/>
		/// <br/>
		/// <c>PSHUFB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 00 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pshufb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pshufb_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pshufb instruction.<br/>
		/// <br/>
		/// <c>PSHUFB mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 00 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pshufb(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pshufb_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pshufb instruction.<br/>
		/// <br/>
		/// <c>PSHUFB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 00 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pshufb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pshufb_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pshufd instruction.<br/>
		/// <br/>
		/// <c>PSHUFD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 70 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pshufd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.Pshufd_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>pshufd instruction.<br/>
		/// <br/>
		/// <c>PSHUFD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 70 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pshufd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.Pshufd_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>pshufd instruction.<br/>
		/// <br/>
		/// <c>PSHUFD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 70 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pshufd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.Pshufd_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>pshufd instruction.<br/>
		/// <br/>
		/// <c>PSHUFD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 70 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pshufd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.Pshufd_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>pshufhw instruction.<br/>
		/// <br/>
		/// <c>PSHUFHW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>F3 0F 70 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pshufhw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.Pshufhw_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>pshufhw instruction.<br/>
		/// <br/>
		/// <c>PSHUFHW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>F3 0F 70 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pshufhw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.Pshufhw_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>pshufhw instruction.<br/>
		/// <br/>
		/// <c>PSHUFHW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>F3 0F 70 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pshufhw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.Pshufhw_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>pshufhw instruction.<br/>
		/// <br/>
		/// <c>PSHUFHW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>F3 0F 70 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pshufhw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.Pshufhw_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>pshuflw instruction.<br/>
		/// <br/>
		/// <c>PSHUFLW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>F2 0F 70 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pshuflw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.Pshuflw_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>pshuflw instruction.<br/>
		/// <br/>
		/// <c>PSHUFLW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>F2 0F 70 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pshuflw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.Pshuflw_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>pshuflw instruction.<br/>
		/// <br/>
		/// <c>PSHUFLW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>F2 0F 70 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pshuflw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.Pshuflw_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>pshuflw instruction.<br/>
		/// <br/>
		/// <c>PSHUFLW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>F2 0F 70 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pshuflw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.Pshuflw_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>pshufw instruction.<br/>
		/// <br/>
		/// <c>PSHUFW mm1, mm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 70 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pshufw(AssemblerRegisterMM dst, AssemblerRegisterMM src1, sbyte imm) {
			Code op;
			op = Code.Pshufw_mm_mmm64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>pshufw instruction.<br/>
		/// <br/>
		/// <c>PSHUFW mm1, mm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 70 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pshufw(AssemblerRegisterMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.Pshufw_mm_mmm64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>pshufw instruction.<br/>
		/// <br/>
		/// <c>PSHUFW mm1, mm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 70 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pshufw(AssemblerRegisterMM dst, AssemblerRegisterMM src1, byte imm) {
			Code op;
			op = Code.Pshufw_mm_mmm64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>pshufw instruction.<br/>
		/// <br/>
		/// <c>PSHUFW mm1, mm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 70 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pshufw(AssemblerRegisterMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.Pshufw_mm_mmm64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>psignb instruction.<br/>
		/// <br/>
		/// <c>PSIGNB mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 08 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psignb(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Psignb_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>psignb instruction.<br/>
		/// <br/>
		/// <c>PSIGNB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 08 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psignb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Psignb_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>psignb instruction.<br/>
		/// <br/>
		/// <c>PSIGNB mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 08 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psignb(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Psignb_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>psignb instruction.<br/>
		/// <br/>
		/// <c>PSIGNB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 08 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psignb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Psignb_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>psignd instruction.<br/>
		/// <br/>
		/// <c>PSIGND mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 0A /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psignd(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Psignd_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>psignd instruction.<br/>
		/// <br/>
		/// <c>PSIGND xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 0A /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psignd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Psignd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>psignd instruction.<br/>
		/// <br/>
		/// <c>PSIGND mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 0A /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psignd(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Psignd_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>psignd instruction.<br/>
		/// <br/>
		/// <c>PSIGND xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 0A /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psignd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Psignd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>psignw instruction.<br/>
		/// <br/>
		/// <c>PSIGNW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 09 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psignw(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Psignw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>psignw instruction.<br/>
		/// <br/>
		/// <c>PSIGNW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 09 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psignw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Psignw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>psignw instruction.<br/>
		/// <br/>
		/// <c>PSIGNW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 09 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psignw(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Psignw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>psignw instruction.<br/>
		/// <br/>
		/// <c>PSIGNW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 09 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psignw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Psignw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pslld instruction.<br/>
		/// <br/>
		/// <c>PSLLD mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F F2 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pslld(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Pslld_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pslld instruction.<br/>
		/// <br/>
		/// <c>PSLLD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F F2 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pslld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pslld_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pslld instruction.<br/>
		/// <br/>
		/// <c>PSLLD mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F F2 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pslld(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pslld_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pslld instruction.<br/>
		/// <br/>
		/// <c>PSLLD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F F2 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pslld(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pslld_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pslld instruction.<br/>
		/// <br/>
		/// <c>PSLLD mm, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 72 /6 ib</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pslld(AssemblerRegisterMM dst, sbyte imm) {
			Code op;
			op = Code.Pslld_mm_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>pslld instruction.<br/>
		/// <br/>
		/// <c>PSLLD xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 72 /6 ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pslld(AssemblerRegisterXMM dst, sbyte imm) {
			Code op;
			op = Code.Pslld_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>pslld instruction.<br/>
		/// <br/>
		/// <c>PSLLD mm, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 72 /6 ib</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pslld(AssemblerRegisterMM dst, byte imm) {
			Code op;
			op = Code.Pslld_mm_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>pslld instruction.<br/>
		/// <br/>
		/// <c>PSLLD xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 72 /6 ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pslld(AssemblerRegisterXMM dst, byte imm) {
			Code op;
			op = Code.Pslld_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>pslldq instruction.<br/>
		/// <br/>
		/// <c>PSLLDQ xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 73 /7 ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pslldq(AssemblerRegisterXMM dst, sbyte imm) {
			Code op;
			op = Code.Pslldq_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>pslldq instruction.<br/>
		/// <br/>
		/// <c>PSLLDQ xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 73 /7 ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pslldq(AssemblerRegisterXMM dst, byte imm) {
			Code op;
			op = Code.Pslldq_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>psllq instruction.<br/>
		/// <br/>
		/// <c>PSLLQ mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F F3 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psllq(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Psllq_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>psllq instruction.<br/>
		/// <br/>
		/// <c>PSLLQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F F3 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psllq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Psllq_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>psllq instruction.<br/>
		/// <br/>
		/// <c>PSLLQ mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F F3 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psllq(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Psllq_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>psllq instruction.<br/>
		/// <br/>
		/// <c>PSLLQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F F3 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psllq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Psllq_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>psllq instruction.<br/>
		/// <br/>
		/// <c>PSLLQ mm, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 73 /6 ib</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psllq(AssemblerRegisterMM dst, sbyte imm) {
			Code op;
			op = Code.Psllq_mm_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>psllq instruction.<br/>
		/// <br/>
		/// <c>PSLLQ xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 73 /6 ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psllq(AssemblerRegisterXMM dst, sbyte imm) {
			Code op;
			op = Code.Psllq_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>psllq instruction.<br/>
		/// <br/>
		/// <c>PSLLQ mm, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 73 /6 ib</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psllq(AssemblerRegisterMM dst, byte imm) {
			Code op;
			op = Code.Psllq_mm_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>psllq instruction.<br/>
		/// <br/>
		/// <c>PSLLQ xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 73 /6 ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psllq(AssemblerRegisterXMM dst, byte imm) {
			Code op;
			op = Code.Psllq_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>psllw instruction.<br/>
		/// <br/>
		/// <c>PSLLW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F F1 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psllw(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Psllw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>psllw instruction.<br/>
		/// <br/>
		/// <c>PSLLW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F F1 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psllw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Psllw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>psllw instruction.<br/>
		/// <br/>
		/// <c>PSLLW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F F1 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psllw(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Psllw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>psllw instruction.<br/>
		/// <br/>
		/// <c>PSLLW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F F1 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psllw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Psllw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>psllw instruction.<br/>
		/// <br/>
		/// <c>PSLLW mm1, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 71 /6 ib</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psllw(AssemblerRegisterMM dst, sbyte imm) {
			Code op;
			op = Code.Psllw_mm_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>psllw instruction.<br/>
		/// <br/>
		/// <c>PSLLW xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 71 /6 ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psllw(AssemblerRegisterXMM dst, sbyte imm) {
			Code op;
			op = Code.Psllw_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>psllw instruction.<br/>
		/// <br/>
		/// <c>PSLLW mm1, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 71 /6 ib</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psllw(AssemblerRegisterMM dst, byte imm) {
			Code op;
			op = Code.Psllw_mm_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>psllw instruction.<br/>
		/// <br/>
		/// <c>PSLLW xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 71 /6 ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psllw(AssemblerRegisterXMM dst, byte imm) {
			Code op;
			op = Code.Psllw_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>psmash instruction.<br/>
		/// <br/>
		/// <c>PSMASH</c><br/>
		/// <br/>
		/// <c>F3 0F 01 FF</c><br/>
		/// <br/>
		/// <c>SNP</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void psmash() {
			Code op;
			op = Code.Psmash;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>psrad instruction.<br/>
		/// <br/>
		/// <c>PSRAD mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F E2 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psrad(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Psrad_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>psrad instruction.<br/>
		/// <br/>
		/// <c>PSRAD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F E2 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psrad(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Psrad_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>psrad instruction.<br/>
		/// <br/>
		/// <c>PSRAD mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F E2 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psrad(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Psrad_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>psrad instruction.<br/>
		/// <br/>
		/// <c>PSRAD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F E2 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psrad(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Psrad_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>psrad instruction.<br/>
		/// <br/>
		/// <c>PSRAD mm, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 72 /4 ib</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psrad(AssemblerRegisterMM dst, sbyte imm) {
			Code op;
			op = Code.Psrad_mm_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>psrad instruction.<br/>
		/// <br/>
		/// <c>PSRAD xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 72 /4 ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psrad(AssemblerRegisterXMM dst, sbyte imm) {
			Code op;
			op = Code.Psrad_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>psrad instruction.<br/>
		/// <br/>
		/// <c>PSRAD mm, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 72 /4 ib</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psrad(AssemblerRegisterMM dst, byte imm) {
			Code op;
			op = Code.Psrad_mm_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>psrad instruction.<br/>
		/// <br/>
		/// <c>PSRAD xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 72 /4 ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psrad(AssemblerRegisterXMM dst, byte imm) {
			Code op;
			op = Code.Psrad_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>psraw instruction.<br/>
		/// <br/>
		/// <c>PSRAW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F E1 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psraw(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Psraw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>psraw instruction.<br/>
		/// <br/>
		/// <c>PSRAW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F E1 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psraw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Psraw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>psraw instruction.<br/>
		/// <br/>
		/// <c>PSRAW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F E1 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psraw(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Psraw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>psraw instruction.<br/>
		/// <br/>
		/// <c>PSRAW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F E1 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psraw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Psraw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>psraw instruction.<br/>
		/// <br/>
		/// <c>PSRAW mm, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 71 /4 ib</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psraw(AssemblerRegisterMM dst, sbyte imm) {
			Code op;
			op = Code.Psraw_mm_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>psraw instruction.<br/>
		/// <br/>
		/// <c>PSRAW xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 71 /4 ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psraw(AssemblerRegisterXMM dst, sbyte imm) {
			Code op;
			op = Code.Psraw_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>psraw instruction.<br/>
		/// <br/>
		/// <c>PSRAW mm, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 71 /4 ib</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psraw(AssemblerRegisterMM dst, byte imm) {
			Code op;
			op = Code.Psraw_mm_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>psraw instruction.<br/>
		/// <br/>
		/// <c>PSRAW xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 71 /4 ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psraw(AssemblerRegisterXMM dst, byte imm) {
			Code op;
			op = Code.Psraw_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>psrld instruction.<br/>
		/// <br/>
		/// <c>PSRLD mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F D2 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psrld(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Psrld_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>psrld instruction.<br/>
		/// <br/>
		/// <c>PSRLD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F D2 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psrld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Psrld_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>psrld instruction.<br/>
		/// <br/>
		/// <c>PSRLD mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F D2 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psrld(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Psrld_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>psrld instruction.<br/>
		/// <br/>
		/// <c>PSRLD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F D2 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psrld(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Psrld_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>psrld instruction.<br/>
		/// <br/>
		/// <c>PSRLD mm, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 72 /2 ib</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psrld(AssemblerRegisterMM dst, sbyte imm) {
			Code op;
			op = Code.Psrld_mm_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>psrld instruction.<br/>
		/// <br/>
		/// <c>PSRLD xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 72 /2 ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psrld(AssemblerRegisterXMM dst, sbyte imm) {
			Code op;
			op = Code.Psrld_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>psrld instruction.<br/>
		/// <br/>
		/// <c>PSRLD mm, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 72 /2 ib</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psrld(AssemblerRegisterMM dst, byte imm) {
			Code op;
			op = Code.Psrld_mm_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>psrld instruction.<br/>
		/// <br/>
		/// <c>PSRLD xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 72 /2 ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psrld(AssemblerRegisterXMM dst, byte imm) {
			Code op;
			op = Code.Psrld_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>psrldq instruction.<br/>
		/// <br/>
		/// <c>PSRLDQ xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 73 /3 ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psrldq(AssemblerRegisterXMM dst, sbyte imm) {
			Code op;
			op = Code.Psrldq_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>psrldq instruction.<br/>
		/// <br/>
		/// <c>PSRLDQ xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 73 /3 ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psrldq(AssemblerRegisterXMM dst, byte imm) {
			Code op;
			op = Code.Psrldq_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>psrlq instruction.<br/>
		/// <br/>
		/// <c>PSRLQ mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F D3 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psrlq(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Psrlq_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>psrlq instruction.<br/>
		/// <br/>
		/// <c>PSRLQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F D3 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psrlq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Psrlq_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>psrlq instruction.<br/>
		/// <br/>
		/// <c>PSRLQ mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F D3 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psrlq(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Psrlq_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>psrlq instruction.<br/>
		/// <br/>
		/// <c>PSRLQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F D3 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psrlq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Psrlq_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>psrlq instruction.<br/>
		/// <br/>
		/// <c>PSRLQ mm, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 73 /2 ib</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psrlq(AssemblerRegisterMM dst, sbyte imm) {
			Code op;
			op = Code.Psrlq_mm_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>psrlq instruction.<br/>
		/// <br/>
		/// <c>PSRLQ xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 73 /2 ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psrlq(AssemblerRegisterXMM dst, sbyte imm) {
			Code op;
			op = Code.Psrlq_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>psrlq instruction.<br/>
		/// <br/>
		/// <c>PSRLQ mm, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 73 /2 ib</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psrlq(AssemblerRegisterMM dst, byte imm) {
			Code op;
			op = Code.Psrlq_mm_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>psrlq instruction.<br/>
		/// <br/>
		/// <c>PSRLQ xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 73 /2 ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psrlq(AssemblerRegisterXMM dst, byte imm) {
			Code op;
			op = Code.Psrlq_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>psrlw instruction.<br/>
		/// <br/>
		/// <c>PSRLW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F D1 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psrlw(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Psrlw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>psrlw instruction.<br/>
		/// <br/>
		/// <c>PSRLW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F D1 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psrlw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Psrlw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>psrlw instruction.<br/>
		/// <br/>
		/// <c>PSRLW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F D1 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psrlw(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Psrlw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>psrlw instruction.<br/>
		/// <br/>
		/// <c>PSRLW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F D1 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psrlw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Psrlw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>psrlw instruction.<br/>
		/// <br/>
		/// <c>PSRLW mm, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 71 /2 ib</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psrlw(AssemblerRegisterMM dst, sbyte imm) {
			Code op;
			op = Code.Psrlw_mm_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>psrlw instruction.<br/>
		/// <br/>
		/// <c>PSRLW xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 71 /2 ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psrlw(AssemblerRegisterXMM dst, sbyte imm) {
			Code op;
			op = Code.Psrlw_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>psrlw instruction.<br/>
		/// <br/>
		/// <c>PSRLW mm, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 71 /2 ib</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psrlw(AssemblerRegisterMM dst, byte imm) {
			Code op;
			op = Code.Psrlw_mm_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>psrlw instruction.<br/>
		/// <br/>
		/// <c>PSRLW xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 71 /2 ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psrlw(AssemblerRegisterXMM dst, byte imm) {
			Code op;
			op = Code.Psrlw_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>psubb instruction.<br/>
		/// <br/>
		/// <c>PSUBB mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F F8 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psubb(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Psubb_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>psubb instruction.<br/>
		/// <br/>
		/// <c>PSUBB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F F8 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psubb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Psubb_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>psubb instruction.<br/>
		/// <br/>
		/// <c>PSUBB mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F F8 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psubb(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Psubb_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>psubb instruction.<br/>
		/// <br/>
		/// <c>PSUBB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F F8 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psubb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Psubb_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>psubd instruction.<br/>
		/// <br/>
		/// <c>PSUBD mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F FA /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psubd(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Psubd_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>psubd instruction.<br/>
		/// <br/>
		/// <c>PSUBD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F FA /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psubd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Psubd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>psubd instruction.<br/>
		/// <br/>
		/// <c>PSUBD mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F FA /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psubd(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Psubd_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>psubd instruction.<br/>
		/// <br/>
		/// <c>PSUBD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F FA /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psubd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Psubd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>psubq instruction.<br/>
		/// <br/>
		/// <c>PSUBQ mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F FB /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psubq(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Psubq_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>psubq instruction.<br/>
		/// <br/>
		/// <c>PSUBQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F FB /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psubq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Psubq_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>psubq instruction.<br/>
		/// <br/>
		/// <c>PSUBQ mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F FB /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psubq(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Psubq_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>psubq instruction.<br/>
		/// <br/>
		/// <c>PSUBQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F FB /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psubq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Psubq_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>psubsb instruction.<br/>
		/// <br/>
		/// <c>PSUBSB mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F E8 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psubsb(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Psubsb_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>psubsb instruction.<br/>
		/// <br/>
		/// <c>PSUBSB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F E8 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psubsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Psubsb_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>psubsb instruction.<br/>
		/// <br/>
		/// <c>PSUBSB mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F E8 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psubsb(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Psubsb_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>psubsb instruction.<br/>
		/// <br/>
		/// <c>PSUBSB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F E8 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psubsb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Psubsb_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>psubsw instruction.<br/>
		/// <br/>
		/// <c>PSUBSW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F E9 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psubsw(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Psubsw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>psubsw instruction.<br/>
		/// <br/>
		/// <c>PSUBSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F E9 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psubsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Psubsw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>psubsw instruction.<br/>
		/// <br/>
		/// <c>PSUBSW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F E9 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psubsw(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Psubsw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>psubsw instruction.<br/>
		/// <br/>
		/// <c>PSUBSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F E9 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psubsw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Psubsw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>psubusb instruction.<br/>
		/// <br/>
		/// <c>PSUBUSB mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F D8 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psubusb(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Psubusb_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>psubusb instruction.<br/>
		/// <br/>
		/// <c>PSUBUSB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F D8 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psubusb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Psubusb_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>psubusb instruction.<br/>
		/// <br/>
		/// <c>PSUBUSB mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F D8 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psubusb(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Psubusb_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>psubusb instruction.<br/>
		/// <br/>
		/// <c>PSUBUSB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F D8 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psubusb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Psubusb_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>psubusw instruction.<br/>
		/// <br/>
		/// <c>PSUBUSW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F D9 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psubusw(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Psubusw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>psubusw instruction.<br/>
		/// <br/>
		/// <c>PSUBUSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F D9 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psubusw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Psubusw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>psubusw instruction.<br/>
		/// <br/>
		/// <c>PSUBUSW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F D9 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psubusw(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Psubusw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>psubusw instruction.<br/>
		/// <br/>
		/// <c>PSUBUSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F D9 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psubusw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Psubusw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>psubw instruction.<br/>
		/// <br/>
		/// <c>PSUBW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F F9 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psubw(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Psubw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>psubw instruction.<br/>
		/// <br/>
		/// <c>PSUBW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F F9 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psubw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Psubw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>psubw instruction.<br/>
		/// <br/>
		/// <c>PSUBW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F F9 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psubw(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Psubw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>psubw instruction.<br/>
		/// <br/>
		/// <c>PSUBW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F F9 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void psubw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Psubw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pswapd instruction.<br/>
		/// <br/>
		/// <c>PSWAPD mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r BB</c><br/>
		/// <br/>
		/// <c>3DNOWEXT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pswapd(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.D3NOW_Pswapd_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pswapd instruction.<br/>
		/// <br/>
		/// <c>PSWAPD mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r BB</c><br/>
		/// <br/>
		/// <c>3DNOWEXT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pswapd(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.D3NOW_Pswapd_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>ptest instruction.<br/>
		/// <br/>
		/// <c>PTEST xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 17 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ptest(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Ptest_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>ptest instruction.<br/>
		/// <br/>
		/// <c>PTEST xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 17 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ptest(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Ptest_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>ptwrite instruction.<br/>
		/// <br/>
		/// <c>PTWRITE r/m32</c><br/>
		/// <br/>
		/// <c>F3 0F AE /4</c><br/>
		/// <br/>
		/// <c>PTWRITE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ptwrite(AssemblerRegister32 dst) {
			Code op;
			op = Code.Ptwrite_rm32;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>ptwrite instruction.<br/>
		/// <br/>
		/// <c>PTWRITE r/m64</c><br/>
		/// <br/>
		/// <c>F3 REX.W 0F AE /4</c><br/>
		/// <br/>
		/// <c>PTWRITE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void ptwrite(AssemblerRegister64 dst) {
			Code op;
			op = Code.Ptwrite_rm64;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>ptwrite instruction.<br/>
		/// <br/>
		/// <c>PTWRITE r/m64</c><br/>
		/// <br/>
		/// <c>F3 REX.W 0F AE /4</c><br/>
		/// <br/>
		/// <c>PTWRITE</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>PTWRITE r/m32</c><br/>
		/// <br/>
		/// <c>F3 0F AE /4</c><br/>
		/// <br/>
		/// <c>PTWRITE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ptwrite(AssemblerMemoryOperand dst) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Ptwrite_rm64;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Ptwrite_rm32;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Ptwrite, dst);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>punpckhbw instruction.<br/>
		/// <br/>
		/// <c>PUNPCKHBW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 68 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void punpckhbw(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Punpckhbw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>punpckhbw instruction.<br/>
		/// <br/>
		/// <c>PUNPCKHBW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 68 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void punpckhbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Punpckhbw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>punpckhbw instruction.<br/>
		/// <br/>
		/// <c>PUNPCKHBW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 68 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void punpckhbw(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Punpckhbw_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>punpckhbw instruction.<br/>
		/// <br/>
		/// <c>PUNPCKHBW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 68 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void punpckhbw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Punpckhbw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>punpckhdq instruction.<br/>
		/// <br/>
		/// <c>PUNPCKHDQ mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 6A /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void punpckhdq(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Punpckhdq_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>punpckhdq instruction.<br/>
		/// <br/>
		/// <c>PUNPCKHDQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 6A /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void punpckhdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Punpckhdq_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>punpckhdq instruction.<br/>
		/// <br/>
		/// <c>PUNPCKHDQ mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 6A /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void punpckhdq(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Punpckhdq_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>punpckhdq instruction.<br/>
		/// <br/>
		/// <c>PUNPCKHDQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 6A /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void punpckhdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Punpckhdq_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>punpckhqdq instruction.<br/>
		/// <br/>
		/// <c>PUNPCKHQDQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 6D /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void punpckhqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Punpckhqdq_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>punpckhqdq instruction.<br/>
		/// <br/>
		/// <c>PUNPCKHQDQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 6D /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void punpckhqdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Punpckhqdq_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>punpckhwd instruction.<br/>
		/// <br/>
		/// <c>PUNPCKHWD mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 69 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void punpckhwd(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Punpckhwd_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>punpckhwd instruction.<br/>
		/// <br/>
		/// <c>PUNPCKHWD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 69 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void punpckhwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Punpckhwd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>punpckhwd instruction.<br/>
		/// <br/>
		/// <c>PUNPCKHWD mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 69 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void punpckhwd(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Punpckhwd_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>punpckhwd instruction.<br/>
		/// <br/>
		/// <c>PUNPCKHWD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 69 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void punpckhwd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Punpckhwd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>punpcklbw instruction.<br/>
		/// <br/>
		/// <c>PUNPCKLBW mm, mm/m32</c><br/>
		/// <br/>
		/// <c>NP 0F 60 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void punpcklbw(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Punpcklbw_mm_mmm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>punpcklbw instruction.<br/>
		/// <br/>
		/// <c>PUNPCKLBW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 60 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void punpcklbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Punpcklbw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>punpcklbw instruction.<br/>
		/// <br/>
		/// <c>PUNPCKLBW mm, mm/m32</c><br/>
		/// <br/>
		/// <c>NP 0F 60 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void punpcklbw(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Punpcklbw_mm_mmm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>punpcklbw instruction.<br/>
		/// <br/>
		/// <c>PUNPCKLBW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 60 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void punpcklbw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Punpcklbw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>punpckldq instruction.<br/>
		/// <br/>
		/// <c>PUNPCKLDQ mm, mm/m32</c><br/>
		/// <br/>
		/// <c>NP 0F 62 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void punpckldq(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Punpckldq_mm_mmm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>punpckldq instruction.<br/>
		/// <br/>
		/// <c>PUNPCKLDQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 62 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void punpckldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Punpckldq_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>punpckldq instruction.<br/>
		/// <br/>
		/// <c>PUNPCKLDQ mm, mm/m32</c><br/>
		/// <br/>
		/// <c>NP 0F 62 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void punpckldq(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Punpckldq_mm_mmm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>punpckldq instruction.<br/>
		/// <br/>
		/// <c>PUNPCKLDQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 62 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void punpckldq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Punpckldq_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>punpcklqdq instruction.<br/>
		/// <br/>
		/// <c>PUNPCKLQDQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 6C /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void punpcklqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Punpcklqdq_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>punpcklqdq instruction.<br/>
		/// <br/>
		/// <c>PUNPCKLQDQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 6C /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void punpcklqdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Punpcklqdq_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>punpcklwd instruction.<br/>
		/// <br/>
		/// <c>PUNPCKLWD mm, mm/m32</c><br/>
		/// <br/>
		/// <c>NP 0F 61 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void punpcklwd(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Punpcklwd_mm_mmm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>punpcklwd instruction.<br/>
		/// <br/>
		/// <c>PUNPCKLWD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 61 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void punpcklwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Punpcklwd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>punpcklwd instruction.<br/>
		/// <br/>
		/// <c>PUNPCKLWD mm, mm/m32</c><br/>
		/// <br/>
		/// <c>NP 0F 61 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void punpcklwd(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Punpcklwd_mm_mmm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>punpcklwd instruction.<br/>
		/// <br/>
		/// <c>PUNPCKLWD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 61 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void punpcklwd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Punpcklwd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>push instruction.<br/>
		/// <br/>
		/// <c>PUSH r16</c><br/>
		/// <br/>
		/// <c>o16 50+rw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void push(AssemblerRegister16 dst) {
			Code op;
			op = Code.Push_r16;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>push instruction.<br/>
		/// <br/>
		/// <c>PUSH r32</c><br/>
		/// <br/>
		/// <c>o32 50+rd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void push(AssemblerRegister32 dst) {
			Code op;
			op = Code.Push_r32;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>push instruction.<br/>
		/// <br/>
		/// <c>PUSH r64</c><br/>
		/// <br/>
		/// <c>50+ro</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void push(AssemblerRegister64 dst) {
			Code op;
			op = Code.Push_r64;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>push instruction.<br/>
		/// <br/>
		/// <c>PUSH FS</c><br/>
		/// <br/>
		/// <c>0F A0</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>PUSH GS</c><br/>
		/// <br/>
		/// <c>0F A8</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>PUSH ES</c><br/>
		/// <br/>
		/// <c>o32 06</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>PUSH CS</c><br/>
		/// <br/>
		/// <c>o32 0E</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>PUSH SS</c><br/>
		/// <br/>
		/// <c>o32 16</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>PUSH DS</c><br/>
		/// <br/>
		/// <c>o32 1E</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>PUSH FS</c><br/>
		/// <br/>
		/// <c>o32 0F A0</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>PUSH GS</c><br/>
		/// <br/>
		/// <c>o32 0F A8</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>PUSH ES</c><br/>
		/// <br/>
		/// <c>o16 06</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>PUSH CS</c><br/>
		/// <br/>
		/// <c>o16 0E</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>PUSH SS</c><br/>
		/// <br/>
		/// <c>o16 16</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>PUSH DS</c><br/>
		/// <br/>
		/// <c>o16 1E</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>PUSH FS</c><br/>
		/// <br/>
		/// <c>o16 0F A0</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>PUSH GS</c><br/>
		/// <br/>
		/// <c>o16 0F A8</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void push(AssemblerRegisterSegment dst) {
			Code op;
			if (dst == Register.FS) {
				if (Bitness == 64) {
					op = Code.Pushq_FS;
				} else op = Bitness >= 32 ? Code.Pushd_FS : Code.Pushw_FS;
			} else if (dst == Register.GS) {
				if (Bitness == 64) {
					op = Code.Pushq_GS;
				} else op = Bitness >= 32 ? Code.Pushd_GS : Code.Pushw_GS;
			} else if (dst == Register.ES) {
				op = Bitness >= 32 ? Code.Pushd_ES : Code.Pushw_ES;
			} else if (dst == Register.CS) {
				op = Bitness >= 32 ? Code.Pushd_CS : Code.Pushw_CS;
			} else if (dst == Register.SS) {
				op = Bitness >= 32 ? Code.Pushd_SS : Code.Pushw_SS;
			} else if (dst == Register.DS) {
				op = Bitness >= 32 ? Code.Pushd_DS : Code.Pushw_DS;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Push, dst);
			}
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>push instruction.<br/>
		/// <br/>
		/// <c>PUSH r/m64</c><br/>
		/// <br/>
		/// <c>FF /6</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>PUSH r/m32</c><br/>
		/// <br/>
		/// <c>o32 FF /6</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>PUSH r/m16</c><br/>
		/// <br/>
		/// <c>o16 FF /6</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void push(AssemblerMemoryOperand dst) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Push_rm64;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Push_rm32;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Push_rm16;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Push, dst);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>push instruction.<br/>
		/// <br/>
		/// <c>PUSH imm32</c><br/>
		/// <br/>
		/// <c>68 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>PUSH imm32</c><br/>
		/// <br/>
		/// <c>o32 68 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>PUSH imm16</c><br/>
		/// <br/>
		/// <c>o16 68 iw</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>PUSH imm8</c><br/>
		/// <br/>
		/// <c>6A ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>PUSH imm8</c><br/>
		/// <br/>
		/// <c>o32 6A ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>PUSH imm8</c><br/>
		/// <br/>
		/// <c>o16 6A ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void push(int imm) {
			Code op;
			if (Bitness == 64) {
				op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Pushq_imm8 : Code.Pushq_imm32;
			} else if (Bitness >= 32) {
				op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Pushd_imm8 : Code.Pushd_imm32;
			} else if (Bitness >= 16) {
				op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Pushw_imm8 : Code.Push_imm16;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Push, imm);
			}
			AddInstruction(Instruction.Create(op, imm));
		}
		/// <summary>push instruction.<br/>
		/// <br/>
		/// <c>PUSH imm32</c><br/>
		/// <br/>
		/// <c>o32 68 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>PUSH imm16</c><br/>
		/// <br/>
		/// <c>o16 68 iw</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>PUSH imm8</c><br/>
		/// <br/>
		/// <c>o32 6A ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>PUSH imm8</c><br/>
		/// <br/>
		/// <c>o16 6A ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void push(uint imm) {
			Code op;
			if (Bitness >= 32) {
				op = imm <= (uint)sbyte.MaxValue || (0xFFFF_FF80 <= imm && imm <= 0xFFFF_FFFF) ? Code.Pushd_imm8 : Code.Pushd_imm32;
			} else if (Bitness >= 16) {
				op = imm <= (uint)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF) ? Code.Pushw_imm8 : Code.Push_imm16;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Push, imm);
			}
			AddInstruction(Instruction.Create(op, imm));
		}
		/// <summary>pusha instruction.<br/>
		/// <br/>
		/// <c>PUSHA</c><br/>
		/// <br/>
		/// <c>o16 60</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void pusha() {
			Code op;
			op = Code.Pushaw;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>pushad instruction.<br/>
		/// <br/>
		/// <c>PUSHAD</c><br/>
		/// <br/>
		/// <c>o32 60</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void pushad() {
			Code op;
			op = Code.Pushad;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>pushf instruction.<br/>
		/// <br/>
		/// <c>PUSHF</c><br/>
		/// <br/>
		/// <c>o16 9C</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pushf() {
			Code op;
			op = Code.Pushfw;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>pushfd instruction.<br/>
		/// <br/>
		/// <c>PUSHFD</c><br/>
		/// <br/>
		/// <c>o32 9C</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void pushfd() {
			Code op;
			op = Code.Pushfd;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>pushfq instruction.<br/>
		/// <br/>
		/// <c>PUSHFQ</c><br/>
		/// <br/>
		/// <c>9C</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void pushfq() {
			Code op;
			op = Code.Pushfq;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>pvalidate instruction.<br/>
		/// <br/>
		/// <c>PVALIDATE</c><br/>
		/// <br/>
		/// <c>F2 0F 01 FF</c><br/>
		/// <br/>
		/// <c>SNP</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>PVALIDATE</c><br/>
		/// <br/>
		/// <c>a32 F2 0F 01 FF</c><br/>
		/// <br/>
		/// <c>SNP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>PVALIDATE</c><br/>
		/// <br/>
		/// <c>a16 F2 0F 01 FF</c><br/>
		/// <br/>
		/// <c>SNP</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void pvalidate() {
			Code op;
			if (Bitness == 64) {
				op = Code.Pvalidateq;
			} else op = Bitness >= 32 ? Code.Pvalidated : Code.Pvalidatew;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>pxor instruction.<br/>
		/// <br/>
		/// <c>PXOR mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F EF /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pxor(AssemblerRegisterMM dst, AssemblerRegisterMM src) {
			Code op;
			op = Code.Pxor_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pxor instruction.<br/>
		/// <br/>
		/// <c>PXOR xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F EF /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pxor(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Pxor_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>pxor instruction.<br/>
		/// <br/>
		/// <c>PXOR mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F EF /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pxor(AssemblerRegisterMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pxor_mm_mmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>pxor instruction.<br/>
		/// <br/>
		/// <c>PXOR xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F EF /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void pxor(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Pxor_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>rcl instruction.<br/>
		/// <br/>
		/// <c>RCL r/m8, CL</c><br/>
		/// <br/>
		/// <c>D2 /2</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rcl(AssemblerRegister8 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Rcl_rm8_CL;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>rcl instruction.<br/>
		/// <br/>
		/// <c>RCL r/m16, CL</c><br/>
		/// <br/>
		/// <c>o16 D3 /2</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rcl(AssemblerRegister16 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Rcl_rm16_CL;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>rcl instruction.<br/>
		/// <br/>
		/// <c>RCL r/m32, CL</c><br/>
		/// <br/>
		/// <c>o32 D3 /2</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rcl(AssemblerRegister32 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Rcl_rm32_CL;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>rcl instruction.<br/>
		/// <br/>
		/// <c>RCL r/m64, CL</c><br/>
		/// <br/>
		/// <c>REX.W D3 /2</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void rcl(AssemblerRegister64 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Rcl_rm64_CL;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>rcl instruction.<br/>
		/// <br/>
		/// <c>RCL r/m64, CL</c><br/>
		/// <br/>
		/// <c>REX.W D3 /2</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m32, CL</c><br/>
		/// <br/>
		/// <c>o32 D3 /2</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m16, CL</c><br/>
		/// <br/>
		/// <c>o16 D3 /2</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m8, CL</c><br/>
		/// <br/>
		/// <c>D2 /2</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rcl(AssemblerMemoryOperand dst, AssemblerRegister8 src) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Rcl_rm64_CL;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Rcl_rm32_CL;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Rcl_rm16_CL;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Rcl_rm8_CL;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Rcl, dst, src);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>rcl instruction.<br/>
		/// <br/>
		/// <c>RCL r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /2</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /2 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rcl(AssemblerRegister8 dst, sbyte imm) {
			Code op;
			op = imm == 1 ? Code.Rcl_rm8_1 : Code.Rcl_rm8_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>rcl instruction.<br/>
		/// <br/>
		/// <c>RCL r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /2</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /2 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rcl(AssemblerRegister16 dst, sbyte imm) {
			Code op;
			op = imm == 1 ? Code.Rcl_rm16_1 : Code.Rcl_rm16_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>rcl instruction.<br/>
		/// <br/>
		/// <c>RCL r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /2</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /2 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rcl(AssemblerRegister32 dst, sbyte imm) {
			Code op;
			op = imm == 1 ? Code.Rcl_rm32_1 : Code.Rcl_rm32_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>rcl instruction.<br/>
		/// <br/>
		/// <c>RCL r/m64, 1</c><br/>
		/// <br/>
		/// <c>REX.W D1 /2</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W C1 /2 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void rcl(AssemblerRegister64 dst, sbyte imm) {
			Code op;
			op = imm == 1 ? Code.Rcl_rm64_1 : Code.Rcl_rm64_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>rcl instruction.<br/>
		/// <br/>
		/// <c>RCL r/m64, 1</c><br/>
		/// <br/>
		/// <c>REX.W D1 /2</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W C1 /2 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /2</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /2 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /2</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /2 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /2</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /2 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rcl(AssemblerMemoryOperand dst, sbyte imm) {
			Code op;
			if (imm == 1) {
				if (dst.Size == MemoryOperandSize.QwordPtr) {
					op = Code.Rcl_rm64_1;
				} else if (dst.Size == MemoryOperandSize.DwordPtr) {
					op = Code.Rcl_rm32_1;
				} else if (dst.Size == MemoryOperandSize.WordPtr) {
					op = Code.Rcl_rm16_1;
				} else if (dst.Size == MemoryOperandSize.BytePtr) {
					op = Code.Rcl_rm8_1;
				} else {
					throw NoOpCodeFoundFor(Mnemonic.Rcl, dst, imm);
				}
			} else if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Rcl_rm64_imm8;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Rcl_rm32_imm8;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Rcl_rm16_imm8;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Rcl_rm8_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Rcl, dst, imm);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>rcl instruction.<br/>
		/// <br/>
		/// <c>RCL r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /2</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /2 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rcl(AssemblerRegister8 dst, byte imm) {
			Code op;
			op = imm == 1 ? Code.Rcl_rm8_1 : Code.Rcl_rm8_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>rcl instruction.<br/>
		/// <br/>
		/// <c>RCL r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /2</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /2 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rcl(AssemblerRegister16 dst, byte imm) {
			Code op;
			op = imm == 1 ? Code.Rcl_rm16_1 : Code.Rcl_rm16_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>rcl instruction.<br/>
		/// <br/>
		/// <c>RCL r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /2</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /2 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rcl(AssemblerRegister32 dst, byte imm) {
			Code op;
			op = imm == 1 ? Code.Rcl_rm32_1 : Code.Rcl_rm32_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>rcl instruction.<br/>
		/// <br/>
		/// <c>RCL r/m64, 1</c><br/>
		/// <br/>
		/// <c>REX.W D1 /2</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W C1 /2 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void rcl(AssemblerRegister64 dst, byte imm) {
			Code op;
			op = imm == 1 ? Code.Rcl_rm64_1 : Code.Rcl_rm64_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>rcl instruction.<br/>
		/// <br/>
		/// <c>RCL r/m64, 1</c><br/>
		/// <br/>
		/// <c>REX.W D1 /2</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W C1 /2 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /2</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /2 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /2</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /2 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /2</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /2 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rcl(AssemblerMemoryOperand dst, byte imm) {
			Code op;
			if (imm == 1) {
				if (dst.Size == MemoryOperandSize.QwordPtr) {
					op = Code.Rcl_rm64_1;
				} else if (dst.Size == MemoryOperandSize.DwordPtr) {
					op = Code.Rcl_rm32_1;
				} else if (dst.Size == MemoryOperandSize.WordPtr) {
					op = Code.Rcl_rm16_1;
				} else if (dst.Size == MemoryOperandSize.BytePtr) {
					op = Code.Rcl_rm8_1;
				} else {
					throw NoOpCodeFoundFor(Mnemonic.Rcl, dst, imm);
				}
			} else if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Rcl_rm64_imm8;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Rcl_rm32_imm8;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Rcl_rm16_imm8;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Rcl_rm8_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Rcl, dst, imm);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>rcpps instruction.<br/>
		/// <br/>
		/// <c>RCPPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 53 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rcpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Rcpps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>rcpps instruction.<br/>
		/// <br/>
		/// <c>RCPPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 53 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rcpps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Rcpps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>rcpss instruction.<br/>
		/// <br/>
		/// <c>RCPSS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 53 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rcpss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Rcpss_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>rcpss instruction.<br/>
		/// <br/>
		/// <c>RCPSS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 53 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rcpss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Rcpss_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>rcr instruction.<br/>
		/// <br/>
		/// <c>RCR r/m8, CL</c><br/>
		/// <br/>
		/// <c>D2 /3</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rcr(AssemblerRegister8 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Rcr_rm8_CL;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>rcr instruction.<br/>
		/// <br/>
		/// <c>RCR r/m16, CL</c><br/>
		/// <br/>
		/// <c>o16 D3 /3</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rcr(AssemblerRegister16 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Rcr_rm16_CL;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>rcr instruction.<br/>
		/// <br/>
		/// <c>RCR r/m32, CL</c><br/>
		/// <br/>
		/// <c>o32 D3 /3</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rcr(AssemblerRegister32 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Rcr_rm32_CL;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>rcr instruction.<br/>
		/// <br/>
		/// <c>RCR r/m64, CL</c><br/>
		/// <br/>
		/// <c>REX.W D3 /3</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void rcr(AssemblerRegister64 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Rcr_rm64_CL;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>rcr instruction.<br/>
		/// <br/>
		/// <c>RCR r/m64, CL</c><br/>
		/// <br/>
		/// <c>REX.W D3 /3</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m32, CL</c><br/>
		/// <br/>
		/// <c>o32 D3 /3</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m16, CL</c><br/>
		/// <br/>
		/// <c>o16 D3 /3</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m8, CL</c><br/>
		/// <br/>
		/// <c>D2 /3</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rcr(AssemblerMemoryOperand dst, AssemblerRegister8 src) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Rcr_rm64_CL;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Rcr_rm32_CL;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Rcr_rm16_CL;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Rcr_rm8_CL;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Rcr, dst, src);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>rcr instruction.<br/>
		/// <br/>
		/// <c>RCR r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /3</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /3 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rcr(AssemblerRegister8 dst, sbyte imm) {
			Code op;
			op = imm == 1 ? Code.Rcr_rm8_1 : Code.Rcr_rm8_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>rcr instruction.<br/>
		/// <br/>
		/// <c>RCR r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /3</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /3 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rcr(AssemblerRegister16 dst, sbyte imm) {
			Code op;
			op = imm == 1 ? Code.Rcr_rm16_1 : Code.Rcr_rm16_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>rcr instruction.<br/>
		/// <br/>
		/// <c>RCR r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /3</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /3 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rcr(AssemblerRegister32 dst, sbyte imm) {
			Code op;
			op = imm == 1 ? Code.Rcr_rm32_1 : Code.Rcr_rm32_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>rcr instruction.<br/>
		/// <br/>
		/// <c>RCR r/m64, 1</c><br/>
		/// <br/>
		/// <c>REX.W D1 /3</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W C1 /3 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void rcr(AssemblerRegister64 dst, sbyte imm) {
			Code op;
			op = imm == 1 ? Code.Rcr_rm64_1 : Code.Rcr_rm64_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>rcr instruction.<br/>
		/// <br/>
		/// <c>RCR r/m64, 1</c><br/>
		/// <br/>
		/// <c>REX.W D1 /3</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W C1 /3 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /3</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /3 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /3</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /3 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /3</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /3 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rcr(AssemblerMemoryOperand dst, sbyte imm) {
			Code op;
			if (imm == 1) {
				if (dst.Size == MemoryOperandSize.QwordPtr) {
					op = Code.Rcr_rm64_1;
				} else if (dst.Size == MemoryOperandSize.DwordPtr) {
					op = Code.Rcr_rm32_1;
				} else if (dst.Size == MemoryOperandSize.WordPtr) {
					op = Code.Rcr_rm16_1;
				} else if (dst.Size == MemoryOperandSize.BytePtr) {
					op = Code.Rcr_rm8_1;
				} else {
					throw NoOpCodeFoundFor(Mnemonic.Rcr, dst, imm);
				}
			} else if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Rcr_rm64_imm8;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Rcr_rm32_imm8;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Rcr_rm16_imm8;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Rcr_rm8_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Rcr, dst, imm);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>rcr instruction.<br/>
		/// <br/>
		/// <c>RCR r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /3</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /3 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rcr(AssemblerRegister8 dst, byte imm) {
			Code op;
			op = imm == 1 ? Code.Rcr_rm8_1 : Code.Rcr_rm8_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>rcr instruction.<br/>
		/// <br/>
		/// <c>RCR r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /3</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /3 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rcr(AssemblerRegister16 dst, byte imm) {
			Code op;
			op = imm == 1 ? Code.Rcr_rm16_1 : Code.Rcr_rm16_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>rcr instruction.<br/>
		/// <br/>
		/// <c>RCR r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /3</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /3 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rcr(AssemblerRegister32 dst, byte imm) {
			Code op;
			op = imm == 1 ? Code.Rcr_rm32_1 : Code.Rcr_rm32_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>rcr instruction.<br/>
		/// <br/>
		/// <c>RCR r/m64, 1</c><br/>
		/// <br/>
		/// <c>REX.W D1 /3</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W C1 /3 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void rcr(AssemblerRegister64 dst, byte imm) {
			Code op;
			op = imm == 1 ? Code.Rcr_rm64_1 : Code.Rcr_rm64_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>rcr instruction.<br/>
		/// <br/>
		/// <c>RCR r/m64, 1</c><br/>
		/// <br/>
		/// <c>REX.W D1 /3</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W C1 /3 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /3</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /3 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /3</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /3 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /3</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /3 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rcr(AssemblerMemoryOperand dst, byte imm) {
			Code op;
			if (imm == 1) {
				if (dst.Size == MemoryOperandSize.QwordPtr) {
					op = Code.Rcr_rm64_1;
				} else if (dst.Size == MemoryOperandSize.DwordPtr) {
					op = Code.Rcr_rm32_1;
				} else if (dst.Size == MemoryOperandSize.WordPtr) {
					op = Code.Rcr_rm16_1;
				} else if (dst.Size == MemoryOperandSize.BytePtr) {
					op = Code.Rcr_rm8_1;
				} else {
					throw NoOpCodeFoundFor(Mnemonic.Rcr, dst, imm);
				}
			} else if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Rcr_rm64_imm8;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Rcr_rm32_imm8;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Rcr_rm16_imm8;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Rcr_rm8_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Rcr, dst, imm);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>rdfsbase instruction.<br/>
		/// <br/>
		/// <c>RDFSBASE r32</c><br/>
		/// <br/>
		/// <c>F3 0F AE /0</c><br/>
		/// <br/>
		/// <c>FSGSBASE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void rdfsbase(AssemblerRegister32 dst) {
			Code op;
			op = Code.Rdfsbase_r32;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>rdfsbase instruction.<br/>
		/// <br/>
		/// <c>RDFSBASE r64</c><br/>
		/// <br/>
		/// <c>F3 REX.W 0F AE /0</c><br/>
		/// <br/>
		/// <c>FSGSBASE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void rdfsbase(AssemblerRegister64 dst) {
			Code op;
			op = Code.Rdfsbase_r64;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>rdgsbase instruction.<br/>
		/// <br/>
		/// <c>RDGSBASE r32</c><br/>
		/// <br/>
		/// <c>F3 0F AE /1</c><br/>
		/// <br/>
		/// <c>FSGSBASE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void rdgsbase(AssemblerRegister32 dst) {
			Code op;
			op = Code.Rdgsbase_r32;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>rdgsbase instruction.<br/>
		/// <br/>
		/// <c>RDGSBASE r64</c><br/>
		/// <br/>
		/// <c>F3 REX.W 0F AE /1</c><br/>
		/// <br/>
		/// <c>FSGSBASE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void rdgsbase(AssemblerRegister64 dst) {
			Code op;
			op = Code.Rdgsbase_r64;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>rdmsr instruction.<br/>
		/// <br/>
		/// <c>RDMSR</c><br/>
		/// <br/>
		/// <c>0F 32</c><br/>
		/// <br/>
		/// <c>MSR</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rdmsr() {
			Code op;
			op = Code.Rdmsr;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>rdpid instruction.<br/>
		/// <br/>
		/// <c>RDPID r32</c><br/>
		/// <br/>
		/// <c>F3 0F C7 /7</c><br/>
		/// <br/>
		/// <c>RDPID</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void rdpid(AssemblerRegister32 dst) {
			Code op;
			op = Code.Rdpid_r32;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>rdpid instruction.<br/>
		/// <br/>
		/// <c>RDPID r64</c><br/>
		/// <br/>
		/// <c>F3 0F C7 /7</c><br/>
		/// <br/>
		/// <c>RDPID</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void rdpid(AssemblerRegister64 dst) {
			Code op;
			op = Code.Rdpid_r64;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>rdpkru instruction.<br/>
		/// <br/>
		/// <c>RDPKRU</c><br/>
		/// <br/>
		/// <c>NP 0F 01 EE</c><br/>
		/// <br/>
		/// <c>PKU</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rdpkru() {
			Code op;
			op = Code.Rdpkru;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>rdpmc instruction.<br/>
		/// <br/>
		/// <c>RDPMC</c><br/>
		/// <br/>
		/// <c>0F 33</c><br/>
		/// <br/>
		/// <c>Pentium MMX or later, or Pentium Pro or later</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rdpmc() {
			Code op;
			op = Code.Rdpmc;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>rdpru instruction.<br/>
		/// <br/>
		/// <c>RDPRU</c><br/>
		/// <br/>
		/// <c>0F 01 FD</c><br/>
		/// <br/>
		/// <c>RDPRU</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rdpru() {
			Code op;
			op = Code.Rdpru;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>rdrand instruction.<br/>
		/// <br/>
		/// <c>RDRAND r16</c><br/>
		/// <br/>
		/// <c>o16 0F C7 /6</c><br/>
		/// <br/>
		/// <c>RDRAND</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rdrand(AssemblerRegister16 dst) {
			Code op;
			op = Code.Rdrand_r16;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>rdrand instruction.<br/>
		/// <br/>
		/// <c>RDRAND r32</c><br/>
		/// <br/>
		/// <c>o32 0F C7 /6</c><br/>
		/// <br/>
		/// <c>RDRAND</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rdrand(AssemblerRegister32 dst) {
			Code op;
			op = Code.Rdrand_r32;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>rdrand instruction.<br/>
		/// <br/>
		/// <c>RDRAND r64</c><br/>
		/// <br/>
		/// <c>REX.W 0F C7 /6</c><br/>
		/// <br/>
		/// <c>RDRAND</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void rdrand(AssemblerRegister64 dst) {
			Code op;
			op = Code.Rdrand_r64;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>rdseed instruction.<br/>
		/// <br/>
		/// <c>RDSEED r16</c><br/>
		/// <br/>
		/// <c>o16 0F C7 /7</c><br/>
		/// <br/>
		/// <c>RDSEED</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rdseed(AssemblerRegister16 dst) {
			Code op;
			op = Code.Rdseed_r16;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>rdseed instruction.<br/>
		/// <br/>
		/// <c>RDSEED r32</c><br/>
		/// <br/>
		/// <c>o32 0F C7 /7</c><br/>
		/// <br/>
		/// <c>RDSEED</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rdseed(AssemblerRegister32 dst) {
			Code op;
			op = Code.Rdseed_r32;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>rdseed instruction.<br/>
		/// <br/>
		/// <c>RDSEED r64</c><br/>
		/// <br/>
		/// <c>REX.W 0F C7 /7</c><br/>
		/// <br/>
		/// <c>RDSEED</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void rdseed(AssemblerRegister64 dst) {
			Code op;
			op = Code.Rdseed_r64;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>rdsspd instruction.<br/>
		/// <br/>
		/// <c>RDSSPD r32</c><br/>
		/// <br/>
		/// <c>F3 0F 1E /1</c><br/>
		/// <br/>
		/// <c>CET_SS</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rdsspd(AssemblerRegister32 dst) {
			Code op;
			op = Code.Rdsspd_r32;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>rdsspq instruction.<br/>
		/// <br/>
		/// <c>RDSSPQ r64</c><br/>
		/// <br/>
		/// <c>F3 REX.W 0F 1E /1</c><br/>
		/// <br/>
		/// <c>CET_SS</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void rdsspq(AssemblerRegister64 dst) {
			Code op;
			op = Code.Rdsspq_r64;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>rdtsc instruction.<br/>
		/// <br/>
		/// <c>RDTSC</c><br/>
		/// <br/>
		/// <c>0F 31</c><br/>
		/// <br/>
		/// <c>TSC</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rdtsc() {
			Code op;
			op = Code.Rdtsc;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>rdtscp instruction.<br/>
		/// <br/>
		/// <c>RDTSCP</c><br/>
		/// <br/>
		/// <c>0F 01 F9</c><br/>
		/// <br/>
		/// <c>RDTSCP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rdtscp() {
			Code op;
			op = Code.Rdtscp;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>reserved_nop_0f0d instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F 0D /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void reserved_nop_0f0d(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.ReservedNop_rm16_r16_0F0D;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>reserved_nop_0f0d instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F 0D /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void reserved_nop_0f0d(AssemblerMemoryOperand dst, AssemblerRegister16 src) {
			Code op;
			op = Code.ReservedNop_rm16_r16_0F0D;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>reserved_nop_0f0d instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F 0D /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void reserved_nop_0f0d(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.ReservedNop_rm32_r32_0F0D;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>reserved_nop_0f0d instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F 0D /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void reserved_nop_0f0d(AssemblerMemoryOperand dst, AssemblerRegister32 src) {
			Code op;
			op = Code.ReservedNop_rm32_r32_0F0D;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>reserved_nop_0f0d instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 0D /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void reserved_nop_0f0d(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.ReservedNop_rm64_r64_0F0D;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>reserved_nop_0f0d instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 0D /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void reserved_nop_0f0d(AssemblerMemoryOperand dst, AssemblerRegister64 src) {
			Code op;
			op = Code.ReservedNop_rm64_r64_0F0D;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>reserved_nop_0f18 instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F 18 /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void reserved_nop_0f18(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.ReservedNop_rm16_r16_0F18;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>reserved_nop_0f18 instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F 18 /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void reserved_nop_0f18(AssemblerMemoryOperand dst, AssemblerRegister16 src) {
			Code op;
			op = Code.ReservedNop_rm16_r16_0F18;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>reserved_nop_0f18 instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F 18 /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void reserved_nop_0f18(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.ReservedNop_rm32_r32_0F18;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>reserved_nop_0f18 instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F 18 /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void reserved_nop_0f18(AssemblerMemoryOperand dst, AssemblerRegister32 src) {
			Code op;
			op = Code.ReservedNop_rm32_r32_0F18;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>reserved_nop_0f18 instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 18 /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void reserved_nop_0f18(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.ReservedNop_rm64_r64_0F18;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>reserved_nop_0f18 instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 18 /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void reserved_nop_0f18(AssemblerMemoryOperand dst, AssemblerRegister64 src) {
			Code op;
			op = Code.ReservedNop_rm64_r64_0F18;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>reserved_nop_0f19 instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F 19 /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void reserved_nop_0f19(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.ReservedNop_rm16_r16_0F19;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>reserved_nop_0f19 instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F 19 /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void reserved_nop_0f19(AssemblerMemoryOperand dst, AssemblerRegister16 src) {
			Code op;
			op = Code.ReservedNop_rm16_r16_0F19;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>reserved_nop_0f19 instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F 19 /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void reserved_nop_0f19(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.ReservedNop_rm32_r32_0F19;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>reserved_nop_0f19 instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F 19 /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void reserved_nop_0f19(AssemblerMemoryOperand dst, AssemblerRegister32 src) {
			Code op;
			op = Code.ReservedNop_rm32_r32_0F19;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>reserved_nop_0f19 instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 19 /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void reserved_nop_0f19(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.ReservedNop_rm64_r64_0F19;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>reserved_nop_0f19 instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 19 /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void reserved_nop_0f19(AssemblerMemoryOperand dst, AssemblerRegister64 src) {
			Code op;
			op = Code.ReservedNop_rm64_r64_0F19;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>reserved_nop_0f1a instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F 1A /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void reserved_nop_0f1a(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.ReservedNop_rm16_r16_0F1A;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>reserved_nop_0f1a instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F 1A /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void reserved_nop_0f1a(AssemblerMemoryOperand dst, AssemblerRegister16 src) {
			Code op;
			op = Code.ReservedNop_rm16_r16_0F1A;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>reserved_nop_0f1a instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F 1A /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void reserved_nop_0f1a(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.ReservedNop_rm32_r32_0F1A;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>reserved_nop_0f1a instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F 1A /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void reserved_nop_0f1a(AssemblerMemoryOperand dst, AssemblerRegister32 src) {
			Code op;
			op = Code.ReservedNop_rm32_r32_0F1A;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>reserved_nop_0f1a instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 1A /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void reserved_nop_0f1a(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.ReservedNop_rm64_r64_0F1A;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>reserved_nop_0f1a instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 1A /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void reserved_nop_0f1a(AssemblerMemoryOperand dst, AssemblerRegister64 src) {
			Code op;
			op = Code.ReservedNop_rm64_r64_0F1A;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>reserved_nop_0f1b instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F 1B /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void reserved_nop_0f1b(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.ReservedNop_rm16_r16_0F1B;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>reserved_nop_0f1b instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F 1B /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void reserved_nop_0f1b(AssemblerMemoryOperand dst, AssemblerRegister16 src) {
			Code op;
			op = Code.ReservedNop_rm16_r16_0F1B;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>reserved_nop_0f1b instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F 1B /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void reserved_nop_0f1b(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.ReservedNop_rm32_r32_0F1B;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>reserved_nop_0f1b instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F 1B /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void reserved_nop_0f1b(AssemblerMemoryOperand dst, AssemblerRegister32 src) {
			Code op;
			op = Code.ReservedNop_rm32_r32_0F1B;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>reserved_nop_0f1b instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 1B /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void reserved_nop_0f1b(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.ReservedNop_rm64_r64_0F1B;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>reserved_nop_0f1b instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 1B /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void reserved_nop_0f1b(AssemblerMemoryOperand dst, AssemblerRegister64 src) {
			Code op;
			op = Code.ReservedNop_rm64_r64_0F1B;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>reserved_nop_0f1c instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F 1C /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void reserved_nop_0f1c(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.ReservedNop_rm16_r16_0F1C;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>reserved_nop_0f1c instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F 1C /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void reserved_nop_0f1c(AssemblerMemoryOperand dst, AssemblerRegister16 src) {
			Code op;
			op = Code.ReservedNop_rm16_r16_0F1C;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>reserved_nop_0f1c instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F 1C /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void reserved_nop_0f1c(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.ReservedNop_rm32_r32_0F1C;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>reserved_nop_0f1c instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F 1C /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void reserved_nop_0f1c(AssemblerMemoryOperand dst, AssemblerRegister32 src) {
			Code op;
			op = Code.ReservedNop_rm32_r32_0F1C;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>reserved_nop_0f1c instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 1C /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void reserved_nop_0f1c(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.ReservedNop_rm64_r64_0F1C;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>reserved_nop_0f1c instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 1C /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void reserved_nop_0f1c(AssemblerMemoryOperand dst, AssemblerRegister64 src) {
			Code op;
			op = Code.ReservedNop_rm64_r64_0F1C;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>reserved_nop_0f1d instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F 1D /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void reserved_nop_0f1d(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.ReservedNop_rm16_r16_0F1D;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>reserved_nop_0f1d instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F 1D /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void reserved_nop_0f1d(AssemblerMemoryOperand dst, AssemblerRegister16 src) {
			Code op;
			op = Code.ReservedNop_rm16_r16_0F1D;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>reserved_nop_0f1d instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F 1D /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void reserved_nop_0f1d(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.ReservedNop_rm32_r32_0F1D;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>reserved_nop_0f1d instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F 1D /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void reserved_nop_0f1d(AssemblerMemoryOperand dst, AssemblerRegister32 src) {
			Code op;
			op = Code.ReservedNop_rm32_r32_0F1D;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>reserved_nop_0f1d instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 1D /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void reserved_nop_0f1d(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.ReservedNop_rm64_r64_0F1D;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>reserved_nop_0f1d instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 1D /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void reserved_nop_0f1d(AssemblerMemoryOperand dst, AssemblerRegister64 src) {
			Code op;
			op = Code.ReservedNop_rm64_r64_0F1D;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>reserved_nop_0f1e instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F 1E /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void reserved_nop_0f1e(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.ReservedNop_rm16_r16_0F1E;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>reserved_nop_0f1e instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F 1E /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void reserved_nop_0f1e(AssemblerMemoryOperand dst, AssemblerRegister16 src) {
			Code op;
			op = Code.ReservedNop_rm16_r16_0F1E;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>reserved_nop_0f1e instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F 1E /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void reserved_nop_0f1e(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.ReservedNop_rm32_r32_0F1E;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>reserved_nop_0f1e instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F 1E /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void reserved_nop_0f1e(AssemblerMemoryOperand dst, AssemblerRegister32 src) {
			Code op;
			op = Code.ReservedNop_rm32_r32_0F1E;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>reserved_nop_0f1e instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 1E /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void reserved_nop_0f1e(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.ReservedNop_rm64_r64_0F1E;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>reserved_nop_0f1e instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 1E /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void reserved_nop_0f1e(AssemblerMemoryOperand dst, AssemblerRegister64 src) {
			Code op;
			op = Code.ReservedNop_rm64_r64_0F1E;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>reserved_nop_0f1f instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F 1F /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void reserved_nop_0f1f(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.ReservedNop_rm16_r16_0F1F;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>reserved_nop_0f1f instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F 1F /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void reserved_nop_0f1f(AssemblerMemoryOperand dst, AssemblerRegister16 src) {
			Code op;
			op = Code.ReservedNop_rm16_r16_0F1F;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>reserved_nop_0f1f instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F 1F /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void reserved_nop_0f1f(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.ReservedNop_rm32_r32_0F1F;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>reserved_nop_0f1f instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F 1F /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void reserved_nop_0f1f(AssemblerMemoryOperand dst, AssemblerRegister32 src) {
			Code op;
			op = Code.ReservedNop_rm32_r32_0F1F;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>reserved_nop_0f1f instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 1F /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void reserved_nop_0f1f(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.ReservedNop_rm64_r64_0F1F;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>reserved_nop_0f1f instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 0F 1F /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void reserved_nop_0f1f(AssemblerMemoryOperand dst, AssemblerRegister64 src) {
			Code op;
			op = Code.ReservedNop_rm64_r64_0F1F;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>ret instruction.<br/>
		/// <br/>
		/// <c>RET</c><br/>
		/// <br/>
		/// <c>C3</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>RET</c><br/>
		/// <br/>
		/// <c>o32 C3</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>RET</c><br/>
		/// <br/>
		/// <c>o16 C3</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ret() {
			Code op;
			if (Bitness == 64) {
				op = Code.Retnq;
			} else op = Bitness >= 32 ? Code.Retnd : Code.Retnw;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>ret instruction.<br/>
		/// <br/>
		/// <c>RET imm16</c><br/>
		/// <br/>
		/// <c>C2 iw</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>RET imm16</c><br/>
		/// <br/>
		/// <c>o32 C2 iw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>RET imm16</c><br/>
		/// <br/>
		/// <c>o16 C2 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ret(short imm) {
			Code op;
			if (Bitness == 64) {
				op = Code.Retnq_imm16;
			} else op = Bitness >= 32 ? Code.Retnd_imm16 : Code.Retnw_imm16;
			AddInstruction(Instruction.Create(op, imm));
		}
		/// <summary>ret instruction.<br/>
		/// <br/>
		/// <c>RET imm16</c><br/>
		/// <br/>
		/// <c>C2 iw</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>RET imm16</c><br/>
		/// <br/>
		/// <c>o32 C2 iw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>RET imm16</c><br/>
		/// <br/>
		/// <c>o16 C2 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ret(ushort imm) {
			Code op;
			if (Bitness == 64) {
				op = Code.Retnq_imm16;
			} else op = Bitness >= 32 ? Code.Retnd_imm16 : Code.Retnw_imm16;
			AddInstruction(Instruction.Create(op, (uint)imm));
		}
		/// <summary>retf instruction.<br/>
		/// <br/>
		/// <c>RET</c><br/>
		/// <br/>
		/// <c>REX.W CB</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>RET</c><br/>
		/// <br/>
		/// <c>o32 CB</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RET</c><br/>
		/// <br/>
		/// <c>o16 CB</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void retf() {
			Code op;
			if (Bitness == 64) {
				op = Code.Retfq;
			} else op = Bitness >= 32 ? Code.Retfd : Code.Retfw;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>retf instruction.<br/>
		/// <br/>
		/// <c>RET imm16</c><br/>
		/// <br/>
		/// <c>REX.W CA iw</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>RET imm16</c><br/>
		/// <br/>
		/// <c>o32 CA iw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RET imm16</c><br/>
		/// <br/>
		/// <c>o16 CA iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void retf(short imm) {
			Code op;
			if (Bitness == 64) {
				op = Code.Retfq_imm16;
			} else op = Bitness >= 32 ? Code.Retfd_imm16 : Code.Retfw_imm16;
			AddInstruction(Instruction.Create(op, imm));
		}
		/// <summary>retf instruction.<br/>
		/// <br/>
		/// <c>RET imm16</c><br/>
		/// <br/>
		/// <c>REX.W CA iw</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>RET imm16</c><br/>
		/// <br/>
		/// <c>o32 CA iw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RET imm16</c><br/>
		/// <br/>
		/// <c>o16 CA iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void retf(ushort imm) {
			Code op;
			if (Bitness == 64) {
				op = Code.Retfq_imm16;
			} else op = Bitness >= 32 ? Code.Retfd_imm16 : Code.Retfw_imm16;
			AddInstruction(Instruction.Create(op, (uint)imm));
		}
		/// <summary>rmpadjust instruction.<br/>
		/// <br/>
		/// <c>RMPADJUST</c><br/>
		/// <br/>
		/// <c>F3 0F 01 FE</c><br/>
		/// <br/>
		/// <c>SNP</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void rmpadjust() {
			Code op;
			op = Code.Rmpadjust;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>rmpupdate instruction.<br/>
		/// <br/>
		/// <c>RMPUPDATE</c><br/>
		/// <br/>
		/// <c>F2 0F 01 FE</c><br/>
		/// <br/>
		/// <c>SNP</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void rmpupdate() {
			Code op;
			op = Code.Rmpupdate;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>rol instruction.<br/>
		/// <br/>
		/// <c>ROL r/m8, CL</c><br/>
		/// <br/>
		/// <c>D2 /0</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rol(AssemblerRegister8 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Rol_rm8_CL;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>rol instruction.<br/>
		/// <br/>
		/// <c>ROL r/m16, CL</c><br/>
		/// <br/>
		/// <c>o16 D3 /0</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rol(AssemblerRegister16 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Rol_rm16_CL;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>rol instruction.<br/>
		/// <br/>
		/// <c>ROL r/m32, CL</c><br/>
		/// <br/>
		/// <c>o32 D3 /0</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rol(AssemblerRegister32 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Rol_rm32_CL;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>rol instruction.<br/>
		/// <br/>
		/// <c>ROL r/m64, CL</c><br/>
		/// <br/>
		/// <c>REX.W D3 /0</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void rol(AssemblerRegister64 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Rol_rm64_CL;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>rol instruction.<br/>
		/// <br/>
		/// <c>ROL r/m64, CL</c><br/>
		/// <br/>
		/// <c>REX.W D3 /0</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m32, CL</c><br/>
		/// <br/>
		/// <c>o32 D3 /0</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m16, CL</c><br/>
		/// <br/>
		/// <c>o16 D3 /0</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m8, CL</c><br/>
		/// <br/>
		/// <c>D2 /0</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rol(AssemblerMemoryOperand dst, AssemblerRegister8 src) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Rol_rm64_CL;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Rol_rm32_CL;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Rol_rm16_CL;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Rol_rm8_CL;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Rol, dst, src);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>rol instruction.<br/>
		/// <br/>
		/// <c>ROL r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /0</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /0 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rol(AssemblerRegister8 dst, sbyte imm) {
			Code op;
			op = imm == 1 ? Code.Rol_rm8_1 : Code.Rol_rm8_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>rol instruction.<br/>
		/// <br/>
		/// <c>ROL r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /0</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /0 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rol(AssemblerRegister16 dst, sbyte imm) {
			Code op;
			op = imm == 1 ? Code.Rol_rm16_1 : Code.Rol_rm16_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>rol instruction.<br/>
		/// <br/>
		/// <c>ROL r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /0</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /0 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rol(AssemblerRegister32 dst, sbyte imm) {
			Code op;
			op = imm == 1 ? Code.Rol_rm32_1 : Code.Rol_rm32_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>rol instruction.<br/>
		/// <br/>
		/// <c>ROL r/m64, 1</c><br/>
		/// <br/>
		/// <c>REX.W D1 /0</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W C1 /0 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void rol(AssemblerRegister64 dst, sbyte imm) {
			Code op;
			op = imm == 1 ? Code.Rol_rm64_1 : Code.Rol_rm64_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>rol instruction.<br/>
		/// <br/>
		/// <c>ROL r/m64, 1</c><br/>
		/// <br/>
		/// <c>REX.W D1 /0</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W C1 /0 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /0</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /0 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /0</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /0 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /0</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /0 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rol(AssemblerMemoryOperand dst, sbyte imm) {
			Code op;
			if (imm == 1) {
				if (dst.Size == MemoryOperandSize.QwordPtr) {
					op = Code.Rol_rm64_1;
				} else if (dst.Size == MemoryOperandSize.DwordPtr) {
					op = Code.Rol_rm32_1;
				} else if (dst.Size == MemoryOperandSize.WordPtr) {
					op = Code.Rol_rm16_1;
				} else if (dst.Size == MemoryOperandSize.BytePtr) {
					op = Code.Rol_rm8_1;
				} else {
					throw NoOpCodeFoundFor(Mnemonic.Rol, dst, imm);
				}
			} else if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Rol_rm64_imm8;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Rol_rm32_imm8;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Rol_rm16_imm8;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Rol_rm8_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Rol, dst, imm);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>rol instruction.<br/>
		/// <br/>
		/// <c>ROL r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /0</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /0 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rol(AssemblerRegister8 dst, byte imm) {
			Code op;
			op = imm == 1 ? Code.Rol_rm8_1 : Code.Rol_rm8_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>rol instruction.<br/>
		/// <br/>
		/// <c>ROL r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /0</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /0 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rol(AssemblerRegister16 dst, byte imm) {
			Code op;
			op = imm == 1 ? Code.Rol_rm16_1 : Code.Rol_rm16_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>rol instruction.<br/>
		/// <br/>
		/// <c>ROL r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /0</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /0 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rol(AssemblerRegister32 dst, byte imm) {
			Code op;
			op = imm == 1 ? Code.Rol_rm32_1 : Code.Rol_rm32_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>rol instruction.<br/>
		/// <br/>
		/// <c>ROL r/m64, 1</c><br/>
		/// <br/>
		/// <c>REX.W D1 /0</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W C1 /0 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void rol(AssemblerRegister64 dst, byte imm) {
			Code op;
			op = imm == 1 ? Code.Rol_rm64_1 : Code.Rol_rm64_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>rol instruction.<br/>
		/// <br/>
		/// <c>ROL r/m64, 1</c><br/>
		/// <br/>
		/// <c>REX.W D1 /0</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W C1 /0 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /0</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /0 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /0</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /0 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /0</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /0 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rol(AssemblerMemoryOperand dst, byte imm) {
			Code op;
			if (imm == 1) {
				if (dst.Size == MemoryOperandSize.QwordPtr) {
					op = Code.Rol_rm64_1;
				} else if (dst.Size == MemoryOperandSize.DwordPtr) {
					op = Code.Rol_rm32_1;
				} else if (dst.Size == MemoryOperandSize.WordPtr) {
					op = Code.Rol_rm16_1;
				} else if (dst.Size == MemoryOperandSize.BytePtr) {
					op = Code.Rol_rm8_1;
				} else {
					throw NoOpCodeFoundFor(Mnemonic.Rol, dst, imm);
				}
			} else if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Rol_rm64_imm8;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Rol_rm32_imm8;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Rol_rm16_imm8;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Rol_rm8_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Rol, dst, imm);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>ror instruction.<br/>
		/// <br/>
		/// <c>ROR r/m8, CL</c><br/>
		/// <br/>
		/// <c>D2 /1</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ror(AssemblerRegister8 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Ror_rm8_CL;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>ror instruction.<br/>
		/// <br/>
		/// <c>ROR r/m16, CL</c><br/>
		/// <br/>
		/// <c>o16 D3 /1</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ror(AssemblerRegister16 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Ror_rm16_CL;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>ror instruction.<br/>
		/// <br/>
		/// <c>ROR r/m32, CL</c><br/>
		/// <br/>
		/// <c>o32 D3 /1</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ror(AssemblerRegister32 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Ror_rm32_CL;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>ror instruction.<br/>
		/// <br/>
		/// <c>ROR r/m64, CL</c><br/>
		/// <br/>
		/// <c>REX.W D3 /1</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void ror(AssemblerRegister64 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Ror_rm64_CL;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>ror instruction.<br/>
		/// <br/>
		/// <c>ROR r/m64, CL</c><br/>
		/// <br/>
		/// <c>REX.W D3 /1</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m32, CL</c><br/>
		/// <br/>
		/// <c>o32 D3 /1</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m16, CL</c><br/>
		/// <br/>
		/// <c>o16 D3 /1</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m8, CL</c><br/>
		/// <br/>
		/// <c>D2 /1</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ror(AssemblerMemoryOperand dst, AssemblerRegister8 src) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Ror_rm64_CL;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Ror_rm32_CL;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Ror_rm16_CL;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Ror_rm8_CL;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Ror, dst, src);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>ror instruction.<br/>
		/// <br/>
		/// <c>ROR r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /1</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /1 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ror(AssemblerRegister8 dst, sbyte imm) {
			Code op;
			op = imm == 1 ? Code.Ror_rm8_1 : Code.Ror_rm8_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>ror instruction.<br/>
		/// <br/>
		/// <c>ROR r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /1</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /1 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ror(AssemblerRegister16 dst, sbyte imm) {
			Code op;
			op = imm == 1 ? Code.Ror_rm16_1 : Code.Ror_rm16_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>ror instruction.<br/>
		/// <br/>
		/// <c>ROR r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /1</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /1 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ror(AssemblerRegister32 dst, sbyte imm) {
			Code op;
			op = imm == 1 ? Code.Ror_rm32_1 : Code.Ror_rm32_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>ror instruction.<br/>
		/// <br/>
		/// <c>ROR r/m64, 1</c><br/>
		/// <br/>
		/// <c>REX.W D1 /1</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W C1 /1 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void ror(AssemblerRegister64 dst, sbyte imm) {
			Code op;
			op = imm == 1 ? Code.Ror_rm64_1 : Code.Ror_rm64_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>ror instruction.<br/>
		/// <br/>
		/// <c>ROR r/m64, 1</c><br/>
		/// <br/>
		/// <c>REX.W D1 /1</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W C1 /1 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /1</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /1 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /1</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /1 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /1</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /1 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ror(AssemblerMemoryOperand dst, sbyte imm) {
			Code op;
			if (imm == 1) {
				if (dst.Size == MemoryOperandSize.QwordPtr) {
					op = Code.Ror_rm64_1;
				} else if (dst.Size == MemoryOperandSize.DwordPtr) {
					op = Code.Ror_rm32_1;
				} else if (dst.Size == MemoryOperandSize.WordPtr) {
					op = Code.Ror_rm16_1;
				} else if (dst.Size == MemoryOperandSize.BytePtr) {
					op = Code.Ror_rm8_1;
				} else {
					throw NoOpCodeFoundFor(Mnemonic.Ror, dst, imm);
				}
			} else if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Ror_rm64_imm8;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Ror_rm32_imm8;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Ror_rm16_imm8;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Ror_rm8_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Ror, dst, imm);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>ror instruction.<br/>
		/// <br/>
		/// <c>ROR r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /1</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /1 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ror(AssemblerRegister8 dst, byte imm) {
			Code op;
			op = imm == 1 ? Code.Ror_rm8_1 : Code.Ror_rm8_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>ror instruction.<br/>
		/// <br/>
		/// <c>ROR r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /1</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /1 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ror(AssemblerRegister16 dst, byte imm) {
			Code op;
			op = imm == 1 ? Code.Ror_rm16_1 : Code.Ror_rm16_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>ror instruction.<br/>
		/// <br/>
		/// <c>ROR r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /1</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /1 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ror(AssemblerRegister32 dst, byte imm) {
			Code op;
			op = imm == 1 ? Code.Ror_rm32_1 : Code.Ror_rm32_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>ror instruction.<br/>
		/// <br/>
		/// <c>ROR r/m64, 1</c><br/>
		/// <br/>
		/// <c>REX.W D1 /1</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W C1 /1 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void ror(AssemblerRegister64 dst, byte imm) {
			Code op;
			op = imm == 1 ? Code.Ror_rm64_1 : Code.Ror_rm64_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>ror instruction.<br/>
		/// <br/>
		/// <c>ROR r/m64, 1</c><br/>
		/// <br/>
		/// <c>REX.W D1 /1</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W C1 /1 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /1</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /1 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /1</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /1 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /1</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /1 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ror(AssemblerMemoryOperand dst, byte imm) {
			Code op;
			if (imm == 1) {
				if (dst.Size == MemoryOperandSize.QwordPtr) {
					op = Code.Ror_rm64_1;
				} else if (dst.Size == MemoryOperandSize.DwordPtr) {
					op = Code.Ror_rm32_1;
				} else if (dst.Size == MemoryOperandSize.WordPtr) {
					op = Code.Ror_rm16_1;
				} else if (dst.Size == MemoryOperandSize.BytePtr) {
					op = Code.Ror_rm8_1;
				} else {
					throw NoOpCodeFoundFor(Mnemonic.Ror, dst, imm);
				}
			} else if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Ror_rm64_imm8;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Ror_rm32_imm8;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Ror_rm16_imm8;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Ror_rm8_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Ror, dst, imm);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>rorx instruction.<br/>
		/// <br/>
		/// <c>RORX r32, r/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F2.0F3A.W0 F0 /r ib</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rorx(AssemblerRegister32 dst, AssemblerRegister32 src1, sbyte imm) {
			Code op;
			op = Code.VEX_Rorx_r32_rm32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>rorx instruction.<br/>
		/// <br/>
		/// <c>RORX r64, r/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F2.0F3A.W1 F0 /r ib</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void rorx(AssemblerRegister64 dst, AssemblerRegister64 src1, sbyte imm) {
			Code op;
			op = Code.VEX_Rorx_r64_rm64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>rorx instruction.<br/>
		/// <br/>
		/// <c>RORX r32, r/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F2.0F3A.W0 F0 /r ib</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rorx(AssemblerRegister32 dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.VEX_Rorx_r32_rm32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>rorx instruction.<br/>
		/// <br/>
		/// <c>RORX r64, r/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F2.0F3A.W1 F0 /r ib</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void rorx(AssemblerRegister64 dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.VEX_Rorx_r64_rm64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>rorx instruction.<br/>
		/// <br/>
		/// <c>RORX r32, r/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F2.0F3A.W0 F0 /r ib</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rorx(AssemblerRegister32 dst, AssemblerRegister32 src1, byte imm) {
			Code op;
			op = Code.VEX_Rorx_r32_rm32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>rorx instruction.<br/>
		/// <br/>
		/// <c>RORX r64, r/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F2.0F3A.W1 F0 /r ib</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void rorx(AssemblerRegister64 dst, AssemblerRegister64 src1, byte imm) {
			Code op;
			op = Code.VEX_Rorx_r64_rm64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>rorx instruction.<br/>
		/// <br/>
		/// <c>RORX r32, r/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F2.0F3A.W0 F0 /r ib</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rorx(AssemblerRegister32 dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.VEX_Rorx_r32_rm32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>rorx instruction.<br/>
		/// <br/>
		/// <c>RORX r64, r/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F2.0F3A.W1 F0 /r ib</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void rorx(AssemblerRegister64 dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.VEX_Rorx_r64_rm64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>roundpd instruction.<br/>
		/// <br/>
		/// <c>ROUNDPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 09 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void roundpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.Roundpd_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>roundpd instruction.<br/>
		/// <br/>
		/// <c>ROUNDPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 09 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void roundpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.Roundpd_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>roundpd instruction.<br/>
		/// <br/>
		/// <c>ROUNDPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 09 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void roundpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.Roundpd_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>roundpd instruction.<br/>
		/// <br/>
		/// <c>ROUNDPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 09 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void roundpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.Roundpd_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>roundps instruction.<br/>
		/// <br/>
		/// <c>ROUNDPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 08 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void roundps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.Roundps_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>roundps instruction.<br/>
		/// <br/>
		/// <c>ROUNDPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 08 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void roundps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.Roundps_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>roundps instruction.<br/>
		/// <br/>
		/// <c>ROUNDPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 08 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void roundps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.Roundps_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>roundps instruction.<br/>
		/// <br/>
		/// <c>ROUNDPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 08 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void roundps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.Roundps_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>roundsd instruction.<br/>
		/// <br/>
		/// <c>ROUNDSD xmm1, xmm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0B /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void roundsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.Roundsd_xmm_xmmm64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>roundsd instruction.<br/>
		/// <br/>
		/// <c>ROUNDSD xmm1, xmm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0B /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void roundsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.Roundsd_xmm_xmmm64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>roundsd instruction.<br/>
		/// <br/>
		/// <c>ROUNDSD xmm1, xmm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0B /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void roundsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.Roundsd_xmm_xmmm64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>roundsd instruction.<br/>
		/// <br/>
		/// <c>ROUNDSD xmm1, xmm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0B /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void roundsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.Roundsd_xmm_xmmm64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>roundss instruction.<br/>
		/// <br/>
		/// <c>ROUNDSS xmm1, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0A /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void roundss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.Roundss_xmm_xmmm32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>roundss instruction.<br/>
		/// <br/>
		/// <c>ROUNDSS xmm1, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0A /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void roundss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.Roundss_xmm_xmmm32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>roundss instruction.<br/>
		/// <br/>
		/// <c>ROUNDSS xmm1, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0A /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void roundss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.Roundss_xmm_xmmm32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>roundss instruction.<br/>
		/// <br/>
		/// <c>ROUNDSS xmm1, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0A /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void roundss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.Roundss_xmm_xmmm32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>rsm instruction.<br/>
		/// <br/>
		/// <c>RSM</c><br/>
		/// <br/>
		/// <c>0F AA</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rsm() {
			Code op;
			op = Code.Rsm;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>rsqrtps instruction.<br/>
		/// <br/>
		/// <c>RSQRTPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 52 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rsqrtps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Rsqrtps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>rsqrtps instruction.<br/>
		/// <br/>
		/// <c>RSQRTPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 52 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rsqrtps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Rsqrtps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>rsqrtss instruction.<br/>
		/// <br/>
		/// <c>RSQRTSS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 52 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rsqrtss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Rsqrtss_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>rsqrtss instruction.<br/>
		/// <br/>
		/// <c>RSQRTSS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 52 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rsqrtss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Rsqrtss_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>rstorssp instruction.<br/>
		/// <br/>
		/// <c>RSTORSSP m64</c><br/>
		/// <br/>
		/// <c>F3 0F 01 /5</c><br/>
		/// <br/>
		/// <c>CET_SS</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void rstorssp(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Rstorssp_m64;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>sahf instruction.<br/>
		/// <br/>
		/// <c>SAHF</c><br/>
		/// <br/>
		/// <c>9E</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sahf() {
			Code op;
			op = Code.Sahf;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>sal instruction.<br/>
		/// <br/>
		/// <c>SAL r/m8, CL</c><br/>
		/// <br/>
		/// <c>D2 /6</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sal(AssemblerRegister8 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Sal_rm8_CL;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>sal instruction.<br/>
		/// <br/>
		/// <c>SAL r/m16, CL</c><br/>
		/// <br/>
		/// <c>o16 D3 /6</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sal(AssemblerRegister16 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Sal_rm16_CL;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>sal instruction.<br/>
		/// <br/>
		/// <c>SAL r/m32, CL</c><br/>
		/// <br/>
		/// <c>o32 D3 /6</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sal(AssemblerRegister32 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Sal_rm32_CL;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>sal instruction.<br/>
		/// <br/>
		/// <c>SAL r/m64, CL</c><br/>
		/// <br/>
		/// <c>REX.W D3 /6</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void sal(AssemblerRegister64 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Sal_rm64_CL;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>sal instruction.<br/>
		/// <br/>
		/// <c>SAL r/m64, CL</c><br/>
		/// <br/>
		/// <c>REX.W D3 /6</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m32, CL</c><br/>
		/// <br/>
		/// <c>o32 D3 /6</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m16, CL</c><br/>
		/// <br/>
		/// <c>o16 D3 /6</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m8, CL</c><br/>
		/// <br/>
		/// <c>D2 /6</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sal(AssemblerMemoryOperand dst, AssemblerRegister8 src) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Sal_rm64_CL;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Sal_rm32_CL;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Sal_rm16_CL;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Sal_rm8_CL;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Sal, dst, src);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>sal instruction.<br/>
		/// <br/>
		/// <c>SAL r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /6</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /6 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sal(AssemblerRegister8 dst, sbyte imm) {
			Code op;
			op = imm == 1 ? Code.Sal_rm8_1 : Code.Sal_rm8_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>sal instruction.<br/>
		/// <br/>
		/// <c>SAL r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /6</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /6 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sal(AssemblerRegister16 dst, sbyte imm) {
			Code op;
			op = imm == 1 ? Code.Sal_rm16_1 : Code.Sal_rm16_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>sal instruction.<br/>
		/// <br/>
		/// <c>SAL r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /6</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /6 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sal(AssemblerRegister32 dst, sbyte imm) {
			Code op;
			op = imm == 1 ? Code.Sal_rm32_1 : Code.Sal_rm32_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>sal instruction.<br/>
		/// <br/>
		/// <c>SAL r/m64, 1</c><br/>
		/// <br/>
		/// <c>REX.W D1 /6</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W C1 /6 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void sal(AssemblerRegister64 dst, sbyte imm) {
			Code op;
			op = imm == 1 ? Code.Sal_rm64_1 : Code.Sal_rm64_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>sal instruction.<br/>
		/// <br/>
		/// <c>SAL r/m64, 1</c><br/>
		/// <br/>
		/// <c>REX.W D1 /6</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W C1 /6 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /6</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /6 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /6</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /6 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /6</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /6 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sal(AssemblerMemoryOperand dst, sbyte imm) {
			Code op;
			if (imm == 1) {
				if (dst.Size == MemoryOperandSize.QwordPtr) {
					op = Code.Sal_rm64_1;
				} else if (dst.Size == MemoryOperandSize.DwordPtr) {
					op = Code.Sal_rm32_1;
				} else if (dst.Size == MemoryOperandSize.WordPtr) {
					op = Code.Sal_rm16_1;
				} else if (dst.Size == MemoryOperandSize.BytePtr) {
					op = Code.Sal_rm8_1;
				} else {
					throw NoOpCodeFoundFor(Mnemonic.Sal, dst, imm);
				}
			} else if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Sal_rm64_imm8;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Sal_rm32_imm8;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Sal_rm16_imm8;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Sal_rm8_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Sal, dst, imm);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>sal instruction.<br/>
		/// <br/>
		/// <c>SAL r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /6</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /6 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sal(AssemblerRegister8 dst, byte imm) {
			Code op;
			op = imm == 1 ? Code.Sal_rm8_1 : Code.Sal_rm8_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>sal instruction.<br/>
		/// <br/>
		/// <c>SAL r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /6</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /6 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sal(AssemblerRegister16 dst, byte imm) {
			Code op;
			op = imm == 1 ? Code.Sal_rm16_1 : Code.Sal_rm16_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>sal instruction.<br/>
		/// <br/>
		/// <c>SAL r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /6</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /6 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sal(AssemblerRegister32 dst, byte imm) {
			Code op;
			op = imm == 1 ? Code.Sal_rm32_1 : Code.Sal_rm32_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>sal instruction.<br/>
		/// <br/>
		/// <c>SAL r/m64, 1</c><br/>
		/// <br/>
		/// <c>REX.W D1 /6</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W C1 /6 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void sal(AssemblerRegister64 dst, byte imm) {
			Code op;
			op = imm == 1 ? Code.Sal_rm64_1 : Code.Sal_rm64_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>sal instruction.<br/>
		/// <br/>
		/// <c>SAL r/m64, 1</c><br/>
		/// <br/>
		/// <c>REX.W D1 /6</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W C1 /6 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /6</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /6 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /6</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /6 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /6</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /6 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sal(AssemblerMemoryOperand dst, byte imm) {
			Code op;
			if (imm == 1) {
				if (dst.Size == MemoryOperandSize.QwordPtr) {
					op = Code.Sal_rm64_1;
				} else if (dst.Size == MemoryOperandSize.DwordPtr) {
					op = Code.Sal_rm32_1;
				} else if (dst.Size == MemoryOperandSize.WordPtr) {
					op = Code.Sal_rm16_1;
				} else if (dst.Size == MemoryOperandSize.BytePtr) {
					op = Code.Sal_rm8_1;
				} else {
					throw NoOpCodeFoundFor(Mnemonic.Sal, dst, imm);
				}
			} else if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Sal_rm64_imm8;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Sal_rm32_imm8;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Sal_rm16_imm8;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Sal_rm8_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Sal, dst, imm);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>salc instruction.<br/>
		/// <br/>
		/// <c>SALC</c><br/>
		/// <br/>
		/// <c>D6</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void salc() {
			Code op;
			op = Code.Salc;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>sar instruction.<br/>
		/// <br/>
		/// <c>SAR r/m8, CL</c><br/>
		/// <br/>
		/// <c>D2 /7</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sar(AssemblerRegister8 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Sar_rm8_CL;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>sar instruction.<br/>
		/// <br/>
		/// <c>SAR r/m16, CL</c><br/>
		/// <br/>
		/// <c>o16 D3 /7</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sar(AssemblerRegister16 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Sar_rm16_CL;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>sar instruction.<br/>
		/// <br/>
		/// <c>SAR r/m32, CL</c><br/>
		/// <br/>
		/// <c>o32 D3 /7</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sar(AssemblerRegister32 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Sar_rm32_CL;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>sar instruction.<br/>
		/// <br/>
		/// <c>SAR r/m64, CL</c><br/>
		/// <br/>
		/// <c>REX.W D3 /7</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void sar(AssemblerRegister64 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Sar_rm64_CL;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>sar instruction.<br/>
		/// <br/>
		/// <c>SAR r/m64, CL</c><br/>
		/// <br/>
		/// <c>REX.W D3 /7</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m32, CL</c><br/>
		/// <br/>
		/// <c>o32 D3 /7</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m16, CL</c><br/>
		/// <br/>
		/// <c>o16 D3 /7</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m8, CL</c><br/>
		/// <br/>
		/// <c>D2 /7</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sar(AssemblerMemoryOperand dst, AssemblerRegister8 src) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Sar_rm64_CL;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Sar_rm32_CL;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Sar_rm16_CL;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Sar_rm8_CL;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Sar, dst, src);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>sar instruction.<br/>
		/// <br/>
		/// <c>SAR r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /7</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /7 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sar(AssemblerRegister8 dst, sbyte imm) {
			Code op;
			op = imm == 1 ? Code.Sar_rm8_1 : Code.Sar_rm8_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>sar instruction.<br/>
		/// <br/>
		/// <c>SAR r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /7</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /7 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sar(AssemblerRegister16 dst, sbyte imm) {
			Code op;
			op = imm == 1 ? Code.Sar_rm16_1 : Code.Sar_rm16_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>sar instruction.<br/>
		/// <br/>
		/// <c>SAR r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /7</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /7 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sar(AssemblerRegister32 dst, sbyte imm) {
			Code op;
			op = imm == 1 ? Code.Sar_rm32_1 : Code.Sar_rm32_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>sar instruction.<br/>
		/// <br/>
		/// <c>SAR r/m64, 1</c><br/>
		/// <br/>
		/// <c>REX.W D1 /7</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W C1 /7 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void sar(AssemblerRegister64 dst, sbyte imm) {
			Code op;
			op = imm == 1 ? Code.Sar_rm64_1 : Code.Sar_rm64_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>sar instruction.<br/>
		/// <br/>
		/// <c>SAR r/m64, 1</c><br/>
		/// <br/>
		/// <c>REX.W D1 /7</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W C1 /7 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /7</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /7 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /7</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /7 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /7</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /7 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sar(AssemblerMemoryOperand dst, sbyte imm) {
			Code op;
			if (imm == 1) {
				if (dst.Size == MemoryOperandSize.QwordPtr) {
					op = Code.Sar_rm64_1;
				} else if (dst.Size == MemoryOperandSize.DwordPtr) {
					op = Code.Sar_rm32_1;
				} else if (dst.Size == MemoryOperandSize.WordPtr) {
					op = Code.Sar_rm16_1;
				} else if (dst.Size == MemoryOperandSize.BytePtr) {
					op = Code.Sar_rm8_1;
				} else {
					throw NoOpCodeFoundFor(Mnemonic.Sar, dst, imm);
				}
			} else if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Sar_rm64_imm8;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Sar_rm32_imm8;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Sar_rm16_imm8;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Sar_rm8_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Sar, dst, imm);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>sar instruction.<br/>
		/// <br/>
		/// <c>SAR r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /7</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /7 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sar(AssemblerRegister8 dst, byte imm) {
			Code op;
			op = imm == 1 ? Code.Sar_rm8_1 : Code.Sar_rm8_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>sar instruction.<br/>
		/// <br/>
		/// <c>SAR r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /7</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /7 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sar(AssemblerRegister16 dst, byte imm) {
			Code op;
			op = imm == 1 ? Code.Sar_rm16_1 : Code.Sar_rm16_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>sar instruction.<br/>
		/// <br/>
		/// <c>SAR r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /7</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /7 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sar(AssemblerRegister32 dst, byte imm) {
			Code op;
			op = imm == 1 ? Code.Sar_rm32_1 : Code.Sar_rm32_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>sar instruction.<br/>
		/// <br/>
		/// <c>SAR r/m64, 1</c><br/>
		/// <br/>
		/// <c>REX.W D1 /7</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W C1 /7 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void sar(AssemblerRegister64 dst, byte imm) {
			Code op;
			op = imm == 1 ? Code.Sar_rm64_1 : Code.Sar_rm64_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>sar instruction.<br/>
		/// <br/>
		/// <c>SAR r/m64, 1</c><br/>
		/// <br/>
		/// <c>REX.W D1 /7</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W C1 /7 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /7</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /7 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /7</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /7 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /7</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /7 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sar(AssemblerMemoryOperand dst, byte imm) {
			Code op;
			if (imm == 1) {
				if (dst.Size == MemoryOperandSize.QwordPtr) {
					op = Code.Sar_rm64_1;
				} else if (dst.Size == MemoryOperandSize.DwordPtr) {
					op = Code.Sar_rm32_1;
				} else if (dst.Size == MemoryOperandSize.WordPtr) {
					op = Code.Sar_rm16_1;
				} else if (dst.Size == MemoryOperandSize.BytePtr) {
					op = Code.Sar_rm8_1;
				} else {
					throw NoOpCodeFoundFor(Mnemonic.Sar, dst, imm);
				}
			} else if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Sar_rm64_imm8;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Sar_rm32_imm8;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Sar_rm16_imm8;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Sar_rm8_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Sar, dst, imm);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>sarx instruction.<br/>
		/// <br/>
		/// <c>SARX r32a, r/m32, r32b</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F3.0F38.W0 F7 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sarx(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerRegister32 src2) {
			Code op;
			op = Code.VEX_Sarx_r32_rm32_r32;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>sarx instruction.<br/>
		/// <br/>
		/// <c>SARX r32a, r/m32, r32b</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F3.0F38.W0 F7 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sarx(AssemblerRegister32 dst, AssemblerMemoryOperand src1, AssemblerRegister32 src2) {
			Code op;
			op = Code.VEX_Sarx_r32_rm32_r32;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), src2));
		}
		/// <summary>sarx instruction.<br/>
		/// <br/>
		/// <c>SARX r64a, r/m64, r64b</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F3.0F38.W1 F7 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void sarx(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerRegister64 src2) {
			Code op;
			op = Code.VEX_Sarx_r64_rm64_r64;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>sarx instruction.<br/>
		/// <br/>
		/// <c>SARX r64a, r/m64, r64b</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F3.0F38.W1 F7 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void sarx(AssemblerRegister64 dst, AssemblerMemoryOperand src1, AssemblerRegister64 src2) {
			Code op;
			op = Code.VEX_Sarx_r64_rm64_r64;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), src2));
		}
		/// <summary>saveprevssp instruction.<br/>
		/// <br/>
		/// <c>SAVEPREVSSP</c><br/>
		/// <br/>
		/// <c>F3 0F 01 EA</c><br/>
		/// <br/>
		/// <c>CET_SS</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void saveprevssp() {
			Code op;
			op = Code.Saveprevssp;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>sbb instruction.<br/>
		/// <br/>
		/// <c>SBB r/m8, r8</c><br/>
		/// <br/>
		/// <c>18 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sbb(AssemblerRegister8 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Sbb_rm8_r8;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>sbb instruction.<br/>
		/// <br/>
		/// <c>SBB r/m8, r8</c><br/>
		/// <br/>
		/// <c>18 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sbb(AssemblerMemoryOperand dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Sbb_rm8_r8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>sbb instruction.<br/>
		/// <br/>
		/// <c>SBB r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 19 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sbb(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Sbb_rm16_r16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>sbb instruction.<br/>
		/// <br/>
		/// <c>SBB r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 19 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sbb(AssemblerMemoryOperand dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Sbb_rm16_r16;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>sbb instruction.<br/>
		/// <br/>
		/// <c>SBB r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 19 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sbb(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Sbb_rm32_r32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>sbb instruction.<br/>
		/// <br/>
		/// <c>SBB r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 19 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sbb(AssemblerMemoryOperand dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Sbb_rm32_r32;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>sbb instruction.<br/>
		/// <br/>
		/// <c>SBB r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 19 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void sbb(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Sbb_rm64_r64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>sbb instruction.<br/>
		/// <br/>
		/// <c>SBB r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 19 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void sbb(AssemblerMemoryOperand dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Sbb_rm64_r64;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>sbb instruction.<br/>
		/// <br/>
		/// <c>SBB r8, r/m8</c><br/>
		/// <br/>
		/// <c>1A /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sbb(AssemblerRegister8 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Sbb_r8_rm8;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>sbb instruction.<br/>
		/// <br/>
		/// <c>SBB r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 1B /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sbb(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Sbb_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>sbb instruction.<br/>
		/// <br/>
		/// <c>SBB r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 1B /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sbb(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Sbb_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>sbb instruction.<br/>
		/// <br/>
		/// <c>SBB r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 1B /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void sbb(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Sbb_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>sbb instruction.<br/>
		/// <br/>
		/// <c>SBB AL, imm8</c><br/>
		/// <br/>
		/// <c>1C ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SBB r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /3 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sbb(AssemblerRegister8 dst, sbyte imm) {
			Code op;
			op = dst == Register.AL ? Code.Sbb_AL_imm8 : Code.Sbb_rm8_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>sbb instruction.<br/>
		/// <br/>
		/// <c>SBB AX, imm16</c><br/>
		/// <br/>
		/// <c>o16 1D iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SBB r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /3 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SBB r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /3 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sbb(AssemblerRegister16 dst, short imm) {
			Code op;
			if (dst == Register.AX) {
				op = Code.Sbb_AX_imm16;
			} else op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Sbb_rm16_imm8 : Code.Sbb_rm16_imm16;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>sbb instruction.<br/>
		/// <br/>
		/// <c>SBB EAX, imm32</c><br/>
		/// <br/>
		/// <c>o32 1D id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SBB r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /3 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SBB r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /3 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sbb(AssemblerRegister32 dst, int imm) {
			Code op;
			if (dst == Register.EAX) {
				op = Code.Sbb_EAX_imm32;
			} else op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Sbb_rm32_imm8 : Code.Sbb_rm32_imm32;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>sbb instruction.<br/>
		/// <br/>
		/// <c>SBB RAX, imm32</c><br/>
		/// <br/>
		/// <c>REX.W 1D id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SBB r/m64, imm32</c><br/>
		/// <br/>
		/// <c>REX.W 81 /3 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SBB r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W 83 /3 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void sbb(AssemblerRegister64 dst, int imm) {
			Code op;
			if (dst == Register.RAX) {
				op = Code.Sbb_RAX_imm32;
			} else op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Sbb_rm64_imm8 : Code.Sbb_rm64_imm32;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>sbb instruction.<br/>
		/// <br/>
		/// <c>SBB r/m64, imm32</c><br/>
		/// <br/>
		/// <c>REX.W 81 /3 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SBB r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W 83 /3 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SBB r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /3 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SBB r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /3 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SBB r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /3 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SBB r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /3 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SBB r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /3 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sbb(AssemblerMemoryOperand dst, int imm) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Sbb_rm64_imm8 : Code.Sbb_rm64_imm32;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Sbb_rm32_imm8 : Code.Sbb_rm32_imm32;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Sbb_rm16_imm8 : Code.Sbb_rm16_imm16;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Sbb_rm8_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Sbb, dst, imm);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>sbb instruction.<br/>
		/// <br/>
		/// <c>SBB AL, imm8</c><br/>
		/// <br/>
		/// <c>1C ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SBB r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /3 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sbb(AssemblerRegister8 dst, byte imm) {
			Code op;
			op = dst == Register.AL ? Code.Sbb_AL_imm8 : Code.Sbb_rm8_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>sbb instruction.<br/>
		/// <br/>
		/// <c>SBB AX, imm16</c><br/>
		/// <br/>
		/// <c>o16 1D iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SBB r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /3 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SBB r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /3 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sbb(AssemblerRegister16 dst, ushort imm) {
			Code op;
			if (dst == Register.AX) {
				op = Code.Sbb_AX_imm16;
			} else op = imm <= (ushort)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF) ? Code.Sbb_rm16_imm8 : Code.Sbb_rm16_imm16;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>sbb instruction.<br/>
		/// <br/>
		/// <c>SBB EAX, imm32</c><br/>
		/// <br/>
		/// <c>o32 1D id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SBB r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /3 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SBB r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /3 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sbb(AssemblerRegister32 dst, uint imm) {
			Code op;
			if (dst == Register.EAX) {
				op = Code.Sbb_EAX_imm32;
			} else op = imm <= (uint)sbyte.MaxValue || (0xFFFF_FF80 <= imm && imm <= 0xFFFF_FFFF) ? Code.Sbb_rm32_imm8 : Code.Sbb_rm32_imm32;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>sbb instruction.<br/>
		/// <br/>
		/// <c>SBB r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /3 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SBB r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /3 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SBB r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /3 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SBB r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /3 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SBB r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /3 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sbb(AssemblerMemoryOperand dst, uint imm) {
			Code op;
			if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = imm <= (uint)sbyte.MaxValue || (0xFFFF_FF80 <= imm && imm <= 0xFFFF_FFFF) ? Code.Sbb_rm32_imm8 : Code.Sbb_rm32_imm32;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = imm <= (uint)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF) ? Code.Sbb_rm16_imm8 : Code.Sbb_rm16_imm16;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Sbb_rm8_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Sbb, dst, imm);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>scasb instruction.<br/>
		/// <br/>
		/// <c>SCASB</c><br/>
		/// <br/>
		/// <c>AE</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void scasb() {
			AddInstruction(Instruction.CreateScasb(Bitness));
		}
		/// <summary>scasd instruction.<br/>
		/// <br/>
		/// <c>SCASD</c><br/>
		/// <br/>
		/// <c>o32 AF</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void scasd() {
			AddInstruction(Instruction.CreateScasd(Bitness));
		}
		/// <summary>scasq instruction.<br/>
		/// <br/>
		/// <c>SCASQ</c><br/>
		/// <br/>
		/// <c>REX.W AF</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void scasq() {
			AddInstruction(Instruction.CreateScasq(Bitness));
		}
		/// <summary>scasw instruction.<br/>
		/// <br/>
		/// <c>SCASW</c><br/>
		/// <br/>
		/// <c>o16 AF</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void scasw() {
			AddInstruction(Instruction.CreateScasw(Bitness));
		}
		/// <summary>serialize instruction.<br/>
		/// <br/>
		/// <c>SERIALIZE</c><br/>
		/// <br/>
		/// <c>NP 0F 01 E8</c><br/>
		/// <br/>
		/// <c>SERIALIZE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void serialize() {
			Code op;
			op = Code.Serialize;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>seta instruction.<br/>
		/// <br/>
		/// <c>SETA r/m8</c><br/>
		/// <br/>
		/// <c>0F 97 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void seta(AssemblerRegister8 dst) {
			Code op;
			op = Code.Seta_rm8;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>seta instruction.<br/>
		/// <br/>
		/// <c>SETA r/m8</c><br/>
		/// <br/>
		/// <c>0F 97 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void seta(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Seta_rm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>setae instruction.<br/>
		/// <br/>
		/// <c>SETAE r/m8</c><br/>
		/// <br/>
		/// <c>0F 93 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void setae(AssemblerRegister8 dst) {
			Code op;
			op = Code.Setae_rm8;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>setae instruction.<br/>
		/// <br/>
		/// <c>SETAE r/m8</c><br/>
		/// <br/>
		/// <c>0F 93 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void setae(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Setae_rm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>setb instruction.<br/>
		/// <br/>
		/// <c>SETB r/m8</c><br/>
		/// <br/>
		/// <c>0F 92 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void setb(AssemblerRegister8 dst) {
			Code op;
			op = Code.Setb_rm8;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>setb instruction.<br/>
		/// <br/>
		/// <c>SETB r/m8</c><br/>
		/// <br/>
		/// <c>0F 92 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void setb(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Setb_rm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>setbe instruction.<br/>
		/// <br/>
		/// <c>SETBE r/m8</c><br/>
		/// <br/>
		/// <c>0F 96 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void setbe(AssemblerRegister8 dst) {
			Code op;
			op = Code.Setbe_rm8;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>setbe instruction.<br/>
		/// <br/>
		/// <c>SETBE r/m8</c><br/>
		/// <br/>
		/// <c>0F 96 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void setbe(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Setbe_rm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>sete instruction.<br/>
		/// <br/>
		/// <c>SETE r/m8</c><br/>
		/// <br/>
		/// <c>0F 94 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sete(AssemblerRegister8 dst) {
			Code op;
			op = Code.Sete_rm8;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>sete instruction.<br/>
		/// <br/>
		/// <c>SETE r/m8</c><br/>
		/// <br/>
		/// <c>0F 94 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sete(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Sete_rm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>setg instruction.<br/>
		/// <br/>
		/// <c>SETG r/m8</c><br/>
		/// <br/>
		/// <c>0F 9F /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void setg(AssemblerRegister8 dst) {
			Code op;
			op = Code.Setg_rm8;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>setg instruction.<br/>
		/// <br/>
		/// <c>SETG r/m8</c><br/>
		/// <br/>
		/// <c>0F 9F /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void setg(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Setg_rm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>setge instruction.<br/>
		/// <br/>
		/// <c>SETGE r/m8</c><br/>
		/// <br/>
		/// <c>0F 9D /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void setge(AssemblerRegister8 dst) {
			Code op;
			op = Code.Setge_rm8;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>setge instruction.<br/>
		/// <br/>
		/// <c>SETGE r/m8</c><br/>
		/// <br/>
		/// <c>0F 9D /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void setge(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Setge_rm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>setl instruction.<br/>
		/// <br/>
		/// <c>SETL r/m8</c><br/>
		/// <br/>
		/// <c>0F 9C /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void setl(AssemblerRegister8 dst) {
			Code op;
			op = Code.Setl_rm8;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>setl instruction.<br/>
		/// <br/>
		/// <c>SETL r/m8</c><br/>
		/// <br/>
		/// <c>0F 9C /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void setl(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Setl_rm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>setle instruction.<br/>
		/// <br/>
		/// <c>SETLE r/m8</c><br/>
		/// <br/>
		/// <c>0F 9E /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void setle(AssemblerRegister8 dst) {
			Code op;
			op = Code.Setle_rm8;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>setle instruction.<br/>
		/// <br/>
		/// <c>SETLE r/m8</c><br/>
		/// <br/>
		/// <c>0F 9E /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void setle(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Setle_rm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>setne instruction.<br/>
		/// <br/>
		/// <c>SETNE r/m8</c><br/>
		/// <br/>
		/// <c>0F 95 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void setne(AssemblerRegister8 dst) {
			Code op;
			op = Code.Setne_rm8;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>setne instruction.<br/>
		/// <br/>
		/// <c>SETNE r/m8</c><br/>
		/// <br/>
		/// <c>0F 95 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void setne(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Setne_rm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>setno instruction.<br/>
		/// <br/>
		/// <c>SETNO r/m8</c><br/>
		/// <br/>
		/// <c>0F 91 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void setno(AssemblerRegister8 dst) {
			Code op;
			op = Code.Setno_rm8;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>setno instruction.<br/>
		/// <br/>
		/// <c>SETNO r/m8</c><br/>
		/// <br/>
		/// <c>0F 91 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void setno(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Setno_rm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>setnp instruction.<br/>
		/// <br/>
		/// <c>SETNP r/m8</c><br/>
		/// <br/>
		/// <c>0F 9B /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void setnp(AssemblerRegister8 dst) {
			Code op;
			op = Code.Setnp_rm8;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>setnp instruction.<br/>
		/// <br/>
		/// <c>SETNP r/m8</c><br/>
		/// <br/>
		/// <c>0F 9B /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void setnp(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Setnp_rm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>setns instruction.<br/>
		/// <br/>
		/// <c>SETNS r/m8</c><br/>
		/// <br/>
		/// <c>0F 99 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void setns(AssemblerRegister8 dst) {
			Code op;
			op = Code.Setns_rm8;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>setns instruction.<br/>
		/// <br/>
		/// <c>SETNS r/m8</c><br/>
		/// <br/>
		/// <c>0F 99 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void setns(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Setns_rm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>seto instruction.<br/>
		/// <br/>
		/// <c>SETO r/m8</c><br/>
		/// <br/>
		/// <c>0F 90 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void seto(AssemblerRegister8 dst) {
			Code op;
			op = Code.Seto_rm8;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>seto instruction.<br/>
		/// <br/>
		/// <c>SETO r/m8</c><br/>
		/// <br/>
		/// <c>0F 90 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void seto(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Seto_rm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>setp instruction.<br/>
		/// <br/>
		/// <c>SETP r/m8</c><br/>
		/// <br/>
		/// <c>0F 9A /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void setp(AssemblerRegister8 dst) {
			Code op;
			op = Code.Setp_rm8;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>setp instruction.<br/>
		/// <br/>
		/// <c>SETP r/m8</c><br/>
		/// <br/>
		/// <c>0F 9A /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void setp(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Setp_rm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>sets instruction.<br/>
		/// <br/>
		/// <c>SETS r/m8</c><br/>
		/// <br/>
		/// <c>0F 98 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sets(AssemblerRegister8 dst) {
			Code op;
			op = Code.Sets_rm8;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>sets instruction.<br/>
		/// <br/>
		/// <c>SETS r/m8</c><br/>
		/// <br/>
		/// <c>0F 98 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sets(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Sets_rm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>setssbsy instruction.<br/>
		/// <br/>
		/// <c>SETSSBSY</c><br/>
		/// <br/>
		/// <c>F3 0F 01 E8</c><br/>
		/// <br/>
		/// <c>CET_SS</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void setssbsy() {
			Code op;
			op = Code.Setssbsy;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>sfence instruction.<br/>
		/// <br/>
		/// <c>SFENCE</c><br/>
		/// <br/>
		/// <c>NP 0F AE F8</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sfence() {
			Code op;
			op = Code.Sfence;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>sgdt instruction.<br/>
		/// <br/>
		/// <c>SGDT m</c><br/>
		/// <br/>
		/// <c>0F 01 /0</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SGDT m</c><br/>
		/// <br/>
		/// <c>o32 0F 01 /0</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>SGDT m</c><br/>
		/// <br/>
		/// <c>o16 0F 01 /0</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void sgdt(AssemblerMemoryOperand dst) {
			Code op;
			if (Bitness == 64) {
				op = Code.Sgdt_m1664;
			} else op = Bitness >= 32 ? Code.Sgdt_m1632 : Code.Sgdt_m1632_16;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>sha1msg1 instruction.<br/>
		/// <br/>
		/// <c>SHA1MSG1 xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 38 C9 /r</c><br/>
		/// <br/>
		/// <c>SHA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sha1msg1(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Sha1msg1_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>sha1msg1 instruction.<br/>
		/// <br/>
		/// <c>SHA1MSG1 xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 38 C9 /r</c><br/>
		/// <br/>
		/// <c>SHA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sha1msg1(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Sha1msg1_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>sha1msg2 instruction.<br/>
		/// <br/>
		/// <c>SHA1MSG2 xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 38 CA /r</c><br/>
		/// <br/>
		/// <c>SHA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sha1msg2(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Sha1msg2_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>sha1msg2 instruction.<br/>
		/// <br/>
		/// <c>SHA1MSG2 xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 38 CA /r</c><br/>
		/// <br/>
		/// <c>SHA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sha1msg2(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Sha1msg2_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>sha1nexte instruction.<br/>
		/// <br/>
		/// <c>SHA1NEXTE xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 38 C8 /r</c><br/>
		/// <br/>
		/// <c>SHA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sha1nexte(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Sha1nexte_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>sha1nexte instruction.<br/>
		/// <br/>
		/// <c>SHA1NEXTE xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 38 C8 /r</c><br/>
		/// <br/>
		/// <c>SHA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sha1nexte(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Sha1nexte_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>sha1rnds4 instruction.<br/>
		/// <br/>
		/// <c>SHA1RNDS4 xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 3A CC /r ib</c><br/>
		/// <br/>
		/// <c>SHA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sha1rnds4(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.Sha1rnds4_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>sha1rnds4 instruction.<br/>
		/// <br/>
		/// <c>SHA1RNDS4 xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 3A CC /r ib</c><br/>
		/// <br/>
		/// <c>SHA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sha1rnds4(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.Sha1rnds4_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>sha1rnds4 instruction.<br/>
		/// <br/>
		/// <c>SHA1RNDS4 xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 3A CC /r ib</c><br/>
		/// <br/>
		/// <c>SHA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sha1rnds4(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.Sha1rnds4_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>sha1rnds4 instruction.<br/>
		/// <br/>
		/// <c>SHA1RNDS4 xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 3A CC /r ib</c><br/>
		/// <br/>
		/// <c>SHA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sha1rnds4(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.Sha1rnds4_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>sha256msg1 instruction.<br/>
		/// <br/>
		/// <c>SHA256MSG1 xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 38 CC /r</c><br/>
		/// <br/>
		/// <c>SHA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sha256msg1(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Sha256msg1_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>sha256msg1 instruction.<br/>
		/// <br/>
		/// <c>SHA256MSG1 xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 38 CC /r</c><br/>
		/// <br/>
		/// <c>SHA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sha256msg1(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Sha256msg1_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>sha256msg2 instruction.<br/>
		/// <br/>
		/// <c>SHA256MSG2 xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 38 CD /r</c><br/>
		/// <br/>
		/// <c>SHA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sha256msg2(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Sha256msg2_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>sha256msg2 instruction.<br/>
		/// <br/>
		/// <c>SHA256MSG2 xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 38 CD /r</c><br/>
		/// <br/>
		/// <c>SHA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sha256msg2(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Sha256msg2_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>sha256rnds2 instruction.<br/>
		/// <br/>
		/// <c>SHA256RNDS2 xmm1, xmm2/m128, &lt;XMM0&gt;</c><br/>
		/// <br/>
		/// <c>NP 0F 38 CB /r</c><br/>
		/// <br/>
		/// <c>SHA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sha256rnds2(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Sha256rnds2_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>sha256rnds2 instruction.<br/>
		/// <br/>
		/// <c>SHA256RNDS2 xmm1, xmm2/m128, &lt;XMM0&gt;</c><br/>
		/// <br/>
		/// <c>NP 0F 38 CB /r</c><br/>
		/// <br/>
		/// <c>SHA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sha256rnds2(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Sha256rnds2_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>shl instruction.<br/>
		/// <br/>
		/// <c>SHL r/m8, CL</c><br/>
		/// <br/>
		/// <c>D2 /4</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shl(AssemblerRegister8 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Shl_rm8_CL;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>shl instruction.<br/>
		/// <br/>
		/// <c>SHL r/m16, CL</c><br/>
		/// <br/>
		/// <c>o16 D3 /4</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shl(AssemblerRegister16 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Shl_rm16_CL;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>shl instruction.<br/>
		/// <br/>
		/// <c>SHL r/m32, CL</c><br/>
		/// <br/>
		/// <c>o32 D3 /4</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shl(AssemblerRegister32 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Shl_rm32_CL;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>shl instruction.<br/>
		/// <br/>
		/// <c>SHL r/m64, CL</c><br/>
		/// <br/>
		/// <c>REX.W D3 /4</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void shl(AssemblerRegister64 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Shl_rm64_CL;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>shl instruction.<br/>
		/// <br/>
		/// <c>SHL r/m64, CL</c><br/>
		/// <br/>
		/// <c>REX.W D3 /4</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m32, CL</c><br/>
		/// <br/>
		/// <c>o32 D3 /4</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m16, CL</c><br/>
		/// <br/>
		/// <c>o16 D3 /4</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m8, CL</c><br/>
		/// <br/>
		/// <c>D2 /4</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shl(AssemblerMemoryOperand dst, AssemblerRegister8 src) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Shl_rm64_CL;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Shl_rm32_CL;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Shl_rm16_CL;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Shl_rm8_CL;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Shl, dst, src);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>shl instruction.<br/>
		/// <br/>
		/// <c>SHL r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /4</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /4 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shl(AssemblerRegister8 dst, sbyte imm) {
			Code op;
			op = imm == 1 ? Code.Shl_rm8_1 : Code.Shl_rm8_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>shl instruction.<br/>
		/// <br/>
		/// <c>SHL r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /4</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /4 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shl(AssemblerRegister16 dst, sbyte imm) {
			Code op;
			op = imm == 1 ? Code.Shl_rm16_1 : Code.Shl_rm16_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>shl instruction.<br/>
		/// <br/>
		/// <c>SHL r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /4</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /4 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shl(AssemblerRegister32 dst, sbyte imm) {
			Code op;
			op = imm == 1 ? Code.Shl_rm32_1 : Code.Shl_rm32_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>shl instruction.<br/>
		/// <br/>
		/// <c>SHL r/m64, 1</c><br/>
		/// <br/>
		/// <c>REX.W D1 /4</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W C1 /4 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void shl(AssemblerRegister64 dst, sbyte imm) {
			Code op;
			op = imm == 1 ? Code.Shl_rm64_1 : Code.Shl_rm64_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>shl instruction.<br/>
		/// <br/>
		/// <c>SHL r/m64, 1</c><br/>
		/// <br/>
		/// <c>REX.W D1 /4</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W C1 /4 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /4</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /4 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /4</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /4 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /4</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /4 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shl(AssemblerMemoryOperand dst, sbyte imm) {
			Code op;
			if (imm == 1) {
				if (dst.Size == MemoryOperandSize.QwordPtr) {
					op = Code.Shl_rm64_1;
				} else if (dst.Size == MemoryOperandSize.DwordPtr) {
					op = Code.Shl_rm32_1;
				} else if (dst.Size == MemoryOperandSize.WordPtr) {
					op = Code.Shl_rm16_1;
				} else if (dst.Size == MemoryOperandSize.BytePtr) {
					op = Code.Shl_rm8_1;
				} else {
					throw NoOpCodeFoundFor(Mnemonic.Shl, dst, imm);
				}
			} else if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Shl_rm64_imm8;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Shl_rm32_imm8;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Shl_rm16_imm8;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Shl_rm8_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Shl, dst, imm);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>shl instruction.<br/>
		/// <br/>
		/// <c>SHL r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /4</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /4 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shl(AssemblerRegister8 dst, byte imm) {
			Code op;
			op = imm == 1 ? Code.Shl_rm8_1 : Code.Shl_rm8_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>shl instruction.<br/>
		/// <br/>
		/// <c>SHL r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /4</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /4 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shl(AssemblerRegister16 dst, byte imm) {
			Code op;
			op = imm == 1 ? Code.Shl_rm16_1 : Code.Shl_rm16_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>shl instruction.<br/>
		/// <br/>
		/// <c>SHL r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /4</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /4 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shl(AssemblerRegister32 dst, byte imm) {
			Code op;
			op = imm == 1 ? Code.Shl_rm32_1 : Code.Shl_rm32_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>shl instruction.<br/>
		/// <br/>
		/// <c>SHL r/m64, 1</c><br/>
		/// <br/>
		/// <c>REX.W D1 /4</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W C1 /4 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void shl(AssemblerRegister64 dst, byte imm) {
			Code op;
			op = imm == 1 ? Code.Shl_rm64_1 : Code.Shl_rm64_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>shl instruction.<br/>
		/// <br/>
		/// <c>SHL r/m64, 1</c><br/>
		/// <br/>
		/// <c>REX.W D1 /4</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W C1 /4 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /4</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /4 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /4</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /4 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /4</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /4 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shl(AssemblerMemoryOperand dst, byte imm) {
			Code op;
			if (imm == 1) {
				if (dst.Size == MemoryOperandSize.QwordPtr) {
					op = Code.Shl_rm64_1;
				} else if (dst.Size == MemoryOperandSize.DwordPtr) {
					op = Code.Shl_rm32_1;
				} else if (dst.Size == MemoryOperandSize.WordPtr) {
					op = Code.Shl_rm16_1;
				} else if (dst.Size == MemoryOperandSize.BytePtr) {
					op = Code.Shl_rm8_1;
				} else {
					throw NoOpCodeFoundFor(Mnemonic.Shl, dst, imm);
				}
			} else if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Shl_rm64_imm8;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Shl_rm32_imm8;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Shl_rm16_imm8;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Shl_rm8_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Shl, dst, imm);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>shld instruction.<br/>
		/// <br/>
		/// <c>SHLD r/m16, r16, CL</c><br/>
		/// <br/>
		/// <c>o16 0F A5 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shld(AssemblerRegister16 dst, AssemblerRegister16 src1, AssemblerRegister8 src2) {
			Code op;
			op = Code.Shld_rm16_r16_CL;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>shld instruction.<br/>
		/// <br/>
		/// <c>SHLD r/m16, r16, CL</c><br/>
		/// <br/>
		/// <c>o16 0F A5 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shld(AssemblerMemoryOperand dst, AssemblerRegister16 src1, AssemblerRegister8 src2) {
			Code op;
			op = Code.Shld_rm16_r16_CL;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, src2));
		}
		/// <summary>shld instruction.<br/>
		/// <br/>
		/// <c>SHLD r/m32, r32, CL</c><br/>
		/// <br/>
		/// <c>o32 0F A5 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shld(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerRegister8 src2) {
			Code op;
			op = Code.Shld_rm32_r32_CL;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>shld instruction.<br/>
		/// <br/>
		/// <c>SHLD r/m32, r32, CL</c><br/>
		/// <br/>
		/// <c>o32 0F A5 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shld(AssemblerMemoryOperand dst, AssemblerRegister32 src1, AssemblerRegister8 src2) {
			Code op;
			op = Code.Shld_rm32_r32_CL;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, src2));
		}
		/// <summary>shld instruction.<br/>
		/// <br/>
		/// <c>SHLD r/m64, r64, CL</c><br/>
		/// <br/>
		/// <c>REX.W 0F A5 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void shld(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerRegister8 src2) {
			Code op;
			op = Code.Shld_rm64_r64_CL;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>shld instruction.<br/>
		/// <br/>
		/// <c>SHLD r/m64, r64, CL</c><br/>
		/// <br/>
		/// <c>REX.W 0F A5 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void shld(AssemblerMemoryOperand dst, AssemblerRegister64 src1, AssemblerRegister8 src2) {
			Code op;
			op = Code.Shld_rm64_r64_CL;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, src2));
		}
		/// <summary>shld instruction.<br/>
		/// <br/>
		/// <c>SHLD r/m16, r16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F A4 /r ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shld(AssemblerRegister16 dst, AssemblerRegister16 src1, sbyte imm) {
			Code op;
			op = Code.Shld_rm16_r16_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>shld instruction.<br/>
		/// <br/>
		/// <c>SHLD r/m16, r16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F A4 /r ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shld(AssemblerMemoryOperand dst, AssemblerRegister16 src1, sbyte imm) {
			Code op;
			op = Code.Shld_rm16_r16_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, imm));
		}
		/// <summary>shld instruction.<br/>
		/// <br/>
		/// <c>SHLD r/m32, r32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F A4 /r ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shld(AssemblerRegister32 dst, AssemblerRegister32 src1, sbyte imm) {
			Code op;
			op = Code.Shld_rm32_r32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>shld instruction.<br/>
		/// <br/>
		/// <c>SHLD r/m32, r32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F A4 /r ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shld(AssemblerMemoryOperand dst, AssemblerRegister32 src1, sbyte imm) {
			Code op;
			op = Code.Shld_rm32_r32_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, imm));
		}
		/// <summary>shld instruction.<br/>
		/// <br/>
		/// <c>SHLD r/m64, r64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W 0F A4 /r ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void shld(AssemblerRegister64 dst, AssemblerRegister64 src1, sbyte imm) {
			Code op;
			op = Code.Shld_rm64_r64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>shld instruction.<br/>
		/// <br/>
		/// <c>SHLD r/m64, r64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W 0F A4 /r ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void shld(AssemblerMemoryOperand dst, AssemblerRegister64 src1, sbyte imm) {
			Code op;
			op = Code.Shld_rm64_r64_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, imm));
		}
		/// <summary>shld instruction.<br/>
		/// <br/>
		/// <c>SHLD r/m16, r16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F A4 /r ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shld(AssemblerRegister16 dst, AssemblerRegister16 src1, byte imm) {
			Code op;
			op = Code.Shld_rm16_r16_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>shld instruction.<br/>
		/// <br/>
		/// <c>SHLD r/m16, r16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F A4 /r ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shld(AssemblerMemoryOperand dst, AssemblerRegister16 src1, byte imm) {
			Code op;
			op = Code.Shld_rm16_r16_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, (uint)imm));
		}
		/// <summary>shld instruction.<br/>
		/// <br/>
		/// <c>SHLD r/m32, r32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F A4 /r ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shld(AssemblerRegister32 dst, AssemblerRegister32 src1, byte imm) {
			Code op;
			op = Code.Shld_rm32_r32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>shld instruction.<br/>
		/// <br/>
		/// <c>SHLD r/m32, r32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F A4 /r ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shld(AssemblerMemoryOperand dst, AssemblerRegister32 src1, byte imm) {
			Code op;
			op = Code.Shld_rm32_r32_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, (uint)imm));
		}
		/// <summary>shld instruction.<br/>
		/// <br/>
		/// <c>SHLD r/m64, r64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W 0F A4 /r ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void shld(AssemblerRegister64 dst, AssemblerRegister64 src1, byte imm) {
			Code op;
			op = Code.Shld_rm64_r64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>shld instruction.<br/>
		/// <br/>
		/// <c>SHLD r/m64, r64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W 0F A4 /r ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void shld(AssemblerMemoryOperand dst, AssemblerRegister64 src1, byte imm) {
			Code op;
			op = Code.Shld_rm64_r64_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, (uint)imm));
		}
		/// <summary>shlx instruction.<br/>
		/// <br/>
		/// <c>SHLX r32a, r/m32, r32b</c><br/>
		/// <br/>
		/// <c>VEX.LZ.66.0F38.W0 F7 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shlx(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerRegister32 src2) {
			Code op;
			op = Code.VEX_Shlx_r32_rm32_r32;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>shlx instruction.<br/>
		/// <br/>
		/// <c>SHLX r32a, r/m32, r32b</c><br/>
		/// <br/>
		/// <c>VEX.LZ.66.0F38.W0 F7 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shlx(AssemblerRegister32 dst, AssemblerMemoryOperand src1, AssemblerRegister32 src2) {
			Code op;
			op = Code.VEX_Shlx_r32_rm32_r32;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), src2));
		}
		/// <summary>shlx instruction.<br/>
		/// <br/>
		/// <c>SHLX r64a, r/m64, r64b</c><br/>
		/// <br/>
		/// <c>VEX.LZ.66.0F38.W1 F7 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void shlx(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerRegister64 src2) {
			Code op;
			op = Code.VEX_Shlx_r64_rm64_r64;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>shlx instruction.<br/>
		/// <br/>
		/// <c>SHLX r64a, r/m64, r64b</c><br/>
		/// <br/>
		/// <c>VEX.LZ.66.0F38.W1 F7 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void shlx(AssemblerRegister64 dst, AssemblerMemoryOperand src1, AssemblerRegister64 src2) {
			Code op;
			op = Code.VEX_Shlx_r64_rm64_r64;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), src2));
		}
		/// <summary>shr instruction.<br/>
		/// <br/>
		/// <c>SHR r/m8, CL</c><br/>
		/// <br/>
		/// <c>D2 /5</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shr(AssemblerRegister8 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Shr_rm8_CL;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>shr instruction.<br/>
		/// <br/>
		/// <c>SHR r/m16, CL</c><br/>
		/// <br/>
		/// <c>o16 D3 /5</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shr(AssemblerRegister16 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Shr_rm16_CL;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>shr instruction.<br/>
		/// <br/>
		/// <c>SHR r/m32, CL</c><br/>
		/// <br/>
		/// <c>o32 D3 /5</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shr(AssemblerRegister32 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Shr_rm32_CL;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>shr instruction.<br/>
		/// <br/>
		/// <c>SHR r/m64, CL</c><br/>
		/// <br/>
		/// <c>REX.W D3 /5</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void shr(AssemblerRegister64 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Shr_rm64_CL;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>shr instruction.<br/>
		/// <br/>
		/// <c>SHR r/m64, CL</c><br/>
		/// <br/>
		/// <c>REX.W D3 /5</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m32, CL</c><br/>
		/// <br/>
		/// <c>o32 D3 /5</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m16, CL</c><br/>
		/// <br/>
		/// <c>o16 D3 /5</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m8, CL</c><br/>
		/// <br/>
		/// <c>D2 /5</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shr(AssemblerMemoryOperand dst, AssemblerRegister8 src) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Shr_rm64_CL;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Shr_rm32_CL;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Shr_rm16_CL;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Shr_rm8_CL;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Shr, dst, src);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>shr instruction.<br/>
		/// <br/>
		/// <c>SHR r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /5</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /5 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shr(AssemblerRegister8 dst, sbyte imm) {
			Code op;
			op = imm == 1 ? Code.Shr_rm8_1 : Code.Shr_rm8_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>shr instruction.<br/>
		/// <br/>
		/// <c>SHR r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /5</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /5 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shr(AssemblerRegister16 dst, sbyte imm) {
			Code op;
			op = imm == 1 ? Code.Shr_rm16_1 : Code.Shr_rm16_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>shr instruction.<br/>
		/// <br/>
		/// <c>SHR r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /5</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /5 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shr(AssemblerRegister32 dst, sbyte imm) {
			Code op;
			op = imm == 1 ? Code.Shr_rm32_1 : Code.Shr_rm32_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>shr instruction.<br/>
		/// <br/>
		/// <c>SHR r/m64, 1</c><br/>
		/// <br/>
		/// <c>REX.W D1 /5</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W C1 /5 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void shr(AssemblerRegister64 dst, sbyte imm) {
			Code op;
			op = imm == 1 ? Code.Shr_rm64_1 : Code.Shr_rm64_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>shr instruction.<br/>
		/// <br/>
		/// <c>SHR r/m64, 1</c><br/>
		/// <br/>
		/// <c>REX.W D1 /5</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W C1 /5 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /5</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /5 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /5</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /5 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /5</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /5 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shr(AssemblerMemoryOperand dst, sbyte imm) {
			Code op;
			if (imm == 1) {
				if (dst.Size == MemoryOperandSize.QwordPtr) {
					op = Code.Shr_rm64_1;
				} else if (dst.Size == MemoryOperandSize.DwordPtr) {
					op = Code.Shr_rm32_1;
				} else if (dst.Size == MemoryOperandSize.WordPtr) {
					op = Code.Shr_rm16_1;
				} else if (dst.Size == MemoryOperandSize.BytePtr) {
					op = Code.Shr_rm8_1;
				} else {
					throw NoOpCodeFoundFor(Mnemonic.Shr, dst, imm);
				}
			} else if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Shr_rm64_imm8;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Shr_rm32_imm8;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Shr_rm16_imm8;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Shr_rm8_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Shr, dst, imm);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>shr instruction.<br/>
		/// <br/>
		/// <c>SHR r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /5</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /5 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shr(AssemblerRegister8 dst, byte imm) {
			Code op;
			op = imm == 1 ? Code.Shr_rm8_1 : Code.Shr_rm8_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>shr instruction.<br/>
		/// <br/>
		/// <c>SHR r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /5</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /5 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shr(AssemblerRegister16 dst, byte imm) {
			Code op;
			op = imm == 1 ? Code.Shr_rm16_1 : Code.Shr_rm16_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>shr instruction.<br/>
		/// <br/>
		/// <c>SHR r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /5</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /5 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shr(AssemblerRegister32 dst, byte imm) {
			Code op;
			op = imm == 1 ? Code.Shr_rm32_1 : Code.Shr_rm32_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>shr instruction.<br/>
		/// <br/>
		/// <c>SHR r/m64, 1</c><br/>
		/// <br/>
		/// <c>REX.W D1 /5</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W C1 /5 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void shr(AssemblerRegister64 dst, byte imm) {
			Code op;
			op = imm == 1 ? Code.Shr_rm64_1 : Code.Shr_rm64_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>shr instruction.<br/>
		/// <br/>
		/// <c>SHR r/m64, 1</c><br/>
		/// <br/>
		/// <c>REX.W D1 /5</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W C1 /5 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /5</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /5 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /5</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /5 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /5</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /5 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shr(AssemblerMemoryOperand dst, byte imm) {
			Code op;
			if (imm == 1) {
				if (dst.Size == MemoryOperandSize.QwordPtr) {
					op = Code.Shr_rm64_1;
				} else if (dst.Size == MemoryOperandSize.DwordPtr) {
					op = Code.Shr_rm32_1;
				} else if (dst.Size == MemoryOperandSize.WordPtr) {
					op = Code.Shr_rm16_1;
				} else if (dst.Size == MemoryOperandSize.BytePtr) {
					op = Code.Shr_rm8_1;
				} else {
					throw NoOpCodeFoundFor(Mnemonic.Shr, dst, imm);
				}
			} else if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Shr_rm64_imm8;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Shr_rm32_imm8;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Shr_rm16_imm8;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Shr_rm8_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Shr, dst, imm);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>shrd instruction.<br/>
		/// <br/>
		/// <c>SHRD r/m16, r16, CL</c><br/>
		/// <br/>
		/// <c>o16 0F AD /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shrd(AssemblerRegister16 dst, AssemblerRegister16 src1, AssemblerRegister8 src2) {
			Code op;
			op = Code.Shrd_rm16_r16_CL;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>shrd instruction.<br/>
		/// <br/>
		/// <c>SHRD r/m16, r16, CL</c><br/>
		/// <br/>
		/// <c>o16 0F AD /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shrd(AssemblerMemoryOperand dst, AssemblerRegister16 src1, AssemblerRegister8 src2) {
			Code op;
			op = Code.Shrd_rm16_r16_CL;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, src2));
		}
		/// <summary>shrd instruction.<br/>
		/// <br/>
		/// <c>SHRD r/m32, r32, CL</c><br/>
		/// <br/>
		/// <c>o32 0F AD /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shrd(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerRegister8 src2) {
			Code op;
			op = Code.Shrd_rm32_r32_CL;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>shrd instruction.<br/>
		/// <br/>
		/// <c>SHRD r/m32, r32, CL</c><br/>
		/// <br/>
		/// <c>o32 0F AD /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shrd(AssemblerMemoryOperand dst, AssemblerRegister32 src1, AssemblerRegister8 src2) {
			Code op;
			op = Code.Shrd_rm32_r32_CL;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, src2));
		}
		/// <summary>shrd instruction.<br/>
		/// <br/>
		/// <c>SHRD r/m64, r64, CL</c><br/>
		/// <br/>
		/// <c>REX.W 0F AD /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void shrd(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerRegister8 src2) {
			Code op;
			op = Code.Shrd_rm64_r64_CL;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>shrd instruction.<br/>
		/// <br/>
		/// <c>SHRD r/m64, r64, CL</c><br/>
		/// <br/>
		/// <c>REX.W 0F AD /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void shrd(AssemblerMemoryOperand dst, AssemblerRegister64 src1, AssemblerRegister8 src2) {
			Code op;
			op = Code.Shrd_rm64_r64_CL;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, src2));
		}
		/// <summary>shrd instruction.<br/>
		/// <br/>
		/// <c>SHRD r/m16, r16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F AC /r ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shrd(AssemblerRegister16 dst, AssemblerRegister16 src1, sbyte imm) {
			Code op;
			op = Code.Shrd_rm16_r16_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>shrd instruction.<br/>
		/// <br/>
		/// <c>SHRD r/m16, r16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F AC /r ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shrd(AssemblerMemoryOperand dst, AssemblerRegister16 src1, sbyte imm) {
			Code op;
			op = Code.Shrd_rm16_r16_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, imm));
		}
		/// <summary>shrd instruction.<br/>
		/// <br/>
		/// <c>SHRD r/m32, r32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F AC /r ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shrd(AssemblerRegister32 dst, AssemblerRegister32 src1, sbyte imm) {
			Code op;
			op = Code.Shrd_rm32_r32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>shrd instruction.<br/>
		/// <br/>
		/// <c>SHRD r/m32, r32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F AC /r ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shrd(AssemblerMemoryOperand dst, AssemblerRegister32 src1, sbyte imm) {
			Code op;
			op = Code.Shrd_rm32_r32_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, imm));
		}
		/// <summary>shrd instruction.<br/>
		/// <br/>
		/// <c>SHRD r/m64, r64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W 0F AC /r ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void shrd(AssemblerRegister64 dst, AssemblerRegister64 src1, sbyte imm) {
			Code op;
			op = Code.Shrd_rm64_r64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>shrd instruction.<br/>
		/// <br/>
		/// <c>SHRD r/m64, r64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W 0F AC /r ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void shrd(AssemblerMemoryOperand dst, AssemblerRegister64 src1, sbyte imm) {
			Code op;
			op = Code.Shrd_rm64_r64_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, imm));
		}
		/// <summary>shrd instruction.<br/>
		/// <br/>
		/// <c>SHRD r/m16, r16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F AC /r ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shrd(AssemblerRegister16 dst, AssemblerRegister16 src1, byte imm) {
			Code op;
			op = Code.Shrd_rm16_r16_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>shrd instruction.<br/>
		/// <br/>
		/// <c>SHRD r/m16, r16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F AC /r ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shrd(AssemblerMemoryOperand dst, AssemblerRegister16 src1, byte imm) {
			Code op;
			op = Code.Shrd_rm16_r16_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, (uint)imm));
		}
		/// <summary>shrd instruction.<br/>
		/// <br/>
		/// <c>SHRD r/m32, r32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F AC /r ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shrd(AssemblerRegister32 dst, AssemblerRegister32 src1, byte imm) {
			Code op;
			op = Code.Shrd_rm32_r32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>shrd instruction.<br/>
		/// <br/>
		/// <c>SHRD r/m32, r32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F AC /r ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shrd(AssemblerMemoryOperand dst, AssemblerRegister32 src1, byte imm) {
			Code op;
			op = Code.Shrd_rm32_r32_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, (uint)imm));
		}
		/// <summary>shrd instruction.<br/>
		/// <br/>
		/// <c>SHRD r/m64, r64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W 0F AC /r ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void shrd(AssemblerRegister64 dst, AssemblerRegister64 src1, byte imm) {
			Code op;
			op = Code.Shrd_rm64_r64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>shrd instruction.<br/>
		/// <br/>
		/// <c>SHRD r/m64, r64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W 0F AC /r ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void shrd(AssemblerMemoryOperand dst, AssemblerRegister64 src1, byte imm) {
			Code op;
			op = Code.Shrd_rm64_r64_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, (uint)imm));
		}
		/// <summary>shrx instruction.<br/>
		/// <br/>
		/// <c>SHRX r32a, r/m32, r32b</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F2.0F38.W0 F7 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shrx(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerRegister32 src2) {
			Code op;
			op = Code.VEX_Shrx_r32_rm32_r32;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>shrx instruction.<br/>
		/// <br/>
		/// <c>SHRX r32a, r/m32, r32b</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F2.0F38.W0 F7 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shrx(AssemblerRegister32 dst, AssemblerMemoryOperand src1, AssemblerRegister32 src2) {
			Code op;
			op = Code.VEX_Shrx_r32_rm32_r32;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), src2));
		}
		/// <summary>shrx instruction.<br/>
		/// <br/>
		/// <c>SHRX r64a, r/m64, r64b</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F2.0F38.W1 F7 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void shrx(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerRegister64 src2) {
			Code op;
			op = Code.VEX_Shrx_r64_rm64_r64;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>shrx instruction.<br/>
		/// <br/>
		/// <c>SHRX r64a, r/m64, r64b</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F2.0F38.W1 F7 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void shrx(AssemblerRegister64 dst, AssemblerMemoryOperand src1, AssemblerRegister64 src2) {
			Code op;
			op = Code.VEX_Shrx_r64_rm64_r64;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), src2));
		}
		/// <summary>shufpd instruction.<br/>
		/// <br/>
		/// <c>SHUFPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F C6 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shufpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.Shufpd_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>shufpd instruction.<br/>
		/// <br/>
		/// <c>SHUFPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F C6 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shufpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.Shufpd_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>shufpd instruction.<br/>
		/// <br/>
		/// <c>SHUFPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F C6 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shufpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.Shufpd_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>shufpd instruction.<br/>
		/// <br/>
		/// <c>SHUFPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F C6 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shufpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.Shufpd_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>shufps instruction.<br/>
		/// <br/>
		/// <c>SHUFPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F C6 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shufps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.Shufps_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>shufps instruction.<br/>
		/// <br/>
		/// <c>SHUFPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F C6 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shufps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.Shufps_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>shufps instruction.<br/>
		/// <br/>
		/// <c>SHUFPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F C6 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shufps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.Shufps_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>shufps instruction.<br/>
		/// <br/>
		/// <c>SHUFPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F C6 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void shufps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.Shufps_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>sidt instruction.<br/>
		/// <br/>
		/// <c>SIDT m</c><br/>
		/// <br/>
		/// <c>0F 01 /1</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SIDT m</c><br/>
		/// <br/>
		/// <c>o32 0F 01 /1</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>SIDT m</c><br/>
		/// <br/>
		/// <c>o16 0F 01 /1</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void sidt(AssemblerMemoryOperand dst) {
			Code op;
			if (Bitness == 64) {
				op = Code.Sidt_m1664;
			} else op = Bitness >= 32 ? Code.Sidt_m1632 : Code.Sidt_m1632_16;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>skinit instruction.<br/>
		/// <br/>
		/// <c>SKINIT</c><br/>
		/// <br/>
		/// <c>0F 01 DE</c><br/>
		/// <br/>
		/// <c>SKINIT or SVML</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void skinit() {
			Code op;
			op = Code.Skinit;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>sldt instruction.<br/>
		/// <br/>
		/// <c>SLDT r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 00 /0</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sldt(AssemblerRegister16 dst) {
			Code op;
			op = Code.Sldt_rm16;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>sldt instruction.<br/>
		/// <br/>
		/// <c>SLDT r32/m16</c><br/>
		/// <br/>
		/// <c>o32 0F 00 /0</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sldt(AssemblerRegister32 dst) {
			Code op;
			op = Code.Sldt_r32m16;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>sldt instruction.<br/>
		/// <br/>
		/// <c>SLDT r64/m16</c><br/>
		/// <br/>
		/// <c>REX.W 0F 00 /0</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void sldt(AssemblerRegister64 dst) {
			Code op;
			op = Code.Sldt_r64m16;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>sldt instruction.<br/>
		/// <br/>
		/// <c>SLDT r32/m16</c><br/>
		/// <br/>
		/// <c>o32 0F 00 /0</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SLDT r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 00 /0</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sldt(AssemblerMemoryOperand dst) {
			Code op;
			op = Bitness >= 32 ? Code.Sldt_r32m16 : Code.Sldt_rm16;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>slwpcb instruction.<br/>
		/// <br/>
		/// <c>SLWPCB r32</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W0 12 /1</c><br/>
		/// <br/>
		/// <c>LWP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void slwpcb(AssemblerRegister32 dst) {
			Code op;
			op = Code.XOP_Slwpcb_r32;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>slwpcb instruction.<br/>
		/// <br/>
		/// <c>SLWPCB r64</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W1 12 /1</c><br/>
		/// <br/>
		/// <c>LWP</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void slwpcb(AssemblerRegister64 dst) {
			Code op;
			op = Code.XOP_Slwpcb_r64;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>smsw instruction.<br/>
		/// <br/>
		/// <c>SMSW r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 01 /4</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void smsw(AssemblerRegister16 dst) {
			Code op;
			op = Code.Smsw_rm16;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>smsw instruction.<br/>
		/// <br/>
		/// <c>SMSW r32/m16</c><br/>
		/// <br/>
		/// <c>o32 0F 01 /4</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void smsw(AssemblerRegister32 dst) {
			Code op;
			op = Code.Smsw_r32m16;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>smsw instruction.<br/>
		/// <br/>
		/// <c>SMSW r64/m16</c><br/>
		/// <br/>
		/// <c>REX.W 0F 01 /4</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void smsw(AssemblerRegister64 dst) {
			Code op;
			op = Code.Smsw_r64m16;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>smsw instruction.<br/>
		/// <br/>
		/// <c>SMSW r32/m16</c><br/>
		/// <br/>
		/// <c>o32 0F 01 /4</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SMSW r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 01 /4</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void smsw(AssemblerMemoryOperand dst) {
			Code op;
			op = Bitness >= 32 ? Code.Smsw_r32m16 : Code.Smsw_rm16;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>sqrtpd instruction.<br/>
		/// <br/>
		/// <c>SQRTPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 51 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sqrtpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Sqrtpd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>sqrtpd instruction.<br/>
		/// <br/>
		/// <c>SQRTPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 51 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sqrtpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Sqrtpd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>sqrtps instruction.<br/>
		/// <br/>
		/// <c>SQRTPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 51 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sqrtps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Sqrtps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>sqrtps instruction.<br/>
		/// <br/>
		/// <c>SQRTPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 51 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sqrtps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Sqrtps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>sqrtsd instruction.<br/>
		/// <br/>
		/// <c>SQRTSD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 51 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sqrtsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Sqrtsd_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>sqrtsd instruction.<br/>
		/// <br/>
		/// <c>SQRTSD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 51 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sqrtsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Sqrtsd_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>sqrtss instruction.<br/>
		/// <br/>
		/// <c>SQRTSS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 51 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sqrtss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Sqrtss_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>sqrtss instruction.<br/>
		/// <br/>
		/// <c>SQRTSS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 51 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sqrtss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Sqrtss_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>stac instruction.<br/>
		/// <br/>
		/// <c>STAC</c><br/>
		/// <br/>
		/// <c>NP 0F 01 CB</c><br/>
		/// <br/>
		/// <c>SMAP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void stac() {
			Code op;
			op = Code.Stac;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>stc instruction.<br/>
		/// <br/>
		/// <c>STC</c><br/>
		/// <br/>
		/// <c>F9</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void stc() {
			Code op;
			op = Code.Stc;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>std instruction.<br/>
		/// <br/>
		/// <c>STD</c><br/>
		/// <br/>
		/// <c>FD</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void std() {
			Code op;
			op = Code.Std;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>stgi instruction.<br/>
		/// <br/>
		/// <c>STGI</c><br/>
		/// <br/>
		/// <c>0F 01 DC</c><br/>
		/// <br/>
		/// <c>SKINIT or SVML</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void stgi() {
			Code op;
			op = Code.Stgi;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>sti instruction.<br/>
		/// <br/>
		/// <c>STI</c><br/>
		/// <br/>
		/// <c>FB</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sti() {
			Code op;
			op = Code.Sti;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>stmxcsr instruction.<br/>
		/// <br/>
		/// <c>STMXCSR m32</c><br/>
		/// <br/>
		/// <c>NP 0F AE /3</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void stmxcsr(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Stmxcsr_m32;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>stosb instruction.<br/>
		/// <br/>
		/// <c>STOSB</c><br/>
		/// <br/>
		/// <c>AA</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void stosb() {
			AddInstruction(Instruction.CreateStosb(Bitness));
		}
		/// <summary>stosd instruction.<br/>
		/// <br/>
		/// <c>STOSD</c><br/>
		/// <br/>
		/// <c>o32 AB</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void stosd() {
			AddInstruction(Instruction.CreateStosd(Bitness));
		}
		/// <summary>stosq instruction.<br/>
		/// <br/>
		/// <c>STOSQ</c><br/>
		/// <br/>
		/// <c>REX.W AB</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void stosq() {
			AddInstruction(Instruction.CreateStosq(Bitness));
		}
		/// <summary>stosw instruction.<br/>
		/// <br/>
		/// <c>STOSW</c><br/>
		/// <br/>
		/// <c>o16 AB</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void stosw() {
			AddInstruction(Instruction.CreateStosw(Bitness));
		}
		/// <summary>str instruction.<br/>
		/// <br/>
		/// <c>STR r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 00 /1</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void str(AssemblerRegister16 dst) {
			Code op;
			op = Code.Str_rm16;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>str instruction.<br/>
		/// <br/>
		/// <c>STR r32/m16</c><br/>
		/// <br/>
		/// <c>o32 0F 00 /1</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void str(AssemblerRegister32 dst) {
			Code op;
			op = Code.Str_r32m16;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>str instruction.<br/>
		/// <br/>
		/// <c>STR r64/m16</c><br/>
		/// <br/>
		/// <c>REX.W 0F 00 /1</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void str(AssemblerRegister64 dst) {
			Code op;
			op = Code.Str_r64m16;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>str instruction.<br/>
		/// <br/>
		/// <c>STR r32/m16</c><br/>
		/// <br/>
		/// <c>o32 0F 00 /1</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>STR r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 00 /1</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void str(AssemblerMemoryOperand dst) {
			Code op;
			op = Bitness >= 32 ? Code.Str_r32m16 : Code.Str_rm16;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>sub instruction.<br/>
		/// <br/>
		/// <c>SUB r/m8, r8</c><br/>
		/// <br/>
		/// <c>28 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sub(AssemblerRegister8 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Sub_rm8_r8;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>sub instruction.<br/>
		/// <br/>
		/// <c>SUB r/m8, r8</c><br/>
		/// <br/>
		/// <c>28 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sub(AssemblerMemoryOperand dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Sub_rm8_r8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>sub instruction.<br/>
		/// <br/>
		/// <c>SUB r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 29 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sub(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Sub_rm16_r16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>sub instruction.<br/>
		/// <br/>
		/// <c>SUB r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 29 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sub(AssemblerMemoryOperand dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Sub_rm16_r16;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>sub instruction.<br/>
		/// <br/>
		/// <c>SUB r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 29 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sub(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Sub_rm32_r32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>sub instruction.<br/>
		/// <br/>
		/// <c>SUB r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 29 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sub(AssemblerMemoryOperand dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Sub_rm32_r32;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>sub instruction.<br/>
		/// <br/>
		/// <c>SUB r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 29 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void sub(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Sub_rm64_r64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>sub instruction.<br/>
		/// <br/>
		/// <c>SUB r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 29 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void sub(AssemblerMemoryOperand dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Sub_rm64_r64;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>sub instruction.<br/>
		/// <br/>
		/// <c>SUB r8, r/m8</c><br/>
		/// <br/>
		/// <c>2A /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sub(AssemblerRegister8 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Sub_r8_rm8;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>sub instruction.<br/>
		/// <br/>
		/// <c>SUB r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 2B /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sub(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Sub_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>sub instruction.<br/>
		/// <br/>
		/// <c>SUB r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 2B /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sub(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Sub_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>sub instruction.<br/>
		/// <br/>
		/// <c>SUB r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 2B /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void sub(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Sub_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>sub instruction.<br/>
		/// <br/>
		/// <c>SUB AL, imm8</c><br/>
		/// <br/>
		/// <c>2C ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SUB r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /5 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sub(AssemblerRegister8 dst, sbyte imm) {
			Code op;
			op = dst == Register.AL ? Code.Sub_AL_imm8 : Code.Sub_rm8_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>sub instruction.<br/>
		/// <br/>
		/// <c>SUB AX, imm16</c><br/>
		/// <br/>
		/// <c>o16 2D iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SUB r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /5 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SUB r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /5 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sub(AssemblerRegister16 dst, short imm) {
			Code op;
			if (dst == Register.AX) {
				op = Code.Sub_AX_imm16;
			} else op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Sub_rm16_imm8 : Code.Sub_rm16_imm16;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>sub instruction.<br/>
		/// <br/>
		/// <c>SUB EAX, imm32</c><br/>
		/// <br/>
		/// <c>o32 2D id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SUB r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /5 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SUB r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /5 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sub(AssemblerRegister32 dst, int imm) {
			Code op;
			if (dst == Register.EAX) {
				op = Code.Sub_EAX_imm32;
			} else op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Sub_rm32_imm8 : Code.Sub_rm32_imm32;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>sub instruction.<br/>
		/// <br/>
		/// <c>SUB RAX, imm32</c><br/>
		/// <br/>
		/// <c>REX.W 2D id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SUB r/m64, imm32</c><br/>
		/// <br/>
		/// <c>REX.W 81 /5 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SUB r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W 83 /5 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void sub(AssemblerRegister64 dst, int imm) {
			Code op;
			if (dst == Register.RAX) {
				op = Code.Sub_RAX_imm32;
			} else op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Sub_rm64_imm8 : Code.Sub_rm64_imm32;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>sub instruction.<br/>
		/// <br/>
		/// <c>SUB r/m64, imm32</c><br/>
		/// <br/>
		/// <c>REX.W 81 /5 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SUB r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W 83 /5 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SUB r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /5 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SUB r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /5 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SUB r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /5 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SUB r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /5 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SUB r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /5 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sub(AssemblerMemoryOperand dst, int imm) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Sub_rm64_imm8 : Code.Sub_rm64_imm32;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Sub_rm32_imm8 : Code.Sub_rm32_imm32;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Sub_rm16_imm8 : Code.Sub_rm16_imm16;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Sub_rm8_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Sub, dst, imm);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>sub instruction.<br/>
		/// <br/>
		/// <c>SUB AL, imm8</c><br/>
		/// <br/>
		/// <c>2C ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SUB r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /5 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sub(AssemblerRegister8 dst, byte imm) {
			Code op;
			op = dst == Register.AL ? Code.Sub_AL_imm8 : Code.Sub_rm8_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>sub instruction.<br/>
		/// <br/>
		/// <c>SUB AX, imm16</c><br/>
		/// <br/>
		/// <c>o16 2D iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SUB r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /5 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SUB r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /5 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sub(AssemblerRegister16 dst, ushort imm) {
			Code op;
			if (dst == Register.AX) {
				op = Code.Sub_AX_imm16;
			} else op = imm <= (ushort)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF) ? Code.Sub_rm16_imm8 : Code.Sub_rm16_imm16;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>sub instruction.<br/>
		/// <br/>
		/// <c>SUB EAX, imm32</c><br/>
		/// <br/>
		/// <c>o32 2D id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SUB r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /5 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SUB r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /5 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sub(AssemblerRegister32 dst, uint imm) {
			Code op;
			if (dst == Register.EAX) {
				op = Code.Sub_EAX_imm32;
			} else op = imm <= (uint)sbyte.MaxValue || (0xFFFF_FF80 <= imm && imm <= 0xFFFF_FFFF) ? Code.Sub_rm32_imm8 : Code.Sub_rm32_imm32;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>sub instruction.<br/>
		/// <br/>
		/// <c>SUB r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /5 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SUB r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /5 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SUB r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /5 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SUB r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /5 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SUB r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /5 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sub(AssemblerMemoryOperand dst, uint imm) {
			Code op;
			if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = imm <= (uint)sbyte.MaxValue || (0xFFFF_FF80 <= imm && imm <= 0xFFFF_FFFF) ? Code.Sub_rm32_imm8 : Code.Sub_rm32_imm32;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = imm <= (uint)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF) ? Code.Sub_rm16_imm8 : Code.Sub_rm16_imm16;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Sub_rm8_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Sub, dst, imm);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>subpd instruction.<br/>
		/// <br/>
		/// <c>SUBPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 5C /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void subpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Subpd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>subpd instruction.<br/>
		/// <br/>
		/// <c>SUBPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 5C /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void subpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Subpd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>subps instruction.<br/>
		/// <br/>
		/// <c>SUBPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 5C /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void subps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Subps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>subps instruction.<br/>
		/// <br/>
		/// <c>SUBPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 5C /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void subps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Subps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>subsd instruction.<br/>
		/// <br/>
		/// <c>SUBSD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 5C /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void subsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Subsd_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>subsd instruction.<br/>
		/// <br/>
		/// <c>SUBSD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 5C /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void subsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Subsd_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>subss instruction.<br/>
		/// <br/>
		/// <c>SUBSS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 5C /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void subss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Subss_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>subss instruction.<br/>
		/// <br/>
		/// <c>SUBSS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 5C /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void subss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Subss_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>swapgs instruction.<br/>
		/// <br/>
		/// <c>SWAPGS</c><br/>
		/// <br/>
		/// <c>0F 01 F8</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void swapgs() {
			Code op;
			op = Code.Swapgs;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>syscall instruction.<br/>
		/// <br/>
		/// <c>SYSCALL</c><br/>
		/// <br/>
		/// <c>0F 05</c><br/>
		/// <br/>
		/// <c>SYSCALL</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void syscall() {
			Code op;
			op = Code.Syscall;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>sysenter instruction.<br/>
		/// <br/>
		/// <c>SYSENTER</c><br/>
		/// <br/>
		/// <c>0F 34</c><br/>
		/// <br/>
		/// <c>SEP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sysenter() {
			Code op;
			op = Code.Sysenter;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>sysexit instruction.<br/>
		/// <br/>
		/// <c>SYSEXIT</c><br/>
		/// <br/>
		/// <c>0F 35</c><br/>
		/// <br/>
		/// <c>SEP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sysexit() {
			Code op;
			op = Code.Sysexitd;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>sysexitq instruction.<br/>
		/// <br/>
		/// <c>SYSEXITQ</c><br/>
		/// <br/>
		/// <c>REX.W 0F 35</c><br/>
		/// <br/>
		/// <c>SEP</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void sysexitq() {
			Code op;
			op = Code.Sysexitq;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>sysret instruction.<br/>
		/// <br/>
		/// <c>SYSRET</c><br/>
		/// <br/>
		/// <c>0F 07</c><br/>
		/// <br/>
		/// <c>SYSCALL</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void sysret() {
			Code op;
			op = Code.Sysretd;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>sysretq instruction.<br/>
		/// <br/>
		/// <c>SYSRET</c><br/>
		/// <br/>
		/// <c>REX.W 0F 07</c><br/>
		/// <br/>
		/// <c>SYSCALL</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void sysretq() {
			Code op;
			op = Code.Sysretq;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>t1mskc instruction.<br/>
		/// <br/>
		/// <c>T1MSKC r32, r/m32</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W0 01 /7</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void t1mskc(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.XOP_T1mskc_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>t1mskc instruction.<br/>
		/// <br/>
		/// <c>T1MSKC r64, r/m64</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W1 01 /7</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void t1mskc(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.XOP_T1mskc_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>t1mskc instruction.<br/>
		/// <br/>
		/// <c>T1MSKC r32, r/m32</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W0 01 /7</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void t1mskc(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.XOP_T1mskc_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>t1mskc instruction.<br/>
		/// <br/>
		/// <c>T1MSKC r64, r/m64</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W1 01 /7</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void t1mskc(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.XOP_T1mskc_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>test instruction.<br/>
		/// <br/>
		/// <c>TEST r/m8, r8</c><br/>
		/// <br/>
		/// <c>84 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void test(AssemblerRegister8 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Test_rm8_r8;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>test instruction.<br/>
		/// <br/>
		/// <c>TEST r/m8, r8</c><br/>
		/// <br/>
		/// <c>84 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void test(AssemblerMemoryOperand dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Test_rm8_r8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>test instruction.<br/>
		/// <br/>
		/// <c>TEST r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 85 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void test(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Test_rm16_r16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>test instruction.<br/>
		/// <br/>
		/// <c>TEST r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 85 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void test(AssemblerMemoryOperand dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Test_rm16_r16;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>test instruction.<br/>
		/// <br/>
		/// <c>TEST r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 85 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void test(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Test_rm32_r32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>test instruction.<br/>
		/// <br/>
		/// <c>TEST r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 85 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void test(AssemblerMemoryOperand dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Test_rm32_r32;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>test instruction.<br/>
		/// <br/>
		/// <c>TEST r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 85 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void test(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Test_rm64_r64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>test instruction.<br/>
		/// <br/>
		/// <c>TEST r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 85 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void test(AssemblerMemoryOperand dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Test_rm64_r64;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>test instruction.<br/>
		/// <br/>
		/// <c>TEST AL, imm8</c><br/>
		/// <br/>
		/// <c>A8 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>TEST r/m8, imm8</c><br/>
		/// <br/>
		/// <c>F6 /0 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void test(AssemblerRegister8 dst, sbyte imm) {
			Code op;
			op = dst == Register.AL ? Code.Test_AL_imm8 : Code.Test_rm8_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>test instruction.<br/>
		/// <br/>
		/// <c>TEST AX, imm16</c><br/>
		/// <br/>
		/// <c>o16 A9 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>TEST r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 F7 /0 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void test(AssemblerRegister16 dst, short imm) {
			Code op;
			op = dst == Register.AX ? Code.Test_AX_imm16 : Code.Test_rm16_imm16;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>test instruction.<br/>
		/// <br/>
		/// <c>TEST EAX, imm32</c><br/>
		/// <br/>
		/// <c>o32 A9 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>TEST r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 F7 /0 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void test(AssemblerRegister32 dst, int imm) {
			Code op;
			op = dst == Register.EAX ? Code.Test_EAX_imm32 : Code.Test_rm32_imm32;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>test instruction.<br/>
		/// <br/>
		/// <c>TEST RAX, imm32</c><br/>
		/// <br/>
		/// <c>REX.W A9 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>TEST r/m64, imm32</c><br/>
		/// <br/>
		/// <c>REX.W F7 /0 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void test(AssemblerRegister64 dst, int imm) {
			Code op;
			op = dst == Register.RAX ? Code.Test_RAX_imm32 : Code.Test_rm64_imm32;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>test instruction.<br/>
		/// <br/>
		/// <c>TEST r/m64, imm32</c><br/>
		/// <br/>
		/// <c>REX.W F7 /0 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>TEST r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 F7 /0 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>TEST r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 F7 /0 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>TEST r/m8, imm8</c><br/>
		/// <br/>
		/// <c>F6 /0 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void test(AssemblerMemoryOperand dst, int imm) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = Code.Test_rm64_imm32;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Test_rm32_imm32;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Test_rm16_imm16;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Test_rm8_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Test, dst, imm);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>test instruction.<br/>
		/// <br/>
		/// <c>TEST AL, imm8</c><br/>
		/// <br/>
		/// <c>A8 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>TEST r/m8, imm8</c><br/>
		/// <br/>
		/// <c>F6 /0 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void test(AssemblerRegister8 dst, byte imm) {
			Code op;
			op = dst == Register.AL ? Code.Test_AL_imm8 : Code.Test_rm8_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>test instruction.<br/>
		/// <br/>
		/// <c>TEST AX, imm16</c><br/>
		/// <br/>
		/// <c>o16 A9 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>TEST r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 F7 /0 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void test(AssemblerRegister16 dst, ushort imm) {
			Code op;
			op = dst == Register.AX ? Code.Test_AX_imm16 : Code.Test_rm16_imm16;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>test instruction.<br/>
		/// <br/>
		/// <c>TEST EAX, imm32</c><br/>
		/// <br/>
		/// <c>o32 A9 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>TEST r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 F7 /0 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void test(AssemblerRegister32 dst, uint imm) {
			Code op;
			op = dst == Register.EAX ? Code.Test_EAX_imm32 : Code.Test_rm32_imm32;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>test instruction.<br/>
		/// <br/>
		/// <c>TEST r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 F7 /0 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>TEST r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 F7 /0 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>TEST r/m8, imm8</c><br/>
		/// <br/>
		/// <c>F6 /0 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void test(AssemblerMemoryOperand dst, uint imm) {
			Code op;
			if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = Code.Test_rm32_imm32;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = Code.Test_rm16_imm16;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Test_rm8_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Test, dst, imm);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>tlbsync instruction.<br/>
		/// <br/>
		/// <c>TLBSYNC</c><br/>
		/// <br/>
		/// <c>NP 0F 01 FF</c><br/>
		/// <br/>
		/// <c>INVLPGB</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void tlbsync() {
			Code op;
			op = Code.Tlbsync;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>tpause instruction.<br/>
		/// <br/>
		/// <c>TPAUSE r32, &lt;edx&gt;, &lt;eax&gt;</c><br/>
		/// <br/>
		/// <c>66 0F AE /6</c><br/>
		/// <br/>
		/// <c>WAITPKG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void tpause(AssemblerRegister32 dst) {
			Code op;
			op = Code.Tpause_r32;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>tpause instruction.<br/>
		/// <br/>
		/// <c>TPAUSE r64, &lt;edx&gt;, &lt;eax&gt;</c><br/>
		/// <br/>
		/// <c>66 REX.W 0F AE /6</c><br/>
		/// <br/>
		/// <c>WAITPKG</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void tpause(AssemblerRegister64 dst) {
			Code op;
			op = Code.Tpause_r64;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>tzcnt instruction.<br/>
		/// <br/>
		/// <c>TZCNT r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 F3 0F BC /r</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void tzcnt(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Tzcnt_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>tzcnt instruction.<br/>
		/// <br/>
		/// <c>TZCNT r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 F3 0F BC /r</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void tzcnt(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Tzcnt_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>tzcnt instruction.<br/>
		/// <br/>
		/// <c>TZCNT r64, r/m64</c><br/>
		/// <br/>
		/// <c>F3 REX.W 0F BC /r</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void tzcnt(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Tzcnt_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>tzcnt instruction.<br/>
		/// <br/>
		/// <c>TZCNT r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 F3 0F BC /r</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void tzcnt(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Tzcnt_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>tzcnt instruction.<br/>
		/// <br/>
		/// <c>TZCNT r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 F3 0F BC /r</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void tzcnt(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Tzcnt_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>tzcnt instruction.<br/>
		/// <br/>
		/// <c>TZCNT r64, r/m64</c><br/>
		/// <br/>
		/// <c>F3 REX.W 0F BC /r</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void tzcnt(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Tzcnt_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>tzmsk instruction.<br/>
		/// <br/>
		/// <c>TZMSK r32, r/m32</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W0 01 /4</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void tzmsk(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.XOP_Tzmsk_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>tzmsk instruction.<br/>
		/// <br/>
		/// <c>TZMSK r64, r/m64</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W1 01 /4</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void tzmsk(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.XOP_Tzmsk_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>tzmsk instruction.<br/>
		/// <br/>
		/// <c>TZMSK r32, r/m32</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W0 01 /4</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void tzmsk(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.XOP_Tzmsk_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>tzmsk instruction.<br/>
		/// <br/>
		/// <c>TZMSK r64, r/m64</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W1 01 /4</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void tzmsk(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.XOP_Tzmsk_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>ucomisd instruction.<br/>
		/// <br/>
		/// <c>UCOMISD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>66 0F 2E /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ucomisd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Ucomisd_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>ucomisd instruction.<br/>
		/// <br/>
		/// <c>UCOMISD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>66 0F 2E /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ucomisd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Ucomisd_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>ucomiss instruction.<br/>
		/// <br/>
		/// <c>UCOMISS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>NP 0F 2E /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ucomiss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Ucomiss_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>ucomiss instruction.<br/>
		/// <br/>
		/// <c>UCOMISS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>NP 0F 2E /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ucomiss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Ucomiss_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>ud0 instruction.<br/>
		/// <br/>
		/// <c>UD0</c><br/>
		/// <br/>
		/// <c>0F FF</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ud0() {
			Code op;
			op = Code.Ud0;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>ud0 instruction.<br/>
		/// <br/>
		/// <c>UD0 r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F FF /r</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ud0(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Ud0_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>ud0 instruction.<br/>
		/// <br/>
		/// <c>UD0 r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F FF /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ud0(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Ud0_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>ud0 instruction.<br/>
		/// <br/>
		/// <c>UD0 r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 0F FF /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void ud0(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Ud0_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>ud0 instruction.<br/>
		/// <br/>
		/// <c>UD0 r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F FF /r</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ud0(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Ud0_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>ud0 instruction.<br/>
		/// <br/>
		/// <c>UD0 r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F FF /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ud0(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Ud0_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>ud0 instruction.<br/>
		/// <br/>
		/// <c>UD0 r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 0F FF /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void ud0(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Ud0_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>ud1 instruction.<br/>
		/// <br/>
		/// <c>UD1 r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F B9 /r</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ud1(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Ud1_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>ud1 instruction.<br/>
		/// <br/>
		/// <c>UD1 r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F B9 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ud1(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Ud1_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>ud1 instruction.<br/>
		/// <br/>
		/// <c>UD1 r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 0F B9 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void ud1(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Ud1_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>ud1 instruction.<br/>
		/// <br/>
		/// <c>UD1 r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F B9 /r</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ud1(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Ud1_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>ud1 instruction.<br/>
		/// <br/>
		/// <c>UD1 r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F B9 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ud1(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Ud1_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>ud1 instruction.<br/>
		/// <br/>
		/// <c>UD1 r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 0F B9 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void ud1(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Ud1_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>ud2 instruction.<br/>
		/// <br/>
		/// <c>UD2</c><br/>
		/// <br/>
		/// <c>0F 0B</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void ud2() {
			Code op;
			op = Code.Ud2;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>umonitor instruction.<br/>
		/// <br/>
		/// <c>UMONITOR r16</c><br/>
		/// <br/>
		/// <c>a16 F3 0F AE /6</c><br/>
		/// <br/>
		/// <c>WAITPKG</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void umonitor(AssemblerRegister16 dst) {
			Code op;
			op = Code.Umonitor_r16;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>umonitor instruction.<br/>
		/// <br/>
		/// <c>UMONITOR r32</c><br/>
		/// <br/>
		/// <c>a32 F3 0F AE /6</c><br/>
		/// <br/>
		/// <c>WAITPKG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void umonitor(AssemblerRegister32 dst) {
			Code op;
			op = Code.Umonitor_r32;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>umonitor instruction.<br/>
		/// <br/>
		/// <c>UMONITOR r64</c><br/>
		/// <br/>
		/// <c>F3 0F AE /6</c><br/>
		/// <br/>
		/// <c>WAITPKG</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void umonitor(AssemblerRegister64 dst) {
			Code op;
			op = Code.Umonitor_r64;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>umov instruction.<br/>
		/// <br/>
		/// <c>UMOV r/m8, r8</c><br/>
		/// <br/>
		/// <c>0F 10 /r</c><br/>
		/// <br/>
		/// <c>386/486</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void umov(AssemblerRegister8 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Umov_rm8_r8;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>umov instruction.<br/>
		/// <br/>
		/// <c>UMOV r/m8, r8</c><br/>
		/// <br/>
		/// <c>0F 10 /r</c><br/>
		/// <br/>
		/// <c>386/486</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void umov(AssemblerMemoryOperand dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Umov_rm8_r8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>umov instruction.<br/>
		/// <br/>
		/// <c>UMOV r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F 11 /r</c><br/>
		/// <br/>
		/// <c>386/486</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void umov(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Umov_rm16_r16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>umov instruction.<br/>
		/// <br/>
		/// <c>UMOV r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F 11 /r</c><br/>
		/// <br/>
		/// <c>386/486</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void umov(AssemblerMemoryOperand dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Umov_rm16_r16;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>umov instruction.<br/>
		/// <br/>
		/// <c>UMOV r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F 11 /r</c><br/>
		/// <br/>
		/// <c>386/486</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void umov(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Umov_rm32_r32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>umov instruction.<br/>
		/// <br/>
		/// <c>UMOV r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F 11 /r</c><br/>
		/// <br/>
		/// <c>386/486</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void umov(AssemblerMemoryOperand dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Umov_rm32_r32;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>umov instruction.<br/>
		/// <br/>
		/// <c>UMOV r8, r/m8</c><br/>
		/// <br/>
		/// <c>0F 12 /r</c><br/>
		/// <br/>
		/// <c>386/486</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void umov(AssemblerRegister8 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Umov_r8_rm8;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>umov instruction.<br/>
		/// <br/>
		/// <c>UMOV r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 13 /r</c><br/>
		/// <br/>
		/// <c>386/486</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void umov(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Umov_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>umov instruction.<br/>
		/// <br/>
		/// <c>UMOV r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 13 /r</c><br/>
		/// <br/>
		/// <c>386/486</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void umov(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Umov_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>umwait instruction.<br/>
		/// <br/>
		/// <c>UMWAIT r32, &lt;edx&gt;, &lt;eax&gt;</c><br/>
		/// <br/>
		/// <c>F2 0F AE /6</c><br/>
		/// <br/>
		/// <c>WAITPKG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void umwait(AssemblerRegister32 dst) {
			Code op;
			op = Code.Umwait_r32;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>umwait instruction.<br/>
		/// <br/>
		/// <c>UMWAIT r64, &lt;edx&gt;, &lt;eax&gt;</c><br/>
		/// <br/>
		/// <c>F2 REX.W 0F AE /6</c><br/>
		/// <br/>
		/// <c>WAITPKG</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void umwait(AssemblerRegister64 dst) {
			Code op;
			op = Code.Umwait_r64;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>unpckhpd instruction.<br/>
		/// <br/>
		/// <c>UNPCKHPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 15 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void unpckhpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Unpckhpd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>unpckhpd instruction.<br/>
		/// <br/>
		/// <c>UNPCKHPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 15 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void unpckhpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Unpckhpd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>unpckhps instruction.<br/>
		/// <br/>
		/// <c>UNPCKHPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 15 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void unpckhps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Unpckhps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>unpckhps instruction.<br/>
		/// <br/>
		/// <c>UNPCKHPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 15 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void unpckhps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Unpckhps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>unpcklpd instruction.<br/>
		/// <br/>
		/// <c>UNPCKLPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 14 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void unpcklpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Unpcklpd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>unpcklpd instruction.<br/>
		/// <br/>
		/// <c>UNPCKLPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 14 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void unpcklpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Unpcklpd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>unpcklps instruction.<br/>
		/// <br/>
		/// <c>UNPCKLPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 14 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void unpcklps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Unpcklps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>unpcklps instruction.<br/>
		/// <br/>
		/// <c>UNPCKLPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 14 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void unpcklps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Unpcklps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>v4fmaddps instruction.<br/>
		/// <br/>
		/// <c>V4FMADDPS zmm1 {k1}{z}, zmm2+3, m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F38.W0 9A /r</c><br/>
		/// <br/>
		/// <c>AVX512_4FMAPS</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void v4fmaddps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_V4fmaddps_zmm_k1z_zmmp3_m128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>v4fmaddss instruction.<br/>
		/// <br/>
		/// <c>V4FMADDSS xmm1 {k1}{z}, xmm2+3, m128</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F38.W0 9B /r</c><br/>
		/// <br/>
		/// <c>AVX512_4FMAPS</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void v4fmaddss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_V4fmaddss_xmm_k1z_xmmp3_m128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>v4fnmaddps instruction.<br/>
		/// <br/>
		/// <c>V4FNMADDPS zmm1 {k1}{z}, zmm2+3, m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F38.W0 AA /r</c><br/>
		/// <br/>
		/// <c>AVX512_4FMAPS</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void v4fnmaddps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_V4fnmaddps_zmm_k1z_zmmp3_m128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>v4fnmaddss instruction.<br/>
		/// <br/>
		/// <c>V4FNMADDSS xmm1 {k1}{z}, xmm2+3, m128</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F38.W0 AB /r</c><br/>
		/// <br/>
		/// <c>AVX512_4FMAPS</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void v4fnmaddss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_V4fnmaddss_xmm_k1z_xmmp3_m128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vaddpd instruction.<br/>
		/// <br/>
		/// <c>VADDPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 58 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VADDPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vaddpd_xmm_xmm_xmmm128 : Code.EVEX_Vaddpd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vaddpd instruction.<br/>
		/// <br/>
		/// <c>VADDPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 58 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VADDPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vaddpd_ymm_ymm_ymmm256 : Code.EVEX_Vaddpd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vaddpd instruction.<br/>
		/// <br/>
		/// <c>VADDPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaddpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vaddpd_zmm_k1z_zmm_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vaddpd instruction.<br/>
		/// <br/>
		/// <c>VADDPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 58 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VADDPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vaddpd_xmm_k1z_xmm_xmmm128b64;
			} else op = PreferVex ? Code.VEX_Vaddpd_xmm_xmm_xmmm128 : Code.EVEX_Vaddpd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vaddpd instruction.<br/>
		/// <br/>
		/// <c>VADDPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 58 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VADDPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vaddpd_ymm_k1z_ymm_ymmm256b64;
			} else op = PreferVex ? Code.VEX_Vaddpd_ymm_ymm_ymmm256 : Code.EVEX_Vaddpd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vaddpd instruction.<br/>
		/// <br/>
		/// <c>VADDPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaddpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vaddpd_zmm_k1z_zmm_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vaddps instruction.<br/>
		/// <br/>
		/// <c>VADDPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 58 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VADDPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vaddps_xmm_xmm_xmmm128 : Code.EVEX_Vaddps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vaddps instruction.<br/>
		/// <br/>
		/// <c>VADDPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 58 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VADDPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vaddps_ymm_ymm_ymmm256 : Code.EVEX_Vaddps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vaddps instruction.<br/>
		/// <br/>
		/// <c>VADDPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaddps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vaddps_zmm_k1z_zmm_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vaddps instruction.<br/>
		/// <br/>
		/// <c>VADDPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 58 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VADDPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vaddps_xmm_k1z_xmm_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vaddps_xmm_xmm_xmmm128 : Code.EVEX_Vaddps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vaddps instruction.<br/>
		/// <br/>
		/// <c>VADDPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 58 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VADDPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vaddps_ymm_k1z_ymm_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vaddps_ymm_ymm_ymmm256 : Code.EVEX_Vaddps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vaddps instruction.<br/>
		/// <br/>
		/// <c>VADDPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaddps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vaddps_zmm_k1z_zmm_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vaddsd instruction.<br/>
		/// <br/>
		/// <c>VADDSD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG 58 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VADDSD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaddsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vaddsd_xmm_xmm_xmmm64 : Code.EVEX_Vaddsd_xmm_k1z_xmm_xmmm64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vaddsd instruction.<br/>
		/// <br/>
		/// <c>VADDSD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG 58 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VADDSD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaddsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vaddsd_xmm_xmm_xmmm64 : Code.EVEX_Vaddsd_xmm_k1z_xmm_xmmm64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vaddss instruction.<br/>
		/// <br/>
		/// <c>VADDSS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG 58 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VADDSS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaddss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vaddss_xmm_xmm_xmmm32 : Code.EVEX_Vaddss_xmm_k1z_xmm_xmmm32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vaddss instruction.<br/>
		/// <br/>
		/// <c>VADDSS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG 58 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VADDSS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaddss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vaddss_xmm_xmm_xmmm32 : Code.EVEX_Vaddss_xmm_k1z_xmm_xmmm32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vaddsubpd instruction.<br/>
		/// <br/>
		/// <c>VADDSUBPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG D0 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaddsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.VEX_Vaddsubpd_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vaddsubpd instruction.<br/>
		/// <br/>
		/// <c>VADDSUBPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG D0 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaddsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.VEX_Vaddsubpd_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vaddsubpd instruction.<br/>
		/// <br/>
		/// <c>VADDSUBPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG D0 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaddsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vaddsubpd_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vaddsubpd instruction.<br/>
		/// <br/>
		/// <c>VADDSUBPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG D0 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaddsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vaddsubpd_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vaddsubps instruction.<br/>
		/// <br/>
		/// <c>VADDSUBPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.F2.0F.WIG D0 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaddsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.VEX_Vaddsubps_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vaddsubps instruction.<br/>
		/// <br/>
		/// <c>VADDSUBPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.F2.0F.WIG D0 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaddsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.VEX_Vaddsubps_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vaddsubps instruction.<br/>
		/// <br/>
		/// <c>VADDSUBPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.F2.0F.WIG D0 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaddsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vaddsubps_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vaddsubps instruction.<br/>
		/// <br/>
		/// <c>VADDSUBPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.F2.0F.WIG D0 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaddsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vaddsubps_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vaesdec instruction.<br/>
		/// <br/>
		/// <c>VAESDEC xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG DE /r</c><br/>
		/// <br/>
		/// <c>AES and AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VAESDEC xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG DE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaesdec(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vaesdec_xmm_xmm_xmmm128 : Code.EVEX_Vaesdec_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vaesdec instruction.<br/>
		/// <br/>
		/// <c>VAESDEC ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG DE /r</c><br/>
		/// <br/>
		/// <c>VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VAESDEC ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG DE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaesdec(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vaesdec_ymm_ymm_ymmm256 : Code.EVEX_Vaesdec_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vaesdec instruction.<br/>
		/// <br/>
		/// <c>VAESDEC zmm1, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG DE /r</c><br/>
		/// <br/>
		/// <c>AVX512F and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaesdec(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vaesdec_zmm_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vaesdec instruction.<br/>
		/// <br/>
		/// <c>VAESDEC xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG DE /r</c><br/>
		/// <br/>
		/// <c>AES and AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VAESDEC xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG DE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaesdec(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vaesdec_xmm_xmm_xmmm128 : Code.EVEX_Vaesdec_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vaesdec instruction.<br/>
		/// <br/>
		/// <c>VAESDEC ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG DE /r</c><br/>
		/// <br/>
		/// <c>VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VAESDEC ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG DE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaesdec(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vaesdec_ymm_ymm_ymmm256 : Code.EVEX_Vaesdec_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vaesdec instruction.<br/>
		/// <br/>
		/// <c>VAESDEC zmm1, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG DE /r</c><br/>
		/// <br/>
		/// <c>AVX512F and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaesdec(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vaesdec_zmm_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vaesdeclast instruction.<br/>
		/// <br/>
		/// <c>VAESDECLAST xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG DF /r</c><br/>
		/// <br/>
		/// <c>AES and AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VAESDECLAST xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG DF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaesdeclast(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vaesdeclast_xmm_xmm_xmmm128 : Code.EVEX_Vaesdeclast_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vaesdeclast instruction.<br/>
		/// <br/>
		/// <c>VAESDECLAST ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG DF /r</c><br/>
		/// <br/>
		/// <c>VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VAESDECLAST ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG DF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaesdeclast(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vaesdeclast_ymm_ymm_ymmm256 : Code.EVEX_Vaesdeclast_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vaesdeclast instruction.<br/>
		/// <br/>
		/// <c>VAESDECLAST zmm1, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG DF /r</c><br/>
		/// <br/>
		/// <c>AVX512F and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaesdeclast(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vaesdeclast_zmm_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vaesdeclast instruction.<br/>
		/// <br/>
		/// <c>VAESDECLAST xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG DF /r</c><br/>
		/// <br/>
		/// <c>AES and AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VAESDECLAST xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG DF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaesdeclast(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vaesdeclast_xmm_xmm_xmmm128 : Code.EVEX_Vaesdeclast_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vaesdeclast instruction.<br/>
		/// <br/>
		/// <c>VAESDECLAST ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG DF /r</c><br/>
		/// <br/>
		/// <c>VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VAESDECLAST ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG DF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaesdeclast(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vaesdeclast_ymm_ymm_ymmm256 : Code.EVEX_Vaesdeclast_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vaesdeclast instruction.<br/>
		/// <br/>
		/// <c>VAESDECLAST zmm1, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG DF /r</c><br/>
		/// <br/>
		/// <c>AVX512F and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaesdeclast(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vaesdeclast_zmm_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vaesenc instruction.<br/>
		/// <br/>
		/// <c>VAESENC xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG DC /r</c><br/>
		/// <br/>
		/// <c>AES and AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VAESENC xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG DC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaesenc(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vaesenc_xmm_xmm_xmmm128 : Code.EVEX_Vaesenc_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vaesenc instruction.<br/>
		/// <br/>
		/// <c>VAESENC ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG DC /r</c><br/>
		/// <br/>
		/// <c>VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VAESENC ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG DC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaesenc(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vaesenc_ymm_ymm_ymmm256 : Code.EVEX_Vaesenc_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vaesenc instruction.<br/>
		/// <br/>
		/// <c>VAESENC zmm1, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG DC /r</c><br/>
		/// <br/>
		/// <c>AVX512F and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaesenc(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vaesenc_zmm_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vaesenc instruction.<br/>
		/// <br/>
		/// <c>VAESENC xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG DC /r</c><br/>
		/// <br/>
		/// <c>AES and AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VAESENC xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG DC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaesenc(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vaesenc_xmm_xmm_xmmm128 : Code.EVEX_Vaesenc_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vaesenc instruction.<br/>
		/// <br/>
		/// <c>VAESENC ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG DC /r</c><br/>
		/// <br/>
		/// <c>VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VAESENC ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG DC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaesenc(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vaesenc_ymm_ymm_ymmm256 : Code.EVEX_Vaesenc_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vaesenc instruction.<br/>
		/// <br/>
		/// <c>VAESENC zmm1, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG DC /r</c><br/>
		/// <br/>
		/// <c>AVX512F and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaesenc(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vaesenc_zmm_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vaesenclast instruction.<br/>
		/// <br/>
		/// <c>VAESENCLAST xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG DD /r</c><br/>
		/// <br/>
		/// <c>AES and AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VAESENCLAST xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG DD /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaesenclast(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vaesenclast_xmm_xmm_xmmm128 : Code.EVEX_Vaesenclast_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vaesenclast instruction.<br/>
		/// <br/>
		/// <c>VAESENCLAST ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG DD /r</c><br/>
		/// <br/>
		/// <c>VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VAESENCLAST ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG DD /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaesenclast(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vaesenclast_ymm_ymm_ymmm256 : Code.EVEX_Vaesenclast_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vaesenclast instruction.<br/>
		/// <br/>
		/// <c>VAESENCLAST zmm1, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG DD /r</c><br/>
		/// <br/>
		/// <c>AVX512F and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaesenclast(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vaesenclast_zmm_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vaesenclast instruction.<br/>
		/// <br/>
		/// <c>VAESENCLAST xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG DD /r</c><br/>
		/// <br/>
		/// <c>AES and AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VAESENCLAST xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG DD /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaesenclast(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vaesenclast_xmm_xmm_xmmm128 : Code.EVEX_Vaesenclast_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vaesenclast instruction.<br/>
		/// <br/>
		/// <c>VAESENCLAST ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG DD /r</c><br/>
		/// <br/>
		/// <c>VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VAESENCLAST ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG DD /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaesenclast(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vaesenclast_ymm_ymm_ymmm256 : Code.EVEX_Vaesenclast_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vaesenclast instruction.<br/>
		/// <br/>
		/// <c>VAESENCLAST zmm1, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG DD /r</c><br/>
		/// <br/>
		/// <c>AVX512F and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaesenclast(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vaesenclast_zmm_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vaesimc instruction.<br/>
		/// <br/>
		/// <c>VAESIMC xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG DB /r</c><br/>
		/// <br/>
		/// <c>AES and AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaesimc(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.VEX_Vaesimc_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vaesimc instruction.<br/>
		/// <br/>
		/// <c>VAESIMC xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG DB /r</c><br/>
		/// <br/>
		/// <c>AES and AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaesimc(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.VEX_Vaesimc_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vaeskeygenassist instruction.<br/>
		/// <br/>
		/// <c>VAESKEYGENASSIST xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG DF /r ib</c><br/>
		/// <br/>
		/// <c>AES and AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaeskeygenassist(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.VEX_Vaeskeygenassist_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>vaeskeygenassist instruction.<br/>
		/// <br/>
		/// <c>VAESKEYGENASSIST xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG DF /r ib</c><br/>
		/// <br/>
		/// <c>AES and AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaeskeygenassist(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.VEX_Vaeskeygenassist_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vaeskeygenassist instruction.<br/>
		/// <br/>
		/// <c>VAESKEYGENASSIST xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG DF /r ib</c><br/>
		/// <br/>
		/// <c>AES and AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaeskeygenassist(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.VEX_Vaeskeygenassist_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>vaeskeygenassist instruction.<br/>
		/// <br/>
		/// <c>VAESKEYGENASSIST xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG DF /r ib</c><br/>
		/// <br/>
		/// <c>AES and AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vaeskeygenassist(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.VEX_Vaeskeygenassist_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>valignd instruction.<br/>
		/// <br/>
		/// <c>VALIGND xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void valignd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Valignd_xmm_k1z_xmm_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>valignd instruction.<br/>
		/// <br/>
		/// <c>VALIGND ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void valignd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Valignd_ymm_k1z_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>valignd instruction.<br/>
		/// <br/>
		/// <c>VALIGND zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void valignd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Valignd_zmm_k1z_zmm_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>valignd instruction.<br/>
		/// <br/>
		/// <c>VALIGND xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void valignd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Valignd_xmm_k1z_xmm_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>valignd instruction.<br/>
		/// <br/>
		/// <c>VALIGND ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void valignd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Valignd_ymm_k1z_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>valignd instruction.<br/>
		/// <br/>
		/// <c>VALIGND zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void valignd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Valignd_zmm_k1z_zmm_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>valignd instruction.<br/>
		/// <br/>
		/// <c>VALIGND xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void valignd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Valignd_xmm_k1z_xmm_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>valignd instruction.<br/>
		/// <br/>
		/// <c>VALIGND ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void valignd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Valignd_ymm_k1z_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>valignd instruction.<br/>
		/// <br/>
		/// <c>VALIGND zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void valignd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Valignd_zmm_k1z_zmm_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>valignd instruction.<br/>
		/// <br/>
		/// <c>VALIGND xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void valignd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Valignd_xmm_k1z_xmm_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>valignd instruction.<br/>
		/// <br/>
		/// <c>VALIGND ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void valignd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Valignd_ymm_k1z_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>valignd instruction.<br/>
		/// <br/>
		/// <c>VALIGND zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void valignd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Valignd_zmm_k1z_zmm_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>valignq instruction.<br/>
		/// <br/>
		/// <c>VALIGNQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void valignq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Valignq_xmm_k1z_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>valignq instruction.<br/>
		/// <br/>
		/// <c>VALIGNQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void valignq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Valignq_ymm_k1z_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>valignq instruction.<br/>
		/// <br/>
		/// <c>VALIGNQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void valignq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Valignq_zmm_k1z_zmm_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>valignq instruction.<br/>
		/// <br/>
		/// <c>VALIGNQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void valignq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Valignq_xmm_k1z_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>valignq instruction.<br/>
		/// <br/>
		/// <c>VALIGNQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void valignq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Valignq_ymm_k1z_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>valignq instruction.<br/>
		/// <br/>
		/// <c>VALIGNQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void valignq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Valignq_zmm_k1z_zmm_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>valignq instruction.<br/>
		/// <br/>
		/// <c>VALIGNQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void valignq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Valignq_xmm_k1z_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>valignq instruction.<br/>
		/// <br/>
		/// <c>VALIGNQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void valignq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Valignq_ymm_k1z_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>valignq instruction.<br/>
		/// <br/>
		/// <c>VALIGNQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void valignq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Valignq_zmm_k1z_zmm_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>valignq instruction.<br/>
		/// <br/>
		/// <c>VALIGNQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void valignq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Valignq_xmm_k1z_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>valignq instruction.<br/>
		/// <br/>
		/// <c>VALIGNQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void valignq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Valignq_ymm_k1z_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>valignq instruction.<br/>
		/// <br/>
		/// <c>VALIGNQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void valignq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Valignq_zmm_k1z_zmm_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vandnpd instruction.<br/>
		/// <br/>
		/// <c>VANDNPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 55 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VANDNPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vandnpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vandnpd_xmm_xmm_xmmm128 : Code.EVEX_Vandnpd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vandnpd instruction.<br/>
		/// <br/>
		/// <c>VANDNPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 55 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VANDNPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vandnpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vandnpd_ymm_ymm_ymmm256 : Code.EVEX_Vandnpd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vandnpd instruction.<br/>
		/// <br/>
		/// <c>VANDNPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vandnpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vandnpd_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vandnpd instruction.<br/>
		/// <br/>
		/// <c>VANDNPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 55 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VANDNPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vandnpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vandnpd_xmm_k1z_xmm_xmmm128b64;
			} else op = PreferVex ? Code.VEX_Vandnpd_xmm_xmm_xmmm128 : Code.EVEX_Vandnpd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vandnpd instruction.<br/>
		/// <br/>
		/// <c>VANDNPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 55 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VANDNPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vandnpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vandnpd_ymm_k1z_ymm_ymmm256b64;
			} else op = PreferVex ? Code.VEX_Vandnpd_ymm_ymm_ymmm256 : Code.EVEX_Vandnpd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vandnpd instruction.<br/>
		/// <br/>
		/// <c>VANDNPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vandnpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vandnpd_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vandnps instruction.<br/>
		/// <br/>
		/// <c>VANDNPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 55 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VANDNPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vandnps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vandnps_xmm_xmm_xmmm128 : Code.EVEX_Vandnps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vandnps instruction.<br/>
		/// <br/>
		/// <c>VANDNPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 55 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VANDNPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vandnps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vandnps_ymm_ymm_ymmm256 : Code.EVEX_Vandnps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vandnps instruction.<br/>
		/// <br/>
		/// <c>VANDNPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vandnps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vandnps_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vandnps instruction.<br/>
		/// <br/>
		/// <c>VANDNPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 55 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VANDNPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vandnps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vandnps_xmm_k1z_xmm_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vandnps_xmm_xmm_xmmm128 : Code.EVEX_Vandnps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vandnps instruction.<br/>
		/// <br/>
		/// <c>VANDNPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 55 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VANDNPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vandnps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vandnps_ymm_k1z_ymm_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vandnps_ymm_ymm_ymmm256 : Code.EVEX_Vandnps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vandnps instruction.<br/>
		/// <br/>
		/// <c>VANDNPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vandnps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vandnps_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vandpd instruction.<br/>
		/// <br/>
		/// <c>VANDPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 54 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VANDPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vandpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vandpd_xmm_xmm_xmmm128 : Code.EVEX_Vandpd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vandpd instruction.<br/>
		/// <br/>
		/// <c>VANDPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 54 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VANDPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vandpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vandpd_ymm_ymm_ymmm256 : Code.EVEX_Vandpd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vandpd instruction.<br/>
		/// <br/>
		/// <c>VANDPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vandpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vandpd_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vandpd instruction.<br/>
		/// <br/>
		/// <c>VANDPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 54 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VANDPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vandpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vandpd_xmm_k1z_xmm_xmmm128b64;
			} else op = PreferVex ? Code.VEX_Vandpd_xmm_xmm_xmmm128 : Code.EVEX_Vandpd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vandpd instruction.<br/>
		/// <br/>
		/// <c>VANDPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 54 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VANDPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vandpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vandpd_ymm_k1z_ymm_ymmm256b64;
			} else op = PreferVex ? Code.VEX_Vandpd_ymm_ymm_ymmm256 : Code.EVEX_Vandpd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vandpd instruction.<br/>
		/// <br/>
		/// <c>VANDPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vandpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vandpd_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vandps instruction.<br/>
		/// <br/>
		/// <c>VANDPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 54 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VANDPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vandps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vandps_xmm_xmm_xmmm128 : Code.EVEX_Vandps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vandps instruction.<br/>
		/// <br/>
		/// <c>VANDPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 54 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VANDPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vandps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vandps_ymm_ymm_ymmm256 : Code.EVEX_Vandps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vandps instruction.<br/>
		/// <br/>
		/// <c>VANDPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vandps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vandps_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vandps instruction.<br/>
		/// <br/>
		/// <c>VANDPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 54 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VANDPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vandps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vandps_xmm_k1z_xmm_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vandps_xmm_xmm_xmmm128 : Code.EVEX_Vandps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vandps instruction.<br/>
		/// <br/>
		/// <c>VANDPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 54 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VANDPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vandps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vandps_ymm_k1z_ymm_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vandps_ymm_ymm_ymmm256 : Code.EVEX_Vandps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vandps instruction.<br/>
		/// <br/>
		/// <c>VANDPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vandps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vandps_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vblendmpd instruction.<br/>
		/// <br/>
		/// <c>VBLENDMPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 65 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vblendmpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vblendmpd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vblendmpd instruction.<br/>
		/// <br/>
		/// <c>VBLENDMPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 65 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vblendmpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vblendmpd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vblendmpd instruction.<br/>
		/// <br/>
		/// <c>VBLENDMPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 65 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vblendmpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vblendmpd_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vblendmpd instruction.<br/>
		/// <br/>
		/// <c>VBLENDMPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 65 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vblendmpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vblendmpd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vblendmpd instruction.<br/>
		/// <br/>
		/// <c>VBLENDMPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 65 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vblendmpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vblendmpd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vblendmpd instruction.<br/>
		/// <br/>
		/// <c>VBLENDMPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 65 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vblendmpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vblendmpd_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vblendmps instruction.<br/>
		/// <br/>
		/// <c>VBLENDMPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 65 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vblendmps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vblendmps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vblendmps instruction.<br/>
		/// <br/>
		/// <c>VBLENDMPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 65 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vblendmps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vblendmps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vblendmps instruction.<br/>
		/// <br/>
		/// <c>VBLENDMPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 65 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vblendmps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vblendmps_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vblendmps instruction.<br/>
		/// <br/>
		/// <c>VBLENDMPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 65 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vblendmps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vblendmps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vblendmps instruction.<br/>
		/// <br/>
		/// <c>VBLENDMPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 65 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vblendmps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vblendmps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vblendmps instruction.<br/>
		/// <br/>
		/// <c>VBLENDMPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 65 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vblendmps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vblendmps_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vblendpd instruction.<br/>
		/// <br/>
		/// <c>VBLENDPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 0D /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vblendpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vblendpd_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm));
		}
		/// <summary>vblendpd instruction.<br/>
		/// <br/>
		/// <c>VBLENDPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 0D /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vblendpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vblendpd_ymm_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm));
		}
		/// <summary>vblendpd instruction.<br/>
		/// <br/>
		/// <c>VBLENDPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 0D /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vblendpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vblendpd_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vblendpd instruction.<br/>
		/// <br/>
		/// <c>VBLENDPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 0D /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vblendpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vblendpd_ymm_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vblendpd instruction.<br/>
		/// <br/>
		/// <c>VBLENDPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 0D /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vblendpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.VEX_Vblendpd_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm));
		}
		/// <summary>vblendpd instruction.<br/>
		/// <br/>
		/// <c>VBLENDPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 0D /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vblendpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = Code.VEX_Vblendpd_ymm_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm));
		}
		/// <summary>vblendpd instruction.<br/>
		/// <br/>
		/// <c>VBLENDPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 0D /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vblendpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.VEX_Vblendpd_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vblendpd instruction.<br/>
		/// <br/>
		/// <c>VBLENDPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 0D /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vblendpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.VEX_Vblendpd_ymm_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vblendps instruction.<br/>
		/// <br/>
		/// <c>VBLENDPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 0C /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vblendps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vblendps_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm));
		}
		/// <summary>vblendps instruction.<br/>
		/// <br/>
		/// <c>VBLENDPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 0C /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vblendps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vblendps_ymm_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm));
		}
		/// <summary>vblendps instruction.<br/>
		/// <br/>
		/// <c>VBLENDPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 0C /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vblendps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vblendps_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vblendps instruction.<br/>
		/// <br/>
		/// <c>VBLENDPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 0C /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vblendps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vblendps_ymm_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vblendps instruction.<br/>
		/// <br/>
		/// <c>VBLENDPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 0C /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vblendps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.VEX_Vblendps_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm));
		}
		/// <summary>vblendps instruction.<br/>
		/// <br/>
		/// <c>VBLENDPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 0C /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vblendps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = Code.VEX_Vblendps_ymm_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm));
		}
		/// <summary>vblendps instruction.<br/>
		/// <br/>
		/// <c>VBLENDPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 0C /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vblendps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.VEX_Vblendps_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vblendps instruction.<br/>
		/// <br/>
		/// <c>VBLENDPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 0C /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vblendps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.VEX_Vblendps_ymm_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vblendvpd instruction.<br/>
		/// <br/>
		/// <c>VBLENDVPD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 4B /r /is4</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vblendvpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.VEX_Vblendvpd_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vblendvpd instruction.<br/>
		/// <br/>
		/// <c>VBLENDVPD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 4B /r /is4</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vblendvpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.VEX_Vblendvpd_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vblendvpd instruction.<br/>
		/// <br/>
		/// <c>VBLENDVPD ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 4B /r /is4</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vblendvpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3) {
			Code op;
			op = Code.VEX_Vblendvpd_ymm_ymm_ymmm256_ymm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vblendvpd instruction.<br/>
		/// <br/>
		/// <c>VBLENDVPD ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 4B /r /is4</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vblendvpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3) {
			Code op;
			op = Code.VEX_Vblendvpd_ymm_ymm_ymmm256_ymm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vblendvps instruction.<br/>
		/// <br/>
		/// <c>VBLENDVPS xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 4A /r /is4</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vblendvps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.VEX_Vblendvps_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vblendvps instruction.<br/>
		/// <br/>
		/// <c>VBLENDVPS xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 4A /r /is4</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vblendvps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.VEX_Vblendvps_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vblendvps instruction.<br/>
		/// <br/>
		/// <c>VBLENDVPS ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 4A /r /is4</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vblendvps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3) {
			Code op;
			op = Code.VEX_Vblendvps_ymm_ymm_ymmm256_ymm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vblendvps instruction.<br/>
		/// <br/>
		/// <c>VBLENDVPS ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 4A /r /is4</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vblendvps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3) {
			Code op;
			op = Code.VEX_Vblendvps_ymm_ymm_ymmm256_ymm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vbroadcastf128 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTF128 ymm1, m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 1A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vbroadcastf128(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.VEX_Vbroadcastf128_ymm_m128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vbroadcastf32x2 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTF32X2 ymm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 19 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vbroadcastf32x2(AssemblerRegisterYMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vbroadcastf32x2_ymm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vbroadcastf32x2 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTF32X2 zmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 19 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vbroadcastf32x2(AssemblerRegisterZMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vbroadcastf32x2_zmm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vbroadcastf32x2 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTF32X2 ymm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 19 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vbroadcastf32x2(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vbroadcastf32x2_ymm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vbroadcastf32x2 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTF32X2 zmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 19 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vbroadcastf32x2(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vbroadcastf32x2_zmm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vbroadcastf32x4 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTF32X4 ymm1 {k1}{z}, m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 1A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vbroadcastf32x4(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vbroadcastf32x4_ymm_k1z_m128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vbroadcastf32x4 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTF32X4 zmm1 {k1}{z}, m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 1A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vbroadcastf32x4(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vbroadcastf32x4_zmm_k1z_m128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vbroadcastf32x8 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTF32X8 zmm1 {k1}{z}, m256</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 1B /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vbroadcastf32x8(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vbroadcastf32x8_zmm_k1z_m256;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vbroadcastf64x2 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTF64X2 ymm1 {k1}{z}, m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 1A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vbroadcastf64x2(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vbroadcastf64x2_ymm_k1z_m128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vbroadcastf64x2 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTF64X2 zmm1 {k1}{z}, m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 1A /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vbroadcastf64x2(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vbroadcastf64x2_zmm_k1z_m128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vbroadcastf64x4 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTF64X4 zmm1 {k1}{z}, m256</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 1B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vbroadcastf64x4(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vbroadcastf64x4_zmm_k1z_m256;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vbroadcasti128 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTI128 ymm1, m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 5A /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vbroadcasti128(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.VEX_Vbroadcasti128_ymm_m128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vbroadcasti32x2 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTI32X2 xmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vbroadcasti32x2(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vbroadcasti32x2_xmm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vbroadcasti32x2 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTI32X2 ymm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vbroadcasti32x2(AssemblerRegisterYMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vbroadcasti32x2_ymm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vbroadcasti32x2 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTI32X2 zmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vbroadcasti32x2(AssemblerRegisterZMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vbroadcasti32x2_zmm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vbroadcasti32x2 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTI32X2 xmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vbroadcasti32x2(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vbroadcasti32x2_xmm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vbroadcasti32x2 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTI32X2 ymm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vbroadcasti32x2(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vbroadcasti32x2_ymm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vbroadcasti32x2 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTI32X2 zmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vbroadcasti32x2(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vbroadcasti32x2_zmm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vbroadcasti32x4 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTI32X4 ymm1 {k1}{z}, m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vbroadcasti32x4(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vbroadcasti32x4_ymm_k1z_m128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vbroadcasti32x4 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTI32X4 zmm1 {k1}{z}, m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vbroadcasti32x4(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vbroadcasti32x4_zmm_k1z_m128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vbroadcasti32x8 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTI32X8 zmm1 {k1}{z}, m256</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vbroadcasti32x8(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vbroadcasti32x8_zmm_k1z_m256;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vbroadcasti64x2 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTI64X2 ymm1 {k1}{z}, m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vbroadcasti64x2(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vbroadcasti64x2_ymm_k1z_m128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vbroadcasti64x2 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTI64X2 zmm1 {k1}{z}, m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vbroadcasti64x2(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vbroadcasti64x2_zmm_k1z_m128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vbroadcasti64x4 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTI64X4 zmm1 {k1}{z}, m256</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vbroadcasti64x4(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vbroadcasti64x4_zmm_k1z_m256;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vbroadcastsd instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTSD ymm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 19 /r</c><br/>
		/// <br/>
		/// <c>AVX (reg,mem) or AVX2 (reg,reg)</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VBROADCASTSD ymm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 19 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vbroadcastsd(AssemblerRegisterYMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vbroadcastsd_ymm_xmmm64 : Code.EVEX_Vbroadcastsd_ymm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vbroadcastsd instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTSD zmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 19 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vbroadcastsd(AssemblerRegisterZMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vbroadcastsd_zmm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vbroadcastsd instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTSD ymm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 19 /r</c><br/>
		/// <br/>
		/// <c>AVX (reg,mem) or AVX2 (reg,reg)</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VBROADCASTSD ymm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 19 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vbroadcastsd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vbroadcastsd_ymm_xmmm64 : Code.EVEX_Vbroadcastsd_ymm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vbroadcastsd instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTSD zmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 19 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vbroadcastsd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vbroadcastsd_zmm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vbroadcastss instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTSS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 18 /r</c><br/>
		/// <br/>
		/// <c>AVX (reg,mem) or AVX2 (reg,reg)</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VBROADCASTSS xmm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 18 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vbroadcastss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vbroadcastss_xmm_xmmm32 : Code.EVEX_Vbroadcastss_xmm_k1z_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vbroadcastss instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTSS ymm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 18 /r</c><br/>
		/// <br/>
		/// <c>AVX (reg,mem) or AVX2 (reg,reg)</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VBROADCASTSS ymm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 18 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vbroadcastss(AssemblerRegisterYMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vbroadcastss_ymm_xmmm32 : Code.EVEX_Vbroadcastss_ymm_k1z_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vbroadcastss instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTSS zmm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 18 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vbroadcastss(AssemblerRegisterZMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vbroadcastss_zmm_k1z_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vbroadcastss instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTSS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 18 /r</c><br/>
		/// <br/>
		/// <c>AVX (reg,mem) or AVX2 (reg,reg)</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VBROADCASTSS xmm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 18 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vbroadcastss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vbroadcastss_xmm_xmmm32 : Code.EVEX_Vbroadcastss_xmm_k1z_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vbroadcastss instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTSS ymm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 18 /r</c><br/>
		/// <br/>
		/// <c>AVX (reg,mem) or AVX2 (reg,reg)</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VBROADCASTSS ymm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 18 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vbroadcastss(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vbroadcastss_ymm_xmmm32 : Code.EVEX_Vbroadcastss_ymm_k1z_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vbroadcastss instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTSS zmm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 18 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vbroadcastss(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vbroadcastss_zmm_k1z_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vcmpeq_ospd instruction.</summary>
		public void vcmpeq_ospd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 16);
		}
		/// <summary>vcmpeq_ospd instruction.</summary>
		public void vcmpeq_ospd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 16);
		}
		/// <summary>vcmpeq_ospd instruction.</summary>
		public void vcmpeq_ospd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 16);
		}
		/// <summary>vcmpeq_ospd instruction.</summary>
		public void vcmpeq_ospd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 16);
		}
		/// <summary>vcmpeq_ospd instruction.</summary>
		public void vcmpeq_ospd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmppd(dst, src1, src2, 16);
		}
		/// <summary>vcmpeq_ospd instruction.</summary>
		public void vcmpeq_ospd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 16);
		}
		/// <summary>vcmpeq_ospd instruction.</summary>
		public void vcmpeq_ospd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 16);
		}
		/// <summary>vcmpeq_ospd instruction.</summary>
		public void vcmpeq_ospd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 16);
		}
		/// <summary>vcmpeq_ospd instruction.</summary>
		public void vcmpeq_ospd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 16);
		}
		/// <summary>vcmpeq_ospd instruction.</summary>
		public void vcmpeq_ospd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 16);
		}
		/// <summary>vcmpeq_osps instruction.</summary>
		public void vcmpeq_osps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 16);
		}
		/// <summary>vcmpeq_osps instruction.</summary>
		public void vcmpeq_osps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 16);
		}
		/// <summary>vcmpeq_osps instruction.</summary>
		public void vcmpeq_osps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 16);
		}
		/// <summary>vcmpeq_osps instruction.</summary>
		public void vcmpeq_osps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 16);
		}
		/// <summary>vcmpeq_osps instruction.</summary>
		public void vcmpeq_osps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmpps(dst, src1, src2, 16);
		}
		/// <summary>vcmpeq_osps instruction.</summary>
		public void vcmpeq_osps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 16);
		}
		/// <summary>vcmpeq_osps instruction.</summary>
		public void vcmpeq_osps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 16);
		}
		/// <summary>vcmpeq_osps instruction.</summary>
		public void vcmpeq_osps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 16);
		}
		/// <summary>vcmpeq_osps instruction.</summary>
		public void vcmpeq_osps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 16);
		}
		/// <summary>vcmpeq_osps instruction.</summary>
		public void vcmpeq_osps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 16);
		}
		/// <summary>vcmpeq_ossd instruction.</summary>
		public void vcmpeq_ossd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 16);
		}
		/// <summary>vcmpeq_ossd instruction.</summary>
		public void vcmpeq_ossd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 16);
		}
		/// <summary>vcmpeq_ossd instruction.</summary>
		public void vcmpeq_ossd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 16);
		}
		/// <summary>vcmpeq_ossd instruction.</summary>
		public void vcmpeq_ossd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 16);
		}
		/// <summary>vcmpeq_osss instruction.</summary>
		public void vcmpeq_osss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 16);
		}
		/// <summary>vcmpeq_osss instruction.</summary>
		public void vcmpeq_osss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 16);
		}
		/// <summary>vcmpeq_osss instruction.</summary>
		public void vcmpeq_osss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 16);
		}
		/// <summary>vcmpeq_osss instruction.</summary>
		public void vcmpeq_osss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 16);
		}
		/// <summary>vcmpeq_uqpd instruction.</summary>
		public void vcmpeq_uqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 8);
		}
		/// <summary>vcmpeq_uqpd instruction.</summary>
		public void vcmpeq_uqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 8);
		}
		/// <summary>vcmpeq_uqpd instruction.</summary>
		public void vcmpeq_uqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 8);
		}
		/// <summary>vcmpeq_uqpd instruction.</summary>
		public void vcmpeq_uqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 8);
		}
		/// <summary>vcmpeq_uqpd instruction.</summary>
		public void vcmpeq_uqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmppd(dst, src1, src2, 8);
		}
		/// <summary>vcmpeq_uqpd instruction.</summary>
		public void vcmpeq_uqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 8);
		}
		/// <summary>vcmpeq_uqpd instruction.</summary>
		public void vcmpeq_uqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 8);
		}
		/// <summary>vcmpeq_uqpd instruction.</summary>
		public void vcmpeq_uqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 8);
		}
		/// <summary>vcmpeq_uqpd instruction.</summary>
		public void vcmpeq_uqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 8);
		}
		/// <summary>vcmpeq_uqpd instruction.</summary>
		public void vcmpeq_uqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 8);
		}
		/// <summary>vcmpeq_uqps instruction.</summary>
		public void vcmpeq_uqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 8);
		}
		/// <summary>vcmpeq_uqps instruction.</summary>
		public void vcmpeq_uqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 8);
		}
		/// <summary>vcmpeq_uqps instruction.</summary>
		public void vcmpeq_uqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 8);
		}
		/// <summary>vcmpeq_uqps instruction.</summary>
		public void vcmpeq_uqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 8);
		}
		/// <summary>vcmpeq_uqps instruction.</summary>
		public void vcmpeq_uqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmpps(dst, src1, src2, 8);
		}
		/// <summary>vcmpeq_uqps instruction.</summary>
		public void vcmpeq_uqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 8);
		}
		/// <summary>vcmpeq_uqps instruction.</summary>
		public void vcmpeq_uqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 8);
		}
		/// <summary>vcmpeq_uqps instruction.</summary>
		public void vcmpeq_uqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 8);
		}
		/// <summary>vcmpeq_uqps instruction.</summary>
		public void vcmpeq_uqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 8);
		}
		/// <summary>vcmpeq_uqps instruction.</summary>
		public void vcmpeq_uqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 8);
		}
		/// <summary>vcmpeq_uqsd instruction.</summary>
		public void vcmpeq_uqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 8);
		}
		/// <summary>vcmpeq_uqsd instruction.</summary>
		public void vcmpeq_uqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 8);
		}
		/// <summary>vcmpeq_uqsd instruction.</summary>
		public void vcmpeq_uqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 8);
		}
		/// <summary>vcmpeq_uqsd instruction.</summary>
		public void vcmpeq_uqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 8);
		}
		/// <summary>vcmpeq_uqss instruction.</summary>
		public void vcmpeq_uqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 8);
		}
		/// <summary>vcmpeq_uqss instruction.</summary>
		public void vcmpeq_uqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 8);
		}
		/// <summary>vcmpeq_uqss instruction.</summary>
		public void vcmpeq_uqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 8);
		}
		/// <summary>vcmpeq_uqss instruction.</summary>
		public void vcmpeq_uqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 8);
		}
		/// <summary>vcmpeq_uspd instruction.</summary>
		public void vcmpeq_uspd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 24);
		}
		/// <summary>vcmpeq_uspd instruction.</summary>
		public void vcmpeq_uspd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 24);
		}
		/// <summary>vcmpeq_uspd instruction.</summary>
		public void vcmpeq_uspd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 24);
		}
		/// <summary>vcmpeq_uspd instruction.</summary>
		public void vcmpeq_uspd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 24);
		}
		/// <summary>vcmpeq_uspd instruction.</summary>
		public void vcmpeq_uspd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmppd(dst, src1, src2, 24);
		}
		/// <summary>vcmpeq_uspd instruction.</summary>
		public void vcmpeq_uspd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 24);
		}
		/// <summary>vcmpeq_uspd instruction.</summary>
		public void vcmpeq_uspd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 24);
		}
		/// <summary>vcmpeq_uspd instruction.</summary>
		public void vcmpeq_uspd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 24);
		}
		/// <summary>vcmpeq_uspd instruction.</summary>
		public void vcmpeq_uspd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 24);
		}
		/// <summary>vcmpeq_uspd instruction.</summary>
		public void vcmpeq_uspd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 24);
		}
		/// <summary>vcmpeq_usps instruction.</summary>
		public void vcmpeq_usps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 24);
		}
		/// <summary>vcmpeq_usps instruction.</summary>
		public void vcmpeq_usps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 24);
		}
		/// <summary>vcmpeq_usps instruction.</summary>
		public void vcmpeq_usps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 24);
		}
		/// <summary>vcmpeq_usps instruction.</summary>
		public void vcmpeq_usps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 24);
		}
		/// <summary>vcmpeq_usps instruction.</summary>
		public void vcmpeq_usps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmpps(dst, src1, src2, 24);
		}
		/// <summary>vcmpeq_usps instruction.</summary>
		public void vcmpeq_usps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 24);
		}
		/// <summary>vcmpeq_usps instruction.</summary>
		public void vcmpeq_usps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 24);
		}
		/// <summary>vcmpeq_usps instruction.</summary>
		public void vcmpeq_usps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 24);
		}
		/// <summary>vcmpeq_usps instruction.</summary>
		public void vcmpeq_usps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 24);
		}
		/// <summary>vcmpeq_usps instruction.</summary>
		public void vcmpeq_usps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 24);
		}
		/// <summary>vcmpeq_ussd instruction.</summary>
		public void vcmpeq_ussd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 24);
		}
		/// <summary>vcmpeq_ussd instruction.</summary>
		public void vcmpeq_ussd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 24);
		}
		/// <summary>vcmpeq_ussd instruction.</summary>
		public void vcmpeq_ussd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 24);
		}
		/// <summary>vcmpeq_ussd instruction.</summary>
		public void vcmpeq_ussd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 24);
		}
		/// <summary>vcmpeq_usss instruction.</summary>
		public void vcmpeq_usss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 24);
		}
		/// <summary>vcmpeq_usss instruction.</summary>
		public void vcmpeq_usss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 24);
		}
		/// <summary>vcmpeq_usss instruction.</summary>
		public void vcmpeq_usss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 24);
		}
		/// <summary>vcmpeq_usss instruction.</summary>
		public void vcmpeq_usss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 24);
		}
		/// <summary>vcmpeqpd instruction.</summary>
		public void vcmpeqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 0);
		}
		/// <summary>vcmpeqpd instruction.</summary>
		public void vcmpeqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 0);
		}
		/// <summary>vcmpeqpd instruction.</summary>
		public void vcmpeqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 0);
		}
		/// <summary>vcmpeqpd instruction.</summary>
		public void vcmpeqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 0);
		}
		/// <summary>vcmpeqpd instruction.</summary>
		public void vcmpeqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmppd(dst, src1, src2, 0);
		}
		/// <summary>vcmpeqpd instruction.</summary>
		public void vcmpeqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 0);
		}
		/// <summary>vcmpeqpd instruction.</summary>
		public void vcmpeqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 0);
		}
		/// <summary>vcmpeqpd instruction.</summary>
		public void vcmpeqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 0);
		}
		/// <summary>vcmpeqpd instruction.</summary>
		public void vcmpeqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 0);
		}
		/// <summary>vcmpeqpd instruction.</summary>
		public void vcmpeqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 0);
		}
		/// <summary>vcmpeqps instruction.</summary>
		public void vcmpeqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 0);
		}
		/// <summary>vcmpeqps instruction.</summary>
		public void vcmpeqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 0);
		}
		/// <summary>vcmpeqps instruction.</summary>
		public void vcmpeqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 0);
		}
		/// <summary>vcmpeqps instruction.</summary>
		public void vcmpeqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 0);
		}
		/// <summary>vcmpeqps instruction.</summary>
		public void vcmpeqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmpps(dst, src1, src2, 0);
		}
		/// <summary>vcmpeqps instruction.</summary>
		public void vcmpeqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 0);
		}
		/// <summary>vcmpeqps instruction.</summary>
		public void vcmpeqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 0);
		}
		/// <summary>vcmpeqps instruction.</summary>
		public void vcmpeqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 0);
		}
		/// <summary>vcmpeqps instruction.</summary>
		public void vcmpeqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 0);
		}
		/// <summary>vcmpeqps instruction.</summary>
		public void vcmpeqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 0);
		}
		/// <summary>vcmpeqsd instruction.</summary>
		public void vcmpeqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 0);
		}
		/// <summary>vcmpeqsd instruction.</summary>
		public void vcmpeqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 0);
		}
		/// <summary>vcmpeqsd instruction.</summary>
		public void vcmpeqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 0);
		}
		/// <summary>vcmpeqsd instruction.</summary>
		public void vcmpeqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 0);
		}
		/// <summary>vcmpeqss instruction.</summary>
		public void vcmpeqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 0);
		}
		/// <summary>vcmpeqss instruction.</summary>
		public void vcmpeqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 0);
		}
		/// <summary>vcmpeqss instruction.</summary>
		public void vcmpeqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 0);
		}
		/// <summary>vcmpeqss instruction.</summary>
		public void vcmpeqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 0);
		}
		/// <summary>vcmpfalse_ospd instruction.</summary>
		public void vcmpfalse_ospd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 27);
		}
		/// <summary>vcmpfalse_ospd instruction.</summary>
		public void vcmpfalse_ospd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 27);
		}
		/// <summary>vcmpfalse_ospd instruction.</summary>
		public void vcmpfalse_ospd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 27);
		}
		/// <summary>vcmpfalse_ospd instruction.</summary>
		public void vcmpfalse_ospd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 27);
		}
		/// <summary>vcmpfalse_ospd instruction.</summary>
		public void vcmpfalse_ospd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmppd(dst, src1, src2, 27);
		}
		/// <summary>vcmpfalse_ospd instruction.</summary>
		public void vcmpfalse_ospd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 27);
		}
		/// <summary>vcmpfalse_ospd instruction.</summary>
		public void vcmpfalse_ospd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 27);
		}
		/// <summary>vcmpfalse_ospd instruction.</summary>
		public void vcmpfalse_ospd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 27);
		}
		/// <summary>vcmpfalse_ospd instruction.</summary>
		public void vcmpfalse_ospd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 27);
		}
		/// <summary>vcmpfalse_ospd instruction.</summary>
		public void vcmpfalse_ospd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 27);
		}
		/// <summary>vcmpfalse_osps instruction.</summary>
		public void vcmpfalse_osps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 27);
		}
		/// <summary>vcmpfalse_osps instruction.</summary>
		public void vcmpfalse_osps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 27);
		}
		/// <summary>vcmpfalse_osps instruction.</summary>
		public void vcmpfalse_osps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 27);
		}
		/// <summary>vcmpfalse_osps instruction.</summary>
		public void vcmpfalse_osps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 27);
		}
		/// <summary>vcmpfalse_osps instruction.</summary>
		public void vcmpfalse_osps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmpps(dst, src1, src2, 27);
		}
		/// <summary>vcmpfalse_osps instruction.</summary>
		public void vcmpfalse_osps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 27);
		}
		/// <summary>vcmpfalse_osps instruction.</summary>
		public void vcmpfalse_osps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 27);
		}
		/// <summary>vcmpfalse_osps instruction.</summary>
		public void vcmpfalse_osps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 27);
		}
		/// <summary>vcmpfalse_osps instruction.</summary>
		public void vcmpfalse_osps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 27);
		}
		/// <summary>vcmpfalse_osps instruction.</summary>
		public void vcmpfalse_osps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 27);
		}
		/// <summary>vcmpfalse_ossd instruction.</summary>
		public void vcmpfalse_ossd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 27);
		}
		/// <summary>vcmpfalse_ossd instruction.</summary>
		public void vcmpfalse_ossd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 27);
		}
		/// <summary>vcmpfalse_ossd instruction.</summary>
		public void vcmpfalse_ossd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 27);
		}
		/// <summary>vcmpfalse_ossd instruction.</summary>
		public void vcmpfalse_ossd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 27);
		}
		/// <summary>vcmpfalse_osss instruction.</summary>
		public void vcmpfalse_osss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 27);
		}
		/// <summary>vcmpfalse_osss instruction.</summary>
		public void vcmpfalse_osss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 27);
		}
		/// <summary>vcmpfalse_osss instruction.</summary>
		public void vcmpfalse_osss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 27);
		}
		/// <summary>vcmpfalse_osss instruction.</summary>
		public void vcmpfalse_osss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 27);
		}
		/// <summary>vcmpfalsepd instruction.</summary>
		public void vcmpfalsepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 11);
		}
		/// <summary>vcmpfalsepd instruction.</summary>
		public void vcmpfalsepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 11);
		}
		/// <summary>vcmpfalsepd instruction.</summary>
		public void vcmpfalsepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 11);
		}
		/// <summary>vcmpfalsepd instruction.</summary>
		public void vcmpfalsepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 11);
		}
		/// <summary>vcmpfalsepd instruction.</summary>
		public void vcmpfalsepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmppd(dst, src1, src2, 11);
		}
		/// <summary>vcmpfalsepd instruction.</summary>
		public void vcmpfalsepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 11);
		}
		/// <summary>vcmpfalsepd instruction.</summary>
		public void vcmpfalsepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 11);
		}
		/// <summary>vcmpfalsepd instruction.</summary>
		public void vcmpfalsepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 11);
		}
		/// <summary>vcmpfalsepd instruction.</summary>
		public void vcmpfalsepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 11);
		}
		/// <summary>vcmpfalsepd instruction.</summary>
		public void vcmpfalsepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 11);
		}
		/// <summary>vcmpfalseps instruction.</summary>
		public void vcmpfalseps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 11);
		}
		/// <summary>vcmpfalseps instruction.</summary>
		public void vcmpfalseps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 11);
		}
		/// <summary>vcmpfalseps instruction.</summary>
		public void vcmpfalseps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 11);
		}
		/// <summary>vcmpfalseps instruction.</summary>
		public void vcmpfalseps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 11);
		}
		/// <summary>vcmpfalseps instruction.</summary>
		public void vcmpfalseps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmpps(dst, src1, src2, 11);
		}
		/// <summary>vcmpfalseps instruction.</summary>
		public void vcmpfalseps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 11);
		}
		/// <summary>vcmpfalseps instruction.</summary>
		public void vcmpfalseps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 11);
		}
		/// <summary>vcmpfalseps instruction.</summary>
		public void vcmpfalseps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 11);
		}
		/// <summary>vcmpfalseps instruction.</summary>
		public void vcmpfalseps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 11);
		}
		/// <summary>vcmpfalseps instruction.</summary>
		public void vcmpfalseps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 11);
		}
		/// <summary>vcmpfalsesd instruction.</summary>
		public void vcmpfalsesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 11);
		}
		/// <summary>vcmpfalsesd instruction.</summary>
		public void vcmpfalsesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 11);
		}
		/// <summary>vcmpfalsesd instruction.</summary>
		public void vcmpfalsesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 11);
		}
		/// <summary>vcmpfalsesd instruction.</summary>
		public void vcmpfalsesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 11);
		}
		/// <summary>vcmpfalsess instruction.</summary>
		public void vcmpfalsess(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 11);
		}
		/// <summary>vcmpfalsess instruction.</summary>
		public void vcmpfalsess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 11);
		}
		/// <summary>vcmpfalsess instruction.</summary>
		public void vcmpfalsess(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 11);
		}
		/// <summary>vcmpfalsess instruction.</summary>
		public void vcmpfalsess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 11);
		}
		/// <summary>vcmpge_oqpd instruction.</summary>
		public void vcmpge_oqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 29);
		}
		/// <summary>vcmpge_oqpd instruction.</summary>
		public void vcmpge_oqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 29);
		}
		/// <summary>vcmpge_oqpd instruction.</summary>
		public void vcmpge_oqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 29);
		}
		/// <summary>vcmpge_oqpd instruction.</summary>
		public void vcmpge_oqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 29);
		}
		/// <summary>vcmpge_oqpd instruction.</summary>
		public void vcmpge_oqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmppd(dst, src1, src2, 29);
		}
		/// <summary>vcmpge_oqpd instruction.</summary>
		public void vcmpge_oqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 29);
		}
		/// <summary>vcmpge_oqpd instruction.</summary>
		public void vcmpge_oqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 29);
		}
		/// <summary>vcmpge_oqpd instruction.</summary>
		public void vcmpge_oqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 29);
		}
		/// <summary>vcmpge_oqpd instruction.</summary>
		public void vcmpge_oqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 29);
		}
		/// <summary>vcmpge_oqpd instruction.</summary>
		public void vcmpge_oqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 29);
		}
		/// <summary>vcmpge_oqps instruction.</summary>
		public void vcmpge_oqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 29);
		}
		/// <summary>vcmpge_oqps instruction.</summary>
		public void vcmpge_oqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 29);
		}
		/// <summary>vcmpge_oqps instruction.</summary>
		public void vcmpge_oqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 29);
		}
		/// <summary>vcmpge_oqps instruction.</summary>
		public void vcmpge_oqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 29);
		}
		/// <summary>vcmpge_oqps instruction.</summary>
		public void vcmpge_oqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmpps(dst, src1, src2, 29);
		}
		/// <summary>vcmpge_oqps instruction.</summary>
		public void vcmpge_oqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 29);
		}
		/// <summary>vcmpge_oqps instruction.</summary>
		public void vcmpge_oqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 29);
		}
		/// <summary>vcmpge_oqps instruction.</summary>
		public void vcmpge_oqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 29);
		}
		/// <summary>vcmpge_oqps instruction.</summary>
		public void vcmpge_oqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 29);
		}
		/// <summary>vcmpge_oqps instruction.</summary>
		public void vcmpge_oqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 29);
		}
		/// <summary>vcmpge_oqsd instruction.</summary>
		public void vcmpge_oqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 29);
		}
		/// <summary>vcmpge_oqsd instruction.</summary>
		public void vcmpge_oqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 29);
		}
		/// <summary>vcmpge_oqsd instruction.</summary>
		public void vcmpge_oqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 29);
		}
		/// <summary>vcmpge_oqsd instruction.</summary>
		public void vcmpge_oqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 29);
		}
		/// <summary>vcmpge_oqss instruction.</summary>
		public void vcmpge_oqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 29);
		}
		/// <summary>vcmpge_oqss instruction.</summary>
		public void vcmpge_oqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 29);
		}
		/// <summary>vcmpge_oqss instruction.</summary>
		public void vcmpge_oqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 29);
		}
		/// <summary>vcmpge_oqss instruction.</summary>
		public void vcmpge_oqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 29);
		}
		/// <summary>vcmpgepd instruction.</summary>
		public void vcmpgepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 13);
		}
		/// <summary>vcmpgepd instruction.</summary>
		public void vcmpgepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 13);
		}
		/// <summary>vcmpgepd instruction.</summary>
		public void vcmpgepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 13);
		}
		/// <summary>vcmpgepd instruction.</summary>
		public void vcmpgepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 13);
		}
		/// <summary>vcmpgepd instruction.</summary>
		public void vcmpgepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmppd(dst, src1, src2, 13);
		}
		/// <summary>vcmpgepd instruction.</summary>
		public void vcmpgepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 13);
		}
		/// <summary>vcmpgepd instruction.</summary>
		public void vcmpgepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 13);
		}
		/// <summary>vcmpgepd instruction.</summary>
		public void vcmpgepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 13);
		}
		/// <summary>vcmpgepd instruction.</summary>
		public void vcmpgepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 13);
		}
		/// <summary>vcmpgepd instruction.</summary>
		public void vcmpgepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 13);
		}
		/// <summary>vcmpgeps instruction.</summary>
		public void vcmpgeps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 13);
		}
		/// <summary>vcmpgeps instruction.</summary>
		public void vcmpgeps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 13);
		}
		/// <summary>vcmpgeps instruction.</summary>
		public void vcmpgeps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 13);
		}
		/// <summary>vcmpgeps instruction.</summary>
		public void vcmpgeps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 13);
		}
		/// <summary>vcmpgeps instruction.</summary>
		public void vcmpgeps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmpps(dst, src1, src2, 13);
		}
		/// <summary>vcmpgeps instruction.</summary>
		public void vcmpgeps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 13);
		}
		/// <summary>vcmpgeps instruction.</summary>
		public void vcmpgeps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 13);
		}
		/// <summary>vcmpgeps instruction.</summary>
		public void vcmpgeps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 13);
		}
		/// <summary>vcmpgeps instruction.</summary>
		public void vcmpgeps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 13);
		}
		/// <summary>vcmpgeps instruction.</summary>
		public void vcmpgeps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 13);
		}
		/// <summary>vcmpgesd instruction.</summary>
		public void vcmpgesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 13);
		}
		/// <summary>vcmpgesd instruction.</summary>
		public void vcmpgesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 13);
		}
		/// <summary>vcmpgesd instruction.</summary>
		public void vcmpgesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 13);
		}
		/// <summary>vcmpgesd instruction.</summary>
		public void vcmpgesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 13);
		}
		/// <summary>vcmpgess instruction.</summary>
		public void vcmpgess(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 13);
		}
		/// <summary>vcmpgess instruction.</summary>
		public void vcmpgess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 13);
		}
		/// <summary>vcmpgess instruction.</summary>
		public void vcmpgess(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 13);
		}
		/// <summary>vcmpgess instruction.</summary>
		public void vcmpgess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 13);
		}
		/// <summary>vcmpgt_oqpd instruction.</summary>
		public void vcmpgt_oqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 30);
		}
		/// <summary>vcmpgt_oqpd instruction.</summary>
		public void vcmpgt_oqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 30);
		}
		/// <summary>vcmpgt_oqpd instruction.</summary>
		public void vcmpgt_oqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 30);
		}
		/// <summary>vcmpgt_oqpd instruction.</summary>
		public void vcmpgt_oqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 30);
		}
		/// <summary>vcmpgt_oqpd instruction.</summary>
		public void vcmpgt_oqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmppd(dst, src1, src2, 30);
		}
		/// <summary>vcmpgt_oqpd instruction.</summary>
		public void vcmpgt_oqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 30);
		}
		/// <summary>vcmpgt_oqpd instruction.</summary>
		public void vcmpgt_oqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 30);
		}
		/// <summary>vcmpgt_oqpd instruction.</summary>
		public void vcmpgt_oqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 30);
		}
		/// <summary>vcmpgt_oqpd instruction.</summary>
		public void vcmpgt_oqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 30);
		}
		/// <summary>vcmpgt_oqpd instruction.</summary>
		public void vcmpgt_oqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 30);
		}
		/// <summary>vcmpgt_oqps instruction.</summary>
		public void vcmpgt_oqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 30);
		}
		/// <summary>vcmpgt_oqps instruction.</summary>
		public void vcmpgt_oqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 30);
		}
		/// <summary>vcmpgt_oqps instruction.</summary>
		public void vcmpgt_oqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 30);
		}
		/// <summary>vcmpgt_oqps instruction.</summary>
		public void vcmpgt_oqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 30);
		}
		/// <summary>vcmpgt_oqps instruction.</summary>
		public void vcmpgt_oqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmpps(dst, src1, src2, 30);
		}
		/// <summary>vcmpgt_oqps instruction.</summary>
		public void vcmpgt_oqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 30);
		}
		/// <summary>vcmpgt_oqps instruction.</summary>
		public void vcmpgt_oqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 30);
		}
		/// <summary>vcmpgt_oqps instruction.</summary>
		public void vcmpgt_oqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 30);
		}
		/// <summary>vcmpgt_oqps instruction.</summary>
		public void vcmpgt_oqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 30);
		}
		/// <summary>vcmpgt_oqps instruction.</summary>
		public void vcmpgt_oqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 30);
		}
		/// <summary>vcmpgt_oqsd instruction.</summary>
		public void vcmpgt_oqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 30);
		}
		/// <summary>vcmpgt_oqsd instruction.</summary>
		public void vcmpgt_oqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 30);
		}
		/// <summary>vcmpgt_oqsd instruction.</summary>
		public void vcmpgt_oqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 30);
		}
		/// <summary>vcmpgt_oqsd instruction.</summary>
		public void vcmpgt_oqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 30);
		}
		/// <summary>vcmpgt_oqss instruction.</summary>
		public void vcmpgt_oqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 30);
		}
		/// <summary>vcmpgt_oqss instruction.</summary>
		public void vcmpgt_oqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 30);
		}
		/// <summary>vcmpgt_oqss instruction.</summary>
		public void vcmpgt_oqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 30);
		}
		/// <summary>vcmpgt_oqss instruction.</summary>
		public void vcmpgt_oqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 30);
		}
		/// <summary>vcmpgtpd instruction.</summary>
		public void vcmpgtpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 14);
		}
		/// <summary>vcmpgtpd instruction.</summary>
		public void vcmpgtpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 14);
		}
		/// <summary>vcmpgtpd instruction.</summary>
		public void vcmpgtpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 14);
		}
		/// <summary>vcmpgtpd instruction.</summary>
		public void vcmpgtpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 14);
		}
		/// <summary>vcmpgtpd instruction.</summary>
		public void vcmpgtpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmppd(dst, src1, src2, 14);
		}
		/// <summary>vcmpgtpd instruction.</summary>
		public void vcmpgtpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 14);
		}
		/// <summary>vcmpgtpd instruction.</summary>
		public void vcmpgtpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 14);
		}
		/// <summary>vcmpgtpd instruction.</summary>
		public void vcmpgtpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 14);
		}
		/// <summary>vcmpgtpd instruction.</summary>
		public void vcmpgtpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 14);
		}
		/// <summary>vcmpgtpd instruction.</summary>
		public void vcmpgtpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 14);
		}
		/// <summary>vcmpgtps instruction.</summary>
		public void vcmpgtps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 14);
		}
		/// <summary>vcmpgtps instruction.</summary>
		public void vcmpgtps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 14);
		}
		/// <summary>vcmpgtps instruction.</summary>
		public void vcmpgtps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 14);
		}
		/// <summary>vcmpgtps instruction.</summary>
		public void vcmpgtps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 14);
		}
		/// <summary>vcmpgtps instruction.</summary>
		public void vcmpgtps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmpps(dst, src1, src2, 14);
		}
		/// <summary>vcmpgtps instruction.</summary>
		public void vcmpgtps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 14);
		}
		/// <summary>vcmpgtps instruction.</summary>
		public void vcmpgtps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 14);
		}
		/// <summary>vcmpgtps instruction.</summary>
		public void vcmpgtps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 14);
		}
		/// <summary>vcmpgtps instruction.</summary>
		public void vcmpgtps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 14);
		}
		/// <summary>vcmpgtps instruction.</summary>
		public void vcmpgtps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 14);
		}
		/// <summary>vcmpgtsd instruction.</summary>
		public void vcmpgtsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 14);
		}
		/// <summary>vcmpgtsd instruction.</summary>
		public void vcmpgtsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 14);
		}
		/// <summary>vcmpgtsd instruction.</summary>
		public void vcmpgtsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 14);
		}
		/// <summary>vcmpgtsd instruction.</summary>
		public void vcmpgtsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 14);
		}
		/// <summary>vcmpgtss instruction.</summary>
		public void vcmpgtss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 14);
		}
		/// <summary>vcmpgtss instruction.</summary>
		public void vcmpgtss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 14);
		}
		/// <summary>vcmpgtss instruction.</summary>
		public void vcmpgtss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 14);
		}
		/// <summary>vcmpgtss instruction.</summary>
		public void vcmpgtss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 14);
		}
		/// <summary>vcmple_oqpd instruction.</summary>
		public void vcmple_oqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 18);
		}
		/// <summary>vcmple_oqpd instruction.</summary>
		public void vcmple_oqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 18);
		}
		/// <summary>vcmple_oqpd instruction.</summary>
		public void vcmple_oqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 18);
		}
		/// <summary>vcmple_oqpd instruction.</summary>
		public void vcmple_oqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 18);
		}
		/// <summary>vcmple_oqpd instruction.</summary>
		public void vcmple_oqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmppd(dst, src1, src2, 18);
		}
		/// <summary>vcmple_oqpd instruction.</summary>
		public void vcmple_oqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 18);
		}
		/// <summary>vcmple_oqpd instruction.</summary>
		public void vcmple_oqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 18);
		}
		/// <summary>vcmple_oqpd instruction.</summary>
		public void vcmple_oqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 18);
		}
		/// <summary>vcmple_oqpd instruction.</summary>
		public void vcmple_oqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 18);
		}
		/// <summary>vcmple_oqpd instruction.</summary>
		public void vcmple_oqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 18);
		}
		/// <summary>vcmple_oqps instruction.</summary>
		public void vcmple_oqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 18);
		}
		/// <summary>vcmple_oqps instruction.</summary>
		public void vcmple_oqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 18);
		}
		/// <summary>vcmple_oqps instruction.</summary>
		public void vcmple_oqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 18);
		}
		/// <summary>vcmple_oqps instruction.</summary>
		public void vcmple_oqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 18);
		}
		/// <summary>vcmple_oqps instruction.</summary>
		public void vcmple_oqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmpps(dst, src1, src2, 18);
		}
		/// <summary>vcmple_oqps instruction.</summary>
		public void vcmple_oqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 18);
		}
		/// <summary>vcmple_oqps instruction.</summary>
		public void vcmple_oqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 18);
		}
		/// <summary>vcmple_oqps instruction.</summary>
		public void vcmple_oqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 18);
		}
		/// <summary>vcmple_oqps instruction.</summary>
		public void vcmple_oqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 18);
		}
		/// <summary>vcmple_oqps instruction.</summary>
		public void vcmple_oqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 18);
		}
		/// <summary>vcmple_oqsd instruction.</summary>
		public void vcmple_oqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 18);
		}
		/// <summary>vcmple_oqsd instruction.</summary>
		public void vcmple_oqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 18);
		}
		/// <summary>vcmple_oqsd instruction.</summary>
		public void vcmple_oqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 18);
		}
		/// <summary>vcmple_oqsd instruction.</summary>
		public void vcmple_oqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 18);
		}
		/// <summary>vcmple_oqss instruction.</summary>
		public void vcmple_oqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 18);
		}
		/// <summary>vcmple_oqss instruction.</summary>
		public void vcmple_oqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 18);
		}
		/// <summary>vcmple_oqss instruction.</summary>
		public void vcmple_oqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 18);
		}
		/// <summary>vcmple_oqss instruction.</summary>
		public void vcmple_oqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 18);
		}
		/// <summary>vcmplepd instruction.</summary>
		public void vcmplepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 2);
		}
		/// <summary>vcmplepd instruction.</summary>
		public void vcmplepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 2);
		}
		/// <summary>vcmplepd instruction.</summary>
		public void vcmplepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 2);
		}
		/// <summary>vcmplepd instruction.</summary>
		public void vcmplepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 2);
		}
		/// <summary>vcmplepd instruction.</summary>
		public void vcmplepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmppd(dst, src1, src2, 2);
		}
		/// <summary>vcmplepd instruction.</summary>
		public void vcmplepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 2);
		}
		/// <summary>vcmplepd instruction.</summary>
		public void vcmplepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 2);
		}
		/// <summary>vcmplepd instruction.</summary>
		public void vcmplepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 2);
		}
		/// <summary>vcmplepd instruction.</summary>
		public void vcmplepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 2);
		}
		/// <summary>vcmplepd instruction.</summary>
		public void vcmplepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 2);
		}
		/// <summary>vcmpleps instruction.</summary>
		public void vcmpleps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 2);
		}
		/// <summary>vcmpleps instruction.</summary>
		public void vcmpleps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 2);
		}
		/// <summary>vcmpleps instruction.</summary>
		public void vcmpleps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 2);
		}
		/// <summary>vcmpleps instruction.</summary>
		public void vcmpleps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 2);
		}
		/// <summary>vcmpleps instruction.</summary>
		public void vcmpleps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmpps(dst, src1, src2, 2);
		}
		/// <summary>vcmpleps instruction.</summary>
		public void vcmpleps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 2);
		}
		/// <summary>vcmpleps instruction.</summary>
		public void vcmpleps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 2);
		}
		/// <summary>vcmpleps instruction.</summary>
		public void vcmpleps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 2);
		}
		/// <summary>vcmpleps instruction.</summary>
		public void vcmpleps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 2);
		}
		/// <summary>vcmpleps instruction.</summary>
		public void vcmpleps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 2);
		}
		/// <summary>vcmplesd instruction.</summary>
		public void vcmplesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 2);
		}
		/// <summary>vcmplesd instruction.</summary>
		public void vcmplesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 2);
		}
		/// <summary>vcmplesd instruction.</summary>
		public void vcmplesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 2);
		}
		/// <summary>vcmplesd instruction.</summary>
		public void vcmplesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 2);
		}
		/// <summary>vcmpless instruction.</summary>
		public void vcmpless(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 2);
		}
		/// <summary>vcmpless instruction.</summary>
		public void vcmpless(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 2);
		}
		/// <summary>vcmpless instruction.</summary>
		public void vcmpless(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 2);
		}
		/// <summary>vcmpless instruction.</summary>
		public void vcmpless(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 2);
		}
		/// <summary>vcmplt_oqpd instruction.</summary>
		public void vcmplt_oqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 17);
		}
		/// <summary>vcmplt_oqpd instruction.</summary>
		public void vcmplt_oqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 17);
		}
		/// <summary>vcmplt_oqpd instruction.</summary>
		public void vcmplt_oqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 17);
		}
		/// <summary>vcmplt_oqpd instruction.</summary>
		public void vcmplt_oqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 17);
		}
		/// <summary>vcmplt_oqpd instruction.</summary>
		public void vcmplt_oqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmppd(dst, src1, src2, 17);
		}
		/// <summary>vcmplt_oqpd instruction.</summary>
		public void vcmplt_oqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 17);
		}
		/// <summary>vcmplt_oqpd instruction.</summary>
		public void vcmplt_oqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 17);
		}
		/// <summary>vcmplt_oqpd instruction.</summary>
		public void vcmplt_oqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 17);
		}
		/// <summary>vcmplt_oqpd instruction.</summary>
		public void vcmplt_oqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 17);
		}
		/// <summary>vcmplt_oqpd instruction.</summary>
		public void vcmplt_oqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 17);
		}
		/// <summary>vcmplt_oqps instruction.</summary>
		public void vcmplt_oqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 17);
		}
		/// <summary>vcmplt_oqps instruction.</summary>
		public void vcmplt_oqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 17);
		}
		/// <summary>vcmplt_oqps instruction.</summary>
		public void vcmplt_oqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 17);
		}
		/// <summary>vcmplt_oqps instruction.</summary>
		public void vcmplt_oqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 17);
		}
		/// <summary>vcmplt_oqps instruction.</summary>
		public void vcmplt_oqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmpps(dst, src1, src2, 17);
		}
		/// <summary>vcmplt_oqps instruction.</summary>
		public void vcmplt_oqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 17);
		}
		/// <summary>vcmplt_oqps instruction.</summary>
		public void vcmplt_oqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 17);
		}
		/// <summary>vcmplt_oqps instruction.</summary>
		public void vcmplt_oqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 17);
		}
		/// <summary>vcmplt_oqps instruction.</summary>
		public void vcmplt_oqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 17);
		}
		/// <summary>vcmplt_oqps instruction.</summary>
		public void vcmplt_oqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 17);
		}
		/// <summary>vcmplt_oqsd instruction.</summary>
		public void vcmplt_oqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 17);
		}
		/// <summary>vcmplt_oqsd instruction.</summary>
		public void vcmplt_oqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 17);
		}
		/// <summary>vcmplt_oqsd instruction.</summary>
		public void vcmplt_oqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 17);
		}
		/// <summary>vcmplt_oqsd instruction.</summary>
		public void vcmplt_oqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 17);
		}
		/// <summary>vcmplt_oqss instruction.</summary>
		public void vcmplt_oqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 17);
		}
		/// <summary>vcmplt_oqss instruction.</summary>
		public void vcmplt_oqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 17);
		}
		/// <summary>vcmplt_oqss instruction.</summary>
		public void vcmplt_oqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 17);
		}
		/// <summary>vcmplt_oqss instruction.</summary>
		public void vcmplt_oqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 17);
		}
		/// <summary>vcmpltpd instruction.</summary>
		public void vcmpltpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 1);
		}
		/// <summary>vcmpltpd instruction.</summary>
		public void vcmpltpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 1);
		}
		/// <summary>vcmpltpd instruction.</summary>
		public void vcmpltpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 1);
		}
		/// <summary>vcmpltpd instruction.</summary>
		public void vcmpltpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 1);
		}
		/// <summary>vcmpltpd instruction.</summary>
		public void vcmpltpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmppd(dst, src1, src2, 1);
		}
		/// <summary>vcmpltpd instruction.</summary>
		public void vcmpltpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 1);
		}
		/// <summary>vcmpltpd instruction.</summary>
		public void vcmpltpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 1);
		}
		/// <summary>vcmpltpd instruction.</summary>
		public void vcmpltpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 1);
		}
		/// <summary>vcmpltpd instruction.</summary>
		public void vcmpltpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 1);
		}
		/// <summary>vcmpltpd instruction.</summary>
		public void vcmpltpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 1);
		}
		/// <summary>vcmpltps instruction.</summary>
		public void vcmpltps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 1);
		}
		/// <summary>vcmpltps instruction.</summary>
		public void vcmpltps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 1);
		}
		/// <summary>vcmpltps instruction.</summary>
		public void vcmpltps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 1);
		}
		/// <summary>vcmpltps instruction.</summary>
		public void vcmpltps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 1);
		}
		/// <summary>vcmpltps instruction.</summary>
		public void vcmpltps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmpps(dst, src1, src2, 1);
		}
		/// <summary>vcmpltps instruction.</summary>
		public void vcmpltps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 1);
		}
		/// <summary>vcmpltps instruction.</summary>
		public void vcmpltps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 1);
		}
		/// <summary>vcmpltps instruction.</summary>
		public void vcmpltps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 1);
		}
		/// <summary>vcmpltps instruction.</summary>
		public void vcmpltps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 1);
		}
		/// <summary>vcmpltps instruction.</summary>
		public void vcmpltps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 1);
		}
		/// <summary>vcmpltsd instruction.</summary>
		public void vcmpltsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 1);
		}
		/// <summary>vcmpltsd instruction.</summary>
		public void vcmpltsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 1);
		}
		/// <summary>vcmpltsd instruction.</summary>
		public void vcmpltsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 1);
		}
		/// <summary>vcmpltsd instruction.</summary>
		public void vcmpltsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 1);
		}
		/// <summary>vcmpltss instruction.</summary>
		public void vcmpltss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 1);
		}
		/// <summary>vcmpltss instruction.</summary>
		public void vcmpltss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 1);
		}
		/// <summary>vcmpltss instruction.</summary>
		public void vcmpltss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 1);
		}
		/// <summary>vcmpltss instruction.</summary>
		public void vcmpltss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 1);
		}
		/// <summary>vcmpneq_oqpd instruction.</summary>
		public void vcmpneq_oqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 12);
		}
		/// <summary>vcmpneq_oqpd instruction.</summary>
		public void vcmpneq_oqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 12);
		}
		/// <summary>vcmpneq_oqpd instruction.</summary>
		public void vcmpneq_oqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 12);
		}
		/// <summary>vcmpneq_oqpd instruction.</summary>
		public void vcmpneq_oqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 12);
		}
		/// <summary>vcmpneq_oqpd instruction.</summary>
		public void vcmpneq_oqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmppd(dst, src1, src2, 12);
		}
		/// <summary>vcmpneq_oqpd instruction.</summary>
		public void vcmpneq_oqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 12);
		}
		/// <summary>vcmpneq_oqpd instruction.</summary>
		public void vcmpneq_oqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 12);
		}
		/// <summary>vcmpneq_oqpd instruction.</summary>
		public void vcmpneq_oqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 12);
		}
		/// <summary>vcmpneq_oqpd instruction.</summary>
		public void vcmpneq_oqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 12);
		}
		/// <summary>vcmpneq_oqpd instruction.</summary>
		public void vcmpneq_oqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 12);
		}
		/// <summary>vcmpneq_oqps instruction.</summary>
		public void vcmpneq_oqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 12);
		}
		/// <summary>vcmpneq_oqps instruction.</summary>
		public void vcmpneq_oqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 12);
		}
		/// <summary>vcmpneq_oqps instruction.</summary>
		public void vcmpneq_oqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 12);
		}
		/// <summary>vcmpneq_oqps instruction.</summary>
		public void vcmpneq_oqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 12);
		}
		/// <summary>vcmpneq_oqps instruction.</summary>
		public void vcmpneq_oqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmpps(dst, src1, src2, 12);
		}
		/// <summary>vcmpneq_oqps instruction.</summary>
		public void vcmpneq_oqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 12);
		}
		/// <summary>vcmpneq_oqps instruction.</summary>
		public void vcmpneq_oqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 12);
		}
		/// <summary>vcmpneq_oqps instruction.</summary>
		public void vcmpneq_oqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 12);
		}
		/// <summary>vcmpneq_oqps instruction.</summary>
		public void vcmpneq_oqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 12);
		}
		/// <summary>vcmpneq_oqps instruction.</summary>
		public void vcmpneq_oqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 12);
		}
		/// <summary>vcmpneq_oqsd instruction.</summary>
		public void vcmpneq_oqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 12);
		}
		/// <summary>vcmpneq_oqsd instruction.</summary>
		public void vcmpneq_oqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 12);
		}
		/// <summary>vcmpneq_oqsd instruction.</summary>
		public void vcmpneq_oqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 12);
		}
		/// <summary>vcmpneq_oqsd instruction.</summary>
		public void vcmpneq_oqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 12);
		}
		/// <summary>vcmpneq_oqss instruction.</summary>
		public void vcmpneq_oqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 12);
		}
		/// <summary>vcmpneq_oqss instruction.</summary>
		public void vcmpneq_oqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 12);
		}
		/// <summary>vcmpneq_oqss instruction.</summary>
		public void vcmpneq_oqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 12);
		}
		/// <summary>vcmpneq_oqss instruction.</summary>
		public void vcmpneq_oqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 12);
		}
		/// <summary>vcmpneq_ospd instruction.</summary>
		public void vcmpneq_ospd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 28);
		}
		/// <summary>vcmpneq_ospd instruction.</summary>
		public void vcmpneq_ospd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 28);
		}
		/// <summary>vcmpneq_ospd instruction.</summary>
		public void vcmpneq_ospd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 28);
		}
		/// <summary>vcmpneq_ospd instruction.</summary>
		public void vcmpneq_ospd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 28);
		}
		/// <summary>vcmpneq_ospd instruction.</summary>
		public void vcmpneq_ospd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmppd(dst, src1, src2, 28);
		}
		/// <summary>vcmpneq_ospd instruction.</summary>
		public void vcmpneq_ospd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 28);
		}
		/// <summary>vcmpneq_ospd instruction.</summary>
		public void vcmpneq_ospd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 28);
		}
		/// <summary>vcmpneq_ospd instruction.</summary>
		public void vcmpneq_ospd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 28);
		}
		/// <summary>vcmpneq_ospd instruction.</summary>
		public void vcmpneq_ospd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 28);
		}
		/// <summary>vcmpneq_ospd instruction.</summary>
		public void vcmpneq_ospd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 28);
		}
		/// <summary>vcmpneq_osps instruction.</summary>
		public void vcmpneq_osps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 28);
		}
		/// <summary>vcmpneq_osps instruction.</summary>
		public void vcmpneq_osps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 28);
		}
		/// <summary>vcmpneq_osps instruction.</summary>
		public void vcmpneq_osps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 28);
		}
		/// <summary>vcmpneq_osps instruction.</summary>
		public void vcmpneq_osps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 28);
		}
		/// <summary>vcmpneq_osps instruction.</summary>
		public void vcmpneq_osps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmpps(dst, src1, src2, 28);
		}
		/// <summary>vcmpneq_osps instruction.</summary>
		public void vcmpneq_osps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 28);
		}
		/// <summary>vcmpneq_osps instruction.</summary>
		public void vcmpneq_osps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 28);
		}
		/// <summary>vcmpneq_osps instruction.</summary>
		public void vcmpneq_osps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 28);
		}
		/// <summary>vcmpneq_osps instruction.</summary>
		public void vcmpneq_osps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 28);
		}
		/// <summary>vcmpneq_osps instruction.</summary>
		public void vcmpneq_osps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 28);
		}
		/// <summary>vcmpneq_ossd instruction.</summary>
		public void vcmpneq_ossd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 28);
		}
		/// <summary>vcmpneq_ossd instruction.</summary>
		public void vcmpneq_ossd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 28);
		}
		/// <summary>vcmpneq_ossd instruction.</summary>
		public void vcmpneq_ossd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 28);
		}
		/// <summary>vcmpneq_ossd instruction.</summary>
		public void vcmpneq_ossd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 28);
		}
		/// <summary>vcmpneq_osss instruction.</summary>
		public void vcmpneq_osss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 28);
		}
		/// <summary>vcmpneq_osss instruction.</summary>
		public void vcmpneq_osss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 28);
		}
		/// <summary>vcmpneq_osss instruction.</summary>
		public void vcmpneq_osss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 28);
		}
		/// <summary>vcmpneq_osss instruction.</summary>
		public void vcmpneq_osss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 28);
		}
		/// <summary>vcmpneq_uspd instruction.</summary>
		public void vcmpneq_uspd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 20);
		}
		/// <summary>vcmpneq_uspd instruction.</summary>
		public void vcmpneq_uspd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 20);
		}
		/// <summary>vcmpneq_uspd instruction.</summary>
		public void vcmpneq_uspd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 20);
		}
		/// <summary>vcmpneq_uspd instruction.</summary>
		public void vcmpneq_uspd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 20);
		}
		/// <summary>vcmpneq_uspd instruction.</summary>
		public void vcmpneq_uspd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmppd(dst, src1, src2, 20);
		}
		/// <summary>vcmpneq_uspd instruction.</summary>
		public void vcmpneq_uspd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 20);
		}
		/// <summary>vcmpneq_uspd instruction.</summary>
		public void vcmpneq_uspd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 20);
		}
		/// <summary>vcmpneq_uspd instruction.</summary>
		public void vcmpneq_uspd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 20);
		}
		/// <summary>vcmpneq_uspd instruction.</summary>
		public void vcmpneq_uspd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 20);
		}
		/// <summary>vcmpneq_uspd instruction.</summary>
		public void vcmpneq_uspd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 20);
		}
		/// <summary>vcmpneq_usps instruction.</summary>
		public void vcmpneq_usps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 20);
		}
		/// <summary>vcmpneq_usps instruction.</summary>
		public void vcmpneq_usps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 20);
		}
		/// <summary>vcmpneq_usps instruction.</summary>
		public void vcmpneq_usps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 20);
		}
		/// <summary>vcmpneq_usps instruction.</summary>
		public void vcmpneq_usps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 20);
		}
		/// <summary>vcmpneq_usps instruction.</summary>
		public void vcmpneq_usps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmpps(dst, src1, src2, 20);
		}
		/// <summary>vcmpneq_usps instruction.</summary>
		public void vcmpneq_usps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 20);
		}
		/// <summary>vcmpneq_usps instruction.</summary>
		public void vcmpneq_usps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 20);
		}
		/// <summary>vcmpneq_usps instruction.</summary>
		public void vcmpneq_usps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 20);
		}
		/// <summary>vcmpneq_usps instruction.</summary>
		public void vcmpneq_usps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 20);
		}
		/// <summary>vcmpneq_usps instruction.</summary>
		public void vcmpneq_usps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 20);
		}
		/// <summary>vcmpneq_ussd instruction.</summary>
		public void vcmpneq_ussd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 20);
		}
		/// <summary>vcmpneq_ussd instruction.</summary>
		public void vcmpneq_ussd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 20);
		}
		/// <summary>vcmpneq_ussd instruction.</summary>
		public void vcmpneq_ussd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 20);
		}
		/// <summary>vcmpneq_ussd instruction.</summary>
		public void vcmpneq_ussd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 20);
		}
		/// <summary>vcmpneq_usss instruction.</summary>
		public void vcmpneq_usss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 20);
		}
		/// <summary>vcmpneq_usss instruction.</summary>
		public void vcmpneq_usss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 20);
		}
		/// <summary>vcmpneq_usss instruction.</summary>
		public void vcmpneq_usss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 20);
		}
		/// <summary>vcmpneq_usss instruction.</summary>
		public void vcmpneq_usss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 20);
		}
		/// <summary>vcmpneqpd instruction.</summary>
		public void vcmpneqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 4);
		}
		/// <summary>vcmpneqpd instruction.</summary>
		public void vcmpneqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 4);
		}
		/// <summary>vcmpneqpd instruction.</summary>
		public void vcmpneqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 4);
		}
		/// <summary>vcmpneqpd instruction.</summary>
		public void vcmpneqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 4);
		}
		/// <summary>vcmpneqpd instruction.</summary>
		public void vcmpneqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmppd(dst, src1, src2, 4);
		}
		/// <summary>vcmpneqpd instruction.</summary>
		public void vcmpneqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 4);
		}
		/// <summary>vcmpneqpd instruction.</summary>
		public void vcmpneqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 4);
		}
		/// <summary>vcmpneqpd instruction.</summary>
		public void vcmpneqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 4);
		}
		/// <summary>vcmpneqpd instruction.</summary>
		public void vcmpneqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 4);
		}
		/// <summary>vcmpneqpd instruction.</summary>
		public void vcmpneqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 4);
		}
		/// <summary>vcmpneqps instruction.</summary>
		public void vcmpneqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 4);
		}
		/// <summary>vcmpneqps instruction.</summary>
		public void vcmpneqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 4);
		}
		/// <summary>vcmpneqps instruction.</summary>
		public void vcmpneqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 4);
		}
		/// <summary>vcmpneqps instruction.</summary>
		public void vcmpneqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 4);
		}
		/// <summary>vcmpneqps instruction.</summary>
		public void vcmpneqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmpps(dst, src1, src2, 4);
		}
		/// <summary>vcmpneqps instruction.</summary>
		public void vcmpneqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 4);
		}
		/// <summary>vcmpneqps instruction.</summary>
		public void vcmpneqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 4);
		}
		/// <summary>vcmpneqps instruction.</summary>
		public void vcmpneqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 4);
		}
		/// <summary>vcmpneqps instruction.</summary>
		public void vcmpneqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 4);
		}
		/// <summary>vcmpneqps instruction.</summary>
		public void vcmpneqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 4);
		}
		/// <summary>vcmpneqsd instruction.</summary>
		public void vcmpneqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 4);
		}
		/// <summary>vcmpneqsd instruction.</summary>
		public void vcmpneqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 4);
		}
		/// <summary>vcmpneqsd instruction.</summary>
		public void vcmpneqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 4);
		}
		/// <summary>vcmpneqsd instruction.</summary>
		public void vcmpneqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 4);
		}
		/// <summary>vcmpneqss instruction.</summary>
		public void vcmpneqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 4);
		}
		/// <summary>vcmpneqss instruction.</summary>
		public void vcmpneqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 4);
		}
		/// <summary>vcmpneqss instruction.</summary>
		public void vcmpneqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 4);
		}
		/// <summary>vcmpneqss instruction.</summary>
		public void vcmpneqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 4);
		}
		/// <summary>vcmpnge_uqpd instruction.</summary>
		public void vcmpnge_uqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 25);
		}
		/// <summary>vcmpnge_uqpd instruction.</summary>
		public void vcmpnge_uqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 25);
		}
		/// <summary>vcmpnge_uqpd instruction.</summary>
		public void vcmpnge_uqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 25);
		}
		/// <summary>vcmpnge_uqpd instruction.</summary>
		public void vcmpnge_uqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 25);
		}
		/// <summary>vcmpnge_uqpd instruction.</summary>
		public void vcmpnge_uqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmppd(dst, src1, src2, 25);
		}
		/// <summary>vcmpnge_uqpd instruction.</summary>
		public void vcmpnge_uqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 25);
		}
		/// <summary>vcmpnge_uqpd instruction.</summary>
		public void vcmpnge_uqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 25);
		}
		/// <summary>vcmpnge_uqpd instruction.</summary>
		public void vcmpnge_uqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 25);
		}
		/// <summary>vcmpnge_uqpd instruction.</summary>
		public void vcmpnge_uqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 25);
		}
		/// <summary>vcmpnge_uqpd instruction.</summary>
		public void vcmpnge_uqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 25);
		}
		/// <summary>vcmpnge_uqps instruction.</summary>
		public void vcmpnge_uqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 25);
		}
		/// <summary>vcmpnge_uqps instruction.</summary>
		public void vcmpnge_uqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 25);
		}
		/// <summary>vcmpnge_uqps instruction.</summary>
		public void vcmpnge_uqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 25);
		}
		/// <summary>vcmpnge_uqps instruction.</summary>
		public void vcmpnge_uqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 25);
		}
		/// <summary>vcmpnge_uqps instruction.</summary>
		public void vcmpnge_uqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmpps(dst, src1, src2, 25);
		}
		/// <summary>vcmpnge_uqps instruction.</summary>
		public void vcmpnge_uqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 25);
		}
		/// <summary>vcmpnge_uqps instruction.</summary>
		public void vcmpnge_uqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 25);
		}
		/// <summary>vcmpnge_uqps instruction.</summary>
		public void vcmpnge_uqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 25);
		}
		/// <summary>vcmpnge_uqps instruction.</summary>
		public void vcmpnge_uqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 25);
		}
		/// <summary>vcmpnge_uqps instruction.</summary>
		public void vcmpnge_uqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 25);
		}
		/// <summary>vcmpnge_uqsd instruction.</summary>
		public void vcmpnge_uqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 25);
		}
		/// <summary>vcmpnge_uqsd instruction.</summary>
		public void vcmpnge_uqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 25);
		}
		/// <summary>vcmpnge_uqsd instruction.</summary>
		public void vcmpnge_uqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 25);
		}
		/// <summary>vcmpnge_uqsd instruction.</summary>
		public void vcmpnge_uqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 25);
		}
		/// <summary>vcmpnge_uqss instruction.</summary>
		public void vcmpnge_uqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 25);
		}
		/// <summary>vcmpnge_uqss instruction.</summary>
		public void vcmpnge_uqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 25);
		}
		/// <summary>vcmpnge_uqss instruction.</summary>
		public void vcmpnge_uqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 25);
		}
		/// <summary>vcmpnge_uqss instruction.</summary>
		public void vcmpnge_uqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 25);
		}
		/// <summary>vcmpngepd instruction.</summary>
		public void vcmpngepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 9);
		}
		/// <summary>vcmpngepd instruction.</summary>
		public void vcmpngepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 9);
		}
		/// <summary>vcmpngepd instruction.</summary>
		public void vcmpngepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 9);
		}
		/// <summary>vcmpngepd instruction.</summary>
		public void vcmpngepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 9);
		}
		/// <summary>vcmpngepd instruction.</summary>
		public void vcmpngepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmppd(dst, src1, src2, 9);
		}
		/// <summary>vcmpngepd instruction.</summary>
		public void vcmpngepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 9);
		}
		/// <summary>vcmpngepd instruction.</summary>
		public void vcmpngepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 9);
		}
		/// <summary>vcmpngepd instruction.</summary>
		public void vcmpngepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 9);
		}
		/// <summary>vcmpngepd instruction.</summary>
		public void vcmpngepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 9);
		}
		/// <summary>vcmpngepd instruction.</summary>
		public void vcmpngepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 9);
		}
		/// <summary>vcmpngeps instruction.</summary>
		public void vcmpngeps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 9);
		}
		/// <summary>vcmpngeps instruction.</summary>
		public void vcmpngeps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 9);
		}
		/// <summary>vcmpngeps instruction.</summary>
		public void vcmpngeps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 9);
		}
		/// <summary>vcmpngeps instruction.</summary>
		public void vcmpngeps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 9);
		}
		/// <summary>vcmpngeps instruction.</summary>
		public void vcmpngeps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmpps(dst, src1, src2, 9);
		}
		/// <summary>vcmpngeps instruction.</summary>
		public void vcmpngeps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 9);
		}
		/// <summary>vcmpngeps instruction.</summary>
		public void vcmpngeps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 9);
		}
		/// <summary>vcmpngeps instruction.</summary>
		public void vcmpngeps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 9);
		}
		/// <summary>vcmpngeps instruction.</summary>
		public void vcmpngeps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 9);
		}
		/// <summary>vcmpngeps instruction.</summary>
		public void vcmpngeps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 9);
		}
		/// <summary>vcmpngesd instruction.</summary>
		public void vcmpngesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 9);
		}
		/// <summary>vcmpngesd instruction.</summary>
		public void vcmpngesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 9);
		}
		/// <summary>vcmpngesd instruction.</summary>
		public void vcmpngesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 9);
		}
		/// <summary>vcmpngesd instruction.</summary>
		public void vcmpngesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 9);
		}
		/// <summary>vcmpngess instruction.</summary>
		public void vcmpngess(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 9);
		}
		/// <summary>vcmpngess instruction.</summary>
		public void vcmpngess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 9);
		}
		/// <summary>vcmpngess instruction.</summary>
		public void vcmpngess(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 9);
		}
		/// <summary>vcmpngess instruction.</summary>
		public void vcmpngess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 9);
		}
		/// <summary>vcmpngt_uqpd instruction.</summary>
		public void vcmpngt_uqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 26);
		}
		/// <summary>vcmpngt_uqpd instruction.</summary>
		public void vcmpngt_uqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 26);
		}
		/// <summary>vcmpngt_uqpd instruction.</summary>
		public void vcmpngt_uqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 26);
		}
		/// <summary>vcmpngt_uqpd instruction.</summary>
		public void vcmpngt_uqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 26);
		}
		/// <summary>vcmpngt_uqpd instruction.</summary>
		public void vcmpngt_uqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmppd(dst, src1, src2, 26);
		}
		/// <summary>vcmpngt_uqpd instruction.</summary>
		public void vcmpngt_uqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 26);
		}
		/// <summary>vcmpngt_uqpd instruction.</summary>
		public void vcmpngt_uqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 26);
		}
		/// <summary>vcmpngt_uqpd instruction.</summary>
		public void vcmpngt_uqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 26);
		}
		/// <summary>vcmpngt_uqpd instruction.</summary>
		public void vcmpngt_uqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 26);
		}
		/// <summary>vcmpngt_uqpd instruction.</summary>
		public void vcmpngt_uqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 26);
		}
		/// <summary>vcmpngt_uqps instruction.</summary>
		public void vcmpngt_uqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 26);
		}
		/// <summary>vcmpngt_uqps instruction.</summary>
		public void vcmpngt_uqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 26);
		}
		/// <summary>vcmpngt_uqps instruction.</summary>
		public void vcmpngt_uqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 26);
		}
		/// <summary>vcmpngt_uqps instruction.</summary>
		public void vcmpngt_uqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 26);
		}
		/// <summary>vcmpngt_uqps instruction.</summary>
		public void vcmpngt_uqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmpps(dst, src1, src2, 26);
		}
		/// <summary>vcmpngt_uqps instruction.</summary>
		public void vcmpngt_uqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 26);
		}
		/// <summary>vcmpngt_uqps instruction.</summary>
		public void vcmpngt_uqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 26);
		}
		/// <summary>vcmpngt_uqps instruction.</summary>
		public void vcmpngt_uqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 26);
		}
		/// <summary>vcmpngt_uqps instruction.</summary>
		public void vcmpngt_uqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 26);
		}
		/// <summary>vcmpngt_uqps instruction.</summary>
		public void vcmpngt_uqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 26);
		}
		/// <summary>vcmpngt_uqsd instruction.</summary>
		public void vcmpngt_uqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 26);
		}
		/// <summary>vcmpngt_uqsd instruction.</summary>
		public void vcmpngt_uqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 26);
		}
		/// <summary>vcmpngt_uqsd instruction.</summary>
		public void vcmpngt_uqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 26);
		}
		/// <summary>vcmpngt_uqsd instruction.</summary>
		public void vcmpngt_uqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 26);
		}
		/// <summary>vcmpngt_uqss instruction.</summary>
		public void vcmpngt_uqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 26);
		}
		/// <summary>vcmpngt_uqss instruction.</summary>
		public void vcmpngt_uqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 26);
		}
		/// <summary>vcmpngt_uqss instruction.</summary>
		public void vcmpngt_uqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 26);
		}
		/// <summary>vcmpngt_uqss instruction.</summary>
		public void vcmpngt_uqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 26);
		}
		/// <summary>vcmpngtpd instruction.</summary>
		public void vcmpngtpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 10);
		}
		/// <summary>vcmpngtpd instruction.</summary>
		public void vcmpngtpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 10);
		}
		/// <summary>vcmpngtpd instruction.</summary>
		public void vcmpngtpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 10);
		}
		/// <summary>vcmpngtpd instruction.</summary>
		public void vcmpngtpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 10);
		}
		/// <summary>vcmpngtpd instruction.</summary>
		public void vcmpngtpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmppd(dst, src1, src2, 10);
		}
		/// <summary>vcmpngtpd instruction.</summary>
		public void vcmpngtpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 10);
		}
		/// <summary>vcmpngtpd instruction.</summary>
		public void vcmpngtpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 10);
		}
		/// <summary>vcmpngtpd instruction.</summary>
		public void vcmpngtpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 10);
		}
		/// <summary>vcmpngtpd instruction.</summary>
		public void vcmpngtpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 10);
		}
		/// <summary>vcmpngtpd instruction.</summary>
		public void vcmpngtpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 10);
		}
		/// <summary>vcmpngtps instruction.</summary>
		public void vcmpngtps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 10);
		}
		/// <summary>vcmpngtps instruction.</summary>
		public void vcmpngtps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 10);
		}
		/// <summary>vcmpngtps instruction.</summary>
		public void vcmpngtps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 10);
		}
		/// <summary>vcmpngtps instruction.</summary>
		public void vcmpngtps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 10);
		}
		/// <summary>vcmpngtps instruction.</summary>
		public void vcmpngtps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmpps(dst, src1, src2, 10);
		}
		/// <summary>vcmpngtps instruction.</summary>
		public void vcmpngtps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 10);
		}
		/// <summary>vcmpngtps instruction.</summary>
		public void vcmpngtps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 10);
		}
		/// <summary>vcmpngtps instruction.</summary>
		public void vcmpngtps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 10);
		}
		/// <summary>vcmpngtps instruction.</summary>
		public void vcmpngtps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 10);
		}
		/// <summary>vcmpngtps instruction.</summary>
		public void vcmpngtps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 10);
		}
		/// <summary>vcmpngtsd instruction.</summary>
		public void vcmpngtsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 10);
		}
		/// <summary>vcmpngtsd instruction.</summary>
		public void vcmpngtsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 10);
		}
		/// <summary>vcmpngtsd instruction.</summary>
		public void vcmpngtsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 10);
		}
		/// <summary>vcmpngtsd instruction.</summary>
		public void vcmpngtsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 10);
		}
		/// <summary>vcmpngtss instruction.</summary>
		public void vcmpngtss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 10);
		}
		/// <summary>vcmpngtss instruction.</summary>
		public void vcmpngtss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 10);
		}
		/// <summary>vcmpngtss instruction.</summary>
		public void vcmpngtss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 10);
		}
		/// <summary>vcmpngtss instruction.</summary>
		public void vcmpngtss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 10);
		}
		/// <summary>vcmpnle_uqpd instruction.</summary>
		public void vcmpnle_uqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 22);
		}
		/// <summary>vcmpnle_uqpd instruction.</summary>
		public void vcmpnle_uqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 22);
		}
		/// <summary>vcmpnle_uqpd instruction.</summary>
		public void vcmpnle_uqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 22);
		}
		/// <summary>vcmpnle_uqpd instruction.</summary>
		public void vcmpnle_uqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 22);
		}
		/// <summary>vcmpnle_uqpd instruction.</summary>
		public void vcmpnle_uqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmppd(dst, src1, src2, 22);
		}
		/// <summary>vcmpnle_uqpd instruction.</summary>
		public void vcmpnle_uqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 22);
		}
		/// <summary>vcmpnle_uqpd instruction.</summary>
		public void vcmpnle_uqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 22);
		}
		/// <summary>vcmpnle_uqpd instruction.</summary>
		public void vcmpnle_uqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 22);
		}
		/// <summary>vcmpnle_uqpd instruction.</summary>
		public void vcmpnle_uqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 22);
		}
		/// <summary>vcmpnle_uqpd instruction.</summary>
		public void vcmpnle_uqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 22);
		}
		/// <summary>vcmpnle_uqps instruction.</summary>
		public void vcmpnle_uqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 22);
		}
		/// <summary>vcmpnle_uqps instruction.</summary>
		public void vcmpnle_uqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 22);
		}
		/// <summary>vcmpnle_uqps instruction.</summary>
		public void vcmpnle_uqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 22);
		}
		/// <summary>vcmpnle_uqps instruction.</summary>
		public void vcmpnle_uqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 22);
		}
		/// <summary>vcmpnle_uqps instruction.</summary>
		public void vcmpnle_uqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmpps(dst, src1, src2, 22);
		}
		/// <summary>vcmpnle_uqps instruction.</summary>
		public void vcmpnle_uqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 22);
		}
		/// <summary>vcmpnle_uqps instruction.</summary>
		public void vcmpnle_uqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 22);
		}
		/// <summary>vcmpnle_uqps instruction.</summary>
		public void vcmpnle_uqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 22);
		}
		/// <summary>vcmpnle_uqps instruction.</summary>
		public void vcmpnle_uqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 22);
		}
		/// <summary>vcmpnle_uqps instruction.</summary>
		public void vcmpnle_uqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 22);
		}
		/// <summary>vcmpnle_uqsd instruction.</summary>
		public void vcmpnle_uqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 22);
		}
		/// <summary>vcmpnle_uqsd instruction.</summary>
		public void vcmpnle_uqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 22);
		}
		/// <summary>vcmpnle_uqsd instruction.</summary>
		public void vcmpnle_uqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 22);
		}
		/// <summary>vcmpnle_uqsd instruction.</summary>
		public void vcmpnle_uqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 22);
		}
		/// <summary>vcmpnle_uqss instruction.</summary>
		public void vcmpnle_uqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 22);
		}
		/// <summary>vcmpnle_uqss instruction.</summary>
		public void vcmpnle_uqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 22);
		}
		/// <summary>vcmpnle_uqss instruction.</summary>
		public void vcmpnle_uqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 22);
		}
		/// <summary>vcmpnle_uqss instruction.</summary>
		public void vcmpnle_uqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 22);
		}
		/// <summary>vcmpnlepd instruction.</summary>
		public void vcmpnlepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 6);
		}
		/// <summary>vcmpnlepd instruction.</summary>
		public void vcmpnlepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 6);
		}
		/// <summary>vcmpnlepd instruction.</summary>
		public void vcmpnlepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 6);
		}
		/// <summary>vcmpnlepd instruction.</summary>
		public void vcmpnlepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 6);
		}
		/// <summary>vcmpnlepd instruction.</summary>
		public void vcmpnlepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmppd(dst, src1, src2, 6);
		}
		/// <summary>vcmpnlepd instruction.</summary>
		public void vcmpnlepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 6);
		}
		/// <summary>vcmpnlepd instruction.</summary>
		public void vcmpnlepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 6);
		}
		/// <summary>vcmpnlepd instruction.</summary>
		public void vcmpnlepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 6);
		}
		/// <summary>vcmpnlepd instruction.</summary>
		public void vcmpnlepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 6);
		}
		/// <summary>vcmpnlepd instruction.</summary>
		public void vcmpnlepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 6);
		}
		/// <summary>vcmpnleps instruction.</summary>
		public void vcmpnleps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 6);
		}
		/// <summary>vcmpnleps instruction.</summary>
		public void vcmpnleps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 6);
		}
		/// <summary>vcmpnleps instruction.</summary>
		public void vcmpnleps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 6);
		}
		/// <summary>vcmpnleps instruction.</summary>
		public void vcmpnleps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 6);
		}
		/// <summary>vcmpnleps instruction.</summary>
		public void vcmpnleps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmpps(dst, src1, src2, 6);
		}
		/// <summary>vcmpnleps instruction.</summary>
		public void vcmpnleps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 6);
		}
		/// <summary>vcmpnleps instruction.</summary>
		public void vcmpnleps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 6);
		}
		/// <summary>vcmpnleps instruction.</summary>
		public void vcmpnleps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 6);
		}
		/// <summary>vcmpnleps instruction.</summary>
		public void vcmpnleps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 6);
		}
		/// <summary>vcmpnleps instruction.</summary>
		public void vcmpnleps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 6);
		}
		/// <summary>vcmpnlesd instruction.</summary>
		public void vcmpnlesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 6);
		}
		/// <summary>vcmpnlesd instruction.</summary>
		public void vcmpnlesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 6);
		}
		/// <summary>vcmpnlesd instruction.</summary>
		public void vcmpnlesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 6);
		}
		/// <summary>vcmpnlesd instruction.</summary>
		public void vcmpnlesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 6);
		}
		/// <summary>vcmpnless instruction.</summary>
		public void vcmpnless(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 6);
		}
		/// <summary>vcmpnless instruction.</summary>
		public void vcmpnless(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 6);
		}
		/// <summary>vcmpnless instruction.</summary>
		public void vcmpnless(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 6);
		}
		/// <summary>vcmpnless instruction.</summary>
		public void vcmpnless(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 6);
		}
		/// <summary>vcmpnlt_uqpd instruction.</summary>
		public void vcmpnlt_uqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 21);
		}
		/// <summary>vcmpnlt_uqpd instruction.</summary>
		public void vcmpnlt_uqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 21);
		}
		/// <summary>vcmpnlt_uqpd instruction.</summary>
		public void vcmpnlt_uqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 21);
		}
		/// <summary>vcmpnlt_uqpd instruction.</summary>
		public void vcmpnlt_uqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 21);
		}
		/// <summary>vcmpnlt_uqpd instruction.</summary>
		public void vcmpnlt_uqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmppd(dst, src1, src2, 21);
		}
		/// <summary>vcmpnlt_uqpd instruction.</summary>
		public void vcmpnlt_uqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 21);
		}
		/// <summary>vcmpnlt_uqpd instruction.</summary>
		public void vcmpnlt_uqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 21);
		}
		/// <summary>vcmpnlt_uqpd instruction.</summary>
		public void vcmpnlt_uqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 21);
		}
		/// <summary>vcmpnlt_uqpd instruction.</summary>
		public void vcmpnlt_uqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 21);
		}
		/// <summary>vcmpnlt_uqpd instruction.</summary>
		public void vcmpnlt_uqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 21);
		}
		/// <summary>vcmpnlt_uqps instruction.</summary>
		public void vcmpnlt_uqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 21);
		}
		/// <summary>vcmpnlt_uqps instruction.</summary>
		public void vcmpnlt_uqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 21);
		}
		/// <summary>vcmpnlt_uqps instruction.</summary>
		public void vcmpnlt_uqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 21);
		}
		/// <summary>vcmpnlt_uqps instruction.</summary>
		public void vcmpnlt_uqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 21);
		}
		/// <summary>vcmpnlt_uqps instruction.</summary>
		public void vcmpnlt_uqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmpps(dst, src1, src2, 21);
		}
		/// <summary>vcmpnlt_uqps instruction.</summary>
		public void vcmpnlt_uqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 21);
		}
		/// <summary>vcmpnlt_uqps instruction.</summary>
		public void vcmpnlt_uqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 21);
		}
		/// <summary>vcmpnlt_uqps instruction.</summary>
		public void vcmpnlt_uqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 21);
		}
		/// <summary>vcmpnlt_uqps instruction.</summary>
		public void vcmpnlt_uqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 21);
		}
		/// <summary>vcmpnlt_uqps instruction.</summary>
		public void vcmpnlt_uqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 21);
		}
		/// <summary>vcmpnlt_uqsd instruction.</summary>
		public void vcmpnlt_uqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 21);
		}
		/// <summary>vcmpnlt_uqsd instruction.</summary>
		public void vcmpnlt_uqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 21);
		}
		/// <summary>vcmpnlt_uqsd instruction.</summary>
		public void vcmpnlt_uqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 21);
		}
		/// <summary>vcmpnlt_uqsd instruction.</summary>
		public void vcmpnlt_uqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 21);
		}
		/// <summary>vcmpnlt_uqss instruction.</summary>
		public void vcmpnlt_uqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 21);
		}
		/// <summary>vcmpnlt_uqss instruction.</summary>
		public void vcmpnlt_uqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 21);
		}
		/// <summary>vcmpnlt_uqss instruction.</summary>
		public void vcmpnlt_uqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 21);
		}
		/// <summary>vcmpnlt_uqss instruction.</summary>
		public void vcmpnlt_uqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 21);
		}
		/// <summary>vcmpnltpd instruction.</summary>
		public void vcmpnltpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 5);
		}
		/// <summary>vcmpnltpd instruction.</summary>
		public void vcmpnltpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 5);
		}
		/// <summary>vcmpnltpd instruction.</summary>
		public void vcmpnltpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 5);
		}
		/// <summary>vcmpnltpd instruction.</summary>
		public void vcmpnltpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 5);
		}
		/// <summary>vcmpnltpd instruction.</summary>
		public void vcmpnltpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmppd(dst, src1, src2, 5);
		}
		/// <summary>vcmpnltpd instruction.</summary>
		public void vcmpnltpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 5);
		}
		/// <summary>vcmpnltpd instruction.</summary>
		public void vcmpnltpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 5);
		}
		/// <summary>vcmpnltpd instruction.</summary>
		public void vcmpnltpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 5);
		}
		/// <summary>vcmpnltpd instruction.</summary>
		public void vcmpnltpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 5);
		}
		/// <summary>vcmpnltpd instruction.</summary>
		public void vcmpnltpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 5);
		}
		/// <summary>vcmpnltps instruction.</summary>
		public void vcmpnltps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 5);
		}
		/// <summary>vcmpnltps instruction.</summary>
		public void vcmpnltps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 5);
		}
		/// <summary>vcmpnltps instruction.</summary>
		public void vcmpnltps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 5);
		}
		/// <summary>vcmpnltps instruction.</summary>
		public void vcmpnltps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 5);
		}
		/// <summary>vcmpnltps instruction.</summary>
		public void vcmpnltps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmpps(dst, src1, src2, 5);
		}
		/// <summary>vcmpnltps instruction.</summary>
		public void vcmpnltps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 5);
		}
		/// <summary>vcmpnltps instruction.</summary>
		public void vcmpnltps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 5);
		}
		/// <summary>vcmpnltps instruction.</summary>
		public void vcmpnltps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 5);
		}
		/// <summary>vcmpnltps instruction.</summary>
		public void vcmpnltps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 5);
		}
		/// <summary>vcmpnltps instruction.</summary>
		public void vcmpnltps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 5);
		}
		/// <summary>vcmpnltsd instruction.</summary>
		public void vcmpnltsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 5);
		}
		/// <summary>vcmpnltsd instruction.</summary>
		public void vcmpnltsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 5);
		}
		/// <summary>vcmpnltsd instruction.</summary>
		public void vcmpnltsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 5);
		}
		/// <summary>vcmpnltsd instruction.</summary>
		public void vcmpnltsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 5);
		}
		/// <summary>vcmpnltss instruction.</summary>
		public void vcmpnltss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 5);
		}
		/// <summary>vcmpnltss instruction.</summary>
		public void vcmpnltss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 5);
		}
		/// <summary>vcmpnltss instruction.</summary>
		public void vcmpnltss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 5);
		}
		/// <summary>vcmpnltss instruction.</summary>
		public void vcmpnltss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 5);
		}
		/// <summary>vcmpord_spd instruction.</summary>
		public void vcmpord_spd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 23);
		}
		/// <summary>vcmpord_spd instruction.</summary>
		public void vcmpord_spd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 23);
		}
		/// <summary>vcmpord_spd instruction.</summary>
		public void vcmpord_spd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 23);
		}
		/// <summary>vcmpord_spd instruction.</summary>
		public void vcmpord_spd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 23);
		}
		/// <summary>vcmpord_spd instruction.</summary>
		public void vcmpord_spd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmppd(dst, src1, src2, 23);
		}
		/// <summary>vcmpord_spd instruction.</summary>
		public void vcmpord_spd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 23);
		}
		/// <summary>vcmpord_spd instruction.</summary>
		public void vcmpord_spd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 23);
		}
		/// <summary>vcmpord_spd instruction.</summary>
		public void vcmpord_spd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 23);
		}
		/// <summary>vcmpord_spd instruction.</summary>
		public void vcmpord_spd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 23);
		}
		/// <summary>vcmpord_spd instruction.</summary>
		public void vcmpord_spd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 23);
		}
		/// <summary>vcmpord_sps instruction.</summary>
		public void vcmpord_sps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 23);
		}
		/// <summary>vcmpord_sps instruction.</summary>
		public void vcmpord_sps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 23);
		}
		/// <summary>vcmpord_sps instruction.</summary>
		public void vcmpord_sps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 23);
		}
		/// <summary>vcmpord_sps instruction.</summary>
		public void vcmpord_sps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 23);
		}
		/// <summary>vcmpord_sps instruction.</summary>
		public void vcmpord_sps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmpps(dst, src1, src2, 23);
		}
		/// <summary>vcmpord_sps instruction.</summary>
		public void vcmpord_sps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 23);
		}
		/// <summary>vcmpord_sps instruction.</summary>
		public void vcmpord_sps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 23);
		}
		/// <summary>vcmpord_sps instruction.</summary>
		public void vcmpord_sps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 23);
		}
		/// <summary>vcmpord_sps instruction.</summary>
		public void vcmpord_sps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 23);
		}
		/// <summary>vcmpord_sps instruction.</summary>
		public void vcmpord_sps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 23);
		}
		/// <summary>vcmpord_ssd instruction.</summary>
		public void vcmpord_ssd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 23);
		}
		/// <summary>vcmpord_ssd instruction.</summary>
		public void vcmpord_ssd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 23);
		}
		/// <summary>vcmpord_ssd instruction.</summary>
		public void vcmpord_ssd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 23);
		}
		/// <summary>vcmpord_ssd instruction.</summary>
		public void vcmpord_ssd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 23);
		}
		/// <summary>vcmpord_sss instruction.</summary>
		public void vcmpord_sss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 23);
		}
		/// <summary>vcmpord_sss instruction.</summary>
		public void vcmpord_sss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 23);
		}
		/// <summary>vcmpord_sss instruction.</summary>
		public void vcmpord_sss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 23);
		}
		/// <summary>vcmpord_sss instruction.</summary>
		public void vcmpord_sss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 23);
		}
		/// <summary>vcmpordpd instruction.</summary>
		public void vcmpordpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 7);
		}
		/// <summary>vcmpordpd instruction.</summary>
		public void vcmpordpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 7);
		}
		/// <summary>vcmpordpd instruction.</summary>
		public void vcmpordpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 7);
		}
		/// <summary>vcmpordpd instruction.</summary>
		public void vcmpordpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 7);
		}
		/// <summary>vcmpordpd instruction.</summary>
		public void vcmpordpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmppd(dst, src1, src2, 7);
		}
		/// <summary>vcmpordpd instruction.</summary>
		public void vcmpordpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 7);
		}
		/// <summary>vcmpordpd instruction.</summary>
		public void vcmpordpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 7);
		}
		/// <summary>vcmpordpd instruction.</summary>
		public void vcmpordpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 7);
		}
		/// <summary>vcmpordpd instruction.</summary>
		public void vcmpordpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 7);
		}
		/// <summary>vcmpordpd instruction.</summary>
		public void vcmpordpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 7);
		}
		/// <summary>vcmpordps instruction.</summary>
		public void vcmpordps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 7);
		}
		/// <summary>vcmpordps instruction.</summary>
		public void vcmpordps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 7);
		}
		/// <summary>vcmpordps instruction.</summary>
		public void vcmpordps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 7);
		}
		/// <summary>vcmpordps instruction.</summary>
		public void vcmpordps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 7);
		}
		/// <summary>vcmpordps instruction.</summary>
		public void vcmpordps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmpps(dst, src1, src2, 7);
		}
		/// <summary>vcmpordps instruction.</summary>
		public void vcmpordps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 7);
		}
		/// <summary>vcmpordps instruction.</summary>
		public void vcmpordps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 7);
		}
		/// <summary>vcmpordps instruction.</summary>
		public void vcmpordps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 7);
		}
		/// <summary>vcmpordps instruction.</summary>
		public void vcmpordps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 7);
		}
		/// <summary>vcmpordps instruction.</summary>
		public void vcmpordps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 7);
		}
		/// <summary>vcmpordsd instruction.</summary>
		public void vcmpordsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 7);
		}
		/// <summary>vcmpordsd instruction.</summary>
		public void vcmpordsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 7);
		}
		/// <summary>vcmpordsd instruction.</summary>
		public void vcmpordsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 7);
		}
		/// <summary>vcmpordsd instruction.</summary>
		public void vcmpordsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 7);
		}
		/// <summary>vcmpordss instruction.</summary>
		public void vcmpordss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 7);
		}
		/// <summary>vcmpordss instruction.</summary>
		public void vcmpordss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 7);
		}
		/// <summary>vcmpordss instruction.</summary>
		public void vcmpordss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 7);
		}
		/// <summary>vcmpordss instruction.</summary>
		public void vcmpordss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 7);
		}
		/// <summary>vcmppd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmppd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vcmppd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm));
		}
		/// <summary>vcmppd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmppd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vcmppd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmppd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm));
		}
		/// <summary>vcmppd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmppd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags | src2.Flags);
		}
		/// <summary>vcmppd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmppd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vcmppd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vcmppd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmppd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vcmppd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmppd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vcmppd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmppd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vcmppd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmppd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vcmppd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm));
		}
		/// <summary>vcmppd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmppd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vcmppd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmppd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm));
		}
		/// <summary>vcmppd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmppd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vcmppd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmppd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vcmppd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vcmppd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmppd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vcmppd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmppd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vcmppd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmppd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vcmpps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmpps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vcmpps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm));
		}
		/// <summary>vcmpps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmpps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vcmpps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmpps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm));
		}
		/// <summary>vcmpps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmpps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags | src2.Flags);
		}
		/// <summary>vcmpps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmpps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vcmpps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vcmpps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmpps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vcmpps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmpps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vcmpps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmpps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vcmpps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmpps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vcmpps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm));
		}
		/// <summary>vcmpps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmpps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vcmpps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmpps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm));
		}
		/// <summary>vcmpps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmpps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vcmpps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmpps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vcmpps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vcmpps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmpps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vcmpps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmpps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vcmpps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmpps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vcmpsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmpsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags | src2.Flags);
		}
		/// <summary>vcmpsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmpsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm));
		}
		/// <summary>vcmpsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmpsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vcmpsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmpsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vcmpsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmpsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vcmpsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmpsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm));
		}
		/// <summary>vcmpsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmpsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vcmpsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmpsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vcmpss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmpss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags | src2.Flags);
		}
		/// <summary>vcmpss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmpss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm));
		}
		/// <summary>vcmpss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmpss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vcmpss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmpss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vcmpss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmpss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vcmpss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmpss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm));
		}
		/// <summary>vcmpss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmpss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vcmpss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcmpss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vcmptrue_uspd instruction.</summary>
		public void vcmptrue_uspd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 31);
		}
		/// <summary>vcmptrue_uspd instruction.</summary>
		public void vcmptrue_uspd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 31);
		}
		/// <summary>vcmptrue_uspd instruction.</summary>
		public void vcmptrue_uspd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 31);
		}
		/// <summary>vcmptrue_uspd instruction.</summary>
		public void vcmptrue_uspd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 31);
		}
		/// <summary>vcmptrue_uspd instruction.</summary>
		public void vcmptrue_uspd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmppd(dst, src1, src2, 31);
		}
		/// <summary>vcmptrue_uspd instruction.</summary>
		public void vcmptrue_uspd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 31);
		}
		/// <summary>vcmptrue_uspd instruction.</summary>
		public void vcmptrue_uspd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 31);
		}
		/// <summary>vcmptrue_uspd instruction.</summary>
		public void vcmptrue_uspd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 31);
		}
		/// <summary>vcmptrue_uspd instruction.</summary>
		public void vcmptrue_uspd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 31);
		}
		/// <summary>vcmptrue_uspd instruction.</summary>
		public void vcmptrue_uspd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 31);
		}
		/// <summary>vcmptrue_usps instruction.</summary>
		public void vcmptrue_usps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 31);
		}
		/// <summary>vcmptrue_usps instruction.</summary>
		public void vcmptrue_usps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 31);
		}
		/// <summary>vcmptrue_usps instruction.</summary>
		public void vcmptrue_usps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 31);
		}
		/// <summary>vcmptrue_usps instruction.</summary>
		public void vcmptrue_usps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 31);
		}
		/// <summary>vcmptrue_usps instruction.</summary>
		public void vcmptrue_usps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmpps(dst, src1, src2, 31);
		}
		/// <summary>vcmptrue_usps instruction.</summary>
		public void vcmptrue_usps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 31);
		}
		/// <summary>vcmptrue_usps instruction.</summary>
		public void vcmptrue_usps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 31);
		}
		/// <summary>vcmptrue_usps instruction.</summary>
		public void vcmptrue_usps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 31);
		}
		/// <summary>vcmptrue_usps instruction.</summary>
		public void vcmptrue_usps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 31);
		}
		/// <summary>vcmptrue_usps instruction.</summary>
		public void vcmptrue_usps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 31);
		}
		/// <summary>vcmptrue_ussd instruction.</summary>
		public void vcmptrue_ussd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 31);
		}
		/// <summary>vcmptrue_ussd instruction.</summary>
		public void vcmptrue_ussd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 31);
		}
		/// <summary>vcmptrue_ussd instruction.</summary>
		public void vcmptrue_ussd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 31);
		}
		/// <summary>vcmptrue_ussd instruction.</summary>
		public void vcmptrue_ussd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 31);
		}
		/// <summary>vcmptrue_usss instruction.</summary>
		public void vcmptrue_usss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 31);
		}
		/// <summary>vcmptrue_usss instruction.</summary>
		public void vcmptrue_usss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 31);
		}
		/// <summary>vcmptrue_usss instruction.</summary>
		public void vcmptrue_usss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 31);
		}
		/// <summary>vcmptrue_usss instruction.</summary>
		public void vcmptrue_usss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 31);
		}
		/// <summary>vcmptruepd instruction.</summary>
		public void vcmptruepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 15);
		}
		/// <summary>vcmptruepd instruction.</summary>
		public void vcmptruepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 15);
		}
		/// <summary>vcmptruepd instruction.</summary>
		public void vcmptruepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 15);
		}
		/// <summary>vcmptruepd instruction.</summary>
		public void vcmptruepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 15);
		}
		/// <summary>vcmptruepd instruction.</summary>
		public void vcmptruepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmppd(dst, src1, src2, 15);
		}
		/// <summary>vcmptruepd instruction.</summary>
		public void vcmptruepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 15);
		}
		/// <summary>vcmptruepd instruction.</summary>
		public void vcmptruepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 15);
		}
		/// <summary>vcmptruepd instruction.</summary>
		public void vcmptruepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 15);
		}
		/// <summary>vcmptruepd instruction.</summary>
		public void vcmptruepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 15);
		}
		/// <summary>vcmptruepd instruction.</summary>
		public void vcmptruepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 15);
		}
		/// <summary>vcmptrueps instruction.</summary>
		public void vcmptrueps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 15);
		}
		/// <summary>vcmptrueps instruction.</summary>
		public void vcmptrueps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 15);
		}
		/// <summary>vcmptrueps instruction.</summary>
		public void vcmptrueps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 15);
		}
		/// <summary>vcmptrueps instruction.</summary>
		public void vcmptrueps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 15);
		}
		/// <summary>vcmptrueps instruction.</summary>
		public void vcmptrueps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmpps(dst, src1, src2, 15);
		}
		/// <summary>vcmptrueps instruction.</summary>
		public void vcmptrueps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 15);
		}
		/// <summary>vcmptrueps instruction.</summary>
		public void vcmptrueps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 15);
		}
		/// <summary>vcmptrueps instruction.</summary>
		public void vcmptrueps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 15);
		}
		/// <summary>vcmptrueps instruction.</summary>
		public void vcmptrueps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 15);
		}
		/// <summary>vcmptrueps instruction.</summary>
		public void vcmptrueps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 15);
		}
		/// <summary>vcmptruesd instruction.</summary>
		public void vcmptruesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 15);
		}
		/// <summary>vcmptruesd instruction.</summary>
		public void vcmptruesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 15);
		}
		/// <summary>vcmptruesd instruction.</summary>
		public void vcmptruesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 15);
		}
		/// <summary>vcmptruesd instruction.</summary>
		public void vcmptruesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 15);
		}
		/// <summary>vcmptruess instruction.</summary>
		public void vcmptruess(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 15);
		}
		/// <summary>vcmptruess instruction.</summary>
		public void vcmptruess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 15);
		}
		/// <summary>vcmptruess instruction.</summary>
		public void vcmptruess(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 15);
		}
		/// <summary>vcmptruess instruction.</summary>
		public void vcmptruess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 15);
		}
		/// <summary>vcmpunord_spd instruction.</summary>
		public void vcmpunord_spd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 19);
		}
		/// <summary>vcmpunord_spd instruction.</summary>
		public void vcmpunord_spd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 19);
		}
		/// <summary>vcmpunord_spd instruction.</summary>
		public void vcmpunord_spd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 19);
		}
		/// <summary>vcmpunord_spd instruction.</summary>
		public void vcmpunord_spd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 19);
		}
		/// <summary>vcmpunord_spd instruction.</summary>
		public void vcmpunord_spd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmppd(dst, src1, src2, 19);
		}
		/// <summary>vcmpunord_spd instruction.</summary>
		public void vcmpunord_spd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 19);
		}
		/// <summary>vcmpunord_spd instruction.</summary>
		public void vcmpunord_spd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 19);
		}
		/// <summary>vcmpunord_spd instruction.</summary>
		public void vcmpunord_spd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 19);
		}
		/// <summary>vcmpunord_spd instruction.</summary>
		public void vcmpunord_spd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 19);
		}
		/// <summary>vcmpunord_spd instruction.</summary>
		public void vcmpunord_spd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 19);
		}
		/// <summary>vcmpunord_sps instruction.</summary>
		public void vcmpunord_sps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 19);
		}
		/// <summary>vcmpunord_sps instruction.</summary>
		public void vcmpunord_sps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 19);
		}
		/// <summary>vcmpunord_sps instruction.</summary>
		public void vcmpunord_sps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 19);
		}
		/// <summary>vcmpunord_sps instruction.</summary>
		public void vcmpunord_sps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 19);
		}
		/// <summary>vcmpunord_sps instruction.</summary>
		public void vcmpunord_sps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmpps(dst, src1, src2, 19);
		}
		/// <summary>vcmpunord_sps instruction.</summary>
		public void vcmpunord_sps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 19);
		}
		/// <summary>vcmpunord_sps instruction.</summary>
		public void vcmpunord_sps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 19);
		}
		/// <summary>vcmpunord_sps instruction.</summary>
		public void vcmpunord_sps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 19);
		}
		/// <summary>vcmpunord_sps instruction.</summary>
		public void vcmpunord_sps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 19);
		}
		/// <summary>vcmpunord_sps instruction.</summary>
		public void vcmpunord_sps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 19);
		}
		/// <summary>vcmpunord_ssd instruction.</summary>
		public void vcmpunord_ssd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 19);
		}
		/// <summary>vcmpunord_ssd instruction.</summary>
		public void vcmpunord_ssd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 19);
		}
		/// <summary>vcmpunord_ssd instruction.</summary>
		public void vcmpunord_ssd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 19);
		}
		/// <summary>vcmpunord_ssd instruction.</summary>
		public void vcmpunord_ssd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 19);
		}
		/// <summary>vcmpunord_sss instruction.</summary>
		public void vcmpunord_sss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 19);
		}
		/// <summary>vcmpunord_sss instruction.</summary>
		public void vcmpunord_sss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 19);
		}
		/// <summary>vcmpunord_sss instruction.</summary>
		public void vcmpunord_sss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 19);
		}
		/// <summary>vcmpunord_sss instruction.</summary>
		public void vcmpunord_sss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 19);
		}
		/// <summary>vcmpunordpd instruction.</summary>
		public void vcmpunordpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 3);
		}
		/// <summary>vcmpunordpd instruction.</summary>
		public void vcmpunordpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmppd(dst, src1, src2, 3);
		}
		/// <summary>vcmpunordpd instruction.</summary>
		public void vcmpunordpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 3);
		}
		/// <summary>vcmpunordpd instruction.</summary>
		public void vcmpunordpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmppd(dst, src1, src2, 3);
		}
		/// <summary>vcmpunordpd instruction.</summary>
		public void vcmpunordpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmppd(dst, src1, src2, 3);
		}
		/// <summary>vcmpunordpd instruction.</summary>
		public void vcmpunordpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 3);
		}
		/// <summary>vcmpunordpd instruction.</summary>
		public void vcmpunordpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 3);
		}
		/// <summary>vcmpunordpd instruction.</summary>
		public void vcmpunordpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 3);
		}
		/// <summary>vcmpunordpd instruction.</summary>
		public void vcmpunordpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 3);
		}
		/// <summary>vcmpunordpd instruction.</summary>
		public void vcmpunordpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmppd(dst, src1, src2, 3);
		}
		/// <summary>vcmpunordps instruction.</summary>
		public void vcmpunordps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 3);
		}
		/// <summary>vcmpunordps instruction.</summary>
		public void vcmpunordps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpps(dst, src1, src2, 3);
		}
		/// <summary>vcmpunordps instruction.</summary>
		public void vcmpunordps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 3);
		}
		/// <summary>vcmpunordps instruction.</summary>
		public void vcmpunordps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vcmpps(dst, src1, src2, 3);
		}
		/// <summary>vcmpunordps instruction.</summary>
		public void vcmpunordps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vcmpps(dst, src1, src2, 3);
		}
		/// <summary>vcmpunordps instruction.</summary>
		public void vcmpunordps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 3);
		}
		/// <summary>vcmpunordps instruction.</summary>
		public void vcmpunordps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 3);
		}
		/// <summary>vcmpunordps instruction.</summary>
		public void vcmpunordps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 3);
		}
		/// <summary>vcmpunordps instruction.</summary>
		public void vcmpunordps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 3);
		}
		/// <summary>vcmpunordps instruction.</summary>
		public void vcmpunordps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vcmpps(dst, src1, src2, 3);
		}
		/// <summary>vcmpunordsd instruction.</summary>
		public void vcmpunordsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 3);
		}
		/// <summary>vcmpunordsd instruction.</summary>
		public void vcmpunordsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpsd(dst, src1, src2, 3);
		}
		/// <summary>vcmpunordsd instruction.</summary>
		public void vcmpunordsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 3);
		}
		/// <summary>vcmpunordsd instruction.</summary>
		public void vcmpunordsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpsd(dst, src1, src2, 3);
		}
		/// <summary>vcmpunordss instruction.</summary>
		public void vcmpunordss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 3);
		}
		/// <summary>vcmpunordss instruction.</summary>
		public void vcmpunordss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vcmpss(dst, src1, src2, 3);
		}
		/// <summary>vcmpunordss instruction.</summary>
		public void vcmpunordss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 3);
		}
		/// <summary>vcmpunordss instruction.</summary>
		public void vcmpunordss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vcmpss(dst, src1, src2, 3);
		}
		/// <summary>vcomisd instruction.<br/>
		/// <br/>
		/// <c>VCOMISD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F.WIG 2F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCOMISD xmm1, xmm2/m64{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F.W1 2F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcomisd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vcomisd_xmm_xmmm64 : Code.EVEX_Vcomisd_xmm_xmmm64_sae;
			AddInstruction(Instruction.Create(op, dst, src), src.Flags);
		}
		/// <summary>vcomisd instruction.<br/>
		/// <br/>
		/// <c>VCOMISD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F.WIG 2F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCOMISD xmm1, xmm2/m64{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F.W1 2F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcomisd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vcomisd_xmm_xmmm64 : Code.EVEX_Vcomisd_xmm_xmmm64_sae;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), src.Flags);
		}
		/// <summary>vcomiss instruction.<br/>
		/// <br/>
		/// <c>VCOMISS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.0F.WIG 2F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCOMISS xmm1, xmm2/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.0F.W0 2F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcomiss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vcomiss_xmm_xmmm32 : Code.EVEX_Vcomiss_xmm_xmmm32_sae;
			AddInstruction(Instruction.Create(op, dst, src), src.Flags);
		}
		/// <summary>vcomiss instruction.<br/>
		/// <br/>
		/// <c>VCOMISS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.0F.WIG 2F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCOMISS xmm1, xmm2/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.0F.W0 2F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcomiss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vcomiss_xmm_xmmm32 : Code.EVEX_Vcomiss_xmm_xmmm32_sae;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), src.Flags);
		}
		/// <summary>vcompresspd instruction.<br/>
		/// <br/>
		/// <c>VCOMPRESSPD xmm1/m128 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 8A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcompresspd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vcompresspd_xmmm128_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcompresspd instruction.<br/>
		/// <br/>
		/// <c>VCOMPRESSPD xmm1/m128 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 8A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcompresspd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vcompresspd_xmmm128_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vcompresspd instruction.<br/>
		/// <br/>
		/// <c>VCOMPRESSPD ymm1/m256 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 8A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcompresspd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vcompresspd_ymmm256_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcompresspd instruction.<br/>
		/// <br/>
		/// <c>VCOMPRESSPD ymm1/m256 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 8A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcompresspd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vcompresspd_ymmm256_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vcompresspd instruction.<br/>
		/// <br/>
		/// <c>VCOMPRESSPD zmm1/m512 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 8A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcompresspd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vcompresspd_zmmm512_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcompresspd instruction.<br/>
		/// <br/>
		/// <c>VCOMPRESSPD zmm1/m512 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 8A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcompresspd(AssemblerMemoryOperand dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vcompresspd_zmmm512_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vcompressps instruction.<br/>
		/// <br/>
		/// <c>VCOMPRESSPS xmm1/m128 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 8A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcompressps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vcompressps_xmmm128_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcompressps instruction.<br/>
		/// <br/>
		/// <c>VCOMPRESSPS xmm1/m128 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 8A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcompressps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vcompressps_xmmm128_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vcompressps instruction.<br/>
		/// <br/>
		/// <c>VCOMPRESSPS ymm1/m256 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 8A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcompressps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vcompressps_ymmm256_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcompressps instruction.<br/>
		/// <br/>
		/// <c>VCOMPRESSPS ymm1/m256 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 8A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcompressps(AssemblerMemoryOperand dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vcompressps_ymmm256_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vcompressps instruction.<br/>
		/// <br/>
		/// <c>VCOMPRESSPS zmm1/m512 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 8A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcompressps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vcompressps_zmmm512_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcompressps instruction.<br/>
		/// <br/>
		/// <c>VCOMPRESSPS zmm1/m512 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 8A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcompressps(AssemblerMemoryOperand dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vcompressps_zmmm512_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vcvtdq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTDQ2PD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.F3.0F.WIG E6 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTDQ2PD xmm1 {k1}{z}, xmm2/m64/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.W0 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtdq2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvtdq2pd_xmm_xmmm64 : Code.EVEX_Vcvtdq2pd_xmm_k1z_xmmm64b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvtdq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTDQ2PD ymm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.F3.0F.WIG E6 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTDQ2PD ymm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.W0 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtdq2pd(AssemblerRegisterYMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvtdq2pd_ymm_xmmm128 : Code.EVEX_Vcvtdq2pd_ymm_k1z_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvtdq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTDQ2PD zmm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.W0 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtdq2pd(AssemblerRegisterZMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vcvtdq2pd_zmm_k1z_ymmm256b32_er;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags | src.Flags);
		}
		/// <summary>vcvtdq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTDQ2PD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.F3.0F.WIG E6 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTDQ2PD xmm1 {k1}{z}, xmm2/m64/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.W0 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtdq2pd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			if (src.IsBroadcast) {
				op = Code.EVEX_Vcvtdq2pd_xmm_k1z_xmmm64b32;
			} else op = PreferVex ? Code.VEX_Vcvtdq2pd_xmm_xmmm64 : Code.EVEX_Vcvtdq2pd_xmm_k1z_xmmm64b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtdq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTDQ2PD ymm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.F3.0F.WIG E6 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTDQ2PD ymm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.W0 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtdq2pd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			if (src.IsBroadcast) {
				op = Code.EVEX_Vcvtdq2pd_ymm_k1z_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vcvtdq2pd_ymm_xmmm128 : Code.EVEX_Vcvtdq2pd_ymm_k1z_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtdq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTDQ2PD zmm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.W0 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtdq2pd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtdq2pd_zmm_k1z_ymmm256b32_er;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtdq2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTDQ2PS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 5B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTDQ2PS xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtdq2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvtdq2ps_xmm_xmmm128 : Code.EVEX_Vcvtdq2ps_xmm_k1z_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvtdq2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTDQ2PS ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 5B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTDQ2PS ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtdq2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvtdq2ps_ymm_ymmm256 : Code.EVEX_Vcvtdq2ps_ymm_k1z_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvtdq2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTDQ2PS zmm1 {k1}{z}, zmm2/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtdq2ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vcvtdq2ps_zmm_k1z_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags | src.Flags);
		}
		/// <summary>vcvtdq2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTDQ2PS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 5B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTDQ2PS xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtdq2ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			if (src.IsBroadcast) {
				op = Code.EVEX_Vcvtdq2ps_xmm_k1z_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vcvtdq2ps_xmm_xmmm128 : Code.EVEX_Vcvtdq2ps_xmm_k1z_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtdq2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTDQ2PS ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 5B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTDQ2PS ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtdq2ps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			if (src.IsBroadcast) {
				op = Code.EVEX_Vcvtdq2ps_ymm_k1z_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vcvtdq2ps_ymm_ymmm256 : Code.EVEX_Vcvtdq2ps_ymm_k1z_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtdq2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTDQ2PS zmm1 {k1}{z}, zmm2/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtdq2ps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtdq2ps_zmm_k1z_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtne2ps2bf16 instruction.<br/>
		/// <br/>
		/// <c>VCVTNE2PS2BF16 xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F38.W0 72 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BF16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtne2ps2bf16(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vcvtne2ps2bf16_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vcvtne2ps2bf16 instruction.<br/>
		/// <br/>
		/// <c>VCVTNE2PS2BF16 ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F38.W0 72 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BF16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtne2ps2bf16(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vcvtne2ps2bf16_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vcvtne2ps2bf16 instruction.<br/>
		/// <br/>
		/// <c>VCVTNE2PS2BF16 zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F38.W0 72 /r</c><br/>
		/// <br/>
		/// <c>AVX512F and AVX512_BF16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtne2ps2bf16(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vcvtne2ps2bf16_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vcvtne2ps2bf16 instruction.<br/>
		/// <br/>
		/// <c>VCVTNE2PS2BF16 xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F38.W0 72 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BF16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtne2ps2bf16(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vcvtne2ps2bf16_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vcvtne2ps2bf16 instruction.<br/>
		/// <br/>
		/// <c>VCVTNE2PS2BF16 ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F38.W0 72 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BF16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtne2ps2bf16(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vcvtne2ps2bf16_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vcvtne2ps2bf16 instruction.<br/>
		/// <br/>
		/// <c>VCVTNE2PS2BF16 zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F38.W0 72 /r</c><br/>
		/// <br/>
		/// <c>AVX512F and AVX512_BF16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtne2ps2bf16(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vcvtne2ps2bf16_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vcvtneps2bf16 instruction.<br/>
		/// <br/>
		/// <c>VCVTNEPS2BF16 xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 72 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BF16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtneps2bf16(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vcvtneps2bf16_xmm_k1z_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvtneps2bf16 instruction.<br/>
		/// <br/>
		/// <c>VCVTNEPS2BF16 xmm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 72 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BF16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtneps2bf16(AssemblerRegisterXMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vcvtneps2bf16_xmm_k1z_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvtneps2bf16 instruction.<br/>
		/// <br/>
		/// <c>VCVTNEPS2BF16 ymm1 {k1}{z}, zmm2/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 72 /r</c><br/>
		/// <br/>
		/// <c>AVX512F and AVX512_BF16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtneps2bf16(AssemblerRegisterYMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vcvtneps2bf16_ymm_k1z_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvtneps2bf16 instruction.<br/>
		/// <br/>
		/// <c>VCVTNEPS2BF16 xmm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 72 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BF16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTNEPS2BF16 xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 72 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BF16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtneps2bf16(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			if (src.IsBroadcast) {
				op = Code.EVEX_Vcvtneps2bf16_xmm_k1z_ymmm256b32;
			} else if (src.Size == MemoryOperandSize.YwordPtr) {
				op = Code.EVEX_Vcvtneps2bf16_xmm_k1z_ymmm256b32;
			} else if (src.Size == MemoryOperandSize.OwordPtr) {
				op = Code.EVEX_Vcvtneps2bf16_xmm_k1z_xmmm128b32;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Vcvtneps2bf16, dst, src);
			}
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtneps2bf16 instruction.<br/>
		/// <br/>
		/// <c>VCVTNEPS2BF16 ymm1 {k1}{z}, zmm2/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 72 /r</c><br/>
		/// <br/>
		/// <c>AVX512F and AVX512_BF16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtneps2bf16(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtneps2bf16_ymm_k1z_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtneps2bf16x instruction.<br/>
		/// <br/>
		/// <c>VCVTNEPS2BF16 xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 72 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BF16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtneps2bf16x(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtneps2bf16_xmm_k1z_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtneps2bf16y instruction.<br/>
		/// <br/>
		/// <c>VCVTNEPS2BF16 xmm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 72 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BF16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtneps2bf16y(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtneps2bf16_xmm_k1z_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtpd2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2DQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.F2.0F.WIG E6 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPD2DQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F.W1 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtpd2dq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvtpd2dq_xmm_xmmm128 : Code.EVEX_Vcvtpd2dq_xmm_k1z_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvtpd2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2DQ xmm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.F2.0F.WIG E6 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPD2DQ xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F.W1 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtpd2dq(AssemblerRegisterXMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvtpd2dq_xmm_ymmm256 : Code.EVEX_Vcvtpd2dq_xmm_k1z_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvtpd2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2DQ ymm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F.W1 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtpd2dq(AssemblerRegisterYMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vcvtpd2dq_ymm_k1z_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags | src.Flags);
		}
		/// <summary>vcvtpd2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2DQ xmm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.F2.0F.WIG E6 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPD2DQ xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F.W1 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPD2DQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.F2.0F.WIG E6 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPD2DQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F.W1 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtpd2dq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			if (src.IsBroadcast) {
				op = Code.EVEX_Vcvtpd2dq_xmm_k1z_ymmm256b64;
			} else if (src.Size == MemoryOperandSize.YwordPtr) {
				op = PreferVex ? Code.VEX_Vcvtpd2dq_xmm_ymmm256 : Code.EVEX_Vcvtpd2dq_xmm_k1z_ymmm256b64;
			} else if (src.Size == MemoryOperandSize.OwordPtr) {
				op = PreferVex ? Code.VEX_Vcvtpd2dq_xmm_xmmm128 : Code.EVEX_Vcvtpd2dq_xmm_k1z_xmmm128b64;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Vcvtpd2dq, dst, src);
			}
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtpd2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2DQ ymm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F.W1 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtpd2dq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtpd2dq_ymm_k1z_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtpd2dqx instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2DQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F.W1 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtpd2dqx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtpd2dq_xmm_k1z_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtpd2dqy instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2DQ xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F.W1 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtpd2dqy(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtpd2dq_xmm_k1z_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtpd2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2PS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 5A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPD2PS xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtpd2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvtpd2ps_xmm_xmmm128 : Code.EVEX_Vcvtpd2ps_xmm_k1z_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvtpd2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2PS xmm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 5A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPD2PS xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtpd2ps(AssemblerRegisterXMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvtpd2ps_xmm_ymmm256 : Code.EVEX_Vcvtpd2ps_xmm_k1z_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvtpd2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2PS ymm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtpd2ps(AssemblerRegisterYMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vcvtpd2ps_ymm_k1z_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags | src.Flags);
		}
		/// <summary>vcvtpd2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2PS xmm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 5A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPD2PS xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPD2PS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 5A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPD2PS xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtpd2ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			if (src.IsBroadcast) {
				op = Code.EVEX_Vcvtpd2ps_xmm_k1z_ymmm256b64;
			} else if (src.Size == MemoryOperandSize.YwordPtr) {
				op = PreferVex ? Code.VEX_Vcvtpd2ps_xmm_ymmm256 : Code.EVEX_Vcvtpd2ps_xmm_k1z_ymmm256b64;
			} else if (src.Size == MemoryOperandSize.OwordPtr) {
				op = PreferVex ? Code.VEX_Vcvtpd2ps_xmm_xmmm128 : Code.EVEX_Vcvtpd2ps_xmm_k1z_xmmm128b64;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Vcvtpd2ps, dst, src);
			}
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtpd2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2PS ymm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtpd2ps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtpd2ps_ymm_k1z_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtpd2psx instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2PS xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtpd2psx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtpd2ps_xmm_k1z_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtpd2psy instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2PS xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtpd2psy(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtpd2ps_xmm_k1z_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtpd2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2QQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtpd2qq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vcvtpd2qq_xmm_k1z_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvtpd2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2QQ ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtpd2qq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vcvtpd2qq_ymm_k1z_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvtpd2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2QQ zmm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtpd2qq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vcvtpd2qq_zmm_k1z_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags | src.Flags);
		}
		/// <summary>vcvtpd2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2QQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtpd2qq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtpd2qq_xmm_k1z_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtpd2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2QQ ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtpd2qq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtpd2qq_ymm_k1z_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtpd2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2QQ zmm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtpd2qq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtpd2qq_zmm_k1z_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtpd2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2UDQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W1 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtpd2udq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vcvtpd2udq_xmm_k1z_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvtpd2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2UDQ xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W1 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtpd2udq(AssemblerRegisterXMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vcvtpd2udq_xmm_k1z_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvtpd2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2UDQ ymm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W1 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtpd2udq(AssemblerRegisterYMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vcvtpd2udq_ymm_k1z_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags | src.Flags);
		}
		/// <summary>vcvtpd2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2UDQ xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W1 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPD2UDQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W1 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtpd2udq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			if (src.IsBroadcast) {
				op = Code.EVEX_Vcvtpd2udq_xmm_k1z_ymmm256b64;
			} else if (src.Size == MemoryOperandSize.YwordPtr) {
				op = Code.EVEX_Vcvtpd2udq_xmm_k1z_ymmm256b64;
			} else if (src.Size == MemoryOperandSize.OwordPtr) {
				op = Code.EVEX_Vcvtpd2udq_xmm_k1z_xmmm128b64;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Vcvtpd2udq, dst, src);
			}
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtpd2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2UDQ ymm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W1 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtpd2udq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtpd2udq_ymm_k1z_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtpd2udqx instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2UDQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W1 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtpd2udqx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtpd2udq_xmm_k1z_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtpd2udqy instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2UDQ xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W1 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtpd2udqy(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtpd2udq_xmm_k1z_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtpd2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2UQQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtpd2uqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vcvtpd2uqq_xmm_k1z_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvtpd2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2UQQ ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtpd2uqq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vcvtpd2uqq_ymm_k1z_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvtpd2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2UQQ zmm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtpd2uqq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vcvtpd2uqq_zmm_k1z_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags | src.Flags);
		}
		/// <summary>vcvtpd2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2UQQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtpd2uqq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtpd2uqq_xmm_k1z_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtpd2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2UQQ ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtpd2uqq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtpd2uqq_ymm_k1z_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtpd2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2UQQ zmm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtpd2uqq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtpd2uqq_zmm_k1z_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtph2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2PS xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 13 /r</c><br/>
		/// <br/>
		/// <c>F16C</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPH2PS xmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 13 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtph2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvtph2ps_xmm_xmmm64 : Code.EVEX_Vcvtph2ps_xmm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvtph2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2PS ymm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 13 /r</c><br/>
		/// <br/>
		/// <c>F16C</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPH2PS ymm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 13 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtph2ps(AssemblerRegisterYMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvtph2ps_ymm_xmmm128 : Code.EVEX_Vcvtph2ps_ymm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvtph2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2PS zmm1 {k1}{z}, ymm2/m256{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 13 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtph2ps(AssemblerRegisterZMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vcvtph2ps_zmm_k1z_ymmm256_sae;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags | src.Flags);
		}
		/// <summary>vcvtph2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2PS xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 13 /r</c><br/>
		/// <br/>
		/// <c>F16C</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPH2PS xmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 13 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtph2ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvtph2ps_xmm_xmmm64 : Code.EVEX_Vcvtph2ps_xmm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vcvtph2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2PS ymm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 13 /r</c><br/>
		/// <br/>
		/// <c>F16C</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPH2PS ymm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 13 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtph2ps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvtph2ps_ymm_xmmm128 : Code.EVEX_Vcvtph2ps_ymm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vcvtph2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2PS zmm1 {k1}{z}, ymm2/m256{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 13 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtph2ps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtph2ps_zmm_k1z_ymmm256_sae;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtps2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2DQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 5B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPS2DQ xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtps2dq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvtps2dq_xmm_xmmm128 : Code.EVEX_Vcvtps2dq_xmm_k1z_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvtps2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2DQ ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 5B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPS2DQ ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtps2dq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvtps2dq_ymm_ymmm256 : Code.EVEX_Vcvtps2dq_ymm_k1z_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvtps2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2DQ zmm1 {k1}{z}, zmm2/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtps2dq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vcvtps2dq_zmm_k1z_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags | src.Flags);
		}
		/// <summary>vcvtps2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2DQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 5B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPS2DQ xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtps2dq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			if (src.IsBroadcast) {
				op = Code.EVEX_Vcvtps2dq_xmm_k1z_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vcvtps2dq_xmm_xmmm128 : Code.EVEX_Vcvtps2dq_xmm_k1z_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtps2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2DQ ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 5B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPS2DQ ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtps2dq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			if (src.IsBroadcast) {
				op = Code.EVEX_Vcvtps2dq_ymm_k1z_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vcvtps2dq_ymm_ymmm256 : Code.EVEX_Vcvtps2dq_ymm_k1z_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtps2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2DQ zmm1 {k1}{z}, zmm2/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtps2dq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtps2dq_zmm_k1z_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtps2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2PD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 5A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPS2PD xmm1 {k1}{z}, xmm2/m64/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtps2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvtps2pd_xmm_xmmm64 : Code.EVEX_Vcvtps2pd_xmm_k1z_xmmm64b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvtps2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2PD ymm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 5A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPS2PD ymm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtps2pd(AssemblerRegisterYMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvtps2pd_ymm_xmmm128 : Code.EVEX_Vcvtps2pd_ymm_k1z_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvtps2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2PD zmm1 {k1}{z}, ymm2/m256/m32bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtps2pd(AssemblerRegisterZMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vcvtps2pd_zmm_k1z_ymmm256b32_sae;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags | src.Flags);
		}
		/// <summary>vcvtps2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2PD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 5A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPS2PD xmm1 {k1}{z}, xmm2/m64/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtps2pd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			if (src.IsBroadcast) {
				op = Code.EVEX_Vcvtps2pd_xmm_k1z_xmmm64b32;
			} else op = PreferVex ? Code.VEX_Vcvtps2pd_xmm_xmmm64 : Code.EVEX_Vcvtps2pd_xmm_k1z_xmmm64b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtps2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2PD ymm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 5A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPS2PD ymm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtps2pd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			if (src.IsBroadcast) {
				op = Code.EVEX_Vcvtps2pd_ymm_k1z_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vcvtps2pd_ymm_xmmm128 : Code.EVEX_Vcvtps2pd_ymm_k1z_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtps2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2PD zmm1 {k1}{z}, ymm2/m256/m32bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtps2pd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtps2pd_zmm_k1z_ymmm256b32_sae;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtps2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2PH xmm1/m64, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 1D /r ib</c><br/>
		/// <br/>
		/// <c>F16C</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPS2PH xmm1/m64 {k1}{z}, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1D /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtps2ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvtps2ph_xmmm64_xmm_imm8 : Code.EVEX_Vcvtps2ph_xmmm64_k1z_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vcvtps2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2PH xmm1/m64, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 1D /r ib</c><br/>
		/// <br/>
		/// <c>F16C</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPS2PH xmm1/m64 {k1}{z}, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1D /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtps2ph(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvtps2ph_xmmm64_xmm_imm8 : Code.EVEX_Vcvtps2ph_xmmm64_k1z_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, imm), dst.Flags);
		}
		/// <summary>vcvtps2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2PH xmm1/m128, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 1D /r ib</c><br/>
		/// <br/>
		/// <c>F16C</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPS2PH xmm1/m128 {k1}{z}, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1D /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtps2ph(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvtps2ph_xmmm128_ymm_imm8 : Code.EVEX_Vcvtps2ph_xmmm128_k1z_ymm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vcvtps2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2PH xmm1/m128, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 1D /r ib</c><br/>
		/// <br/>
		/// <c>F16C</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPS2PH xmm1/m128 {k1}{z}, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1D /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtps2ph(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvtps2ph_xmmm128_ymm_imm8 : Code.EVEX_Vcvtps2ph_xmmm128_k1z_ymm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, imm), dst.Flags);
		}
		/// <summary>vcvtps2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2PH ymm1/m256 {k1}{z}, zmm2{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1D /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtps2ph(AssemblerRegisterYMM dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vcvtps2ph_ymmm256_k1z_zmm_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags | src1.Flags);
		}
		/// <summary>vcvtps2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2PH ymm1/m256 {k1}{z}, zmm2{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1D /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtps2ph(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vcvtps2ph_ymmm256_k1z_zmm_imm8_sae;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, imm), dst.Flags | src1.Flags);
		}
		/// <summary>vcvtps2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2PH xmm1/m64, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 1D /r ib</c><br/>
		/// <br/>
		/// <c>F16C</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPS2PH xmm1/m64 {k1}{z}, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1D /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtps2ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvtps2ph_xmmm64_xmm_imm8 : Code.EVEX_Vcvtps2ph_xmmm64_k1z_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vcvtps2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2PH xmm1/m64, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 1D /r ib</c><br/>
		/// <br/>
		/// <c>F16C</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPS2PH xmm1/m64 {k1}{z}, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1D /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtps2ph(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvtps2ph_xmmm64_xmm_imm8 : Code.EVEX_Vcvtps2ph_xmmm64_k1z_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, (uint)imm), dst.Flags);
		}
		/// <summary>vcvtps2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2PH xmm1/m128, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 1D /r ib</c><br/>
		/// <br/>
		/// <c>F16C</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPS2PH xmm1/m128 {k1}{z}, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1D /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtps2ph(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvtps2ph_xmmm128_ymm_imm8 : Code.EVEX_Vcvtps2ph_xmmm128_k1z_ymm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vcvtps2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2PH xmm1/m128, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 1D /r ib</c><br/>
		/// <br/>
		/// <c>F16C</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPS2PH xmm1/m128 {k1}{z}, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1D /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtps2ph(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvtps2ph_xmmm128_ymm_imm8 : Code.EVEX_Vcvtps2ph_xmmm128_k1z_ymm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, (uint)imm), dst.Flags);
		}
		/// <summary>vcvtps2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2PH ymm1/m256 {k1}{z}, zmm2{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1D /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtps2ph(AssemblerRegisterYMM dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vcvtps2ph_ymmm256_k1z_zmm_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vcvtps2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2PH ymm1/m256 {k1}{z}, zmm2{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1D /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtps2ph(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vcvtps2ph_ymmm256_k1z_zmm_imm8_sae;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vcvtps2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2QQ xmm1 {k1}{z}, xmm2/m64/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtps2qq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vcvtps2qq_xmm_k1z_xmmm64b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvtps2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2QQ ymm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtps2qq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vcvtps2qq_ymm_k1z_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvtps2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2QQ zmm1 {k1}{z}, ymm2/m256/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtps2qq(AssemblerRegisterZMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vcvtps2qq_zmm_k1z_ymmm256b32_er;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags | src.Flags);
		}
		/// <summary>vcvtps2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2QQ xmm1 {k1}{z}, xmm2/m64/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtps2qq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtps2qq_xmm_k1z_xmmm64b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtps2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2QQ ymm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtps2qq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtps2qq_ymm_k1z_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtps2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2QQ zmm1 {k1}{z}, ymm2/m256/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtps2qq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtps2qq_zmm_k1z_ymmm256b32_er;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtps2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2UDQ xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtps2udq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vcvtps2udq_xmm_k1z_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvtps2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2UDQ ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtps2udq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vcvtps2udq_ymm_k1z_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvtps2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2UDQ zmm1 {k1}{z}, zmm2/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtps2udq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vcvtps2udq_zmm_k1z_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags | src.Flags);
		}
		/// <summary>vcvtps2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2UDQ xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtps2udq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtps2udq_xmm_k1z_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtps2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2UDQ ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtps2udq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtps2udq_ymm_k1z_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtps2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2UDQ zmm1 {k1}{z}, zmm2/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtps2udq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtps2udq_zmm_k1z_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtps2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2UQQ xmm1 {k1}{z}, xmm2/m64/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtps2uqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vcvtps2uqq_xmm_k1z_xmmm64b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvtps2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2UQQ ymm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtps2uqq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vcvtps2uqq_ymm_k1z_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvtps2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2UQQ zmm1 {k1}{z}, ymm2/m256/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtps2uqq(AssemblerRegisterZMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vcvtps2uqq_zmm_k1z_ymmm256b32_er;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags | src.Flags);
		}
		/// <summary>vcvtps2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2UQQ xmm1 {k1}{z}, xmm2/m64/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtps2uqq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtps2uqq_xmm_k1z_xmmm64b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtps2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2UQQ ymm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtps2uqq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtps2uqq_ymm_k1z_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtps2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2UQQ zmm1 {k1}{z}, ymm2/m256/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtps2uqq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtps2uqq_zmm_k1z_ymmm256b32_er;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtqq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTQQ2PD xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.W1 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtqq2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vcvtqq2pd_xmm_k1z_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvtqq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTQQ2PD ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.W1 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtqq2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vcvtqq2pd_ymm_k1z_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvtqq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTQQ2PD zmm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.W1 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtqq2pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vcvtqq2pd_zmm_k1z_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags | src.Flags);
		}
		/// <summary>vcvtqq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTQQ2PD xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.W1 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtqq2pd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtqq2pd_xmm_k1z_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtqq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTQQ2PD ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.W1 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtqq2pd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtqq2pd_ymm_k1z_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtqq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTQQ2PD zmm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.W1 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtqq2pd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtqq2pd_zmm_k1z_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtqq2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTQQ2PS xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W1 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtqq2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vcvtqq2ps_xmm_k1z_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvtqq2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTQQ2PS xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W1 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtqq2ps(AssemblerRegisterXMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vcvtqq2ps_xmm_k1z_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvtqq2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTQQ2PS ymm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W1 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtqq2ps(AssemblerRegisterYMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vcvtqq2ps_ymm_k1z_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags | src.Flags);
		}
		/// <summary>vcvtqq2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTQQ2PS xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W1 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTQQ2PS xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W1 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtqq2ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			if (src.IsBroadcast) {
				op = Code.EVEX_Vcvtqq2ps_xmm_k1z_ymmm256b64;
			} else if (src.Size == MemoryOperandSize.YwordPtr) {
				op = Code.EVEX_Vcvtqq2ps_xmm_k1z_ymmm256b64;
			} else if (src.Size == MemoryOperandSize.OwordPtr) {
				op = Code.EVEX_Vcvtqq2ps_xmm_k1z_xmmm128b64;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Vcvtqq2ps, dst, src);
			}
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtqq2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTQQ2PS ymm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W1 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtqq2ps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtqq2ps_ymm_k1z_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtqq2psx instruction.<br/>
		/// <br/>
		/// <c>VCVTQQ2PS xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W1 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtqq2psx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtqq2ps_xmm_k1z_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtqq2psy instruction.<br/>
		/// <br/>
		/// <c>VCVTQQ2PS xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W1 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtqq2psy(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtqq2ps_xmm_k1z_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtsd2si instruction.<br/>
		/// <br/>
		/// <c>VCVTSD2SI r32, xmm1/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.W0 2D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTSD2SI r32, xmm1/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W0 2D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtsd2si(AssemblerRegister32 dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvtsd2si_r32_xmmm64 : Code.EVEX_Vcvtsd2si_r32_xmmm64_er;
			AddInstruction(Instruction.Create(op, dst, src), src.Flags);
		}
		/// <summary>vcvtsd2si instruction.<br/>
		/// <br/>
		/// <c>VCVTSD2SI r64, xmm1/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.W1 2D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VCVTSD2SI r64, xmm1/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 2D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vcvtsd2si(AssemblerRegister64 dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvtsd2si_r64_xmmm64 : Code.EVEX_Vcvtsd2si_r64_xmmm64_er;
			AddInstruction(Instruction.Create(op, dst, src), src.Flags);
		}
		/// <summary>vcvtsd2si instruction.<br/>
		/// <br/>
		/// <c>VCVTSD2SI r32, xmm1/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.W0 2D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTSD2SI r32, xmm1/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W0 2D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtsd2si(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvtsd2si_r32_xmmm64 : Code.EVEX_Vcvtsd2si_r32_xmmm64_er;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), src.Flags);
		}
		/// <summary>vcvtsd2si instruction.<br/>
		/// <br/>
		/// <c>VCVTSD2SI r64, xmm1/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.W1 2D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VCVTSD2SI r64, xmm1/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 2D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vcvtsd2si(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvtsd2si_r64_xmmm64 : Code.EVEX_Vcvtsd2si_r64_xmmm64_er;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), src.Flags);
		}
		/// <summary>vcvtsd2ss instruction.<br/>
		/// <br/>
		/// <c>VCVTSD2SS xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG 5A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTSD2SS xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtsd2ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvtsd2ss_xmm_xmm_xmmm64 : Code.EVEX_Vcvtsd2ss_xmm_k1z_xmm_xmmm64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vcvtsd2ss instruction.<br/>
		/// <br/>
		/// <c>VCVTSD2SS xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG 5A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTSD2SS xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtsd2ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvtsd2ss_xmm_xmm_xmmm64 : Code.EVEX_Vcvtsd2ss_xmm_k1z_xmm_xmmm64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vcvtsd2usi instruction.<br/>
		/// <br/>
		/// <c>VCVTSD2USI r32, xmm1/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtsd2usi(AssemblerRegister32 dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vcvtsd2usi_r32_xmmm64_er;
			AddInstruction(Instruction.Create(op, dst, src), src.Flags);
		}
		/// <summary>vcvtsd2usi instruction.<br/>
		/// <br/>
		/// <c>VCVTSD2USI r64, xmm1/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vcvtsd2usi(AssemblerRegister64 dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vcvtsd2usi_r64_xmmm64_er;
			AddInstruction(Instruction.Create(op, dst, src), src.Flags);
		}
		/// <summary>vcvtsd2usi instruction.<br/>
		/// <br/>
		/// <c>VCVTSD2USI r32, xmm1/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtsd2usi(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtsd2usi_r32_xmmm64_er;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), src.Flags);
		}
		/// <summary>vcvtsd2usi instruction.<br/>
		/// <br/>
		/// <c>VCVTSD2USI r64, xmm1/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vcvtsd2usi(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtsd2usi_r64_xmmm64_er;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), src.Flags);
		}
		/// <summary>vcvtsi2sd instruction.<br/>
		/// <br/>
		/// <c>VCVTSI2SD xmm1, xmm2, r/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.W0 2A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTSI2SD xmm1, xmm2, r/m32</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W0 2A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtsi2sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister32 src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvtsi2sd_xmm_xmm_rm32 : Code.EVEX_Vcvtsi2sd_xmm_xmm_rm32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), src2.Flags);
		}
		/// <summary>vcvtsi2sd instruction.<br/>
		/// <br/>
		/// <c>VCVTSI2SD xmm1, xmm2, r/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.W1 2A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VCVTSI2SD xmm1, xmm2, r/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 2A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vcvtsi2sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister64 src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvtsi2sd_xmm_xmm_rm64 : Code.EVEX_Vcvtsi2sd_xmm_xmm_rm64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), src2.Flags);
		}
		/// <summary>vcvtsi2sd instruction.<br/>
		/// <br/>
		/// <c>VCVTSI2SD xmm1, xmm2, r/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.W1 2A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VCVTSI2SD xmm1, xmm2, r/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 2A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VCVTSI2SD xmm1, xmm2, r/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.W0 2A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTSI2SD xmm1, xmm2, r/m32</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W0 2A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtsi2sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.Size == MemoryOperandSize.QwordPtr) {
				op = PreferVex ? Code.VEX_Vcvtsi2sd_xmm_xmm_rm64 : Code.EVEX_Vcvtsi2sd_xmm_xmm_rm64_er;
			} else if (src2.Size == MemoryOperandSize.DwordPtr) {
				op = PreferVex ? Code.VEX_Vcvtsi2sd_xmm_xmm_rm32 : Code.EVEX_Vcvtsi2sd_xmm_xmm_rm32_er;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Vcvtsi2sd, dst, src1, src2);
			}
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), src2.Flags);
		}
		/// <summary>vcvtsi2ss instruction.<br/>
		/// <br/>
		/// <c>VCVTSI2SS xmm1, xmm2, r/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.W0 2A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTSI2SS xmm1, xmm2, r/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 2A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtsi2ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister32 src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvtsi2ss_xmm_xmm_rm32 : Code.EVEX_Vcvtsi2ss_xmm_xmm_rm32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), src2.Flags);
		}
		/// <summary>vcvtsi2ss instruction.<br/>
		/// <br/>
		/// <c>VCVTSI2SS xmm1, xmm2, r/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.W1 2A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VCVTSI2SS xmm1, xmm2, r/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W1 2A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vcvtsi2ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister64 src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvtsi2ss_xmm_xmm_rm64 : Code.EVEX_Vcvtsi2ss_xmm_xmm_rm64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), src2.Flags);
		}
		/// <summary>vcvtsi2ss instruction.<br/>
		/// <br/>
		/// <c>VCVTSI2SS xmm1, xmm2, r/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.W1 2A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VCVTSI2SS xmm1, xmm2, r/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W1 2A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VCVTSI2SS xmm1, xmm2, r/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.W0 2A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTSI2SS xmm1, xmm2, r/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 2A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtsi2ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.Size == MemoryOperandSize.QwordPtr) {
				op = PreferVex ? Code.VEX_Vcvtsi2ss_xmm_xmm_rm64 : Code.EVEX_Vcvtsi2ss_xmm_xmm_rm64_er;
			} else if (src2.Size == MemoryOperandSize.DwordPtr) {
				op = PreferVex ? Code.VEX_Vcvtsi2ss_xmm_xmm_rm32 : Code.EVEX_Vcvtsi2ss_xmm_xmm_rm32_er;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Vcvtsi2ss, dst, src1, src2);
			}
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), src2.Flags);
		}
		/// <summary>vcvtss2sd instruction.<br/>
		/// <br/>
		/// <c>VCVTSS2SD xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG 5A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTSS2SD xmm1 {k1}{z}, xmm2, xmm3/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtss2sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvtss2sd_xmm_xmm_xmmm32 : Code.EVEX_Vcvtss2sd_xmm_k1z_xmm_xmmm32_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vcvtss2sd instruction.<br/>
		/// <br/>
		/// <c>VCVTSS2SD xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG 5A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTSS2SD xmm1 {k1}{z}, xmm2, xmm3/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtss2sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvtss2sd_xmm_xmm_xmmm32 : Code.EVEX_Vcvtss2sd_xmm_k1z_xmm_xmmm32_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vcvtss2si instruction.<br/>
		/// <br/>
		/// <c>VCVTSS2SI r32, xmm1/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.W0 2D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTSS2SI r32, xmm1/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 2D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtss2si(AssemblerRegister32 dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvtss2si_r32_xmmm32 : Code.EVEX_Vcvtss2si_r32_xmmm32_er;
			AddInstruction(Instruction.Create(op, dst, src), src.Flags);
		}
		/// <summary>vcvtss2si instruction.<br/>
		/// <br/>
		/// <c>VCVTSS2SI r64, xmm1/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.W1 2D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VCVTSS2SI r64, xmm1/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W1 2D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vcvtss2si(AssemblerRegister64 dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvtss2si_r64_xmmm32 : Code.EVEX_Vcvtss2si_r64_xmmm32_er;
			AddInstruction(Instruction.Create(op, dst, src), src.Flags);
		}
		/// <summary>vcvtss2si instruction.<br/>
		/// <br/>
		/// <c>VCVTSS2SI r32, xmm1/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.W0 2D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTSS2SI r32, xmm1/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 2D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtss2si(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvtss2si_r32_xmmm32 : Code.EVEX_Vcvtss2si_r32_xmmm32_er;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), src.Flags);
		}
		/// <summary>vcvtss2si instruction.<br/>
		/// <br/>
		/// <c>VCVTSS2SI r64, xmm1/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.W1 2D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VCVTSS2SI r64, xmm1/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W1 2D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vcvtss2si(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvtss2si_r64_xmmm32 : Code.EVEX_Vcvtss2si_r64_xmmm32_er;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), src.Flags);
		}
		/// <summary>vcvtss2usi instruction.<br/>
		/// <br/>
		/// <c>VCVTSS2USI r32, xmm1/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtss2usi(AssemblerRegister32 dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vcvtss2usi_r32_xmmm32_er;
			AddInstruction(Instruction.Create(op, dst, src), src.Flags);
		}
		/// <summary>vcvtss2usi instruction.<br/>
		/// <br/>
		/// <c>VCVTSS2USI r64, xmm1/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W1 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vcvtss2usi(AssemblerRegister64 dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vcvtss2usi_r64_xmmm32_er;
			AddInstruction(Instruction.Create(op, dst, src), src.Flags);
		}
		/// <summary>vcvtss2usi instruction.<br/>
		/// <br/>
		/// <c>VCVTSS2USI r32, xmm1/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtss2usi(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtss2usi_r32_xmmm32_er;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), src.Flags);
		}
		/// <summary>vcvtss2usi instruction.<br/>
		/// <br/>
		/// <c>VCVTSS2USI r64, xmm1/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W1 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vcvtss2usi(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtss2usi_r64_xmmm32_er;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), src.Flags);
		}
		/// <summary>vcvttpd2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2DQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG E6 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTTPD2DQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttpd2dq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvttpd2dq_xmm_xmmm128 : Code.EVEX_Vcvttpd2dq_xmm_k1z_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvttpd2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2DQ xmm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG E6 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTTPD2DQ xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttpd2dq(AssemblerRegisterXMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvttpd2dq_xmm_ymmm256 : Code.EVEX_Vcvttpd2dq_xmm_k1z_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvttpd2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2DQ ymm1 {k1}{z}, zmm2/m512/m64bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttpd2dq(AssemblerRegisterYMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vcvttpd2dq_ymm_k1z_zmmm512b64_sae;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags | src.Flags);
		}
		/// <summary>vcvttpd2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2DQ xmm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG E6 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTTPD2DQ xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTTPD2DQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG E6 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTTPD2DQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttpd2dq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			if (src.IsBroadcast) {
				op = Code.EVEX_Vcvttpd2dq_xmm_k1z_ymmm256b64;
			} else if (src.Size == MemoryOperandSize.YwordPtr) {
				op = PreferVex ? Code.VEX_Vcvttpd2dq_xmm_ymmm256 : Code.EVEX_Vcvttpd2dq_xmm_k1z_ymmm256b64;
			} else if (src.Size == MemoryOperandSize.OwordPtr) {
				op = PreferVex ? Code.VEX_Vcvttpd2dq_xmm_xmmm128 : Code.EVEX_Vcvttpd2dq_xmm_k1z_xmmm128b64;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Vcvttpd2dq, dst, src);
			}
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvttpd2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2DQ ymm1 {k1}{z}, zmm2/m512/m64bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttpd2dq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvttpd2dq_ymm_k1z_zmmm512b64_sae;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvttpd2dqx instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2DQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttpd2dqx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvttpd2dq_xmm_k1z_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvttpd2dqy instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2DQ xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttpd2dqy(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvttpd2dq_xmm_k1z_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvttpd2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2QQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttpd2qq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vcvttpd2qq_xmm_k1z_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvttpd2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2QQ ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttpd2qq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vcvttpd2qq_ymm_k1z_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvttpd2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2QQ zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttpd2qq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vcvttpd2qq_zmm_k1z_zmmm512b64_sae;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags | src.Flags);
		}
		/// <summary>vcvttpd2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2QQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttpd2qq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvttpd2qq_xmm_k1z_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvttpd2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2QQ ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttpd2qq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvttpd2qq_ymm_k1z_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvttpd2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2QQ zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttpd2qq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvttpd2qq_zmm_k1z_zmmm512b64_sae;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvttpd2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2UDQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W1 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttpd2udq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vcvttpd2udq_xmm_k1z_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvttpd2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2UDQ xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W1 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttpd2udq(AssemblerRegisterXMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vcvttpd2udq_xmm_k1z_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvttpd2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2UDQ ymm1 {k1}{z}, zmm2/m512/m64bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W1 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttpd2udq(AssemblerRegisterYMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vcvttpd2udq_ymm_k1z_zmmm512b64_sae;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags | src.Flags);
		}
		/// <summary>vcvttpd2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2UDQ xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W1 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTTPD2UDQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W1 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttpd2udq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			if (src.IsBroadcast) {
				op = Code.EVEX_Vcvttpd2udq_xmm_k1z_ymmm256b64;
			} else if (src.Size == MemoryOperandSize.YwordPtr) {
				op = Code.EVEX_Vcvttpd2udq_xmm_k1z_ymmm256b64;
			} else if (src.Size == MemoryOperandSize.OwordPtr) {
				op = Code.EVEX_Vcvttpd2udq_xmm_k1z_xmmm128b64;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Vcvttpd2udq, dst, src);
			}
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvttpd2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2UDQ ymm1 {k1}{z}, zmm2/m512/m64bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W1 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttpd2udq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvttpd2udq_ymm_k1z_zmmm512b64_sae;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvttpd2udqx instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2UDQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W1 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttpd2udqx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvttpd2udq_xmm_k1z_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvttpd2udqy instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2UDQ xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W1 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttpd2udqy(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvttpd2udq_xmm_k1z_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvttpd2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2UQQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttpd2uqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vcvttpd2uqq_xmm_k1z_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvttpd2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2UQQ ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttpd2uqq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vcvttpd2uqq_ymm_k1z_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvttpd2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2UQQ zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttpd2uqq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vcvttpd2uqq_zmm_k1z_zmmm512b64_sae;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags | src.Flags);
		}
		/// <summary>vcvttpd2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2UQQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttpd2uqq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvttpd2uqq_xmm_k1z_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvttpd2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2UQQ ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttpd2uqq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvttpd2uqq_ymm_k1z_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvttpd2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2UQQ zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttpd2uqq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvttpd2uqq_zmm_k1z_zmmm512b64_sae;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvttps2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2DQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.F3.0F.WIG 5B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTTPS2DQ xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttps2dq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvttps2dq_xmm_xmmm128 : Code.EVEX_Vcvttps2dq_xmm_k1z_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvttps2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2DQ ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.F3.0F.WIG 5B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTTPS2DQ ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttps2dq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvttps2dq_ymm_ymmm256 : Code.EVEX_Vcvttps2dq_ymm_k1z_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvttps2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2DQ zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttps2dq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vcvttps2dq_zmm_k1z_zmmm512b32_sae;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags | src.Flags);
		}
		/// <summary>vcvttps2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2DQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.F3.0F.WIG 5B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTTPS2DQ xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttps2dq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			if (src.IsBroadcast) {
				op = Code.EVEX_Vcvttps2dq_xmm_k1z_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vcvttps2dq_xmm_xmmm128 : Code.EVEX_Vcvttps2dq_xmm_k1z_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvttps2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2DQ ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.F3.0F.WIG 5B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTTPS2DQ ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttps2dq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			if (src.IsBroadcast) {
				op = Code.EVEX_Vcvttps2dq_ymm_k1z_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vcvttps2dq_ymm_ymmm256 : Code.EVEX_Vcvttps2dq_ymm_k1z_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvttps2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2DQ zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttps2dq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvttps2dq_zmm_k1z_zmmm512b32_sae;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvttps2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2QQ xmm1 {k1}{z}, xmm2/m64/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttps2qq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vcvttps2qq_xmm_k1z_xmmm64b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvttps2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2QQ ymm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttps2qq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vcvttps2qq_ymm_k1z_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvttps2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2QQ zmm1 {k1}{z}, ymm2/m256/m32bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttps2qq(AssemblerRegisterZMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vcvttps2qq_zmm_k1z_ymmm256b32_sae;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags | src.Flags);
		}
		/// <summary>vcvttps2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2QQ xmm1 {k1}{z}, xmm2/m64/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttps2qq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvttps2qq_xmm_k1z_xmmm64b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvttps2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2QQ ymm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttps2qq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvttps2qq_ymm_k1z_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvttps2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2QQ zmm1 {k1}{z}, ymm2/m256/m32bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttps2qq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvttps2qq_zmm_k1z_ymmm256b32_sae;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvttps2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2UDQ xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttps2udq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vcvttps2udq_xmm_k1z_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvttps2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2UDQ ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttps2udq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vcvttps2udq_ymm_k1z_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvttps2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2UDQ zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttps2udq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vcvttps2udq_zmm_k1z_zmmm512b32_sae;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags | src.Flags);
		}
		/// <summary>vcvttps2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2UDQ xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttps2udq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvttps2udq_xmm_k1z_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvttps2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2UDQ ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttps2udq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvttps2udq_ymm_k1z_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvttps2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2UDQ zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttps2udq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvttps2udq_zmm_k1z_zmmm512b32_sae;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvttps2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2UQQ xmm1 {k1}{z}, xmm2/m64/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttps2uqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vcvttps2uqq_xmm_k1z_xmmm64b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvttps2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2UQQ ymm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttps2uqq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vcvttps2uqq_ymm_k1z_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvttps2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2UQQ zmm1 {k1}{z}, ymm2/m256/m32bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttps2uqq(AssemblerRegisterZMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vcvttps2uqq_zmm_k1z_ymmm256b32_sae;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags | src.Flags);
		}
		/// <summary>vcvttps2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2UQQ xmm1 {k1}{z}, xmm2/m64/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttps2uqq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvttps2uqq_xmm_k1z_xmmm64b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvttps2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2UQQ ymm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttps2uqq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvttps2uqq_ymm_k1z_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvttps2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2UQQ zmm1 {k1}{z}, ymm2/m256/m32bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttps2uqq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvttps2uqq_zmm_k1z_ymmm256b32_sae;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvttsd2si instruction.<br/>
		/// <br/>
		/// <c>VCVTTSD2SI r32, xmm1/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.W0 2C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTTSD2SI r32, xmm1/m64{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W0 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttsd2si(AssemblerRegister32 dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvttsd2si_r32_xmmm64 : Code.EVEX_Vcvttsd2si_r32_xmmm64_sae;
			AddInstruction(Instruction.Create(op, dst, src), src.Flags);
		}
		/// <summary>vcvttsd2si instruction.<br/>
		/// <br/>
		/// <c>VCVTTSD2SI r64, xmm1/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.W1 2C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VCVTTSD2SI r64, xmm1/m64{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vcvttsd2si(AssemblerRegister64 dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvttsd2si_r64_xmmm64 : Code.EVEX_Vcvttsd2si_r64_xmmm64_sae;
			AddInstruction(Instruction.Create(op, dst, src), src.Flags);
		}
		/// <summary>vcvttsd2si instruction.<br/>
		/// <br/>
		/// <c>VCVTTSD2SI r32, xmm1/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.W0 2C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTTSD2SI r32, xmm1/m64{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W0 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttsd2si(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvttsd2si_r32_xmmm64 : Code.EVEX_Vcvttsd2si_r32_xmmm64_sae;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), src.Flags);
		}
		/// <summary>vcvttsd2si instruction.<br/>
		/// <br/>
		/// <c>VCVTTSD2SI r64, xmm1/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.W1 2C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VCVTTSD2SI r64, xmm1/m64{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vcvttsd2si(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvttsd2si_r64_xmmm64 : Code.EVEX_Vcvttsd2si_r64_xmmm64_sae;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), src.Flags);
		}
		/// <summary>vcvttsd2usi instruction.<br/>
		/// <br/>
		/// <c>VCVTTSD2USI r32, xmm1/m64{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttsd2usi(AssemblerRegister32 dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vcvttsd2usi_r32_xmmm64_sae;
			AddInstruction(Instruction.Create(op, dst, src), src.Flags);
		}
		/// <summary>vcvttsd2usi instruction.<br/>
		/// <br/>
		/// <c>VCVTTSD2USI r64, xmm1/m64{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vcvttsd2usi(AssemblerRegister64 dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vcvttsd2usi_r64_xmmm64_sae;
			AddInstruction(Instruction.Create(op, dst, src), src.Flags);
		}
		/// <summary>vcvttsd2usi instruction.<br/>
		/// <br/>
		/// <c>VCVTTSD2USI r32, xmm1/m64{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttsd2usi(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvttsd2usi_r32_xmmm64_sae;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), src.Flags);
		}
		/// <summary>vcvttsd2usi instruction.<br/>
		/// <br/>
		/// <c>VCVTTSD2USI r64, xmm1/m64{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vcvttsd2usi(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvttsd2usi_r64_xmmm64_sae;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), src.Flags);
		}
		/// <summary>vcvttss2si instruction.<br/>
		/// <br/>
		/// <c>VCVTTSS2SI r32, xmm1/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.W0 2C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTTSS2SI r32, xmm1/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttss2si(AssemblerRegister32 dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvttss2si_r32_xmmm32 : Code.EVEX_Vcvttss2si_r32_xmmm32_sae;
			AddInstruction(Instruction.Create(op, dst, src), src.Flags);
		}
		/// <summary>vcvttss2si instruction.<br/>
		/// <br/>
		/// <c>VCVTTSS2SI r64, xmm1/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.W1 2C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VCVTTSS2SI r64, xmm1/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W1 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vcvttss2si(AssemblerRegister64 dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvttss2si_r64_xmmm32 : Code.EVEX_Vcvttss2si_r64_xmmm32_sae;
			AddInstruction(Instruction.Create(op, dst, src), src.Flags);
		}
		/// <summary>vcvttss2si instruction.<br/>
		/// <br/>
		/// <c>VCVTTSS2SI r32, xmm1/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.W0 2C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTTSS2SI r32, xmm1/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttss2si(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvttss2si_r32_xmmm32 : Code.EVEX_Vcvttss2si_r32_xmmm32_sae;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), src.Flags);
		}
		/// <summary>vcvttss2si instruction.<br/>
		/// <br/>
		/// <c>VCVTTSS2SI r64, xmm1/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.W1 2C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VCVTTSS2SI r64, xmm1/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W1 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vcvttss2si(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vcvttss2si_r64_xmmm32 : Code.EVEX_Vcvttss2si_r64_xmmm32_sae;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), src.Flags);
		}
		/// <summary>vcvttss2usi instruction.<br/>
		/// <br/>
		/// <c>VCVTTSS2USI r32, xmm1/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttss2usi(AssemblerRegister32 dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vcvttss2usi_r32_xmmm32_sae;
			AddInstruction(Instruction.Create(op, dst, src), src.Flags);
		}
		/// <summary>vcvttss2usi instruction.<br/>
		/// <br/>
		/// <c>VCVTTSS2USI r64, xmm1/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W1 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vcvttss2usi(AssemblerRegister64 dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vcvttss2usi_r64_xmmm32_sae;
			AddInstruction(Instruction.Create(op, dst, src), src.Flags);
		}
		/// <summary>vcvttss2usi instruction.<br/>
		/// <br/>
		/// <c>VCVTTSS2USI r32, xmm1/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvttss2usi(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvttss2usi_r32_xmmm32_sae;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), src.Flags);
		}
		/// <summary>vcvttss2usi instruction.<br/>
		/// <br/>
		/// <c>VCVTTSS2USI r64, xmm1/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W1 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vcvttss2usi(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvttss2usi_r64_xmmm32_sae;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), src.Flags);
		}
		/// <summary>vcvtudq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTUDQ2PD xmm1 {k1}{z}, xmm2/m64/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtudq2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vcvtudq2pd_xmm_k1z_xmmm64b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvtudq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTUDQ2PD ymm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtudq2pd(AssemblerRegisterYMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vcvtudq2pd_ymm_k1z_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvtudq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTUDQ2PD zmm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtudq2pd(AssemblerRegisterZMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vcvtudq2pd_zmm_k1z_ymmm256b32_er;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags | src.Flags);
		}
		/// <summary>vcvtudq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTUDQ2PD xmm1 {k1}{z}, xmm2/m64/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtudq2pd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtudq2pd_xmm_k1z_xmmm64b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtudq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTUDQ2PD ymm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtudq2pd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtudq2pd_ymm_k1z_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtudq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTUDQ2PD zmm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtudq2pd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtudq2pd_zmm_k1z_ymmm256b32_er;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtudq2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTUDQ2PS xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtudq2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vcvtudq2ps_xmm_k1z_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvtudq2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTUDQ2PS ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtudq2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vcvtudq2ps_ymm_k1z_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvtudq2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTUDQ2PS zmm1 {k1}{z}, zmm2/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtudq2ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vcvtudq2ps_zmm_k1z_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags | src.Flags);
		}
		/// <summary>vcvtudq2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTUDQ2PS xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtudq2ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtudq2ps_xmm_k1z_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtudq2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTUDQ2PS ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtudq2ps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtudq2ps_ymm_k1z_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtudq2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTUDQ2PS zmm1 {k1}{z}, zmm2/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtudq2ps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtudq2ps_zmm_k1z_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtuqq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTUQQ2PD xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtuqq2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vcvtuqq2pd_xmm_k1z_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvtuqq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTUQQ2PD ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtuqq2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vcvtuqq2pd_ymm_k1z_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvtuqq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTUQQ2PD zmm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtuqq2pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vcvtuqq2pd_zmm_k1z_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags | src.Flags);
		}
		/// <summary>vcvtuqq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTUQQ2PD xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtuqq2pd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtuqq2pd_xmm_k1z_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtuqq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTUQQ2PD ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtuqq2pd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtuqq2pd_ymm_k1z_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtuqq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTUQQ2PD zmm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtuqq2pd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtuqq2pd_zmm_k1z_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtuqq2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTUQQ2PS xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtuqq2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vcvtuqq2ps_xmm_k1z_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvtuqq2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTUQQ2PS xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtuqq2ps(AssemblerRegisterXMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vcvtuqq2ps_xmm_k1z_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vcvtuqq2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTUQQ2PS ymm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtuqq2ps(AssemblerRegisterYMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vcvtuqq2ps_ymm_k1z_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags | src.Flags);
		}
		/// <summary>vcvtuqq2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTUQQ2PS xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTUQQ2PS xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtuqq2ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			if (src.IsBroadcast) {
				op = Code.EVEX_Vcvtuqq2ps_xmm_k1z_ymmm256b64;
			} else if (src.Size == MemoryOperandSize.YwordPtr) {
				op = Code.EVEX_Vcvtuqq2ps_xmm_k1z_ymmm256b64;
			} else if (src.Size == MemoryOperandSize.OwordPtr) {
				op = Code.EVEX_Vcvtuqq2ps_xmm_k1z_xmmm128b64;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Vcvtuqq2ps, dst, src);
			}
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtuqq2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTUQQ2PS ymm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtuqq2ps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtuqq2ps_ymm_k1z_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtuqq2psx instruction.<br/>
		/// <br/>
		/// <c>VCVTUQQ2PS xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtuqq2psx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtuqq2ps_xmm_k1z_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtuqq2psy instruction.<br/>
		/// <br/>
		/// <c>VCVTUQQ2PS xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtuqq2psy(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vcvtuqq2ps_xmm_k1z_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vcvtusi2sd instruction.<br/>
		/// <br/>
		/// <c>VCVTUSI2SD xmm1, xmm2, r/m32</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W0 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtusi2sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister32 src2) {
			Code op;
			op = Code.EVEX_Vcvtusi2sd_xmm_xmm_rm32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), src2.Flags);
		}
		/// <summary>vcvtusi2sd instruction.<br/>
		/// <br/>
		/// <c>VCVTUSI2SD xmm1, xmm2, r/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vcvtusi2sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister64 src2) {
			Code op;
			op = Code.EVEX_Vcvtusi2sd_xmm_xmm_rm64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), src2.Flags);
		}
		/// <summary>vcvtusi2sd instruction.<br/>
		/// <br/>
		/// <c>VCVTUSI2SD xmm1, xmm2, r/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VCVTUSI2SD xmm1, xmm2, r/m32</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W0 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtusi2sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.Size == MemoryOperandSize.QwordPtr) {
				op = Code.EVEX_Vcvtusi2sd_xmm_xmm_rm64_er;
			} else if (src2.Size == MemoryOperandSize.DwordPtr) {
				op = Code.EVEX_Vcvtusi2sd_xmm_xmm_rm32_er;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Vcvtusi2sd, dst, src1, src2);
			}
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), src2.Flags);
		}
		/// <summary>vcvtusi2ss instruction.<br/>
		/// <br/>
		/// <c>VCVTUSI2SS xmm1, xmm2, r/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtusi2ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister32 src2) {
			Code op;
			op = Code.EVEX_Vcvtusi2ss_xmm_xmm_rm32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), src2.Flags);
		}
		/// <summary>vcvtusi2ss instruction.<br/>
		/// <br/>
		/// <c>VCVTUSI2SS xmm1, xmm2, r/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W1 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vcvtusi2ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister64 src2) {
			Code op;
			op = Code.EVEX_Vcvtusi2ss_xmm_xmm_rm64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), src2.Flags);
		}
		/// <summary>vcvtusi2ss instruction.<br/>
		/// <br/>
		/// <c>VCVTUSI2SS xmm1, xmm2, r/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W1 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VCVTUSI2SS xmm1, xmm2, r/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vcvtusi2ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.Size == MemoryOperandSize.QwordPtr) {
				op = Code.EVEX_Vcvtusi2ss_xmm_xmm_rm64_er;
			} else if (src2.Size == MemoryOperandSize.DwordPtr) {
				op = Code.EVEX_Vcvtusi2ss_xmm_xmm_rm32_er;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Vcvtusi2ss, dst, src1, src2);
			}
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), src2.Flags);
		}
		/// <summary>vdbpsadbw instruction.<br/>
		/// <br/>
		/// <c>VDBPSADBW xmm1 {k1}{z}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 42 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vdbpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vdbpsadbw_xmm_k1z_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vdbpsadbw instruction.<br/>
		/// <br/>
		/// <c>VDBPSADBW ymm1 {k1}{z}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 42 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vdbpsadbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vdbpsadbw_ymm_k1z_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vdbpsadbw instruction.<br/>
		/// <br/>
		/// <c>VDBPSADBW zmm1 {k1}{z}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 42 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vdbpsadbw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vdbpsadbw_zmm_k1z_zmm_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vdbpsadbw instruction.<br/>
		/// <br/>
		/// <c>VDBPSADBW xmm1 {k1}{z}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 42 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vdbpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vdbpsadbw_xmm_k1z_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vdbpsadbw instruction.<br/>
		/// <br/>
		/// <c>VDBPSADBW ymm1 {k1}{z}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 42 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vdbpsadbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vdbpsadbw_ymm_k1z_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vdbpsadbw instruction.<br/>
		/// <br/>
		/// <c>VDBPSADBW zmm1 {k1}{z}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 42 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vdbpsadbw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vdbpsadbw_zmm_k1z_zmm_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vdbpsadbw instruction.<br/>
		/// <br/>
		/// <c>VDBPSADBW xmm1 {k1}{z}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 42 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vdbpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vdbpsadbw_xmm_k1z_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vdbpsadbw instruction.<br/>
		/// <br/>
		/// <c>VDBPSADBW ymm1 {k1}{z}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 42 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vdbpsadbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vdbpsadbw_ymm_k1z_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vdbpsadbw instruction.<br/>
		/// <br/>
		/// <c>VDBPSADBW zmm1 {k1}{z}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 42 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vdbpsadbw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vdbpsadbw_zmm_k1z_zmm_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vdbpsadbw instruction.<br/>
		/// <br/>
		/// <c>VDBPSADBW xmm1 {k1}{z}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 42 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vdbpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vdbpsadbw_xmm_k1z_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vdbpsadbw instruction.<br/>
		/// <br/>
		/// <c>VDBPSADBW ymm1 {k1}{z}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 42 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vdbpsadbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vdbpsadbw_ymm_k1z_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vdbpsadbw instruction.<br/>
		/// <br/>
		/// <c>VDBPSADBW zmm1 {k1}{z}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 42 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vdbpsadbw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vdbpsadbw_zmm_k1z_zmm_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vdivpd instruction.<br/>
		/// <br/>
		/// <c>VDIVPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 5E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VDIVPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 5E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vdivpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vdivpd_xmm_xmm_xmmm128 : Code.EVEX_Vdivpd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vdivpd instruction.<br/>
		/// <br/>
		/// <c>VDIVPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 5E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VDIVPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 5E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vdivpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vdivpd_ymm_ymm_ymmm256 : Code.EVEX_Vdivpd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vdivpd instruction.<br/>
		/// <br/>
		/// <c>VDIVPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 5E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vdivpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vdivpd_zmm_k1z_zmm_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vdivpd instruction.<br/>
		/// <br/>
		/// <c>VDIVPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 5E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VDIVPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 5E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vdivpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vdivpd_xmm_k1z_xmm_xmmm128b64;
			} else op = PreferVex ? Code.VEX_Vdivpd_xmm_xmm_xmmm128 : Code.EVEX_Vdivpd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vdivpd instruction.<br/>
		/// <br/>
		/// <c>VDIVPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 5E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VDIVPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 5E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vdivpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vdivpd_ymm_k1z_ymm_ymmm256b64;
			} else op = PreferVex ? Code.VEX_Vdivpd_ymm_ymm_ymmm256 : Code.EVEX_Vdivpd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vdivpd instruction.<br/>
		/// <br/>
		/// <c>VDIVPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 5E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vdivpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vdivpd_zmm_k1z_zmm_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vdivps instruction.<br/>
		/// <br/>
		/// <c>VDIVPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 5E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VDIVPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 5E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vdivps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vdivps_xmm_xmm_xmmm128 : Code.EVEX_Vdivps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vdivps instruction.<br/>
		/// <br/>
		/// <c>VDIVPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 5E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VDIVPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 5E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vdivps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vdivps_ymm_ymm_ymmm256 : Code.EVEX_Vdivps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vdivps instruction.<br/>
		/// <br/>
		/// <c>VDIVPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 5E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vdivps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vdivps_zmm_k1z_zmm_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vdivps instruction.<br/>
		/// <br/>
		/// <c>VDIVPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 5E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VDIVPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 5E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vdivps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vdivps_xmm_k1z_xmm_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vdivps_xmm_xmm_xmmm128 : Code.EVEX_Vdivps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vdivps instruction.<br/>
		/// <br/>
		/// <c>VDIVPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 5E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VDIVPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 5E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vdivps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vdivps_ymm_k1z_ymm_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vdivps_ymm_ymm_ymmm256 : Code.EVEX_Vdivps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vdivps instruction.<br/>
		/// <br/>
		/// <c>VDIVPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 5E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vdivps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vdivps_zmm_k1z_zmm_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vdivsd instruction.<br/>
		/// <br/>
		/// <c>VDIVSD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG 5E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VDIVSD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 5E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vdivsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vdivsd_xmm_xmm_xmmm64 : Code.EVEX_Vdivsd_xmm_k1z_xmm_xmmm64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vdivsd instruction.<br/>
		/// <br/>
		/// <c>VDIVSD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG 5E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VDIVSD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 5E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vdivsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vdivsd_xmm_xmm_xmmm64 : Code.EVEX_Vdivsd_xmm_k1z_xmm_xmmm64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vdivss instruction.<br/>
		/// <br/>
		/// <c>VDIVSS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG 5E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VDIVSS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 5E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vdivss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vdivss_xmm_xmm_xmmm32 : Code.EVEX_Vdivss_xmm_k1z_xmm_xmmm32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vdivss instruction.<br/>
		/// <br/>
		/// <c>VDIVSS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG 5E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VDIVSS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 5E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vdivss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vdivss_xmm_xmm_xmmm32 : Code.EVEX_Vdivss_xmm_k1z_xmm_xmmm32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vdpbf16ps instruction.<br/>
		/// <br/>
		/// <c>VDPBF16PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 52 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BF16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vdpbf16ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vdpbf16ps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vdpbf16ps instruction.<br/>
		/// <br/>
		/// <c>VDPBF16PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 52 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BF16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vdpbf16ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vdpbf16ps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vdpbf16ps instruction.<br/>
		/// <br/>
		/// <c>VDPBF16PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 52 /r</c><br/>
		/// <br/>
		/// <c>AVX512F and AVX512_BF16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vdpbf16ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vdpbf16ps_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vdpbf16ps instruction.<br/>
		/// <br/>
		/// <c>VDPBF16PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 52 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BF16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vdpbf16ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vdpbf16ps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vdpbf16ps instruction.<br/>
		/// <br/>
		/// <c>VDPBF16PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 52 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BF16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vdpbf16ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vdpbf16ps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vdpbf16ps instruction.<br/>
		/// <br/>
		/// <c>VDPBF16PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 52 /r</c><br/>
		/// <br/>
		/// <c>AVX512F and AVX512_BF16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vdpbf16ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vdpbf16ps_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vdppd instruction.<br/>
		/// <br/>
		/// <c>VDPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 41 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vdppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vdppd_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm));
		}
		/// <summary>vdppd instruction.<br/>
		/// <br/>
		/// <c>VDPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 41 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vdppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vdppd_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vdppd instruction.<br/>
		/// <br/>
		/// <c>VDPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 41 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vdppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.VEX_Vdppd_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm));
		}
		/// <summary>vdppd instruction.<br/>
		/// <br/>
		/// <c>VDPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 41 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vdppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.VEX_Vdppd_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vdpps instruction.<br/>
		/// <br/>
		/// <c>VDPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 40 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vdpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vdpps_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm));
		}
		/// <summary>vdpps instruction.<br/>
		/// <br/>
		/// <c>VDPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 40 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vdpps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vdpps_ymm_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm));
		}
		/// <summary>vdpps instruction.<br/>
		/// <br/>
		/// <c>VDPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 40 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vdpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vdpps_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vdpps instruction.<br/>
		/// <br/>
		/// <c>VDPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 40 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vdpps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vdpps_ymm_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vdpps instruction.<br/>
		/// <br/>
		/// <c>VDPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 40 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vdpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.VEX_Vdpps_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm));
		}
		/// <summary>vdpps instruction.<br/>
		/// <br/>
		/// <c>VDPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 40 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vdpps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = Code.VEX_Vdpps_ymm_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm));
		}
		/// <summary>vdpps instruction.<br/>
		/// <br/>
		/// <c>VDPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 40 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vdpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.VEX_Vdpps_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vdpps instruction.<br/>
		/// <br/>
		/// <c>VDPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 40 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vdpps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.VEX_Vdpps_ymm_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>verr instruction.<br/>
		/// <br/>
		/// <c>VERR r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 00 /4</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void verr(AssemblerRegister16 dst) {
			Code op;
			op = Code.Verr_rm16;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>verr instruction.<br/>
		/// <br/>
		/// <c>VERR r32/m16</c><br/>
		/// <br/>
		/// <c>o32 0F 00 /4</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void verr(AssemblerRegister32 dst) {
			Code op;
			op = Code.Verr_r32m16;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>verr instruction.<br/>
		/// <br/>
		/// <c>VERR r64/m16</c><br/>
		/// <br/>
		/// <c>REX.W 0F 00 /4</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void verr(AssemblerRegister64 dst) {
			Code op;
			op = Code.Verr_r64m16;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>verr instruction.<br/>
		/// <br/>
		/// <c>VERR r32/m16</c><br/>
		/// <br/>
		/// <c>o32 0F 00 /4</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VERR r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 00 /4</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void verr(AssemblerMemoryOperand dst) {
			Code op;
			op = Bitness >= 32 ? Code.Verr_r32m16 : Code.Verr_rm16;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>verw instruction.<br/>
		/// <br/>
		/// <c>VERW r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 00 /5</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void verw(AssemblerRegister16 dst) {
			Code op;
			op = Code.Verw_rm16;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>verw instruction.<br/>
		/// <br/>
		/// <c>VERW r32/m16</c><br/>
		/// <br/>
		/// <c>o32 0F 00 /5</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void verw(AssemblerRegister32 dst) {
			Code op;
			op = Code.Verw_r32m16;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>verw instruction.<br/>
		/// <br/>
		/// <c>VERW r64/m16</c><br/>
		/// <br/>
		/// <c>REX.W 0F 00 /5</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void verw(AssemblerRegister64 dst) {
			Code op;
			op = Code.Verw_r64m16;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>verw instruction.<br/>
		/// <br/>
		/// <c>VERW r32/m16</c><br/>
		/// <br/>
		/// <c>o32 0F 00 /5</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VERW r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 00 /5</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void verw(AssemblerMemoryOperand dst) {
			Code op;
			op = Bitness >= 32 ? Code.Verw_r32m16 : Code.Verw_rm16;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>vexp2pd instruction.<br/>
		/// <br/>
		/// <c>VEXP2PD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 C8 /r</c><br/>
		/// <br/>
		/// <c>AVX512ER</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vexp2pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vexp2pd_zmm_k1z_zmmm512b64_sae;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags | src.Flags);
		}
		/// <summary>vexp2pd instruction.<br/>
		/// <br/>
		/// <c>VEXP2PD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 C8 /r</c><br/>
		/// <br/>
		/// <c>AVX512ER</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vexp2pd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vexp2pd_zmm_k1z_zmmm512b64_sae;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vexp2ps instruction.<br/>
		/// <br/>
		/// <c>VEXP2PS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 C8 /r</c><br/>
		/// <br/>
		/// <c>AVX512ER</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vexp2ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vexp2ps_zmm_k1z_zmmm512b32_sae;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags | src.Flags);
		}
		/// <summary>vexp2ps instruction.<br/>
		/// <br/>
		/// <c>VEXP2PS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 C8 /r</c><br/>
		/// <br/>
		/// <c>AVX512ER</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vexp2ps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vexp2ps_zmm_k1z_zmmm512b32_sae;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vexpandpd instruction.<br/>
		/// <br/>
		/// <c>VEXPANDPD xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 88 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vexpandpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vexpandpd_xmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vexpandpd instruction.<br/>
		/// <br/>
		/// <c>VEXPANDPD ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 88 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vexpandpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vexpandpd_ymm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vexpandpd instruction.<br/>
		/// <br/>
		/// <c>VEXPANDPD zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 88 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vexpandpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vexpandpd_zmm_k1z_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vexpandpd instruction.<br/>
		/// <br/>
		/// <c>VEXPANDPD xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 88 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vexpandpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vexpandpd_xmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vexpandpd instruction.<br/>
		/// <br/>
		/// <c>VEXPANDPD ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 88 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vexpandpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vexpandpd_ymm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vexpandpd instruction.<br/>
		/// <br/>
		/// <c>VEXPANDPD zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 88 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vexpandpd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vexpandpd_zmm_k1z_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vexpandps instruction.<br/>
		/// <br/>
		/// <c>VEXPANDPS xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 88 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vexpandps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vexpandps_xmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vexpandps instruction.<br/>
		/// <br/>
		/// <c>VEXPANDPS ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 88 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vexpandps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vexpandps_ymm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vexpandps instruction.<br/>
		/// <br/>
		/// <c>VEXPANDPS zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 88 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vexpandps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vexpandps_zmm_k1z_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vexpandps instruction.<br/>
		/// <br/>
		/// <c>VEXPANDPS xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 88 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vexpandps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vexpandps_xmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vexpandps instruction.<br/>
		/// <br/>
		/// <c>VEXPANDPS ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 88 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vexpandps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vexpandps_ymm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vexpandps instruction.<br/>
		/// <br/>
		/// <c>VEXPANDPS zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 88 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vexpandps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vexpandps_zmm_k1z_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vextractf128 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF128 xmm1/m128, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 19 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextractf128(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, sbyte imm) {
			Code op;
			op = Code.VEX_Vextractf128_xmmm128_ymm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>vextractf128 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF128 xmm1/m128, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 19 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextractf128(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, sbyte imm) {
			Code op;
			op = Code.VEX_Vextractf128_xmmm128_ymm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, imm));
		}
		/// <summary>vextractf128 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF128 xmm1/m128, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 19 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextractf128(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, byte imm) {
			Code op;
			op = Code.VEX_Vextractf128_xmmm128_ymm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>vextractf128 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF128 xmm1/m128, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 19 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextractf128(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, byte imm) {
			Code op;
			op = Code.VEX_Vextractf128_xmmm128_ymm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, (uint)imm));
		}
		/// <summary>vextractf32x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF32X4 xmm1/m128 {k1}{z}, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 19 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextractf32x4(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vextractf32x4_xmmm128_k1z_ymm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vextractf32x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF32X4 xmm1/m128 {k1}{z}, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 19 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextractf32x4(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vextractf32x4_xmmm128_k1z_ymm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, imm), dst.Flags);
		}
		/// <summary>vextractf32x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF32X4 xmm1/m128 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 19 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextractf32x4(AssemblerRegisterXMM dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vextractf32x4_xmmm128_k1z_zmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vextractf32x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF32X4 xmm1/m128 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 19 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextractf32x4(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vextractf32x4_xmmm128_k1z_zmm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, imm), dst.Flags);
		}
		/// <summary>vextractf32x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF32X4 xmm1/m128 {k1}{z}, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 19 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextractf32x4(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vextractf32x4_xmmm128_k1z_ymm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vextractf32x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF32X4 xmm1/m128 {k1}{z}, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 19 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextractf32x4(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vextractf32x4_xmmm128_k1z_ymm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, (uint)imm), dst.Flags);
		}
		/// <summary>vextractf32x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF32X4 xmm1/m128 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 19 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextractf32x4(AssemblerRegisterXMM dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vextractf32x4_xmmm128_k1z_zmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vextractf32x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF32X4 xmm1/m128 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 19 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextractf32x4(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vextractf32x4_xmmm128_k1z_zmm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, (uint)imm), dst.Flags);
		}
		/// <summary>vextractf32x8 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF32X8 ymm1/m256 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1B /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextractf32x8(AssemblerRegisterYMM dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vextractf32x8_ymmm256_k1z_zmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vextractf32x8 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF32X8 ymm1/m256 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1B /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextractf32x8(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vextractf32x8_ymmm256_k1z_zmm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, imm), dst.Flags);
		}
		/// <summary>vextractf32x8 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF32X8 ymm1/m256 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1B /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextractf32x8(AssemblerRegisterYMM dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vextractf32x8_ymmm256_k1z_zmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vextractf32x8 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF32X8 ymm1/m256 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1B /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextractf32x8(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vextractf32x8_ymmm256_k1z_zmm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, (uint)imm), dst.Flags);
		}
		/// <summary>vextractf64x2 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF64X2 xmm1/m128 {k1}{z}, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 19 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextractf64x2(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vextractf64x2_xmmm128_k1z_ymm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vextractf64x2 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF64X2 xmm1/m128 {k1}{z}, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 19 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextractf64x2(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vextractf64x2_xmmm128_k1z_ymm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, imm), dst.Flags);
		}
		/// <summary>vextractf64x2 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF64X2 xmm1/m128 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 19 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextractf64x2(AssemblerRegisterXMM dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vextractf64x2_xmmm128_k1z_zmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vextractf64x2 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF64X2 xmm1/m128 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 19 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextractf64x2(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vextractf64x2_xmmm128_k1z_zmm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, imm), dst.Flags);
		}
		/// <summary>vextractf64x2 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF64X2 xmm1/m128 {k1}{z}, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 19 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextractf64x2(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vextractf64x2_xmmm128_k1z_ymm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vextractf64x2 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF64X2 xmm1/m128 {k1}{z}, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 19 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextractf64x2(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vextractf64x2_xmmm128_k1z_ymm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, (uint)imm), dst.Flags);
		}
		/// <summary>vextractf64x2 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF64X2 xmm1/m128 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 19 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextractf64x2(AssemblerRegisterXMM dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vextractf64x2_xmmm128_k1z_zmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vextractf64x2 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF64X2 xmm1/m128 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 19 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextractf64x2(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vextractf64x2_xmmm128_k1z_zmm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, (uint)imm), dst.Flags);
		}
		/// <summary>vextractf64x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF64X4 ymm1/m256 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1B /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextractf64x4(AssemblerRegisterYMM dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vextractf64x4_ymmm256_k1z_zmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vextractf64x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF64X4 ymm1/m256 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1B /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextractf64x4(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vextractf64x4_ymmm256_k1z_zmm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, imm), dst.Flags);
		}
		/// <summary>vextractf64x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF64X4 ymm1/m256 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1B /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextractf64x4(AssemblerRegisterYMM dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vextractf64x4_ymmm256_k1z_zmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vextractf64x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF64X4 ymm1/m256 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1B /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextractf64x4(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vextractf64x4_ymmm256_k1z_zmm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, (uint)imm), dst.Flags);
		}
		/// <summary>vextracti128 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI128 xmm1/m128, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 39 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextracti128(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, sbyte imm) {
			Code op;
			op = Code.VEX_Vextracti128_xmmm128_ymm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>vextracti128 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI128 xmm1/m128, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 39 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextracti128(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, sbyte imm) {
			Code op;
			op = Code.VEX_Vextracti128_xmmm128_ymm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, imm));
		}
		/// <summary>vextracti128 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI128 xmm1/m128, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 39 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextracti128(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, byte imm) {
			Code op;
			op = Code.VEX_Vextracti128_xmmm128_ymm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>vextracti128 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI128 xmm1/m128, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 39 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextracti128(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, byte imm) {
			Code op;
			op = Code.VEX_Vextracti128_xmmm128_ymm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, (uint)imm));
		}
		/// <summary>vextracti32x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI32X4 xmm1/m128 {k1}{z}, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 39 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextracti32x4(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vextracti32x4_xmmm128_k1z_ymm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vextracti32x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI32X4 xmm1/m128 {k1}{z}, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 39 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextracti32x4(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vextracti32x4_xmmm128_k1z_ymm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, imm), dst.Flags);
		}
		/// <summary>vextracti32x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI32X4 xmm1/m128 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 39 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextracti32x4(AssemblerRegisterXMM dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vextracti32x4_xmmm128_k1z_zmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vextracti32x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI32X4 xmm1/m128 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 39 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextracti32x4(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vextracti32x4_xmmm128_k1z_zmm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, imm), dst.Flags);
		}
		/// <summary>vextracti32x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI32X4 xmm1/m128 {k1}{z}, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 39 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextracti32x4(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vextracti32x4_xmmm128_k1z_ymm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vextracti32x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI32X4 xmm1/m128 {k1}{z}, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 39 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextracti32x4(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vextracti32x4_xmmm128_k1z_ymm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, (uint)imm), dst.Flags);
		}
		/// <summary>vextracti32x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI32X4 xmm1/m128 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 39 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextracti32x4(AssemblerRegisterXMM dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vextracti32x4_xmmm128_k1z_zmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vextracti32x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI32X4 xmm1/m128 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 39 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextracti32x4(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vextracti32x4_xmmm128_k1z_zmm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, (uint)imm), dst.Flags);
		}
		/// <summary>vextracti32x8 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI32X8 ymm1/m256 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3B /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextracti32x8(AssemblerRegisterYMM dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vextracti32x8_ymmm256_k1z_zmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vextracti32x8 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI32X8 ymm1/m256 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3B /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextracti32x8(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vextracti32x8_ymmm256_k1z_zmm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, imm), dst.Flags);
		}
		/// <summary>vextracti32x8 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI32X8 ymm1/m256 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3B /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextracti32x8(AssemblerRegisterYMM dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vextracti32x8_ymmm256_k1z_zmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vextracti32x8 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI32X8 ymm1/m256 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3B /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextracti32x8(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vextracti32x8_ymmm256_k1z_zmm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, (uint)imm), dst.Flags);
		}
		/// <summary>vextracti64x2 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI64X2 xmm1/m128 {k1}{z}, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 39 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextracti64x2(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vextracti64x2_xmmm128_k1z_ymm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vextracti64x2 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI64X2 xmm1/m128 {k1}{z}, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 39 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextracti64x2(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vextracti64x2_xmmm128_k1z_ymm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, imm), dst.Flags);
		}
		/// <summary>vextracti64x2 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI64X2 xmm1/m128 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 39 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextracti64x2(AssemblerRegisterXMM dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vextracti64x2_xmmm128_k1z_zmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vextracti64x2 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI64X2 xmm1/m128 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 39 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextracti64x2(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vextracti64x2_xmmm128_k1z_zmm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, imm), dst.Flags);
		}
		/// <summary>vextracti64x2 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI64X2 xmm1/m128 {k1}{z}, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 39 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextracti64x2(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vextracti64x2_xmmm128_k1z_ymm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vextracti64x2 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI64X2 xmm1/m128 {k1}{z}, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 39 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextracti64x2(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vextracti64x2_xmmm128_k1z_ymm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, (uint)imm), dst.Flags);
		}
		/// <summary>vextracti64x2 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI64X2 xmm1/m128 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 39 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextracti64x2(AssemblerRegisterXMM dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vextracti64x2_xmmm128_k1z_zmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vextracti64x2 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI64X2 xmm1/m128 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 39 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextracti64x2(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vextracti64x2_xmmm128_k1z_zmm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, (uint)imm), dst.Flags);
		}
		/// <summary>vextracti64x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI64X4 ymm1/m256 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3B /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextracti64x4(AssemblerRegisterYMM dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vextracti64x4_ymmm256_k1z_zmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vextracti64x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI64X4 ymm1/m256 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3B /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextracti64x4(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vextracti64x4_ymmm256_k1z_zmm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, imm), dst.Flags);
		}
		/// <summary>vextracti64x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI64X4 ymm1/m256 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3B /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextracti64x4(AssemblerRegisterYMM dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vextracti64x4_ymmm256_k1z_zmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vextracti64x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI64X4 ymm1/m256 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3B /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextracti64x4(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vextracti64x4_ymmm256_k1z_zmm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, (uint)imm), dst.Flags);
		}
		/// <summary>vextractps instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTPS r/m32, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 17 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VEXTRACTPS r/m32, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 17 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextractps(AssemblerRegister32 dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vextractps_rm32_xmm_imm8 : Code.EVEX_Vextractps_rm32_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>vextractps instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTPS r64/m32, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 17 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VEXTRACTPS r64/m32, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 17 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vextractps(AssemblerRegister64 dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vextractps_r64m32_xmm_imm8 : Code.EVEX_Vextractps_r64m32_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>vextractps instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTPS r/m32, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 17 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VEXTRACTPS r/m32, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 17 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextractps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vextractps_rm32_xmm_imm8 : Code.EVEX_Vextractps_rm32_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, imm));
		}
		/// <summary>vextractps instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTPS r/m32, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 17 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VEXTRACTPS r/m32, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 17 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextractps(AssemblerRegister32 dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vextractps_rm32_xmm_imm8 : Code.EVEX_Vextractps_rm32_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>vextractps instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTPS r64/m32, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 17 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VEXTRACTPS r64/m32, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 17 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vextractps(AssemblerRegister64 dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vextractps_r64m32_xmm_imm8 : Code.EVEX_Vextractps_r64m32_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>vextractps instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTPS r/m32, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 17 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VEXTRACTPS r/m32, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 17 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vextractps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vextractps_rm32_xmm_imm8 : Code.EVEX_Vextractps_rm32_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, (uint)imm));
		}
		/// <summary>vfixupimmpd instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfixupimmpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vfixupimmpd_xmm_k1z_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vfixupimmpd instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfixupimmpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vfixupimmpd_ymm_k1z_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vfixupimmpd instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfixupimmpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vfixupimmpd_zmm_k1z_zmm_zmmm512b64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags | src2.Flags);
		}
		/// <summary>vfixupimmpd instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfixupimmpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vfixupimmpd_xmm_k1z_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vfixupimmpd instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfixupimmpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vfixupimmpd_ymm_k1z_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vfixupimmpd instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfixupimmpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vfixupimmpd_zmm_k1z_zmm_zmmm512b64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vfixupimmpd instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfixupimmpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vfixupimmpd_xmm_k1z_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vfixupimmpd instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfixupimmpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vfixupimmpd_ymm_k1z_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vfixupimmpd instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfixupimmpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vfixupimmpd_zmm_k1z_zmm_zmmm512b64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vfixupimmpd instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfixupimmpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vfixupimmpd_xmm_k1z_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vfixupimmpd instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfixupimmpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vfixupimmpd_ymm_k1z_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vfixupimmpd instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfixupimmpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vfixupimmpd_zmm_k1z_zmm_zmmm512b64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vfixupimmps instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfixupimmps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vfixupimmps_xmm_k1z_xmm_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vfixupimmps instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfixupimmps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vfixupimmps_ymm_k1z_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vfixupimmps instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfixupimmps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vfixupimmps_zmm_k1z_zmm_zmmm512b32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags | src2.Flags);
		}
		/// <summary>vfixupimmps instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfixupimmps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vfixupimmps_xmm_k1z_xmm_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vfixupimmps instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfixupimmps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vfixupimmps_ymm_k1z_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vfixupimmps instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfixupimmps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vfixupimmps_zmm_k1z_zmm_zmmm512b32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vfixupimmps instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfixupimmps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vfixupimmps_xmm_k1z_xmm_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vfixupimmps instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfixupimmps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vfixupimmps_ymm_k1z_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vfixupimmps instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfixupimmps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vfixupimmps_zmm_k1z_zmm_zmmm512b32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vfixupimmps instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfixupimmps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vfixupimmps_xmm_k1z_xmm_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vfixupimmps instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfixupimmps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vfixupimmps_ymm_k1z_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vfixupimmps instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfixupimmps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vfixupimmps_zmm_k1z_zmm_zmmm512b32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vfixupimmsd instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 55 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfixupimmsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vfixupimmsd_xmm_k1z_xmm_xmmm64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags | src2.Flags);
		}
		/// <summary>vfixupimmsd instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 55 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfixupimmsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vfixupimmsd_xmm_k1z_xmm_xmmm64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vfixupimmsd instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 55 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfixupimmsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vfixupimmsd_xmm_k1z_xmm_xmmm64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vfixupimmsd instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 55 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfixupimmsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vfixupimmsd_xmm_k1z_xmm_xmmm64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vfixupimmss instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 55 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfixupimmss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vfixupimmss_xmm_k1z_xmm_xmmm32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags | src2.Flags);
		}
		/// <summary>vfixupimmss instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 55 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfixupimmss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vfixupimmss_xmm_k1z_xmm_xmmm32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vfixupimmss instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 55 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfixupimmss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vfixupimmss_xmm_k1z_xmm_xmmm32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vfixupimmss instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 55 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfixupimmss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vfixupimmss_xmm_k1z_xmm_xmmm32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vfmadd132pd instruction.<br/>
		/// <br/>
		/// <c>VFMADD132PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 98 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD132PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 98 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmadd132pd_xmm_xmm_xmmm128 : Code.EVEX_Vfmadd132pd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmadd132pd instruction.<br/>
		/// <br/>
		/// <c>VFMADD132PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 98 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD132PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 98 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmadd132pd_ymm_ymm_ymmm256 : Code.EVEX_Vfmadd132pd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmadd132pd instruction.<br/>
		/// <br/>
		/// <c>VFMADD132PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 98 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vfmadd132pd_zmm_k1z_zmm_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfmadd132pd instruction.<br/>
		/// <br/>
		/// <c>VFMADD132PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 98 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD132PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 98 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmadd132pd_xmm_k1z_xmm_xmmm128b64;
			} else op = PreferVex ? Code.VEX_Vfmadd132pd_xmm_xmm_xmmm128 : Code.EVEX_Vfmadd132pd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmadd132pd instruction.<br/>
		/// <br/>
		/// <c>VFMADD132PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 98 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD132PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 98 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmadd132pd_ymm_k1z_ymm_ymmm256b64;
			} else op = PreferVex ? Code.VEX_Vfmadd132pd_ymm_ymm_ymmm256 : Code.EVEX_Vfmadd132pd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmadd132pd instruction.<br/>
		/// <br/>
		/// <c>VFMADD132PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 98 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vfmadd132pd_zmm_k1z_zmm_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmadd132ps instruction.<br/>
		/// <br/>
		/// <c>VFMADD132PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 98 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD132PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 98 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmadd132ps_xmm_xmm_xmmm128 : Code.EVEX_Vfmadd132ps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmadd132ps instruction.<br/>
		/// <br/>
		/// <c>VFMADD132PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 98 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD132PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 98 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmadd132ps_ymm_ymm_ymmm256 : Code.EVEX_Vfmadd132ps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmadd132ps instruction.<br/>
		/// <br/>
		/// <c>VFMADD132PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 98 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vfmadd132ps_zmm_k1z_zmm_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfmadd132ps instruction.<br/>
		/// <br/>
		/// <c>VFMADD132PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 98 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD132PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 98 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmadd132ps_xmm_k1z_xmm_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vfmadd132ps_xmm_xmm_xmmm128 : Code.EVEX_Vfmadd132ps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmadd132ps instruction.<br/>
		/// <br/>
		/// <c>VFMADD132PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 98 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD132PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 98 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmadd132ps_ymm_k1z_ymm_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vfmadd132ps_ymm_ymm_ymmm256 : Code.EVEX_Vfmadd132ps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmadd132ps instruction.<br/>
		/// <br/>
		/// <c>VFMADD132PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 98 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vfmadd132ps_zmm_k1z_zmm_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmadd132sd instruction.<br/>
		/// <br/>
		/// <c>VFMADD132SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 99 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD132SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 99 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd132sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmadd132sd_xmm_xmm_xmmm64 : Code.EVEX_Vfmadd132sd_xmm_k1z_xmm_xmmm64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfmadd132sd instruction.<br/>
		/// <br/>
		/// <c>VFMADD132SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 99 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD132SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 99 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd132sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmadd132sd_xmm_xmm_xmmm64 : Code.EVEX_Vfmadd132sd_xmm_k1z_xmm_xmmm64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmadd132ss instruction.<br/>
		/// <br/>
		/// <c>VFMADD132SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 99 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD132SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 99 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd132ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmadd132ss_xmm_xmm_xmmm32 : Code.EVEX_Vfmadd132ss_xmm_k1z_xmm_xmmm32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfmadd132ss instruction.<br/>
		/// <br/>
		/// <c>VFMADD132SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 99 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD132SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 99 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd132ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmadd132ss_xmm_xmm_xmmm32 : Code.EVEX_Vfmadd132ss_xmm_k1z_xmm_xmmm32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmadd213pd instruction.<br/>
		/// <br/>
		/// <c>VFMADD213PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 A8 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD213PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 A8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmadd213pd_xmm_xmm_xmmm128 : Code.EVEX_Vfmadd213pd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmadd213pd instruction.<br/>
		/// <br/>
		/// <c>VFMADD213PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 A8 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD213PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 A8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmadd213pd_ymm_ymm_ymmm256 : Code.EVEX_Vfmadd213pd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmadd213pd instruction.<br/>
		/// <br/>
		/// <c>VFMADD213PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 A8 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vfmadd213pd_zmm_k1z_zmm_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfmadd213pd instruction.<br/>
		/// <br/>
		/// <c>VFMADD213PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 A8 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD213PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 A8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmadd213pd_xmm_k1z_xmm_xmmm128b64;
			} else op = PreferVex ? Code.VEX_Vfmadd213pd_xmm_xmm_xmmm128 : Code.EVEX_Vfmadd213pd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmadd213pd instruction.<br/>
		/// <br/>
		/// <c>VFMADD213PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 A8 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD213PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 A8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmadd213pd_ymm_k1z_ymm_ymmm256b64;
			} else op = PreferVex ? Code.VEX_Vfmadd213pd_ymm_ymm_ymmm256 : Code.EVEX_Vfmadd213pd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmadd213pd instruction.<br/>
		/// <br/>
		/// <c>VFMADD213PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 A8 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vfmadd213pd_zmm_k1z_zmm_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmadd213ps instruction.<br/>
		/// <br/>
		/// <c>VFMADD213PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 A8 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD213PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 A8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmadd213ps_xmm_xmm_xmmm128 : Code.EVEX_Vfmadd213ps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmadd213ps instruction.<br/>
		/// <br/>
		/// <c>VFMADD213PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 A8 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD213PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 A8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmadd213ps_ymm_ymm_ymmm256 : Code.EVEX_Vfmadd213ps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmadd213ps instruction.<br/>
		/// <br/>
		/// <c>VFMADD213PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 A8 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vfmadd213ps_zmm_k1z_zmm_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfmadd213ps instruction.<br/>
		/// <br/>
		/// <c>VFMADD213PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 A8 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD213PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 A8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmadd213ps_xmm_k1z_xmm_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vfmadd213ps_xmm_xmm_xmmm128 : Code.EVEX_Vfmadd213ps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmadd213ps instruction.<br/>
		/// <br/>
		/// <c>VFMADD213PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 A8 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD213PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 A8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmadd213ps_ymm_k1z_ymm_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vfmadd213ps_ymm_ymm_ymmm256 : Code.EVEX_Vfmadd213ps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmadd213ps instruction.<br/>
		/// <br/>
		/// <c>VFMADD213PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 A8 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vfmadd213ps_zmm_k1z_zmm_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmadd213sd instruction.<br/>
		/// <br/>
		/// <c>VFMADD213SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 A9 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD213SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 A9 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd213sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmadd213sd_xmm_xmm_xmmm64 : Code.EVEX_Vfmadd213sd_xmm_k1z_xmm_xmmm64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfmadd213sd instruction.<br/>
		/// <br/>
		/// <c>VFMADD213SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 A9 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD213SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 A9 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd213sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmadd213sd_xmm_xmm_xmmm64 : Code.EVEX_Vfmadd213sd_xmm_k1z_xmm_xmmm64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmadd213ss instruction.<br/>
		/// <br/>
		/// <c>VFMADD213SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 A9 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD213SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 A9 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd213ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmadd213ss_xmm_xmm_xmmm32 : Code.EVEX_Vfmadd213ss_xmm_k1z_xmm_xmmm32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfmadd213ss instruction.<br/>
		/// <br/>
		/// <c>VFMADD213SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 A9 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD213SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 A9 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd213ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmadd213ss_xmm_xmm_xmmm32 : Code.EVEX_Vfmadd213ss_xmm_k1z_xmm_xmmm32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmadd231pd instruction.<br/>
		/// <br/>
		/// <c>VFMADD231PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 B8 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD231PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 B8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmadd231pd_xmm_xmm_xmmm128 : Code.EVEX_Vfmadd231pd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmadd231pd instruction.<br/>
		/// <br/>
		/// <c>VFMADD231PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 B8 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD231PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 B8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmadd231pd_ymm_ymm_ymmm256 : Code.EVEX_Vfmadd231pd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmadd231pd instruction.<br/>
		/// <br/>
		/// <c>VFMADD231PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 B8 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vfmadd231pd_zmm_k1z_zmm_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfmadd231pd instruction.<br/>
		/// <br/>
		/// <c>VFMADD231PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 B8 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD231PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 B8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmadd231pd_xmm_k1z_xmm_xmmm128b64;
			} else op = PreferVex ? Code.VEX_Vfmadd231pd_xmm_xmm_xmmm128 : Code.EVEX_Vfmadd231pd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmadd231pd instruction.<br/>
		/// <br/>
		/// <c>VFMADD231PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 B8 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD231PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 B8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmadd231pd_ymm_k1z_ymm_ymmm256b64;
			} else op = PreferVex ? Code.VEX_Vfmadd231pd_ymm_ymm_ymmm256 : Code.EVEX_Vfmadd231pd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmadd231pd instruction.<br/>
		/// <br/>
		/// <c>VFMADD231PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 B8 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vfmadd231pd_zmm_k1z_zmm_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmadd231ps instruction.<br/>
		/// <br/>
		/// <c>VFMADD231PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 B8 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD231PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 B8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmadd231ps_xmm_xmm_xmmm128 : Code.EVEX_Vfmadd231ps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmadd231ps instruction.<br/>
		/// <br/>
		/// <c>VFMADD231PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 B8 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD231PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 B8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmadd231ps_ymm_ymm_ymmm256 : Code.EVEX_Vfmadd231ps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmadd231ps instruction.<br/>
		/// <br/>
		/// <c>VFMADD231PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 B8 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vfmadd231ps_zmm_k1z_zmm_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfmadd231ps instruction.<br/>
		/// <br/>
		/// <c>VFMADD231PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 B8 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD231PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 B8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmadd231ps_xmm_k1z_xmm_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vfmadd231ps_xmm_xmm_xmmm128 : Code.EVEX_Vfmadd231ps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmadd231ps instruction.<br/>
		/// <br/>
		/// <c>VFMADD231PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 B8 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD231PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 B8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmadd231ps_ymm_k1z_ymm_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vfmadd231ps_ymm_ymm_ymmm256 : Code.EVEX_Vfmadd231ps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmadd231ps instruction.<br/>
		/// <br/>
		/// <c>VFMADD231PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 B8 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vfmadd231ps_zmm_k1z_zmm_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmadd231sd instruction.<br/>
		/// <br/>
		/// <c>VFMADD231SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 B9 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD231SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 B9 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd231sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmadd231sd_xmm_xmm_xmmm64 : Code.EVEX_Vfmadd231sd_xmm_k1z_xmm_xmmm64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfmadd231sd instruction.<br/>
		/// <br/>
		/// <c>VFMADD231SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 B9 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD231SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 B9 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd231sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmadd231sd_xmm_xmm_xmmm64 : Code.EVEX_Vfmadd231sd_xmm_k1z_xmm_xmmm64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmadd231ss instruction.<br/>
		/// <br/>
		/// <c>VFMADD231SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 B9 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD231SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 B9 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd231ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmadd231ss_xmm_xmm_xmmm32 : Code.EVEX_Vfmadd231ss_xmm_k1z_xmm_xmmm32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfmadd231ss instruction.<br/>
		/// <br/>
		/// <c>VFMADD231SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 B9 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD231SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 B9 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmadd231ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmadd231ss_xmm_xmm_xmmm32 : Code.EVEX_Vfmadd231ss_xmm_k1z_xmm_xmmm32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmaddpd instruction.<br/>
		/// <br/>
		/// <c>VFMADDPD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 69 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.VEX_Vfmaddpd_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vfmaddpd instruction.<br/>
		/// <br/>
		/// <c>VFMADDPD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 69 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.VEX_Vfmaddpd_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vfmaddpd instruction.<br/>
		/// <br/>
		/// <c>VFMADDPD ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 69 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3) {
			Code op;
			op = Code.VEX_Vfmaddpd_ymm_ymm_ymmm256_ymm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vfmaddpd instruction.<br/>
		/// <br/>
		/// <c>VFMADDPD ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 69 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3) {
			Code op;
			op = Code.VEX_Vfmaddpd_ymm_ymm_ymmm256_ymm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vfmaddpd instruction.<br/>
		/// <br/>
		/// <c>VFMADDPD xmm1, xmm2, xmm3, xmm4/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 69 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3) {
			Code op;
			op = Code.VEX_Vfmaddpd_xmm_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3.ToMemoryOperand(Bitness)));
		}
		/// <summary>vfmaddpd instruction.<br/>
		/// <br/>
		/// <c>VFMADDPD ymm1, ymm2, ymm3, ymm4/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 69 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3) {
			Code op;
			op = Code.VEX_Vfmaddpd_ymm_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3.ToMemoryOperand(Bitness)));
		}
		/// <summary>vfmaddps instruction.<br/>
		/// <br/>
		/// <c>VFMADDPS xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 68 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.VEX_Vfmaddps_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vfmaddps instruction.<br/>
		/// <br/>
		/// <c>VFMADDPS xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 68 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.VEX_Vfmaddps_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vfmaddps instruction.<br/>
		/// <br/>
		/// <c>VFMADDPS ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 68 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3) {
			Code op;
			op = Code.VEX_Vfmaddps_ymm_ymm_ymmm256_ymm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vfmaddps instruction.<br/>
		/// <br/>
		/// <c>VFMADDPS ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 68 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3) {
			Code op;
			op = Code.VEX_Vfmaddps_ymm_ymm_ymmm256_ymm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vfmaddps instruction.<br/>
		/// <br/>
		/// <c>VFMADDPS xmm1, xmm2, xmm3, xmm4/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 68 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3) {
			Code op;
			op = Code.VEX_Vfmaddps_xmm_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3.ToMemoryOperand(Bitness)));
		}
		/// <summary>vfmaddps instruction.<br/>
		/// <br/>
		/// <c>VFMADDPS ymm1, ymm2, ymm3, ymm4/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 68 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3) {
			Code op;
			op = Code.VEX_Vfmaddps_ymm_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3.ToMemoryOperand(Bitness)));
		}
		/// <summary>vfmaddsd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSD xmm1, xmm2, xmm3/m64, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W0 6B /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.VEX_Vfmaddsd_xmm_xmm_xmmm64_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vfmaddsd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSD xmm1, xmm2, xmm3/m64, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W0 6B /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.VEX_Vfmaddsd_xmm_xmm_xmmm64_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vfmaddsd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSD xmm1, xmm2, xmm3, xmm4/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W1 6B /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3) {
			Code op;
			op = Code.VEX_Vfmaddsd_xmm_xmm_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3.ToMemoryOperand(Bitness)));
		}
		/// <summary>vfmaddss instruction.<br/>
		/// <br/>
		/// <c>VFMADDSS xmm1, xmm2, xmm3/m32, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W0 6A /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.VEX_Vfmaddss_xmm_xmm_xmmm32_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vfmaddss instruction.<br/>
		/// <br/>
		/// <c>VFMADDSS xmm1, xmm2, xmm3/m32, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W0 6A /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.VEX_Vfmaddss_xmm_xmm_xmmm32_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vfmaddss instruction.<br/>
		/// <br/>
		/// <c>VFMADDSS xmm1, xmm2, xmm3, xmm4/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W1 6A /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3) {
			Code op;
			op = Code.VEX_Vfmaddss_xmm_xmm_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3.ToMemoryOperand(Bitness)));
		}
		/// <summary>vfmaddsub132pd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB132PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 96 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB132PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 96 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsub132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmaddsub132pd_xmm_xmm_xmmm128 : Code.EVEX_Vfmaddsub132pd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmaddsub132pd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB132PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 96 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB132PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 96 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsub132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmaddsub132pd_ymm_ymm_ymmm256 : Code.EVEX_Vfmaddsub132pd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmaddsub132pd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB132PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 96 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsub132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vfmaddsub132pd_zmm_k1z_zmm_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfmaddsub132pd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB132PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 96 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB132PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 96 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsub132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmaddsub132pd_xmm_k1z_xmm_xmmm128b64;
			} else op = PreferVex ? Code.VEX_Vfmaddsub132pd_xmm_xmm_xmmm128 : Code.EVEX_Vfmaddsub132pd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmaddsub132pd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB132PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 96 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB132PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 96 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsub132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmaddsub132pd_ymm_k1z_ymm_ymmm256b64;
			} else op = PreferVex ? Code.VEX_Vfmaddsub132pd_ymm_ymm_ymmm256 : Code.EVEX_Vfmaddsub132pd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmaddsub132pd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB132PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 96 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsub132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vfmaddsub132pd_zmm_k1z_zmm_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmaddsub132ps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB132PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 96 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB132PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 96 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsub132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmaddsub132ps_xmm_xmm_xmmm128 : Code.EVEX_Vfmaddsub132ps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmaddsub132ps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB132PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 96 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB132PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 96 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsub132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmaddsub132ps_ymm_ymm_ymmm256 : Code.EVEX_Vfmaddsub132ps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmaddsub132ps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB132PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 96 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsub132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vfmaddsub132ps_zmm_k1z_zmm_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfmaddsub132ps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB132PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 96 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB132PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 96 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsub132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmaddsub132ps_xmm_k1z_xmm_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vfmaddsub132ps_xmm_xmm_xmmm128 : Code.EVEX_Vfmaddsub132ps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmaddsub132ps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB132PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 96 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB132PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 96 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsub132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmaddsub132ps_ymm_k1z_ymm_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vfmaddsub132ps_ymm_ymm_ymmm256 : Code.EVEX_Vfmaddsub132ps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmaddsub132ps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB132PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 96 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsub132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vfmaddsub132ps_zmm_k1z_zmm_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmaddsub213pd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB213PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 A6 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB213PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 A6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsub213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmaddsub213pd_xmm_xmm_xmmm128 : Code.EVEX_Vfmaddsub213pd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmaddsub213pd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB213PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 A6 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB213PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 A6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsub213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmaddsub213pd_ymm_ymm_ymmm256 : Code.EVEX_Vfmaddsub213pd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmaddsub213pd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB213PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 A6 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsub213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vfmaddsub213pd_zmm_k1z_zmm_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfmaddsub213pd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB213PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 A6 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB213PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 A6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsub213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmaddsub213pd_xmm_k1z_xmm_xmmm128b64;
			} else op = PreferVex ? Code.VEX_Vfmaddsub213pd_xmm_xmm_xmmm128 : Code.EVEX_Vfmaddsub213pd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmaddsub213pd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB213PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 A6 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB213PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 A6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsub213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmaddsub213pd_ymm_k1z_ymm_ymmm256b64;
			} else op = PreferVex ? Code.VEX_Vfmaddsub213pd_ymm_ymm_ymmm256 : Code.EVEX_Vfmaddsub213pd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmaddsub213pd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB213PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 A6 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsub213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vfmaddsub213pd_zmm_k1z_zmm_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmaddsub213ps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB213PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 A6 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB213PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 A6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsub213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmaddsub213ps_xmm_xmm_xmmm128 : Code.EVEX_Vfmaddsub213ps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmaddsub213ps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB213PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 A6 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB213PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 A6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsub213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmaddsub213ps_ymm_ymm_ymmm256 : Code.EVEX_Vfmaddsub213ps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmaddsub213ps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB213PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 A6 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsub213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vfmaddsub213ps_zmm_k1z_zmm_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfmaddsub213ps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB213PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 A6 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB213PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 A6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsub213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmaddsub213ps_xmm_k1z_xmm_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vfmaddsub213ps_xmm_xmm_xmmm128 : Code.EVEX_Vfmaddsub213ps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmaddsub213ps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB213PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 A6 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB213PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 A6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsub213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmaddsub213ps_ymm_k1z_ymm_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vfmaddsub213ps_ymm_ymm_ymmm256 : Code.EVEX_Vfmaddsub213ps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmaddsub213ps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB213PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 A6 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsub213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vfmaddsub213ps_zmm_k1z_zmm_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmaddsub231pd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB231PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 B6 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB231PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 B6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsub231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmaddsub231pd_xmm_xmm_xmmm128 : Code.EVEX_Vfmaddsub231pd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmaddsub231pd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB231PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 B6 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB231PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 B6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsub231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmaddsub231pd_ymm_ymm_ymmm256 : Code.EVEX_Vfmaddsub231pd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmaddsub231pd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB231PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 B6 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsub231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vfmaddsub231pd_zmm_k1z_zmm_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfmaddsub231pd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB231PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 B6 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB231PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 B6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsub231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmaddsub231pd_xmm_k1z_xmm_xmmm128b64;
			} else op = PreferVex ? Code.VEX_Vfmaddsub231pd_xmm_xmm_xmmm128 : Code.EVEX_Vfmaddsub231pd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmaddsub231pd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB231PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 B6 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB231PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 B6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsub231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmaddsub231pd_ymm_k1z_ymm_ymmm256b64;
			} else op = PreferVex ? Code.VEX_Vfmaddsub231pd_ymm_ymm_ymmm256 : Code.EVEX_Vfmaddsub231pd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmaddsub231pd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB231PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 B6 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsub231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vfmaddsub231pd_zmm_k1z_zmm_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmaddsub231ps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB231PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 B6 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB231PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 B6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsub231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmaddsub231ps_xmm_xmm_xmmm128 : Code.EVEX_Vfmaddsub231ps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmaddsub231ps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB231PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 B6 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB231PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 B6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsub231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmaddsub231ps_ymm_ymm_ymmm256 : Code.EVEX_Vfmaddsub231ps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmaddsub231ps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB231PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 B6 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsub231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vfmaddsub231ps_zmm_k1z_zmm_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfmaddsub231ps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB231PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 B6 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB231PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 B6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsub231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmaddsub231ps_xmm_k1z_xmm_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vfmaddsub231ps_xmm_xmm_xmmm128 : Code.EVEX_Vfmaddsub231ps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmaddsub231ps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB231PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 B6 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB231PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 B6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsub231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmaddsub231ps_ymm_k1z_ymm_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vfmaddsub231ps_ymm_ymm_ymmm256 : Code.EVEX_Vfmaddsub231ps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmaddsub231ps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB231PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 B6 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsub231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vfmaddsub231ps_zmm_k1z_zmm_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmaddsubpd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUBPD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 5D /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.VEX_Vfmaddsubpd_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vfmaddsubpd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUBPD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 5D /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.VEX_Vfmaddsubpd_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vfmaddsubpd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUBPD ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 5D /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3) {
			Code op;
			op = Code.VEX_Vfmaddsubpd_ymm_ymm_ymmm256_ymm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vfmaddsubpd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUBPD ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 5D /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3) {
			Code op;
			op = Code.VEX_Vfmaddsubpd_ymm_ymm_ymmm256_ymm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vfmaddsubpd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUBPD xmm1, xmm2, xmm3, xmm4/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 5D /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3) {
			Code op;
			op = Code.VEX_Vfmaddsubpd_xmm_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3.ToMemoryOperand(Bitness)));
		}
		/// <summary>vfmaddsubpd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUBPD ymm1, ymm2, ymm3, ymm4/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 5D /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3) {
			Code op;
			op = Code.VEX_Vfmaddsubpd_ymm_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3.ToMemoryOperand(Bitness)));
		}
		/// <summary>vfmaddsubps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUBPS xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 5C /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.VEX_Vfmaddsubps_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vfmaddsubps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUBPS xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 5C /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.VEX_Vfmaddsubps_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vfmaddsubps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUBPS ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 5C /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3) {
			Code op;
			op = Code.VEX_Vfmaddsubps_ymm_ymm_ymmm256_ymm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vfmaddsubps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUBPS ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 5C /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3) {
			Code op;
			op = Code.VEX_Vfmaddsubps_ymm_ymm_ymmm256_ymm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vfmaddsubps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUBPS xmm1, xmm2, xmm3, xmm4/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 5C /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3) {
			Code op;
			op = Code.VEX_Vfmaddsubps_xmm_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3.ToMemoryOperand(Bitness)));
		}
		/// <summary>vfmaddsubps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUBPS ymm1, ymm2, ymm3, ymm4/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 5C /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmaddsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3) {
			Code op;
			op = Code.VEX_Vfmaddsubps_ymm_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3.ToMemoryOperand(Bitness)));
		}
		/// <summary>vfmsub132pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB132PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 9A /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB132PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 9A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmsub132pd_xmm_xmm_xmmm128 : Code.EVEX_Vfmsub132pd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmsub132pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB132PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 9A /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB132PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 9A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmsub132pd_ymm_ymm_ymmm256 : Code.EVEX_Vfmsub132pd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmsub132pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB132PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 9A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vfmsub132pd_zmm_k1z_zmm_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsub132pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB132PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 9A /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB132PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 9A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmsub132pd_xmm_k1z_xmm_xmmm128b64;
			} else op = PreferVex ? Code.VEX_Vfmsub132pd_xmm_xmm_xmmm128 : Code.EVEX_Vfmsub132pd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsub132pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB132PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 9A /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB132PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 9A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmsub132pd_ymm_k1z_ymm_ymmm256b64;
			} else op = PreferVex ? Code.VEX_Vfmsub132pd_ymm_ymm_ymmm256 : Code.EVEX_Vfmsub132pd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsub132pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB132PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 9A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vfmsub132pd_zmm_k1z_zmm_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsub132ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUB132PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 9A /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB132PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 9A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmsub132ps_xmm_xmm_xmmm128 : Code.EVEX_Vfmsub132ps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmsub132ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUB132PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 9A /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB132PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 9A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmsub132ps_ymm_ymm_ymmm256 : Code.EVEX_Vfmsub132ps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmsub132ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUB132PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 9A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vfmsub132ps_zmm_k1z_zmm_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsub132ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUB132PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 9A /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB132PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 9A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmsub132ps_xmm_k1z_xmm_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vfmsub132ps_xmm_xmm_xmmm128 : Code.EVEX_Vfmsub132ps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsub132ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUB132PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 9A /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB132PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 9A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmsub132ps_ymm_k1z_ymm_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vfmsub132ps_ymm_ymm_ymmm256 : Code.EVEX_Vfmsub132ps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsub132ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUB132PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 9A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vfmsub132ps_zmm_k1z_zmm_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsub132sd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB132SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 9B /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB132SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 9B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub132sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmsub132sd_xmm_xmm_xmmm64 : Code.EVEX_Vfmsub132sd_xmm_k1z_xmm_xmmm64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsub132sd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB132SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 9B /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB132SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 9B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub132sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmsub132sd_xmm_xmm_xmmm64 : Code.EVEX_Vfmsub132sd_xmm_k1z_xmm_xmmm64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsub132ss instruction.<br/>
		/// <br/>
		/// <c>VFMSUB132SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 9B /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB132SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 9B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub132ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmsub132ss_xmm_xmm_xmmm32 : Code.EVEX_Vfmsub132ss_xmm_k1z_xmm_xmmm32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsub132ss instruction.<br/>
		/// <br/>
		/// <c>VFMSUB132SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 9B /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB132SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 9B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub132ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmsub132ss_xmm_xmm_xmmm32 : Code.EVEX_Vfmsub132ss_xmm_k1z_xmm_xmmm32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsub213pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB213PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 AA /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB213PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 AA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmsub213pd_xmm_xmm_xmmm128 : Code.EVEX_Vfmsub213pd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmsub213pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB213PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 AA /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB213PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 AA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmsub213pd_ymm_ymm_ymmm256 : Code.EVEX_Vfmsub213pd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmsub213pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB213PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 AA /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vfmsub213pd_zmm_k1z_zmm_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsub213pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB213PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 AA /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB213PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 AA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmsub213pd_xmm_k1z_xmm_xmmm128b64;
			} else op = PreferVex ? Code.VEX_Vfmsub213pd_xmm_xmm_xmmm128 : Code.EVEX_Vfmsub213pd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsub213pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB213PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 AA /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB213PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 AA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmsub213pd_ymm_k1z_ymm_ymmm256b64;
			} else op = PreferVex ? Code.VEX_Vfmsub213pd_ymm_ymm_ymmm256 : Code.EVEX_Vfmsub213pd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsub213pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB213PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 AA /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vfmsub213pd_zmm_k1z_zmm_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsub213ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUB213PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 AA /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB213PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 AA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmsub213ps_xmm_xmm_xmmm128 : Code.EVEX_Vfmsub213ps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmsub213ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUB213PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 AA /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB213PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 AA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmsub213ps_ymm_ymm_ymmm256 : Code.EVEX_Vfmsub213ps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmsub213ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUB213PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 AA /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vfmsub213ps_zmm_k1z_zmm_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsub213ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUB213PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 AA /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB213PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 AA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmsub213ps_xmm_k1z_xmm_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vfmsub213ps_xmm_xmm_xmmm128 : Code.EVEX_Vfmsub213ps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsub213ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUB213PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 AA /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB213PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 AA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmsub213ps_ymm_k1z_ymm_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vfmsub213ps_ymm_ymm_ymmm256 : Code.EVEX_Vfmsub213ps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsub213ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUB213PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 AA /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vfmsub213ps_zmm_k1z_zmm_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsub213sd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB213SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 AB /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB213SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 AB /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub213sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmsub213sd_xmm_xmm_xmmm64 : Code.EVEX_Vfmsub213sd_xmm_k1z_xmm_xmmm64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsub213sd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB213SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 AB /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB213SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 AB /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub213sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmsub213sd_xmm_xmm_xmmm64 : Code.EVEX_Vfmsub213sd_xmm_k1z_xmm_xmmm64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsub213ss instruction.<br/>
		/// <br/>
		/// <c>VFMSUB213SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 AB /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB213SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 AB /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub213ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmsub213ss_xmm_xmm_xmmm32 : Code.EVEX_Vfmsub213ss_xmm_k1z_xmm_xmmm32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsub213ss instruction.<br/>
		/// <br/>
		/// <c>VFMSUB213SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 AB /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB213SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 AB /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub213ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmsub213ss_xmm_xmm_xmmm32 : Code.EVEX_Vfmsub213ss_xmm_k1z_xmm_xmmm32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsub231pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB231PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 BA /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB231PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 BA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmsub231pd_xmm_xmm_xmmm128 : Code.EVEX_Vfmsub231pd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmsub231pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB231PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 BA /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB231PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 BA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmsub231pd_ymm_ymm_ymmm256 : Code.EVEX_Vfmsub231pd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmsub231pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB231PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 BA /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vfmsub231pd_zmm_k1z_zmm_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsub231pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB231PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 BA /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB231PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 BA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmsub231pd_xmm_k1z_xmm_xmmm128b64;
			} else op = PreferVex ? Code.VEX_Vfmsub231pd_xmm_xmm_xmmm128 : Code.EVEX_Vfmsub231pd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsub231pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB231PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 BA /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB231PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 BA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmsub231pd_ymm_k1z_ymm_ymmm256b64;
			} else op = PreferVex ? Code.VEX_Vfmsub231pd_ymm_ymm_ymmm256 : Code.EVEX_Vfmsub231pd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsub231pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB231PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 BA /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vfmsub231pd_zmm_k1z_zmm_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsub231ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUB231PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 BA /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB231PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 BA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmsub231ps_xmm_xmm_xmmm128 : Code.EVEX_Vfmsub231ps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmsub231ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUB231PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 BA /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB231PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 BA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmsub231ps_ymm_ymm_ymmm256 : Code.EVEX_Vfmsub231ps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmsub231ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUB231PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 BA /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vfmsub231ps_zmm_k1z_zmm_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsub231ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUB231PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 BA /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB231PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 BA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmsub231ps_xmm_k1z_xmm_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vfmsub231ps_xmm_xmm_xmmm128 : Code.EVEX_Vfmsub231ps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsub231ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUB231PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 BA /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB231PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 BA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmsub231ps_ymm_k1z_ymm_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vfmsub231ps_ymm_ymm_ymmm256 : Code.EVEX_Vfmsub231ps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsub231ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUB231PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 BA /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vfmsub231ps_zmm_k1z_zmm_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsub231sd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB231SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 BB /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB231SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 BB /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub231sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmsub231sd_xmm_xmm_xmmm64 : Code.EVEX_Vfmsub231sd_xmm_k1z_xmm_xmmm64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsub231sd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB231SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 BB /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB231SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 BB /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub231sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmsub231sd_xmm_xmm_xmmm64 : Code.EVEX_Vfmsub231sd_xmm_k1z_xmm_xmmm64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsub231ss instruction.<br/>
		/// <br/>
		/// <c>VFMSUB231SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 BB /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB231SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 BB /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub231ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmsub231ss_xmm_xmm_xmmm32 : Code.EVEX_Vfmsub231ss_xmm_k1z_xmm_xmmm32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsub231ss instruction.<br/>
		/// <br/>
		/// <c>VFMSUB231SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 BB /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB231SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 BB /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsub231ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmsub231ss_xmm_xmm_xmmm32 : Code.EVEX_Vfmsub231ss_xmm_k1z_xmm_xmmm32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsubadd132pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD132PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 97 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD132PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 97 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubadd132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmsubadd132pd_xmm_xmm_xmmm128 : Code.EVEX_Vfmsubadd132pd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmsubadd132pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD132PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 97 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD132PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 97 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubadd132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmsubadd132pd_ymm_ymm_ymmm256 : Code.EVEX_Vfmsubadd132pd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmsubadd132pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD132PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 97 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubadd132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vfmsubadd132pd_zmm_k1z_zmm_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsubadd132pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD132PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 97 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD132PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 97 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubadd132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmsubadd132pd_xmm_k1z_xmm_xmmm128b64;
			} else op = PreferVex ? Code.VEX_Vfmsubadd132pd_xmm_xmm_xmmm128 : Code.EVEX_Vfmsubadd132pd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsubadd132pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD132PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 97 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD132PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 97 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubadd132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmsubadd132pd_ymm_k1z_ymm_ymmm256b64;
			} else op = PreferVex ? Code.VEX_Vfmsubadd132pd_ymm_ymm_ymmm256 : Code.EVEX_Vfmsubadd132pd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsubadd132pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD132PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 97 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubadd132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vfmsubadd132pd_zmm_k1z_zmm_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsubadd132ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD132PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 97 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD132PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 97 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubadd132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmsubadd132ps_xmm_xmm_xmmm128 : Code.EVEX_Vfmsubadd132ps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmsubadd132ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD132PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 97 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD132PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 97 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubadd132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmsubadd132ps_ymm_ymm_ymmm256 : Code.EVEX_Vfmsubadd132ps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmsubadd132ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD132PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 97 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubadd132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vfmsubadd132ps_zmm_k1z_zmm_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsubadd132ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD132PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 97 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD132PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 97 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubadd132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmsubadd132ps_xmm_k1z_xmm_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vfmsubadd132ps_xmm_xmm_xmmm128 : Code.EVEX_Vfmsubadd132ps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsubadd132ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD132PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 97 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD132PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 97 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubadd132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmsubadd132ps_ymm_k1z_ymm_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vfmsubadd132ps_ymm_ymm_ymmm256 : Code.EVEX_Vfmsubadd132ps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsubadd132ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD132PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 97 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubadd132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vfmsubadd132ps_zmm_k1z_zmm_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsubadd213pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD213PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 A7 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD213PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 A7 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubadd213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmsubadd213pd_xmm_xmm_xmmm128 : Code.EVEX_Vfmsubadd213pd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmsubadd213pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD213PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 A7 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD213PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 A7 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubadd213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmsubadd213pd_ymm_ymm_ymmm256 : Code.EVEX_Vfmsubadd213pd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmsubadd213pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD213PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 A7 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubadd213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vfmsubadd213pd_zmm_k1z_zmm_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsubadd213pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD213PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 A7 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD213PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 A7 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubadd213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmsubadd213pd_xmm_k1z_xmm_xmmm128b64;
			} else op = PreferVex ? Code.VEX_Vfmsubadd213pd_xmm_xmm_xmmm128 : Code.EVEX_Vfmsubadd213pd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsubadd213pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD213PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 A7 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD213PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 A7 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubadd213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmsubadd213pd_ymm_k1z_ymm_ymmm256b64;
			} else op = PreferVex ? Code.VEX_Vfmsubadd213pd_ymm_ymm_ymmm256 : Code.EVEX_Vfmsubadd213pd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsubadd213pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD213PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 A7 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubadd213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vfmsubadd213pd_zmm_k1z_zmm_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsubadd213ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD213PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 A7 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD213PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 A7 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubadd213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmsubadd213ps_xmm_xmm_xmmm128 : Code.EVEX_Vfmsubadd213ps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmsubadd213ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD213PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 A7 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD213PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 A7 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubadd213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmsubadd213ps_ymm_ymm_ymmm256 : Code.EVEX_Vfmsubadd213ps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmsubadd213ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD213PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 A7 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubadd213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vfmsubadd213ps_zmm_k1z_zmm_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsubadd213ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD213PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 A7 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD213PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 A7 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubadd213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmsubadd213ps_xmm_k1z_xmm_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vfmsubadd213ps_xmm_xmm_xmmm128 : Code.EVEX_Vfmsubadd213ps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsubadd213ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD213PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 A7 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD213PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 A7 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubadd213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmsubadd213ps_ymm_k1z_ymm_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vfmsubadd213ps_ymm_ymm_ymmm256 : Code.EVEX_Vfmsubadd213ps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsubadd213ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD213PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 A7 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubadd213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vfmsubadd213ps_zmm_k1z_zmm_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsubadd231pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD231PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 B7 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD231PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 B7 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubadd231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmsubadd231pd_xmm_xmm_xmmm128 : Code.EVEX_Vfmsubadd231pd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmsubadd231pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD231PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 B7 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD231PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 B7 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubadd231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmsubadd231pd_ymm_ymm_ymmm256 : Code.EVEX_Vfmsubadd231pd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmsubadd231pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD231PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 B7 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubadd231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vfmsubadd231pd_zmm_k1z_zmm_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsubadd231pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD231PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 B7 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD231PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 B7 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubadd231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmsubadd231pd_xmm_k1z_xmm_xmmm128b64;
			} else op = PreferVex ? Code.VEX_Vfmsubadd231pd_xmm_xmm_xmmm128 : Code.EVEX_Vfmsubadd231pd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsubadd231pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD231PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 B7 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD231PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 B7 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubadd231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmsubadd231pd_ymm_k1z_ymm_ymmm256b64;
			} else op = PreferVex ? Code.VEX_Vfmsubadd231pd_ymm_ymm_ymmm256 : Code.EVEX_Vfmsubadd231pd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsubadd231pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD231PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 B7 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubadd231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vfmsubadd231pd_zmm_k1z_zmm_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsubadd231ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD231PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 B7 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD231PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 B7 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubadd231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmsubadd231ps_xmm_xmm_xmmm128 : Code.EVEX_Vfmsubadd231ps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmsubadd231ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD231PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 B7 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD231PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 B7 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubadd231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfmsubadd231ps_ymm_ymm_ymmm256 : Code.EVEX_Vfmsubadd231ps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfmsubadd231ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD231PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 B7 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubadd231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vfmsubadd231ps_zmm_k1z_zmm_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsubadd231ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD231PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 B7 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD231PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 B7 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubadd231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmsubadd231ps_xmm_k1z_xmm_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vfmsubadd231ps_xmm_xmm_xmmm128 : Code.EVEX_Vfmsubadd231ps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsubadd231ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD231PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 B7 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD231PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 B7 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubadd231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfmsubadd231ps_ymm_k1z_ymm_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vfmsubadd231ps_ymm_ymm_ymmm256 : Code.EVEX_Vfmsubadd231ps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsubadd231ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD231PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 B7 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubadd231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vfmsubadd231ps_zmm_k1z_zmm_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfmsubaddpd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADDPD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 5F /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.VEX_Vfmsubaddpd_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vfmsubaddpd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADDPD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 5F /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.VEX_Vfmsubaddpd_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vfmsubaddpd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADDPD ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 5F /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3) {
			Code op;
			op = Code.VEX_Vfmsubaddpd_ymm_ymm_ymmm256_ymm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vfmsubaddpd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADDPD ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 5F /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3) {
			Code op;
			op = Code.VEX_Vfmsubaddpd_ymm_ymm_ymmm256_ymm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vfmsubaddpd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADDPD xmm1, xmm2, xmm3, xmm4/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 5F /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3) {
			Code op;
			op = Code.VEX_Vfmsubaddpd_xmm_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3.ToMemoryOperand(Bitness)));
		}
		/// <summary>vfmsubaddpd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADDPD ymm1, ymm2, ymm3, ymm4/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 5F /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3) {
			Code op;
			op = Code.VEX_Vfmsubaddpd_ymm_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3.ToMemoryOperand(Bitness)));
		}
		/// <summary>vfmsubaddps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADDPS xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 5E /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.VEX_Vfmsubaddps_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vfmsubaddps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADDPS xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 5E /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.VEX_Vfmsubaddps_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vfmsubaddps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADDPS ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 5E /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3) {
			Code op;
			op = Code.VEX_Vfmsubaddps_ymm_ymm_ymmm256_ymm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vfmsubaddps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADDPS ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 5E /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3) {
			Code op;
			op = Code.VEX_Vfmsubaddps_ymm_ymm_ymmm256_ymm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vfmsubaddps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADDPS xmm1, xmm2, xmm3, xmm4/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 5E /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3) {
			Code op;
			op = Code.VEX_Vfmsubaddps_xmm_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3.ToMemoryOperand(Bitness)));
		}
		/// <summary>vfmsubaddps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADDPS ymm1, ymm2, ymm3, ymm4/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 5E /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3) {
			Code op;
			op = Code.VEX_Vfmsubaddps_ymm_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3.ToMemoryOperand(Bitness)));
		}
		/// <summary>vfmsubpd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBPD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 6D /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.VEX_Vfmsubpd_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vfmsubpd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBPD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 6D /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.VEX_Vfmsubpd_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vfmsubpd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBPD ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 6D /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3) {
			Code op;
			op = Code.VEX_Vfmsubpd_ymm_ymm_ymmm256_ymm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vfmsubpd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBPD ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 6D /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3) {
			Code op;
			op = Code.VEX_Vfmsubpd_ymm_ymm_ymmm256_ymm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vfmsubpd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBPD xmm1, xmm2, xmm3, xmm4/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 6D /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3) {
			Code op;
			op = Code.VEX_Vfmsubpd_xmm_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3.ToMemoryOperand(Bitness)));
		}
		/// <summary>vfmsubpd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBPD ymm1, ymm2, ymm3, ymm4/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 6D /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3) {
			Code op;
			op = Code.VEX_Vfmsubpd_ymm_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3.ToMemoryOperand(Bitness)));
		}
		/// <summary>vfmsubps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBPS xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 6C /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.VEX_Vfmsubps_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vfmsubps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBPS xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 6C /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.VEX_Vfmsubps_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vfmsubps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBPS ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 6C /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3) {
			Code op;
			op = Code.VEX_Vfmsubps_ymm_ymm_ymmm256_ymm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vfmsubps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBPS ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 6C /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3) {
			Code op;
			op = Code.VEX_Vfmsubps_ymm_ymm_ymmm256_ymm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vfmsubps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBPS xmm1, xmm2, xmm3, xmm4/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 6C /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3) {
			Code op;
			op = Code.VEX_Vfmsubps_xmm_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3.ToMemoryOperand(Bitness)));
		}
		/// <summary>vfmsubps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBPS ymm1, ymm2, ymm3, ymm4/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 6C /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3) {
			Code op;
			op = Code.VEX_Vfmsubps_ymm_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3.ToMemoryOperand(Bitness)));
		}
		/// <summary>vfmsubsd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBSD xmm1, xmm2, xmm3/m64, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W0 6F /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.VEX_Vfmsubsd_xmm_xmm_xmmm64_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vfmsubsd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBSD xmm1, xmm2, xmm3/m64, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W0 6F /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.VEX_Vfmsubsd_xmm_xmm_xmmm64_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vfmsubsd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBSD xmm1, xmm2, xmm3, xmm4/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W1 6F /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3) {
			Code op;
			op = Code.VEX_Vfmsubsd_xmm_xmm_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3.ToMemoryOperand(Bitness)));
		}
		/// <summary>vfmsubss instruction.<br/>
		/// <br/>
		/// <c>VFMSUBSS xmm1, xmm2, xmm3/m32, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W0 6E /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.VEX_Vfmsubss_xmm_xmm_xmmm32_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vfmsubss instruction.<br/>
		/// <br/>
		/// <c>VFMSUBSS xmm1, xmm2, xmm3/m32, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W0 6E /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.VEX_Vfmsubss_xmm_xmm_xmmm32_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vfmsubss instruction.<br/>
		/// <br/>
		/// <c>VFMSUBSS xmm1, xmm2, xmm3, xmm4/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W1 6E /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfmsubss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3) {
			Code op;
			op = Code.VEX_Vfmsubss_xmm_xmm_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3.ToMemoryOperand(Bitness)));
		}
		/// <summary>vfnmadd132pd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD132PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 9C /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD132PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 9C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmadd132pd_xmm_xmm_xmmm128 : Code.EVEX_Vfnmadd132pd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfnmadd132pd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD132PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 9C /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD132PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 9C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmadd132pd_ymm_ymm_ymmm256 : Code.EVEX_Vfnmadd132pd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfnmadd132pd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD132PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 9C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vfnmadd132pd_zmm_k1z_zmm_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmadd132pd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD132PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 9C /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD132PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 9C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfnmadd132pd_xmm_k1z_xmm_xmmm128b64;
			} else op = PreferVex ? Code.VEX_Vfnmadd132pd_xmm_xmm_xmmm128 : Code.EVEX_Vfnmadd132pd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmadd132pd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD132PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 9C /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD132PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 9C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfnmadd132pd_ymm_k1z_ymm_ymmm256b64;
			} else op = PreferVex ? Code.VEX_Vfnmadd132pd_ymm_ymm_ymmm256 : Code.EVEX_Vfnmadd132pd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmadd132pd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD132PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 9C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vfnmadd132pd_zmm_k1z_zmm_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmadd132ps instruction.<br/>
		/// <br/>
		/// <c>VFNMADD132PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 9C /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD132PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 9C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmadd132ps_xmm_xmm_xmmm128 : Code.EVEX_Vfnmadd132ps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfnmadd132ps instruction.<br/>
		/// <br/>
		/// <c>VFNMADD132PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 9C /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD132PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 9C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmadd132ps_ymm_ymm_ymmm256 : Code.EVEX_Vfnmadd132ps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfnmadd132ps instruction.<br/>
		/// <br/>
		/// <c>VFNMADD132PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 9C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vfnmadd132ps_zmm_k1z_zmm_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmadd132ps instruction.<br/>
		/// <br/>
		/// <c>VFNMADD132PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 9C /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD132PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 9C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfnmadd132ps_xmm_k1z_xmm_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vfnmadd132ps_xmm_xmm_xmmm128 : Code.EVEX_Vfnmadd132ps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmadd132ps instruction.<br/>
		/// <br/>
		/// <c>VFNMADD132PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 9C /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD132PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 9C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfnmadd132ps_ymm_k1z_ymm_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vfnmadd132ps_ymm_ymm_ymmm256 : Code.EVEX_Vfnmadd132ps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmadd132ps instruction.<br/>
		/// <br/>
		/// <c>VFNMADD132PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 9C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vfnmadd132ps_zmm_k1z_zmm_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmadd132sd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD132SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 9D /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD132SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 9D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd132sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmadd132sd_xmm_xmm_xmmm64 : Code.EVEX_Vfnmadd132sd_xmm_k1z_xmm_xmmm64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmadd132sd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD132SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 9D /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD132SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 9D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd132sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmadd132sd_xmm_xmm_xmmm64 : Code.EVEX_Vfnmadd132sd_xmm_k1z_xmm_xmmm64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmadd132ss instruction.<br/>
		/// <br/>
		/// <c>VFNMADD132SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 9D /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD132SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 9D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd132ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmadd132ss_xmm_xmm_xmmm32 : Code.EVEX_Vfnmadd132ss_xmm_k1z_xmm_xmmm32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmadd132ss instruction.<br/>
		/// <br/>
		/// <c>VFNMADD132SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 9D /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD132SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 9D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd132ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmadd132ss_xmm_xmm_xmmm32 : Code.EVEX_Vfnmadd132ss_xmm_k1z_xmm_xmmm32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmadd213pd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD213PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 AC /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD213PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 AC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmadd213pd_xmm_xmm_xmmm128 : Code.EVEX_Vfnmadd213pd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfnmadd213pd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD213PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 AC /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD213PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 AC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmadd213pd_ymm_ymm_ymmm256 : Code.EVEX_Vfnmadd213pd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfnmadd213pd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD213PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 AC /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vfnmadd213pd_zmm_k1z_zmm_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmadd213pd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD213PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 AC /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD213PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 AC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfnmadd213pd_xmm_k1z_xmm_xmmm128b64;
			} else op = PreferVex ? Code.VEX_Vfnmadd213pd_xmm_xmm_xmmm128 : Code.EVEX_Vfnmadd213pd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmadd213pd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD213PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 AC /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD213PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 AC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfnmadd213pd_ymm_k1z_ymm_ymmm256b64;
			} else op = PreferVex ? Code.VEX_Vfnmadd213pd_ymm_ymm_ymmm256 : Code.EVEX_Vfnmadd213pd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmadd213pd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD213PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 AC /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vfnmadd213pd_zmm_k1z_zmm_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmadd213ps instruction.<br/>
		/// <br/>
		/// <c>VFNMADD213PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 AC /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD213PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 AC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmadd213ps_xmm_xmm_xmmm128 : Code.EVEX_Vfnmadd213ps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfnmadd213ps instruction.<br/>
		/// <br/>
		/// <c>VFNMADD213PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 AC /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD213PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 AC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmadd213ps_ymm_ymm_ymmm256 : Code.EVEX_Vfnmadd213ps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfnmadd213ps instruction.<br/>
		/// <br/>
		/// <c>VFNMADD213PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 AC /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vfnmadd213ps_zmm_k1z_zmm_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmadd213ps instruction.<br/>
		/// <br/>
		/// <c>VFNMADD213PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 AC /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD213PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 AC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfnmadd213ps_xmm_k1z_xmm_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vfnmadd213ps_xmm_xmm_xmmm128 : Code.EVEX_Vfnmadd213ps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmadd213ps instruction.<br/>
		/// <br/>
		/// <c>VFNMADD213PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 AC /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD213PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 AC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfnmadd213ps_ymm_k1z_ymm_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vfnmadd213ps_ymm_ymm_ymmm256 : Code.EVEX_Vfnmadd213ps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmadd213ps instruction.<br/>
		/// <br/>
		/// <c>VFNMADD213PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 AC /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vfnmadd213ps_zmm_k1z_zmm_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmadd213sd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD213SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 AD /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD213SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 AD /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd213sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmadd213sd_xmm_xmm_xmmm64 : Code.EVEX_Vfnmadd213sd_xmm_k1z_xmm_xmmm64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmadd213sd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD213SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 AD /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD213SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 AD /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd213sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmadd213sd_xmm_xmm_xmmm64 : Code.EVEX_Vfnmadd213sd_xmm_k1z_xmm_xmmm64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmadd213ss instruction.<br/>
		/// <br/>
		/// <c>VFNMADD213SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 AD /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD213SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 AD /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd213ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmadd213ss_xmm_xmm_xmmm32 : Code.EVEX_Vfnmadd213ss_xmm_k1z_xmm_xmmm32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmadd213ss instruction.<br/>
		/// <br/>
		/// <c>VFNMADD213SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 AD /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD213SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 AD /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd213ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmadd213ss_xmm_xmm_xmmm32 : Code.EVEX_Vfnmadd213ss_xmm_k1z_xmm_xmmm32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmadd231pd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD231PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 BC /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD231PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 BC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmadd231pd_xmm_xmm_xmmm128 : Code.EVEX_Vfnmadd231pd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfnmadd231pd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD231PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 BC /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD231PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 BC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmadd231pd_ymm_ymm_ymmm256 : Code.EVEX_Vfnmadd231pd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfnmadd231pd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD231PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 BC /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vfnmadd231pd_zmm_k1z_zmm_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmadd231pd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD231PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 BC /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD231PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 BC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfnmadd231pd_xmm_k1z_xmm_xmmm128b64;
			} else op = PreferVex ? Code.VEX_Vfnmadd231pd_xmm_xmm_xmmm128 : Code.EVEX_Vfnmadd231pd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmadd231pd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD231PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 BC /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD231PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 BC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfnmadd231pd_ymm_k1z_ymm_ymmm256b64;
			} else op = PreferVex ? Code.VEX_Vfnmadd231pd_ymm_ymm_ymmm256 : Code.EVEX_Vfnmadd231pd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmadd231pd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD231PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 BC /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vfnmadd231pd_zmm_k1z_zmm_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmadd231ps instruction.<br/>
		/// <br/>
		/// <c>VFNMADD231PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 BC /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD231PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 BC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmadd231ps_xmm_xmm_xmmm128 : Code.EVEX_Vfnmadd231ps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfnmadd231ps instruction.<br/>
		/// <br/>
		/// <c>VFNMADD231PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 BC /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD231PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 BC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmadd231ps_ymm_ymm_ymmm256 : Code.EVEX_Vfnmadd231ps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfnmadd231ps instruction.<br/>
		/// <br/>
		/// <c>VFNMADD231PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 BC /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vfnmadd231ps_zmm_k1z_zmm_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmadd231ps instruction.<br/>
		/// <br/>
		/// <c>VFNMADD231PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 BC /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD231PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 BC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfnmadd231ps_xmm_k1z_xmm_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vfnmadd231ps_xmm_xmm_xmmm128 : Code.EVEX_Vfnmadd231ps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmadd231ps instruction.<br/>
		/// <br/>
		/// <c>VFNMADD231PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 BC /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD231PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 BC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfnmadd231ps_ymm_k1z_ymm_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vfnmadd231ps_ymm_ymm_ymmm256 : Code.EVEX_Vfnmadd231ps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmadd231ps instruction.<br/>
		/// <br/>
		/// <c>VFNMADD231PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 BC /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vfnmadd231ps_zmm_k1z_zmm_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmadd231sd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD231SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 BD /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD231SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 BD /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd231sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmadd231sd_xmm_xmm_xmmm64 : Code.EVEX_Vfnmadd231sd_xmm_k1z_xmm_xmmm64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmadd231sd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD231SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 BD /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD231SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 BD /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd231sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmadd231sd_xmm_xmm_xmmm64 : Code.EVEX_Vfnmadd231sd_xmm_k1z_xmm_xmmm64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmadd231ss instruction.<br/>
		/// <br/>
		/// <c>VFNMADD231SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 BD /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD231SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 BD /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd231ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmadd231ss_xmm_xmm_xmmm32 : Code.EVEX_Vfnmadd231ss_xmm_k1z_xmm_xmmm32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmadd231ss instruction.<br/>
		/// <br/>
		/// <c>VFNMADD231SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 BD /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD231SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 BD /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmadd231ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmadd231ss_xmm_xmm_xmmm32 : Code.EVEX_Vfnmadd231ss_xmm_k1z_xmm_xmmm32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmaddpd instruction.<br/>
		/// <br/>
		/// <c>VFNMADDPD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 79 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.VEX_Vfnmaddpd_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vfnmaddpd instruction.<br/>
		/// <br/>
		/// <c>VFNMADDPD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 79 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.VEX_Vfnmaddpd_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vfnmaddpd instruction.<br/>
		/// <br/>
		/// <c>VFNMADDPD ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 79 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3) {
			Code op;
			op = Code.VEX_Vfnmaddpd_ymm_ymm_ymmm256_ymm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vfnmaddpd instruction.<br/>
		/// <br/>
		/// <c>VFNMADDPD ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 79 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3) {
			Code op;
			op = Code.VEX_Vfnmaddpd_ymm_ymm_ymmm256_ymm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vfnmaddpd instruction.<br/>
		/// <br/>
		/// <c>VFNMADDPD xmm1, xmm2, xmm3, xmm4/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 79 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3) {
			Code op;
			op = Code.VEX_Vfnmaddpd_xmm_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3.ToMemoryOperand(Bitness)));
		}
		/// <summary>vfnmaddpd instruction.<br/>
		/// <br/>
		/// <c>VFNMADDPD ymm1, ymm2, ymm3, ymm4/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 79 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3) {
			Code op;
			op = Code.VEX_Vfnmaddpd_ymm_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3.ToMemoryOperand(Bitness)));
		}
		/// <summary>vfnmaddps instruction.<br/>
		/// <br/>
		/// <c>VFNMADDPS xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 78 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.VEX_Vfnmaddps_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vfnmaddps instruction.<br/>
		/// <br/>
		/// <c>VFNMADDPS xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 78 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.VEX_Vfnmaddps_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vfnmaddps instruction.<br/>
		/// <br/>
		/// <c>VFNMADDPS ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 78 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3) {
			Code op;
			op = Code.VEX_Vfnmaddps_ymm_ymm_ymmm256_ymm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vfnmaddps instruction.<br/>
		/// <br/>
		/// <c>VFNMADDPS ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 78 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3) {
			Code op;
			op = Code.VEX_Vfnmaddps_ymm_ymm_ymmm256_ymm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vfnmaddps instruction.<br/>
		/// <br/>
		/// <c>VFNMADDPS xmm1, xmm2, xmm3, xmm4/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 78 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3) {
			Code op;
			op = Code.VEX_Vfnmaddps_xmm_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3.ToMemoryOperand(Bitness)));
		}
		/// <summary>vfnmaddps instruction.<br/>
		/// <br/>
		/// <c>VFNMADDPS ymm1, ymm2, ymm3, ymm4/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 78 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3) {
			Code op;
			op = Code.VEX_Vfnmaddps_ymm_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3.ToMemoryOperand(Bitness)));
		}
		/// <summary>vfnmaddsd instruction.<br/>
		/// <br/>
		/// <c>VFNMADDSD xmm1, xmm2, xmm3/m64, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W0 7B /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmaddsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.VEX_Vfnmaddsd_xmm_xmm_xmmm64_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vfnmaddsd instruction.<br/>
		/// <br/>
		/// <c>VFNMADDSD xmm1, xmm2, xmm3/m64, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W0 7B /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmaddsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.VEX_Vfnmaddsd_xmm_xmm_xmmm64_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vfnmaddsd instruction.<br/>
		/// <br/>
		/// <c>VFNMADDSD xmm1, xmm2, xmm3, xmm4/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W1 7B /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmaddsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3) {
			Code op;
			op = Code.VEX_Vfnmaddsd_xmm_xmm_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3.ToMemoryOperand(Bitness)));
		}
		/// <summary>vfnmaddss instruction.<br/>
		/// <br/>
		/// <c>VFNMADDSS xmm1, xmm2, xmm3/m32, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W0 7A /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmaddss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.VEX_Vfnmaddss_xmm_xmm_xmmm32_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vfnmaddss instruction.<br/>
		/// <br/>
		/// <c>VFNMADDSS xmm1, xmm2, xmm3/m32, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W0 7A /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmaddss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.VEX_Vfnmaddss_xmm_xmm_xmmm32_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vfnmaddss instruction.<br/>
		/// <br/>
		/// <c>VFNMADDSS xmm1, xmm2, xmm3, xmm4/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W1 7A /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmaddss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3) {
			Code op;
			op = Code.VEX_Vfnmaddss_xmm_xmm_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3.ToMemoryOperand(Bitness)));
		}
		/// <summary>vfnmsub132pd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB132PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 9E /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB132PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 9E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmsub132pd_xmm_xmm_xmmm128 : Code.EVEX_Vfnmsub132pd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfnmsub132pd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB132PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 9E /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB132PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 9E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmsub132pd_ymm_ymm_ymmm256 : Code.EVEX_Vfnmsub132pd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfnmsub132pd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB132PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 9E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vfnmsub132pd_zmm_k1z_zmm_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmsub132pd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB132PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 9E /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB132PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 9E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfnmsub132pd_xmm_k1z_xmm_xmmm128b64;
			} else op = PreferVex ? Code.VEX_Vfnmsub132pd_xmm_xmm_xmmm128 : Code.EVEX_Vfnmsub132pd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmsub132pd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB132PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 9E /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB132PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 9E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfnmsub132pd_ymm_k1z_ymm_ymmm256b64;
			} else op = PreferVex ? Code.VEX_Vfnmsub132pd_ymm_ymm_ymmm256 : Code.EVEX_Vfnmsub132pd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmsub132pd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB132PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 9E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vfnmsub132pd_zmm_k1z_zmm_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmsub132ps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB132PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 9E /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB132PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 9E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmsub132ps_xmm_xmm_xmmm128 : Code.EVEX_Vfnmsub132ps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfnmsub132ps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB132PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 9E /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB132PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 9E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmsub132ps_ymm_ymm_ymmm256 : Code.EVEX_Vfnmsub132ps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfnmsub132ps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB132PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 9E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vfnmsub132ps_zmm_k1z_zmm_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmsub132ps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB132PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 9E /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB132PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 9E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfnmsub132ps_xmm_k1z_xmm_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vfnmsub132ps_xmm_xmm_xmmm128 : Code.EVEX_Vfnmsub132ps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmsub132ps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB132PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 9E /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB132PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 9E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfnmsub132ps_ymm_k1z_ymm_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vfnmsub132ps_ymm_ymm_ymmm256 : Code.EVEX_Vfnmsub132ps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmsub132ps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB132PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 9E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vfnmsub132ps_zmm_k1z_zmm_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmsub132sd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB132SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 9F /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB132SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 9F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub132sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmsub132sd_xmm_xmm_xmmm64 : Code.EVEX_Vfnmsub132sd_xmm_k1z_xmm_xmmm64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmsub132sd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB132SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 9F /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB132SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 9F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub132sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmsub132sd_xmm_xmm_xmmm64 : Code.EVEX_Vfnmsub132sd_xmm_k1z_xmm_xmmm64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmsub132ss instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB132SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 9F /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB132SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 9F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub132ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmsub132ss_xmm_xmm_xmmm32 : Code.EVEX_Vfnmsub132ss_xmm_k1z_xmm_xmmm32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmsub132ss instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB132SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 9F /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB132SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 9F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub132ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmsub132ss_xmm_xmm_xmmm32 : Code.EVEX_Vfnmsub132ss_xmm_k1z_xmm_xmmm32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmsub213pd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB213PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 AE /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB213PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 AE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmsub213pd_xmm_xmm_xmmm128 : Code.EVEX_Vfnmsub213pd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfnmsub213pd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB213PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 AE /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB213PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 AE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmsub213pd_ymm_ymm_ymmm256 : Code.EVEX_Vfnmsub213pd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfnmsub213pd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB213PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 AE /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vfnmsub213pd_zmm_k1z_zmm_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmsub213pd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB213PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 AE /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB213PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 AE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfnmsub213pd_xmm_k1z_xmm_xmmm128b64;
			} else op = PreferVex ? Code.VEX_Vfnmsub213pd_xmm_xmm_xmmm128 : Code.EVEX_Vfnmsub213pd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmsub213pd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB213PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 AE /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB213PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 AE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfnmsub213pd_ymm_k1z_ymm_ymmm256b64;
			} else op = PreferVex ? Code.VEX_Vfnmsub213pd_ymm_ymm_ymmm256 : Code.EVEX_Vfnmsub213pd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmsub213pd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB213PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 AE /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vfnmsub213pd_zmm_k1z_zmm_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmsub213ps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB213PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 AE /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB213PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 AE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmsub213ps_xmm_xmm_xmmm128 : Code.EVEX_Vfnmsub213ps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfnmsub213ps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB213PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 AE /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB213PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 AE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmsub213ps_ymm_ymm_ymmm256 : Code.EVEX_Vfnmsub213ps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfnmsub213ps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB213PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 AE /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vfnmsub213ps_zmm_k1z_zmm_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmsub213ps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB213PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 AE /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB213PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 AE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfnmsub213ps_xmm_k1z_xmm_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vfnmsub213ps_xmm_xmm_xmmm128 : Code.EVEX_Vfnmsub213ps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmsub213ps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB213PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 AE /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB213PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 AE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfnmsub213ps_ymm_k1z_ymm_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vfnmsub213ps_ymm_ymm_ymmm256 : Code.EVEX_Vfnmsub213ps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmsub213ps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB213PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 AE /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vfnmsub213ps_zmm_k1z_zmm_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmsub213sd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB213SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 AF /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB213SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 AF /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub213sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmsub213sd_xmm_xmm_xmmm64 : Code.EVEX_Vfnmsub213sd_xmm_k1z_xmm_xmmm64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmsub213sd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB213SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 AF /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB213SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 AF /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub213sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmsub213sd_xmm_xmm_xmmm64 : Code.EVEX_Vfnmsub213sd_xmm_k1z_xmm_xmmm64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmsub213ss instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB213SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 AF /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB213SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 AF /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub213ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmsub213ss_xmm_xmm_xmmm32 : Code.EVEX_Vfnmsub213ss_xmm_k1z_xmm_xmmm32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmsub213ss instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB213SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 AF /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB213SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 AF /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub213ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmsub213ss_xmm_xmm_xmmm32 : Code.EVEX_Vfnmsub213ss_xmm_k1z_xmm_xmmm32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmsub231pd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB231PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 BE /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB231PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 BE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmsub231pd_xmm_xmm_xmmm128 : Code.EVEX_Vfnmsub231pd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfnmsub231pd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB231PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 BE /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB231PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 BE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmsub231pd_ymm_ymm_ymmm256 : Code.EVEX_Vfnmsub231pd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfnmsub231pd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB231PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 BE /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vfnmsub231pd_zmm_k1z_zmm_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmsub231pd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB231PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 BE /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB231PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 BE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfnmsub231pd_xmm_k1z_xmm_xmmm128b64;
			} else op = PreferVex ? Code.VEX_Vfnmsub231pd_xmm_xmm_xmmm128 : Code.EVEX_Vfnmsub231pd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmsub231pd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB231PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 BE /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB231PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 BE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfnmsub231pd_ymm_k1z_ymm_ymmm256b64;
			} else op = PreferVex ? Code.VEX_Vfnmsub231pd_ymm_ymm_ymmm256 : Code.EVEX_Vfnmsub231pd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmsub231pd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB231PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 BE /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vfnmsub231pd_zmm_k1z_zmm_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmsub231ps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB231PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 BE /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB231PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 BE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmsub231ps_xmm_xmm_xmmm128 : Code.EVEX_Vfnmsub231ps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfnmsub231ps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB231PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 BE /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB231PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 BE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmsub231ps_ymm_ymm_ymmm256 : Code.EVEX_Vfnmsub231ps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vfnmsub231ps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB231PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 BE /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vfnmsub231ps_zmm_k1z_zmm_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmsub231ps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB231PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 BE /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB231PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 BE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfnmsub231ps_xmm_k1z_xmm_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vfnmsub231ps_xmm_xmm_xmmm128 : Code.EVEX_Vfnmsub231ps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmsub231ps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB231PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 BE /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB231PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 BE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vfnmsub231ps_ymm_k1z_ymm_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vfnmsub231ps_ymm_ymm_ymmm256 : Code.EVEX_Vfnmsub231ps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmsub231ps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB231PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 BE /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vfnmsub231ps_zmm_k1z_zmm_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmsub231sd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB231SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 BF /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB231SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 BF /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub231sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmsub231sd_xmm_xmm_xmmm64 : Code.EVEX_Vfnmsub231sd_xmm_k1z_xmm_xmmm64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmsub231sd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB231SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 BF /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB231SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 BF /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub231sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmsub231sd_xmm_xmm_xmmm64 : Code.EVEX_Vfnmsub231sd_xmm_k1z_xmm_xmmm64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmsub231ss instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB231SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 BF /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB231SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 BF /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub231ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmsub231ss_xmm_xmm_xmmm32 : Code.EVEX_Vfnmsub231ss_xmm_k1z_xmm_xmmm32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmsub231ss instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB231SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 BF /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB231SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 BF /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsub231ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vfnmsub231ss_xmm_xmm_xmmm32 : Code.EVEX_Vfnmsub231ss_xmm_k1z_xmm_xmmm32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vfnmsubpd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUBPD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 7D /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.VEX_Vfnmsubpd_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vfnmsubpd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUBPD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 7D /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.VEX_Vfnmsubpd_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vfnmsubpd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUBPD ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 7D /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3) {
			Code op;
			op = Code.VEX_Vfnmsubpd_ymm_ymm_ymmm256_ymm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vfnmsubpd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUBPD ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 7D /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3) {
			Code op;
			op = Code.VEX_Vfnmsubpd_ymm_ymm_ymmm256_ymm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vfnmsubpd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUBPD xmm1, xmm2, xmm3, xmm4/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 7D /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3) {
			Code op;
			op = Code.VEX_Vfnmsubpd_xmm_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3.ToMemoryOperand(Bitness)));
		}
		/// <summary>vfnmsubpd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUBPD ymm1, ymm2, ymm3, ymm4/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 7D /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3) {
			Code op;
			op = Code.VEX_Vfnmsubpd_ymm_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3.ToMemoryOperand(Bitness)));
		}
		/// <summary>vfnmsubps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUBPS xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 7C /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.VEX_Vfnmsubps_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vfnmsubps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUBPS xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 7C /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.VEX_Vfnmsubps_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vfnmsubps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUBPS ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 7C /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3) {
			Code op;
			op = Code.VEX_Vfnmsubps_ymm_ymm_ymmm256_ymm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vfnmsubps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUBPS ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 7C /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3) {
			Code op;
			op = Code.VEX_Vfnmsubps_ymm_ymm_ymmm256_ymm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vfnmsubps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUBPS xmm1, xmm2, xmm3, xmm4/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 7C /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3) {
			Code op;
			op = Code.VEX_Vfnmsubps_xmm_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3.ToMemoryOperand(Bitness)));
		}
		/// <summary>vfnmsubps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUBPS ymm1, ymm2, ymm3, ymm4/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 7C /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3) {
			Code op;
			op = Code.VEX_Vfnmsubps_ymm_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3.ToMemoryOperand(Bitness)));
		}
		/// <summary>vfnmsubsd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUBSD xmm1, xmm2, xmm3/m64, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W0 7F /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsubsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.VEX_Vfnmsubsd_xmm_xmm_xmmm64_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vfnmsubsd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUBSD xmm1, xmm2, xmm3/m64, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W0 7F /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsubsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.VEX_Vfnmsubsd_xmm_xmm_xmmm64_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vfnmsubsd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUBSD xmm1, xmm2, xmm3, xmm4/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W1 7F /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsubsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3) {
			Code op;
			op = Code.VEX_Vfnmsubsd_xmm_xmm_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3.ToMemoryOperand(Bitness)));
		}
		/// <summary>vfnmsubss instruction.<br/>
		/// <br/>
		/// <c>VFNMSUBSS xmm1, xmm2, xmm3/m32, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W0 7E /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsubss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.VEX_Vfnmsubss_xmm_xmm_xmmm32_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vfnmsubss instruction.<br/>
		/// <br/>
		/// <c>VFNMSUBSS xmm1, xmm2, xmm3/m32, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W0 7E /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsubss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.VEX_Vfnmsubss_xmm_xmm_xmmm32_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vfnmsubss instruction.<br/>
		/// <br/>
		/// <c>VFNMSUBSS xmm1, xmm2, xmm3, xmm4/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W1 7E /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfnmsubss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3) {
			Code op;
			op = Code.VEX_Vfnmsubss_xmm_xmm_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3.ToMemoryOperand(Bitness)));
		}
		/// <summary>vfpclasspd instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPD k2 {k1}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfpclasspd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vfpclasspd instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPD k2 {k1}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfpclasspd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vfpclasspd_kr_k1_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vfpclasspd instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPD k2 {k1}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfpclasspd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vfpclasspd instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPD k2 {k1}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFPCLASSPD k2 {k1}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFPCLASSPD k2 {k1}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfpclasspd(AssemblerRegisterK dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			if (src1.IsBroadcast) {
				op = Code.EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8;
			} else if (src1.Size == MemoryOperandSize.ZwordPtr) {
				op = Code.EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8;
			} else if (src1.Size == MemoryOperandSize.YwordPtr) {
				op = Code.EVEX_Vfpclasspd_kr_k1_ymmm256b64_imm8;
			} else if (src1.Size == MemoryOperandSize.OwordPtr) {
				op = Code.EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Vfpclasspd, dst, src1, imm);
			}
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vfpclasspd instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPD k2 {k1}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfpclasspd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vfpclasspd instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPD k2 {k1}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfpclasspd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vfpclasspd_kr_k1_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vfpclasspd instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPD k2 {k1}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfpclasspd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vfpclasspd instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPD k2 {k1}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFPCLASSPD k2 {k1}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFPCLASSPD k2 {k1}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfpclasspd(AssemblerRegisterK dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			if (src1.IsBroadcast) {
				op = Code.EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8;
			} else if (src1.Size == MemoryOperandSize.ZwordPtr) {
				op = Code.EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8;
			} else if (src1.Size == MemoryOperandSize.YwordPtr) {
				op = Code.EVEX_Vfpclasspd_kr_k1_ymmm256b64_imm8;
			} else if (src1.Size == MemoryOperandSize.OwordPtr) {
				op = Code.EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Vfpclasspd, dst, src1, imm);
			}
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vfpclasspdx instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPD k2 {k1}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfpclasspdx(AssemblerRegisterK dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vfpclasspdx instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPD k2 {k1}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfpclasspdx(AssemblerRegisterK dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vfpclasspdy instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPD k2 {k1}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfpclasspdy(AssemblerRegisterK dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vfpclasspd_kr_k1_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vfpclasspdy instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPD k2 {k1}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfpclasspdy(AssemblerRegisterK dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vfpclasspd_kr_k1_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vfpclasspdz instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPD k2 {k1}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfpclasspdz(AssemblerRegisterK dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vfpclasspdz instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPD k2 {k1}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfpclasspdz(AssemblerRegisterK dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vfpclassps instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPS k2 {k1}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfpclassps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vfpclassps instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPS k2 {k1}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfpclassps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vfpclassps_kr_k1_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vfpclassps instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPS k2 {k1}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfpclassps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vfpclassps instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPS k2 {k1}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFPCLASSPS k2 {k1}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFPCLASSPS k2 {k1}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfpclassps(AssemblerRegisterK dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			if (src1.IsBroadcast) {
				op = Code.EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8;
			} else if (src1.Size == MemoryOperandSize.ZwordPtr) {
				op = Code.EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8;
			} else if (src1.Size == MemoryOperandSize.YwordPtr) {
				op = Code.EVEX_Vfpclassps_kr_k1_ymmm256b32_imm8;
			} else if (src1.Size == MemoryOperandSize.OwordPtr) {
				op = Code.EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Vfpclassps, dst, src1, imm);
			}
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vfpclassps instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPS k2 {k1}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfpclassps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vfpclassps instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPS k2 {k1}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfpclassps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vfpclassps_kr_k1_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vfpclassps instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPS k2 {k1}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfpclassps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vfpclassps instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPS k2 {k1}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFPCLASSPS k2 {k1}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFPCLASSPS k2 {k1}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfpclassps(AssemblerRegisterK dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			if (src1.IsBroadcast) {
				op = Code.EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8;
			} else if (src1.Size == MemoryOperandSize.ZwordPtr) {
				op = Code.EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8;
			} else if (src1.Size == MemoryOperandSize.YwordPtr) {
				op = Code.EVEX_Vfpclassps_kr_k1_ymmm256b32_imm8;
			} else if (src1.Size == MemoryOperandSize.OwordPtr) {
				op = Code.EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Vfpclassps, dst, src1, imm);
			}
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vfpclasspsx instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPS k2 {k1}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfpclasspsx(AssemblerRegisterK dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vfpclasspsx instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPS k2 {k1}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfpclasspsx(AssemblerRegisterK dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vfpclasspsy instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPS k2 {k1}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfpclasspsy(AssemblerRegisterK dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vfpclassps_kr_k1_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vfpclasspsy instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPS k2 {k1}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfpclasspsy(AssemblerRegisterK dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vfpclassps_kr_k1_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vfpclasspsz instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPS k2 {k1}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfpclasspsz(AssemblerRegisterK dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vfpclasspsz instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPS k2 {k1}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfpclasspsz(AssemblerRegisterK dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vfpclasssd instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSSD k2 {k1}, xmm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 67 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfpclasssd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vfpclasssd_kr_k1_xmmm64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vfpclasssd instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSSD k2 {k1}, xmm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 67 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfpclasssd(AssemblerRegisterK dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vfpclasssd_kr_k1_xmmm64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vfpclasssd instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSSD k2 {k1}, xmm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 67 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfpclasssd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vfpclasssd_kr_k1_xmmm64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vfpclasssd instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSSD k2 {k1}, xmm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 67 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfpclasssd(AssemblerRegisterK dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vfpclasssd_kr_k1_xmmm64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vfpclassss instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSSS k2 {k1}, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 67 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfpclassss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vfpclassss_kr_k1_xmmm32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vfpclassss instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSSS k2 {k1}, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 67 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfpclassss(AssemblerRegisterK dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vfpclassss_kr_k1_xmmm32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vfpclassss instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSSS k2 {k1}, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 67 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfpclassss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vfpclassss_kr_k1_xmmm32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vfpclassss instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSSS k2 {k1}, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 67 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfpclassss(AssemblerRegisterK dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vfpclassss_kr_k1_xmmm32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vfrczpd instruction.<br/>
		/// <br/>
		/// <c>VFRCZPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 81 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfrczpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.XOP_Vfrczpd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vfrczpd instruction.<br/>
		/// <br/>
		/// <c>VFRCZPD ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>XOP.256.X9.W0 81 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfrczpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.XOP_Vfrczpd_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vfrczpd instruction.<br/>
		/// <br/>
		/// <c>VFRCZPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 81 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfrczpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.XOP_Vfrczpd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vfrczpd instruction.<br/>
		/// <br/>
		/// <c>VFRCZPD ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>XOP.256.X9.W0 81 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfrczpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.XOP_Vfrczpd_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vfrczps instruction.<br/>
		/// <br/>
		/// <c>VFRCZPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 80 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfrczps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.XOP_Vfrczps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vfrczps instruction.<br/>
		/// <br/>
		/// <c>VFRCZPS ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>XOP.256.X9.W0 80 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfrczps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.XOP_Vfrczps_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vfrczps instruction.<br/>
		/// <br/>
		/// <c>VFRCZPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 80 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfrczps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.XOP_Vfrczps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vfrczps instruction.<br/>
		/// <br/>
		/// <c>VFRCZPS ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>XOP.256.X9.W0 80 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfrczps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.XOP_Vfrczps_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vfrczsd instruction.<br/>
		/// <br/>
		/// <c>VFRCZSD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 83 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfrczsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.XOP_Vfrczsd_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vfrczsd instruction.<br/>
		/// <br/>
		/// <c>VFRCZSD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 83 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfrczsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.XOP_Vfrczsd_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vfrczss instruction.<br/>
		/// <br/>
		/// <c>VFRCZSS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 82 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfrczss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.XOP_Vfrczss_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vfrczss instruction.<br/>
		/// <br/>
		/// <c>VFRCZSS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 82 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vfrczss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.XOP_Vfrczss_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vgatherdpd instruction.<br/>
		/// <br/>
		/// <c>VGATHERDPD xmm1 {k1}, vm32x</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 92 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgatherdpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vgatherdpd_xmm_k1_vm32x;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vgatherdpd instruction.<br/>
		/// <br/>
		/// <c>VGATHERDPD ymm1 {k1}, vm32x</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 92 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgatherdpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vgatherdpd_ymm_k1_vm32x;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vgatherdpd instruction.<br/>
		/// <br/>
		/// <c>VGATHERDPD zmm1 {k1}, vm32y</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 92 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgatherdpd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vgatherdpd_zmm_k1_vm32y;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vgatherdpd instruction.<br/>
		/// <br/>
		/// <c>VGATHERDPD xmm1, vm32x, xmm2</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 92 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgatherdpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.VEX_Vgatherdpd_xmm_vm32x_xmm;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), src2));
		}
		/// <summary>vgatherdpd instruction.<br/>
		/// <br/>
		/// <c>VGATHERDPD ymm1, vm32x, ymm2</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 92 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgatherdpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.VEX_Vgatherdpd_ymm_vm32x_ymm;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), src2));
		}
		/// <summary>vgatherdps instruction.<br/>
		/// <br/>
		/// <c>VGATHERDPS xmm1 {k1}, vm32x</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 92 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgatherdps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vgatherdps_xmm_k1_vm32x;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vgatherdps instruction.<br/>
		/// <br/>
		/// <c>VGATHERDPS ymm1 {k1}, vm32y</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 92 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgatherdps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vgatherdps_ymm_k1_vm32y;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vgatherdps instruction.<br/>
		/// <br/>
		/// <c>VGATHERDPS zmm1 {k1}, vm32z</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 92 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgatherdps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vgatherdps_zmm_k1_vm32z;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vgatherdps instruction.<br/>
		/// <br/>
		/// <c>VGATHERDPS xmm1, vm32x, xmm2</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 92 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgatherdps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.VEX_Vgatherdps_xmm_vm32x_xmm;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), src2));
		}
		/// <summary>vgatherdps instruction.<br/>
		/// <br/>
		/// <c>VGATHERDPS ymm1, vm32y, ymm2</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 92 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgatherdps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.VEX_Vgatherdps_ymm_vm32y_ymm;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), src2));
		}
		/// <summary>vgatherpf0dpd instruction.<br/>
		/// <br/>
		/// <c>VGATHERPF0DPD vm32y {k1}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 C6 /1 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512PF</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgatherpf0dpd(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.EVEX_Vgatherpf0dpd_vm32y_k1;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vgatherpf0dps instruction.<br/>
		/// <br/>
		/// <c>VGATHERPF0DPS vm32z {k1}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 C6 /1 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512PF</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgatherpf0dps(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.EVEX_Vgatherpf0dps_vm32z_k1;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vgatherpf0qpd instruction.<br/>
		/// <br/>
		/// <c>VGATHERPF0QPD vm64z {k1}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 C7 /1 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512PF</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgatherpf0qpd(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.EVEX_Vgatherpf0qpd_vm64z_k1;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vgatherpf0qps instruction.<br/>
		/// <br/>
		/// <c>VGATHERPF0QPS vm64z {k1}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 C7 /1 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512PF</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgatherpf0qps(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.EVEX_Vgatherpf0qps_vm64z_k1;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vgatherpf1dpd instruction.<br/>
		/// <br/>
		/// <c>VGATHERPF1DPD vm32y {k1}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 C6 /2 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512PF</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgatherpf1dpd(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.EVEX_Vgatherpf1dpd_vm32y_k1;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vgatherpf1dps instruction.<br/>
		/// <br/>
		/// <c>VGATHERPF1DPS vm32z {k1}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 C6 /2 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512PF</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgatherpf1dps(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.EVEX_Vgatherpf1dps_vm32z_k1;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vgatherpf1qpd instruction.<br/>
		/// <br/>
		/// <c>VGATHERPF1QPD vm64z {k1}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 C7 /2 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512PF</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgatherpf1qpd(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.EVEX_Vgatherpf1qpd_vm64z_k1;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vgatherpf1qps instruction.<br/>
		/// <br/>
		/// <c>VGATHERPF1QPS vm64z {k1}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 C7 /2 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512PF</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgatherpf1qps(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.EVEX_Vgatherpf1qps_vm64z_k1;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vgatherqpd instruction.<br/>
		/// <br/>
		/// <c>VGATHERQPD xmm1 {k1}, vm64x</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 93 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgatherqpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vgatherqpd_xmm_k1_vm64x;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vgatherqpd instruction.<br/>
		/// <br/>
		/// <c>VGATHERQPD ymm1 {k1}, vm64y</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 93 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgatherqpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vgatherqpd_ymm_k1_vm64y;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vgatherqpd instruction.<br/>
		/// <br/>
		/// <c>VGATHERQPD zmm1 {k1}, vm64z</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 93 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgatherqpd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vgatherqpd_zmm_k1_vm64z;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vgatherqpd instruction.<br/>
		/// <br/>
		/// <c>VGATHERQPD xmm1, vm64x, xmm2</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 93 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgatherqpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.VEX_Vgatherqpd_xmm_vm64x_xmm;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), src2));
		}
		/// <summary>vgatherqpd instruction.<br/>
		/// <br/>
		/// <c>VGATHERQPD ymm1, vm64y, ymm2</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 93 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgatherqpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.VEX_Vgatherqpd_ymm_vm64y_ymm;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), src2));
		}
		/// <summary>vgatherqps instruction.<br/>
		/// <br/>
		/// <c>VGATHERQPS xmm1 {k1}, vm64x</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 93 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VGATHERQPS xmm1 {k1}, vm64y</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 93 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgatherqps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			if (src.Index.IsXMM()) {
				op = Code.EVEX_Vgatherqps_xmm_k1_vm64x;
			} else if (src.Index.IsYMM()) {
				op = Code.EVEX_Vgatherqps_xmm_k1_vm64y;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Vgatherqps, dst, src);
			}
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vgatherqps instruction.<br/>
		/// <br/>
		/// <c>VGATHERQPS ymm1 {k1}, vm64z</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 93 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgatherqps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vgatherqps_ymm_k1_vm64z;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vgatherqps instruction.<br/>
		/// <br/>
		/// <c>VGATHERQPS xmm1, vm64x, xmm2</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 93 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VGATHERQPS xmm1, vm64y, xmm2</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 93 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgatherqps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2) {
			Code op;
			if (src1.Index.IsXMM()) {
				op = Code.VEX_Vgatherqps_xmm_vm64x_xmm;
			} else if (src1.Index.IsYMM()) {
				op = Code.VEX_Vgatherqps_xmm_vm64y_xmm;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Vgatherqps, dst, src1, src2);
			}
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), src2));
		}
		/// <summary>vgetexppd instruction.<br/>
		/// <br/>
		/// <c>VGETEXPPD xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 42 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetexppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vgetexppd_xmm_k1z_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vgetexppd instruction.<br/>
		/// <br/>
		/// <c>VGETEXPPD ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 42 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetexppd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vgetexppd_ymm_k1z_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vgetexppd instruction.<br/>
		/// <br/>
		/// <c>VGETEXPPD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 42 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetexppd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vgetexppd_zmm_k1z_zmmm512b64_sae;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags | src.Flags);
		}
		/// <summary>vgetexppd instruction.<br/>
		/// <br/>
		/// <c>VGETEXPPD xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 42 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetexppd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vgetexppd_xmm_k1z_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vgetexppd instruction.<br/>
		/// <br/>
		/// <c>VGETEXPPD ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 42 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetexppd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vgetexppd_ymm_k1z_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vgetexppd instruction.<br/>
		/// <br/>
		/// <c>VGETEXPPD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 42 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetexppd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vgetexppd_zmm_k1z_zmmm512b64_sae;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vgetexpps instruction.<br/>
		/// <br/>
		/// <c>VGETEXPPS xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 42 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetexpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vgetexpps_xmm_k1z_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vgetexpps instruction.<br/>
		/// <br/>
		/// <c>VGETEXPPS ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 42 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetexpps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vgetexpps_ymm_k1z_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vgetexpps instruction.<br/>
		/// <br/>
		/// <c>VGETEXPPS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 42 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetexpps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vgetexpps_zmm_k1z_zmmm512b32_sae;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags | src.Flags);
		}
		/// <summary>vgetexpps instruction.<br/>
		/// <br/>
		/// <c>VGETEXPPS xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 42 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetexpps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vgetexpps_xmm_k1z_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vgetexpps instruction.<br/>
		/// <br/>
		/// <c>VGETEXPPS ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 42 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetexpps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vgetexpps_ymm_k1z_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vgetexpps instruction.<br/>
		/// <br/>
		/// <c>VGETEXPPS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 42 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetexpps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vgetexpps_zmm_k1z_zmmm512b32_sae;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vgetexpsd instruction.<br/>
		/// <br/>
		/// <c>VGETEXPSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 43 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetexpsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vgetexpsd_xmm_k1z_xmm_xmmm64_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vgetexpsd instruction.<br/>
		/// <br/>
		/// <c>VGETEXPSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 43 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetexpsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vgetexpsd_xmm_k1z_xmm_xmmm64_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vgetexpss instruction.<br/>
		/// <br/>
		/// <c>VGETEXPSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 43 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetexpss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vgetexpss_xmm_k1z_xmm_xmmm32_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vgetexpss instruction.<br/>
		/// <br/>
		/// <c>VGETEXPSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 43 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetexpss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vgetexpss_xmm_k1z_xmm_xmmm32_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vgetmantpd instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetmantpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vgetmantpd_xmm_k1z_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vgetmantpd instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetmantpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vgetmantpd_ymm_k1z_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vgetmantpd instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetmantpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vgetmantpd_zmm_k1z_zmmm512b64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags | src1.Flags);
		}
		/// <summary>vgetmantpd instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetmantpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vgetmantpd_xmm_k1z_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vgetmantpd instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetmantpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vgetmantpd_ymm_k1z_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vgetmantpd instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetmantpd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vgetmantpd_zmm_k1z_zmmm512b64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vgetmantpd instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetmantpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vgetmantpd_xmm_k1z_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vgetmantpd instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetmantpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vgetmantpd_ymm_k1z_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vgetmantpd instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetmantpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vgetmantpd_zmm_k1z_zmmm512b64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vgetmantpd instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetmantpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vgetmantpd_xmm_k1z_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vgetmantpd instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetmantpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vgetmantpd_ymm_k1z_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vgetmantpd instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetmantpd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vgetmantpd_zmm_k1z_zmmm512b64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vgetmantps instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetmantps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vgetmantps_xmm_k1z_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vgetmantps instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPS ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetmantps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vgetmantps_ymm_k1z_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vgetmantps instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetmantps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vgetmantps_zmm_k1z_zmmm512b32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags | src1.Flags);
		}
		/// <summary>vgetmantps instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetmantps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vgetmantps_xmm_k1z_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vgetmantps instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPS ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetmantps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vgetmantps_ymm_k1z_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vgetmantps instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetmantps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vgetmantps_zmm_k1z_zmmm512b32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vgetmantps instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetmantps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vgetmantps_xmm_k1z_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vgetmantps instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPS ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetmantps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vgetmantps_ymm_k1z_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vgetmantps instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetmantps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vgetmantps_zmm_k1z_zmmm512b32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vgetmantps instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetmantps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vgetmantps_xmm_k1z_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vgetmantps instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPS ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetmantps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vgetmantps_ymm_k1z_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vgetmantps instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetmantps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vgetmantps_zmm_k1z_zmmm512b32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vgetmantsd instruction.<br/>
		/// <br/>
		/// <c>VGETMANTSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 27 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetmantsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vgetmantsd_xmm_k1z_xmm_xmmm64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags | src2.Flags);
		}
		/// <summary>vgetmantsd instruction.<br/>
		/// <br/>
		/// <c>VGETMANTSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 27 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetmantsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vgetmantsd_xmm_k1z_xmm_xmmm64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vgetmantsd instruction.<br/>
		/// <br/>
		/// <c>VGETMANTSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 27 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetmantsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vgetmantsd_xmm_k1z_xmm_xmmm64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vgetmantsd instruction.<br/>
		/// <br/>
		/// <c>VGETMANTSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 27 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetmantsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vgetmantsd_xmm_k1z_xmm_xmmm64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vgetmantss instruction.<br/>
		/// <br/>
		/// <c>VGETMANTSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 27 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetmantss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vgetmantss_xmm_k1z_xmm_xmmm32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags | src2.Flags);
		}
		/// <summary>vgetmantss instruction.<br/>
		/// <br/>
		/// <c>VGETMANTSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 27 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetmantss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vgetmantss_xmm_k1z_xmm_xmmm32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vgetmantss instruction.<br/>
		/// <br/>
		/// <c>VGETMANTSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 27 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetmantss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vgetmantss_xmm_k1z_xmm_xmmm32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vgetmantss instruction.<br/>
		/// <br/>
		/// <c>VGETMANTSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 27 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgetmantss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vgetmantss_xmm_k1z_xmm_xmmm32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vgf2p8affineinvqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEINVQB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 CF /r ib</c><br/>
		/// <br/>
		/// <c>AVX and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VGF2P8AFFINEINVQB xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 CF /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgf2p8affineinvqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vgf2p8affineinvqb_xmm_xmm_xmmm128_imm8 : Code.EVEX_Vgf2p8affineinvqb_xmm_k1z_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vgf2p8affineinvqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEINVQB ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 CF /r ib</c><br/>
		/// <br/>
		/// <c>AVX and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VGF2P8AFFINEINVQB ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 CF /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgf2p8affineinvqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vgf2p8affineinvqb_ymm_ymm_ymmm256_imm8 : Code.EVEX_Vgf2p8affineinvqb_ymm_k1z_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vgf2p8affineinvqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEINVQB zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 CF /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgf2p8affineinvqb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vgf2p8affineinvqb_zmm_k1z_zmm_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vgf2p8affineinvqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEINVQB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 CF /r ib</c><br/>
		/// <br/>
		/// <c>AVX and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VGF2P8AFFINEINVQB xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 CF /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgf2p8affineinvqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vgf2p8affineinvqb_xmm_k1z_xmm_xmmm128b64_imm8;
			} else op = PreferVex ? Code.VEX_Vgf2p8affineinvqb_xmm_xmm_xmmm128_imm8 : Code.EVEX_Vgf2p8affineinvqb_xmm_k1z_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vgf2p8affineinvqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEINVQB ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 CF /r ib</c><br/>
		/// <br/>
		/// <c>AVX and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VGF2P8AFFINEINVQB ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 CF /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgf2p8affineinvqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vgf2p8affineinvqb_ymm_k1z_ymm_ymmm256b64_imm8;
			} else op = PreferVex ? Code.VEX_Vgf2p8affineinvqb_ymm_ymm_ymmm256_imm8 : Code.EVEX_Vgf2p8affineinvqb_ymm_k1z_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vgf2p8affineinvqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEINVQB zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 CF /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgf2p8affineinvqb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vgf2p8affineinvqb_zmm_k1z_zmm_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vgf2p8affineinvqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEINVQB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 CF /r ib</c><br/>
		/// <br/>
		/// <c>AVX and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VGF2P8AFFINEINVQB xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 CF /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgf2p8affineinvqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vgf2p8affineinvqb_xmm_xmm_xmmm128_imm8 : Code.EVEX_Vgf2p8affineinvqb_xmm_k1z_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vgf2p8affineinvqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEINVQB ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 CF /r ib</c><br/>
		/// <br/>
		/// <c>AVX and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VGF2P8AFFINEINVQB ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 CF /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgf2p8affineinvqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vgf2p8affineinvqb_ymm_ymm_ymmm256_imm8 : Code.EVEX_Vgf2p8affineinvqb_ymm_k1z_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vgf2p8affineinvqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEINVQB zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 CF /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgf2p8affineinvqb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vgf2p8affineinvqb_zmm_k1z_zmm_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vgf2p8affineinvqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEINVQB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 CF /r ib</c><br/>
		/// <br/>
		/// <c>AVX and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VGF2P8AFFINEINVQB xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 CF /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgf2p8affineinvqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vgf2p8affineinvqb_xmm_k1z_xmm_xmmm128b64_imm8;
			} else op = PreferVex ? Code.VEX_Vgf2p8affineinvqb_xmm_xmm_xmmm128_imm8 : Code.EVEX_Vgf2p8affineinvqb_xmm_k1z_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vgf2p8affineinvqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEINVQB ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 CF /r ib</c><br/>
		/// <br/>
		/// <c>AVX and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VGF2P8AFFINEINVQB ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 CF /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgf2p8affineinvqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vgf2p8affineinvqb_ymm_k1z_ymm_ymmm256b64_imm8;
			} else op = PreferVex ? Code.VEX_Vgf2p8affineinvqb_ymm_ymm_ymmm256_imm8 : Code.EVEX_Vgf2p8affineinvqb_ymm_k1z_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vgf2p8affineinvqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEINVQB zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 CF /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgf2p8affineinvqb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vgf2p8affineinvqb_zmm_k1z_zmm_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vgf2p8affineqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEQB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 CE /r ib</c><br/>
		/// <br/>
		/// <c>AVX and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VGF2P8AFFINEQB xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 CE /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgf2p8affineqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vgf2p8affineqb_xmm_xmm_xmmm128_imm8 : Code.EVEX_Vgf2p8affineqb_xmm_k1z_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vgf2p8affineqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEQB ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 CE /r ib</c><br/>
		/// <br/>
		/// <c>AVX and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VGF2P8AFFINEQB ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 CE /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgf2p8affineqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vgf2p8affineqb_ymm_ymm_ymmm256_imm8 : Code.EVEX_Vgf2p8affineqb_ymm_k1z_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vgf2p8affineqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEQB zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 CE /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgf2p8affineqb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vgf2p8affineqb_zmm_k1z_zmm_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vgf2p8affineqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEQB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 CE /r ib</c><br/>
		/// <br/>
		/// <c>AVX and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VGF2P8AFFINEQB xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 CE /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgf2p8affineqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vgf2p8affineqb_xmm_k1z_xmm_xmmm128b64_imm8;
			} else op = PreferVex ? Code.VEX_Vgf2p8affineqb_xmm_xmm_xmmm128_imm8 : Code.EVEX_Vgf2p8affineqb_xmm_k1z_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vgf2p8affineqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEQB ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 CE /r ib</c><br/>
		/// <br/>
		/// <c>AVX and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VGF2P8AFFINEQB ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 CE /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgf2p8affineqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vgf2p8affineqb_ymm_k1z_ymm_ymmm256b64_imm8;
			} else op = PreferVex ? Code.VEX_Vgf2p8affineqb_ymm_ymm_ymmm256_imm8 : Code.EVEX_Vgf2p8affineqb_ymm_k1z_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vgf2p8affineqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEQB zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 CE /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgf2p8affineqb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vgf2p8affineqb_zmm_k1z_zmm_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vgf2p8affineqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEQB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 CE /r ib</c><br/>
		/// <br/>
		/// <c>AVX and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VGF2P8AFFINEQB xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 CE /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgf2p8affineqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vgf2p8affineqb_xmm_xmm_xmmm128_imm8 : Code.EVEX_Vgf2p8affineqb_xmm_k1z_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vgf2p8affineqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEQB ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 CE /r ib</c><br/>
		/// <br/>
		/// <c>AVX and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VGF2P8AFFINEQB ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 CE /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgf2p8affineqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vgf2p8affineqb_ymm_ymm_ymmm256_imm8 : Code.EVEX_Vgf2p8affineqb_ymm_k1z_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vgf2p8affineqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEQB zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 CE /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgf2p8affineqb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vgf2p8affineqb_zmm_k1z_zmm_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vgf2p8affineqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEQB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 CE /r ib</c><br/>
		/// <br/>
		/// <c>AVX and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VGF2P8AFFINEQB xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 CE /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgf2p8affineqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vgf2p8affineqb_xmm_k1z_xmm_xmmm128b64_imm8;
			} else op = PreferVex ? Code.VEX_Vgf2p8affineqb_xmm_xmm_xmmm128_imm8 : Code.EVEX_Vgf2p8affineqb_xmm_k1z_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vgf2p8affineqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEQB ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 CE /r ib</c><br/>
		/// <br/>
		/// <c>AVX and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VGF2P8AFFINEQB ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 CE /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgf2p8affineqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vgf2p8affineqb_ymm_k1z_ymm_ymmm256b64_imm8;
			} else op = PreferVex ? Code.VEX_Vgf2p8affineqb_ymm_ymm_ymmm256_imm8 : Code.EVEX_Vgf2p8affineqb_ymm_k1z_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vgf2p8affineqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEQB zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 CE /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgf2p8affineqb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vgf2p8affineqb_zmm_k1z_zmm_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vgf2p8mulb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8MULB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 CF /r</c><br/>
		/// <br/>
		/// <c>AVX and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VGF2P8MULB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 CF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgf2p8mulb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vgf2p8mulb_xmm_xmm_xmmm128 : Code.EVEX_Vgf2p8mulb_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vgf2p8mulb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8MULB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 CF /r</c><br/>
		/// <br/>
		/// <c>AVX and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VGF2P8MULB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 CF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgf2p8mulb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vgf2p8mulb_ymm_ymm_ymmm256 : Code.EVEX_Vgf2p8mulb_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vgf2p8mulb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8MULB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 CF /r</c><br/>
		/// <br/>
		/// <c>AVX512F and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgf2p8mulb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vgf2p8mulb_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vgf2p8mulb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8MULB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 CF /r</c><br/>
		/// <br/>
		/// <c>AVX and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VGF2P8MULB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 CF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgf2p8mulb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vgf2p8mulb_xmm_xmm_xmmm128 : Code.EVEX_Vgf2p8mulb_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vgf2p8mulb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8MULB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 CF /r</c><br/>
		/// <br/>
		/// <c>AVX and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VGF2P8MULB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 CF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgf2p8mulb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vgf2p8mulb_ymm_ymm_ymmm256 : Code.EVEX_Vgf2p8mulb_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vgf2p8mulb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8MULB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 CF /r</c><br/>
		/// <br/>
		/// <c>AVX512F and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vgf2p8mulb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vgf2p8mulb_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vhaddpd instruction.<br/>
		/// <br/>
		/// <c>VHADDPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 7C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vhaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.VEX_Vhaddpd_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vhaddpd instruction.<br/>
		/// <br/>
		/// <c>VHADDPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 7C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vhaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.VEX_Vhaddpd_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vhaddpd instruction.<br/>
		/// <br/>
		/// <c>VHADDPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 7C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vhaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vhaddpd_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vhaddpd instruction.<br/>
		/// <br/>
		/// <c>VHADDPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 7C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vhaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vhaddpd_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vhaddps instruction.<br/>
		/// <br/>
		/// <c>VHADDPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.F2.0F.WIG 7C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vhaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.VEX_Vhaddps_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vhaddps instruction.<br/>
		/// <br/>
		/// <c>VHADDPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.F2.0F.WIG 7C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vhaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.VEX_Vhaddps_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vhaddps instruction.<br/>
		/// <br/>
		/// <c>VHADDPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.F2.0F.WIG 7C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vhaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vhaddps_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vhaddps instruction.<br/>
		/// <br/>
		/// <c>VHADDPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.F2.0F.WIG 7C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vhaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vhaddps_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vhsubpd instruction.<br/>
		/// <br/>
		/// <c>VHSUBPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 7D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vhsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.VEX_Vhsubpd_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vhsubpd instruction.<br/>
		/// <br/>
		/// <c>VHSUBPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 7D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vhsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.VEX_Vhsubpd_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vhsubpd instruction.<br/>
		/// <br/>
		/// <c>VHSUBPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 7D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vhsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vhsubpd_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vhsubpd instruction.<br/>
		/// <br/>
		/// <c>VHSUBPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 7D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vhsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vhsubpd_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vhsubps instruction.<br/>
		/// <br/>
		/// <c>VHSUBPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.F2.0F.WIG 7D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vhsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.VEX_Vhsubps_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vhsubps instruction.<br/>
		/// <br/>
		/// <c>VHSUBPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.F2.0F.WIG 7D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vhsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.VEX_Vhsubps_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vhsubps instruction.<br/>
		/// <br/>
		/// <c>VHSUBPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.F2.0F.WIG 7D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vhsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vhsubps_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vhsubps instruction.<br/>
		/// <br/>
		/// <c>VHSUBPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.F2.0F.WIG 7D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vhsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vhsubps_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vinsertf128 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF128 ymm1, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 18 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinsertf128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vinsertf128_ymm_ymm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm));
		}
		/// <summary>vinsertf128 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF128 ymm1, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 18 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinsertf128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vinsertf128_ymm_ymm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vinsertf128 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF128 ymm1, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 18 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinsertf128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.VEX_Vinsertf128_ymm_ymm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm));
		}
		/// <summary>vinsertf128 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF128 ymm1, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 18 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinsertf128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.VEX_Vinsertf128_ymm_ymm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vinsertf32x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF32X4 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 18 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinsertf32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vinsertf32x4_ymm_k1z_ymm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vinsertf32x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF32X4 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 18 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinsertf32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vinsertf32x4_zmm_k1z_zmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vinsertf32x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF32X4 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 18 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinsertf32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vinsertf32x4_ymm_k1z_ymm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vinsertf32x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF32X4 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 18 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinsertf32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vinsertf32x4_zmm_k1z_zmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vinsertf32x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF32X4 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 18 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinsertf32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vinsertf32x4_ymm_k1z_ymm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vinsertf32x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF32X4 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 18 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinsertf32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vinsertf32x4_zmm_k1z_zmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vinsertf32x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF32X4 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 18 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinsertf32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vinsertf32x4_ymm_k1z_ymm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vinsertf32x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF32X4 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 18 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinsertf32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vinsertf32x4_zmm_k1z_zmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vinsertf32x8 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF32X8 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1A /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinsertf32x8(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vinsertf32x8_zmm_k1z_zmm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vinsertf32x8 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF32X8 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1A /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinsertf32x8(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vinsertf32x8_zmm_k1z_zmm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vinsertf32x8 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF32X8 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1A /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinsertf32x8(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vinsertf32x8_zmm_k1z_zmm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vinsertf32x8 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF32X8 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1A /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinsertf32x8(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vinsertf32x8_zmm_k1z_zmm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vinsertf64x2 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF64X2 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 18 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinsertf64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vinsertf64x2_ymm_k1z_ymm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vinsertf64x2 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF64X2 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 18 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinsertf64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vinsertf64x2_zmm_k1z_zmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vinsertf64x2 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF64X2 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 18 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinsertf64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vinsertf64x2_ymm_k1z_ymm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vinsertf64x2 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF64X2 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 18 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinsertf64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vinsertf64x2_zmm_k1z_zmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vinsertf64x2 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF64X2 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 18 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinsertf64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vinsertf64x2_ymm_k1z_ymm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vinsertf64x2 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF64X2 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 18 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinsertf64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vinsertf64x2_zmm_k1z_zmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vinsertf64x2 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF64X2 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 18 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinsertf64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vinsertf64x2_ymm_k1z_ymm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vinsertf64x2 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF64X2 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 18 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinsertf64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vinsertf64x2_zmm_k1z_zmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vinsertf64x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF64X4 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1A /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinsertf64x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vinsertf64x4_zmm_k1z_zmm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vinsertf64x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF64X4 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1A /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinsertf64x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vinsertf64x4_zmm_k1z_zmm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vinsertf64x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF64X4 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1A /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinsertf64x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vinsertf64x4_zmm_k1z_zmm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vinsertf64x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF64X4 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1A /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinsertf64x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vinsertf64x4_zmm_k1z_zmm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vinserti128 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI128 ymm1, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 38 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinserti128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vinserti128_ymm_ymm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm));
		}
		/// <summary>vinserti128 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI128 ymm1, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 38 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinserti128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vinserti128_ymm_ymm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vinserti128 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI128 ymm1, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 38 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinserti128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.VEX_Vinserti128_ymm_ymm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm));
		}
		/// <summary>vinserti128 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI128 ymm1, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 38 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinserti128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.VEX_Vinserti128_ymm_ymm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vinserti32x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI32X4 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 38 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinserti32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vinserti32x4_ymm_k1z_ymm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vinserti32x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI32X4 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 38 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinserti32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vinserti32x4_zmm_k1z_zmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vinserti32x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI32X4 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 38 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinserti32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vinserti32x4_ymm_k1z_ymm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vinserti32x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI32X4 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 38 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinserti32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vinserti32x4_zmm_k1z_zmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vinserti32x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI32X4 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 38 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinserti32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vinserti32x4_ymm_k1z_ymm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vinserti32x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI32X4 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 38 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinserti32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vinserti32x4_zmm_k1z_zmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vinserti32x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI32X4 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 38 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinserti32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vinserti32x4_ymm_k1z_ymm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vinserti32x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI32X4 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 38 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinserti32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vinserti32x4_zmm_k1z_zmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vinserti32x8 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI32X8 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3A /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinserti32x8(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vinserti32x8_zmm_k1z_zmm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vinserti32x8 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI32X8 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3A /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinserti32x8(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vinserti32x8_zmm_k1z_zmm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vinserti32x8 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI32X8 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3A /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinserti32x8(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vinserti32x8_zmm_k1z_zmm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vinserti32x8 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI32X8 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3A /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinserti32x8(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vinserti32x8_zmm_k1z_zmm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vinserti64x2 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI64X2 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 38 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinserti64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vinserti64x2_ymm_k1z_ymm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vinserti64x2 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI64X2 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 38 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinserti64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vinserti64x2_zmm_k1z_zmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vinserti64x2 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI64X2 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 38 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinserti64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vinserti64x2_ymm_k1z_ymm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vinserti64x2 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI64X2 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 38 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinserti64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vinserti64x2_zmm_k1z_zmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vinserti64x2 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI64X2 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 38 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinserti64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vinserti64x2_ymm_k1z_ymm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vinserti64x2 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI64X2 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 38 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinserti64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vinserti64x2_zmm_k1z_zmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vinserti64x2 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI64X2 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 38 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinserti64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vinserti64x2_ymm_k1z_ymm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vinserti64x2 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI64X2 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 38 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinserti64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vinserti64x2_zmm_k1z_zmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vinserti64x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI64X4 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3A /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinserti64x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vinserti64x4_zmm_k1z_zmm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vinserti64x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI64X4 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3A /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinserti64x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vinserti64x4_zmm_k1z_zmm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vinserti64x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI64X4 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3A /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinserti64x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vinserti64x4_zmm_k1z_zmm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vinserti64x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI64X4 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3A /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinserti64x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vinserti64x4_zmm_k1z_zmm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vinsertps instruction.<br/>
		/// <br/>
		/// <c>VINSERTPS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 21 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VINSERTPS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 21 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinsertps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vinsertps_xmm_xmm_xmmm32_imm8 : Code.EVEX_Vinsertps_xmm_xmm_xmmm32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm));
		}
		/// <summary>vinsertps instruction.<br/>
		/// <br/>
		/// <c>VINSERTPS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 21 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VINSERTPS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 21 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinsertps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vinsertps_xmm_xmm_xmmm32_imm8 : Code.EVEX_Vinsertps_xmm_xmm_xmmm32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vinsertps instruction.<br/>
		/// <br/>
		/// <c>VINSERTPS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 21 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VINSERTPS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 21 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinsertps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vinsertps_xmm_xmm_xmmm32_imm8 : Code.EVEX_Vinsertps_xmm_xmm_xmmm32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm));
		}
		/// <summary>vinsertps instruction.<br/>
		/// <br/>
		/// <c>VINSERTPS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 21 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VINSERTPS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 21 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vinsertps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vinsertps_xmm_xmm_xmmm32_imm8 : Code.EVEX_Vinsertps_xmm_xmm_xmmm32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vlddqu instruction.<br/>
		/// <br/>
		/// <c>VLDDQU xmm1, m128</c><br/>
		/// <br/>
		/// <c>VEX.128.F2.0F.WIG F0 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vlddqu(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.VEX_Vlddqu_xmm_m128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vlddqu instruction.<br/>
		/// <br/>
		/// <c>VLDDQU ymm1, m256</c><br/>
		/// <br/>
		/// <c>VEX.256.F2.0F.WIG F0 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vlddqu(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.VEX_Vlddqu_ymm_m256;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vldmxcsr instruction.<br/>
		/// <br/>
		/// <c>VLDMXCSR m32</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F.WIG AE /2</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vldmxcsr(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.VEX_Vldmxcsr_m32;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>vmaskmovdqu instruction.<br/>
		/// <br/>
		/// <c>VMASKMOVDQU xmm1, xmm2</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG F7 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmaskmovdqu(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			AddInstruction(Instruction.CreateVmaskmovdqu(Bitness, dst, src));
		}
		/// <summary>vmaskmovpd instruction.<br/>
		/// <br/>
		/// <c>VMASKMOVPD m128, xmm1, xmm2</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 2F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmaskmovpd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.VEX_Vmaskmovpd_m128_xmm_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, src2));
		}
		/// <summary>vmaskmovpd instruction.<br/>
		/// <br/>
		/// <c>VMASKMOVPD m256, ymm1, ymm2</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 2F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmaskmovpd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.VEX_Vmaskmovpd_m256_ymm_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, src2));
		}
		/// <summary>vmaskmovpd instruction.<br/>
		/// <br/>
		/// <c>VMASKMOVPD xmm1, xmm2, m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 2D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmaskmovpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vmaskmovpd_xmm_xmm_m128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vmaskmovpd instruction.<br/>
		/// <br/>
		/// <c>VMASKMOVPD ymm1, ymm2, m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 2D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmaskmovpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vmaskmovpd_ymm_ymm_m256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vmaskmovps instruction.<br/>
		/// <br/>
		/// <c>VMASKMOVPS m128, xmm1, xmm2</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 2E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmaskmovps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.VEX_Vmaskmovps_m128_xmm_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, src2));
		}
		/// <summary>vmaskmovps instruction.<br/>
		/// <br/>
		/// <c>VMASKMOVPS m256, ymm1, ymm2</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 2E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmaskmovps(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.VEX_Vmaskmovps_m256_ymm_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, src2));
		}
		/// <summary>vmaskmovps instruction.<br/>
		/// <br/>
		/// <c>VMASKMOVPS xmm1, xmm2, m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 2C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmaskmovps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vmaskmovps_xmm_xmm_m128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vmaskmovps instruction.<br/>
		/// <br/>
		/// <c>VMASKMOVPS ymm1, ymm2, m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 2C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmaskmovps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vmaskmovps_ymm_ymm_m256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vmaxpd instruction.<br/>
		/// <br/>
		/// <c>VMAXPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 5F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMAXPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 5F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmaxpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vmaxpd_xmm_xmm_xmmm128 : Code.EVEX_Vmaxpd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vmaxpd instruction.<br/>
		/// <br/>
		/// <c>VMAXPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 5F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMAXPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 5F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmaxpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vmaxpd_ymm_ymm_ymmm256 : Code.EVEX_Vmaxpd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vmaxpd instruction.<br/>
		/// <br/>
		/// <c>VMAXPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 5F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmaxpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vmaxpd_zmm_k1z_zmm_zmmm512b64_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vmaxpd instruction.<br/>
		/// <br/>
		/// <c>VMAXPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 5F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMAXPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 5F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmaxpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vmaxpd_xmm_k1z_xmm_xmmm128b64;
			} else op = PreferVex ? Code.VEX_Vmaxpd_xmm_xmm_xmmm128 : Code.EVEX_Vmaxpd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vmaxpd instruction.<br/>
		/// <br/>
		/// <c>VMAXPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 5F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMAXPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 5F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmaxpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vmaxpd_ymm_k1z_ymm_ymmm256b64;
			} else op = PreferVex ? Code.VEX_Vmaxpd_ymm_ymm_ymmm256 : Code.EVEX_Vmaxpd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vmaxpd instruction.<br/>
		/// <br/>
		/// <c>VMAXPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 5F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmaxpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vmaxpd_zmm_k1z_zmm_zmmm512b64_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vmaxps instruction.<br/>
		/// <br/>
		/// <c>VMAXPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 5F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMAXPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 5F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmaxps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vmaxps_xmm_xmm_xmmm128 : Code.EVEX_Vmaxps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vmaxps instruction.<br/>
		/// <br/>
		/// <c>VMAXPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 5F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMAXPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 5F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmaxps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vmaxps_ymm_ymm_ymmm256 : Code.EVEX_Vmaxps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vmaxps instruction.<br/>
		/// <br/>
		/// <c>VMAXPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 5F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmaxps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vmaxps_zmm_k1z_zmm_zmmm512b32_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vmaxps instruction.<br/>
		/// <br/>
		/// <c>VMAXPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 5F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMAXPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 5F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmaxps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vmaxps_xmm_k1z_xmm_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vmaxps_xmm_xmm_xmmm128 : Code.EVEX_Vmaxps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vmaxps instruction.<br/>
		/// <br/>
		/// <c>VMAXPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 5F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMAXPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 5F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmaxps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vmaxps_ymm_k1z_ymm_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vmaxps_ymm_ymm_ymmm256 : Code.EVEX_Vmaxps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vmaxps instruction.<br/>
		/// <br/>
		/// <c>VMAXPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 5F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmaxps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vmaxps_zmm_k1z_zmm_zmmm512b32_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vmaxsd instruction.<br/>
		/// <br/>
		/// <c>VMAXSD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG 5F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMAXSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 5F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmaxsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vmaxsd_xmm_xmm_xmmm64 : Code.EVEX_Vmaxsd_xmm_k1z_xmm_xmmm64_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vmaxsd instruction.<br/>
		/// <br/>
		/// <c>VMAXSD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG 5F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMAXSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 5F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmaxsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vmaxsd_xmm_xmm_xmmm64 : Code.EVEX_Vmaxsd_xmm_k1z_xmm_xmmm64_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vmaxss instruction.<br/>
		/// <br/>
		/// <c>VMAXSS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG 5F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMAXSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 5F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmaxss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vmaxss_xmm_xmm_xmmm32 : Code.EVEX_Vmaxss_xmm_k1z_xmm_xmmm32_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vmaxss instruction.<br/>
		/// <br/>
		/// <c>VMAXSS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG 5F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMAXSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 5F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmaxss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vmaxss_xmm_xmm_xmmm32 : Code.EVEX_Vmaxss_xmm_k1z_xmm_xmmm32_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vmcall instruction.<br/>
		/// <br/>
		/// <c>VMCALL</c><br/>
		/// <br/>
		/// <c>0F 01 C1</c><br/>
		/// <br/>
		/// <c>VMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmcall() {
			Code op;
			op = Code.Vmcall;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>vmclear instruction.<br/>
		/// <br/>
		/// <c>VMCLEAR m64</c><br/>
		/// <br/>
		/// <c>66 0F C7 /6</c><br/>
		/// <br/>
		/// <c>VMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmclear(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Vmclear_m64;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>vmfunc instruction.<br/>
		/// <br/>
		/// <c>VMFUNC</c><br/>
		/// <br/>
		/// <c>NP 0F 01 D4</c><br/>
		/// <br/>
		/// <c>VMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmfunc() {
			Code op;
			op = Code.Vmfunc;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>vmgexit instruction.<br/>
		/// <br/>
		/// <c>VMGEXIT</c><br/>
		/// <br/>
		/// <c>F3 0F 01 D9</c><br/>
		/// <br/>
		/// <c>SVM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmgexit() {
			Code op;
			op = Code.Vmgexit;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>vminpd instruction.<br/>
		/// <br/>
		/// <c>VMINPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 5D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMINPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 5D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vminpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vminpd_xmm_xmm_xmmm128 : Code.EVEX_Vminpd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vminpd instruction.<br/>
		/// <br/>
		/// <c>VMINPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 5D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMINPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 5D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vminpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vminpd_ymm_ymm_ymmm256 : Code.EVEX_Vminpd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vminpd instruction.<br/>
		/// <br/>
		/// <c>VMINPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 5D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vminpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vminpd_zmm_k1z_zmm_zmmm512b64_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vminpd instruction.<br/>
		/// <br/>
		/// <c>VMINPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 5D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMINPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 5D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vminpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vminpd_xmm_k1z_xmm_xmmm128b64;
			} else op = PreferVex ? Code.VEX_Vminpd_xmm_xmm_xmmm128 : Code.EVEX_Vminpd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vminpd instruction.<br/>
		/// <br/>
		/// <c>VMINPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 5D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMINPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 5D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vminpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vminpd_ymm_k1z_ymm_ymmm256b64;
			} else op = PreferVex ? Code.VEX_Vminpd_ymm_ymm_ymmm256 : Code.EVEX_Vminpd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vminpd instruction.<br/>
		/// <br/>
		/// <c>VMINPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 5D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vminpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vminpd_zmm_k1z_zmm_zmmm512b64_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vminps instruction.<br/>
		/// <br/>
		/// <c>VMINPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 5D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMINPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 5D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vminps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vminps_xmm_xmm_xmmm128 : Code.EVEX_Vminps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vminps instruction.<br/>
		/// <br/>
		/// <c>VMINPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 5D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMINPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 5D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vminps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vminps_ymm_ymm_ymmm256 : Code.EVEX_Vminps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vminps instruction.<br/>
		/// <br/>
		/// <c>VMINPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 5D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vminps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vminps_zmm_k1z_zmm_zmmm512b32_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vminps instruction.<br/>
		/// <br/>
		/// <c>VMINPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 5D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMINPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 5D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vminps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vminps_xmm_k1z_xmm_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vminps_xmm_xmm_xmmm128 : Code.EVEX_Vminps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vminps instruction.<br/>
		/// <br/>
		/// <c>VMINPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 5D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMINPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 5D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vminps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vminps_ymm_k1z_ymm_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vminps_ymm_ymm_ymmm256 : Code.EVEX_Vminps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vminps instruction.<br/>
		/// <br/>
		/// <c>VMINPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 5D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vminps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vminps_zmm_k1z_zmm_zmmm512b32_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vminsd instruction.<br/>
		/// <br/>
		/// <c>VMINSD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG 5D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMINSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 5D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vminsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vminsd_xmm_xmm_xmmm64 : Code.EVEX_Vminsd_xmm_k1z_xmm_xmmm64_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vminsd instruction.<br/>
		/// <br/>
		/// <c>VMINSD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG 5D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMINSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 5D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vminsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vminsd_xmm_xmm_xmmm64 : Code.EVEX_Vminsd_xmm_k1z_xmm_xmmm64_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vminss instruction.<br/>
		/// <br/>
		/// <c>VMINSS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG 5D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMINSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 5D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vminss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vminss_xmm_xmm_xmmm32 : Code.EVEX_Vminss_xmm_k1z_xmm_xmmm32_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vminss instruction.<br/>
		/// <br/>
		/// <c>VMINSS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG 5D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMINSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 5D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vminss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vminss_xmm_xmm_xmmm32 : Code.EVEX_Vminss_xmm_k1z_xmm_xmmm32_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vmlaunch instruction.<br/>
		/// <br/>
		/// <c>VMLAUNCH</c><br/>
		/// <br/>
		/// <c>0F 01 C2</c><br/>
		/// <br/>
		/// <c>VMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmlaunch() {
			Code op;
			op = Code.Vmlaunch;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>vmload instruction.<br/>
		/// <br/>
		/// <c>VMLOAD</c><br/>
		/// <br/>
		/// <c>0F 01 DA</c><br/>
		/// <br/>
		/// <c>SVM</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VMLOAD</c><br/>
		/// <br/>
		/// <c>a32 0F 01 DA</c><br/>
		/// <br/>
		/// <c>SVM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMLOAD</c><br/>
		/// <br/>
		/// <c>a16 0F 01 DA</c><br/>
		/// <br/>
		/// <c>SVM</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void vmload() {
			Code op;
			if (Bitness == 64) {
				op = Code.Vmloadq;
			} else op = Bitness >= 32 ? Code.Vmloadd : Code.Vmloadw;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>vmmcall instruction.<br/>
		/// <br/>
		/// <c>VMMCALL</c><br/>
		/// <br/>
		/// <c>0F 01 D9</c><br/>
		/// <br/>
		/// <c>SVM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmmcall() {
			Code op;
			op = Code.Vmmcall;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>vmovapd instruction.<br/>
		/// <br/>
		/// <c>VMOVAPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 28 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVAPD xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovapd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovapd_xmm_xmmm128 : Code.EVEX_Vmovapd_xmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vmovapd instruction.<br/>
		/// <br/>
		/// <c>VMOVAPD xmm2/m128, xmm1</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 29 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVAPD xmm2/m128 {k1}{z}, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 29 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovapd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovapd_xmmm128_xmm : Code.EVEX_Vmovapd_xmmm128_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vmovapd instruction.<br/>
		/// <br/>
		/// <c>VMOVAPD ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 28 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVAPD ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovapd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovapd_ymm_ymmm256 : Code.EVEX_Vmovapd_ymm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vmovapd instruction.<br/>
		/// <br/>
		/// <c>VMOVAPD ymm2/m256, ymm1</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 29 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVAPD ymm2/m256 {k1}{z}, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 29 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovapd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovapd_ymmm256_ymm : Code.EVEX_Vmovapd_ymmm256_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vmovapd instruction.<br/>
		/// <br/>
		/// <c>VMOVAPD zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovapd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vmovapd_zmm_k1z_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vmovapd instruction.<br/>
		/// <br/>
		/// <c>VMOVAPD zmm2/m512 {k1}{z}, zmm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 29 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovapd(AssemblerMemoryOperand dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vmovapd_zmmm512_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vmovapd instruction.<br/>
		/// <br/>
		/// <c>VMOVAPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 28 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVAPD xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovapd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovapd_xmm_xmmm128 : Code.EVEX_Vmovapd_xmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vmovapd instruction.<br/>
		/// <br/>
		/// <c>VMOVAPD ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 28 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVAPD ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovapd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovapd_ymm_ymmm256 : Code.EVEX_Vmovapd_ymm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vmovapd instruction.<br/>
		/// <br/>
		/// <c>VMOVAPD zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovapd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vmovapd_zmm_k1z_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vmovaps instruction.<br/>
		/// <br/>
		/// <c>VMOVAPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 28 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVAPS xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovaps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovaps_xmm_xmmm128 : Code.EVEX_Vmovaps_xmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vmovaps instruction.<br/>
		/// <br/>
		/// <c>VMOVAPS xmm2/m128, xmm1</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 29 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVAPS xmm2/m128 {k1}{z}, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 29 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovaps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovaps_xmmm128_xmm : Code.EVEX_Vmovaps_xmmm128_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vmovaps instruction.<br/>
		/// <br/>
		/// <c>VMOVAPS ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 28 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVAPS ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovaps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovaps_ymm_ymmm256 : Code.EVEX_Vmovaps_ymm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vmovaps instruction.<br/>
		/// <br/>
		/// <c>VMOVAPS ymm2/m256, ymm1</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 29 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVAPS ymm2/m256 {k1}{z}, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 29 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovaps(AssemblerMemoryOperand dst, AssemblerRegisterYMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovaps_ymmm256_ymm : Code.EVEX_Vmovaps_ymmm256_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vmovaps instruction.<br/>
		/// <br/>
		/// <c>VMOVAPS zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovaps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vmovaps_zmm_k1z_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vmovaps instruction.<br/>
		/// <br/>
		/// <c>VMOVAPS zmm2/m512 {k1}{z}, zmm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 29 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovaps(AssemblerMemoryOperand dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vmovaps_zmmm512_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vmovaps instruction.<br/>
		/// <br/>
		/// <c>VMOVAPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 28 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVAPS xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovaps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovaps_xmm_xmmm128 : Code.EVEX_Vmovaps_xmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vmovaps instruction.<br/>
		/// <br/>
		/// <c>VMOVAPS ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 28 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVAPS ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovaps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovaps_ymm_ymmm256 : Code.EVEX_Vmovaps_ymm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vmovaps instruction.<br/>
		/// <br/>
		/// <c>VMOVAPS zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovaps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vmovaps_zmm_k1z_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vmovd instruction.<br/>
		/// <br/>
		/// <c>VMOVD xmm1, r/m32</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.W0 6E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVD xmm1, r/m32</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 6E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovd(AssemblerRegisterXMM dst, AssemblerRegister32 src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovd_xmm_rm32 : Code.EVEX_Vmovd_xmm_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vmovd instruction.<br/>
		/// <br/>
		/// <c>VMOVD r/m32, xmm1</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.W0 7E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVD r/m32, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 7E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovd(AssemblerRegister32 dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovd_rm32_xmm : Code.EVEX_Vmovd_rm32_xmm;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vmovd instruction.<br/>
		/// <br/>
		/// <c>VMOVD r/m32, xmm1</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.W0 7E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVD r/m32, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 7E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovd_rm32_xmm : Code.EVEX_Vmovd_rm32_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>vmovd instruction.<br/>
		/// <br/>
		/// <c>VMOVD xmm1, r/m32</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.W0 6E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVD xmm1, r/m32</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 6E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovd_xmm_rm32 : Code.EVEX_Vmovd_xmm_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vmovddup instruction.<br/>
		/// <br/>
		/// <c>VMOVDDUP xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.F2.0F.WIG 12 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVDDUP xmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F.W1 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovddup(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovddup_xmm_xmmm64 : Code.EVEX_Vmovddup_xmm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vmovddup instruction.<br/>
		/// <br/>
		/// <c>VMOVDDUP ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.F2.0F.WIG 12 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVDDUP ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F.W1 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovddup(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovddup_ymm_ymmm256 : Code.EVEX_Vmovddup_ymm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vmovddup instruction.<br/>
		/// <br/>
		/// <c>VMOVDDUP zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F.W1 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovddup(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vmovddup_zmm_k1z_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vmovddup instruction.<br/>
		/// <br/>
		/// <c>VMOVDDUP xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.F2.0F.WIG 12 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVDDUP xmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F.W1 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovddup(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovddup_xmm_xmmm64 : Code.EVEX_Vmovddup_xmm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vmovddup instruction.<br/>
		/// <br/>
		/// <c>VMOVDDUP ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.F2.0F.WIG 12 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVDDUP ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F.W1 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovddup(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovddup_ymm_ymmm256 : Code.EVEX_Vmovddup_ymm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vmovddup instruction.<br/>
		/// <br/>
		/// <c>VMOVDDUP zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F.W1 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovddup(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vmovddup_zmm_k1z_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vmovdqa instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 6F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqa(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.VEX_Vmovdqa_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vmovdqa instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA xmm2/m128, xmm1</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 7F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqa(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.VEX_Vmovdqa_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>vmovdqa instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 6F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqa(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.VEX_Vmovdqa_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vmovdqa instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA ymm2/m256, ymm1</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 7F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqa(AssemblerMemoryOperand dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.VEX_Vmovdqa_ymmm256_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>vmovdqa instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 6F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqa(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.VEX_Vmovdqa_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vmovdqa instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 6F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqa(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.VEX_Vmovdqa_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vmovdqa32 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA32 xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqa32(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vmovdqa32_xmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vmovdqa32 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA32 xmm2/m128 {k1}{z}, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqa32(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vmovdqa32_xmmm128_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vmovdqa32 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA32 ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqa32(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vmovdqa32_ymm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vmovdqa32 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA32 ymm2/m256 {k1}{z}, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqa32(AssemblerMemoryOperand dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vmovdqa32_ymmm256_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vmovdqa32 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA32 zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqa32(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vmovdqa32_zmm_k1z_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vmovdqa32 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA32 zmm2/m512 {k1}{z}, zmm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqa32(AssemblerMemoryOperand dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vmovdqa32_zmmm512_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vmovdqa32 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA32 xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqa32(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vmovdqa32_xmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vmovdqa32 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA32 ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqa32(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vmovdqa32_ymm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vmovdqa32 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA32 zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqa32(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vmovdqa32_zmm_k1z_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vmovdqa64 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA64 xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqa64(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vmovdqa64_xmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vmovdqa64 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA64 xmm2/m128 {k1}{z}, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqa64(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vmovdqa64_xmmm128_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vmovdqa64 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA64 ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqa64(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vmovdqa64_ymm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vmovdqa64 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA64 ymm2/m256 {k1}{z}, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqa64(AssemblerMemoryOperand dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vmovdqa64_ymmm256_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vmovdqa64 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA64 zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqa64(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vmovdqa64_zmm_k1z_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vmovdqa64 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA64 zmm2/m512 {k1}{z}, zmm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqa64(AssemblerMemoryOperand dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vmovdqa64_zmmm512_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vmovdqa64 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA64 xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqa64(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vmovdqa64_xmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vmovdqa64 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA64 ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqa64(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vmovdqa64_ymm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vmovdqa64 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA64 zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqa64(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vmovdqa64_zmm_k1z_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vmovdqu instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.F3.0F.WIG 6F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqu(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.VEX_Vmovdqu_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vmovdqu instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU xmm2/m128, xmm1</c><br/>
		/// <br/>
		/// <c>VEX.128.F3.0F.WIG 7F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqu(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.VEX_Vmovdqu_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>vmovdqu instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.F3.0F.WIG 6F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqu(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.VEX_Vmovdqu_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vmovdqu instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU ymm2/m256, ymm1</c><br/>
		/// <br/>
		/// <c>VEX.256.F3.0F.WIG 7F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqu(AssemblerMemoryOperand dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.VEX_Vmovdqu_ymmm256_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>vmovdqu instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.F3.0F.WIG 6F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqu(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.VEX_Vmovdqu_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vmovdqu instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.F3.0F.WIG 6F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqu(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.VEX_Vmovdqu_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vmovdqu16 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU16 xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F.W1 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqu16(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vmovdqu16_xmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vmovdqu16 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU16 xmm2/m128 {k1}{z}, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F.W1 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqu16(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vmovdqu16_xmmm128_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vmovdqu16 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU16 ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F.W1 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqu16(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vmovdqu16_ymm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vmovdqu16 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU16 ymm2/m256 {k1}{z}, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F.W1 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqu16(AssemblerMemoryOperand dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vmovdqu16_ymmm256_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vmovdqu16 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU16 zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F.W1 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqu16(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vmovdqu16_zmm_k1z_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vmovdqu16 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU16 zmm2/m512 {k1}{z}, zmm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F.W1 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqu16(AssemblerMemoryOperand dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vmovdqu16_zmmm512_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vmovdqu16 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU16 xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F.W1 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqu16(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vmovdqu16_xmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vmovdqu16 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU16 ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F.W1 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqu16(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vmovdqu16_ymm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vmovdqu16 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU16 zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F.W1 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqu16(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vmovdqu16_zmm_k1z_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vmovdqu32 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU32 xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.W0 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqu32(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vmovdqu32_xmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vmovdqu32 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU32 xmm2/m128 {k1}{z}, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.W0 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqu32(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vmovdqu32_xmmm128_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vmovdqu32 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU32 ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.W0 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqu32(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vmovdqu32_ymm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vmovdqu32 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU32 ymm2/m256 {k1}{z}, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.W0 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqu32(AssemblerMemoryOperand dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vmovdqu32_ymmm256_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vmovdqu32 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU32 zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.W0 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqu32(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vmovdqu32_zmm_k1z_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vmovdqu32 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU32 zmm2/m512 {k1}{z}, zmm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.W0 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqu32(AssemblerMemoryOperand dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vmovdqu32_zmmm512_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vmovdqu32 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU32 xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.W0 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqu32(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vmovdqu32_xmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vmovdqu32 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU32 ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.W0 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqu32(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vmovdqu32_ymm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vmovdqu32 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU32 zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.W0 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqu32(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vmovdqu32_zmm_k1z_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vmovdqu64 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU64 xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.W1 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqu64(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vmovdqu64_xmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vmovdqu64 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU64 xmm2/m128 {k1}{z}, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.W1 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqu64(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vmovdqu64_xmmm128_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vmovdqu64 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU64 ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.W1 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqu64(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vmovdqu64_ymm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vmovdqu64 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU64 ymm2/m256 {k1}{z}, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.W1 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqu64(AssemblerMemoryOperand dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vmovdqu64_ymmm256_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vmovdqu64 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU64 zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.W1 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqu64(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vmovdqu64_zmm_k1z_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vmovdqu64 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU64 zmm2/m512 {k1}{z}, zmm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.W1 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqu64(AssemblerMemoryOperand dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vmovdqu64_zmmm512_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vmovdqu64 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU64 xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.W1 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqu64(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vmovdqu64_xmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vmovdqu64 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU64 ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.W1 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqu64(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vmovdqu64_ymm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vmovdqu64 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU64 zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.W1 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqu64(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vmovdqu64_zmm_k1z_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vmovdqu8 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU8 xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F.W0 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqu8(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vmovdqu8_xmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vmovdqu8 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU8 xmm2/m128 {k1}{z}, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F.W0 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqu8(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vmovdqu8_xmmm128_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vmovdqu8 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU8 ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F.W0 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqu8(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vmovdqu8_ymm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vmovdqu8 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU8 ymm2/m256 {k1}{z}, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F.W0 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqu8(AssemblerMemoryOperand dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vmovdqu8_ymmm256_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vmovdqu8 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU8 zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F.W0 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqu8(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vmovdqu8_zmm_k1z_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vmovdqu8 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU8 zmm2/m512 {k1}{z}, zmm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F.W0 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqu8(AssemblerMemoryOperand dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vmovdqu8_zmmm512_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vmovdqu8 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU8 xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F.W0 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqu8(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vmovdqu8_xmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vmovdqu8 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU8 ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F.W0 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqu8(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vmovdqu8_ymm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vmovdqu8 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU8 zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F.W0 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovdqu8(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vmovdqu8_zmm_k1z_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vmovhlps instruction.<br/>
		/// <br/>
		/// <c>VMOVHLPS xmm1, xmm2, xmm3</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 12 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVHLPS xmm1, xmm2, xmm3</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovhlps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovhlps_xmm_xmm_xmm : Code.EVEX_Vmovhlps_xmm_xmm_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vmovhpd instruction.<br/>
		/// <br/>
		/// <c>VMOVHPD m64, xmm1</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 17 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVHPD m64, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 17 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovhpd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovhpd_m64_xmm : Code.EVEX_Vmovhpd_m64_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>vmovhpd instruction.<br/>
		/// <br/>
		/// <c>VMOVHPD xmm2, xmm1, m64</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 16 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVHPD xmm2, xmm1, m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 16 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovhpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovhpd_xmm_xmm_m64 : Code.EVEX_Vmovhpd_xmm_xmm_m64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vmovhps instruction.<br/>
		/// <br/>
		/// <c>VMOVHPS m64, xmm1</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 17 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVHPS m64, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 17 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovhps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovhps_m64_xmm : Code.EVEX_Vmovhps_m64_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>vmovhps instruction.<br/>
		/// <br/>
		/// <c>VMOVHPS xmm2, xmm1, m64</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 16 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVHPS xmm2, xmm1, m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 16 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovhps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovhps_xmm_xmm_m64 : Code.EVEX_Vmovhps_xmm_xmm_m64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vmovlhps instruction.<br/>
		/// <br/>
		/// <c>VMOVLHPS xmm1, xmm2, xmm3</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 16 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVLHPS xmm1, xmm2, xmm3</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 16 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovlhps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovlhps_xmm_xmm_xmm : Code.EVEX_Vmovlhps_xmm_xmm_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vmovlpd instruction.<br/>
		/// <br/>
		/// <c>VMOVLPD m64, xmm1</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 13 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVLPD m64, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 13 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovlpd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovlpd_m64_xmm : Code.EVEX_Vmovlpd_m64_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>vmovlpd instruction.<br/>
		/// <br/>
		/// <c>VMOVLPD xmm2, xmm1, m64</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 12 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVLPD xmm2, xmm1, m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovlpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovlpd_xmm_xmm_m64 : Code.EVEX_Vmovlpd_xmm_xmm_m64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vmovlps instruction.<br/>
		/// <br/>
		/// <c>VMOVLPS m64, xmm1</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 13 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVLPS m64, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 13 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovlps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovlps_m64_xmm : Code.EVEX_Vmovlps_m64_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>vmovlps instruction.<br/>
		/// <br/>
		/// <c>VMOVLPS xmm2, xmm1, m64</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 12 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVLPS xmm2, xmm1, m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovlps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovlps_xmm_xmm_m64 : Code.EVEX_Vmovlps_xmm_xmm_m64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vmovmskpd instruction.<br/>
		/// <br/>
		/// <c>VMOVMSKPD r32, xmm2</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.W0 50 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovmskpd(AssemblerRegister32 dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.VEX_Vmovmskpd_r32_xmm;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vmovmskpd instruction.<br/>
		/// <br/>
		/// <c>VMOVMSKPD r64, xmm2</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.W1 50 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vmovmskpd(AssemblerRegister64 dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.VEX_Vmovmskpd_r64_xmm;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vmovmskpd instruction.<br/>
		/// <br/>
		/// <c>VMOVMSKPD r32, ymm2</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.W0 50 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovmskpd(AssemblerRegister32 dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.VEX_Vmovmskpd_r32_ymm;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vmovmskpd instruction.<br/>
		/// <br/>
		/// <c>VMOVMSKPD r64, ymm2</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.W1 50 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vmovmskpd(AssemblerRegister64 dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.VEX_Vmovmskpd_r64_ymm;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vmovmskps instruction.<br/>
		/// <br/>
		/// <c>VMOVMSKPS r32, xmm2</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.W0 50 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovmskps(AssemblerRegister32 dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.VEX_Vmovmskps_r32_xmm;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vmovmskps instruction.<br/>
		/// <br/>
		/// <c>VMOVMSKPS r64, xmm2</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.W1 50 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vmovmskps(AssemblerRegister64 dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.VEX_Vmovmskps_r64_xmm;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vmovmskps instruction.<br/>
		/// <br/>
		/// <c>VMOVMSKPS r32, ymm2</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.W0 50 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovmskps(AssemblerRegister32 dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.VEX_Vmovmskps_r32_ymm;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vmovmskps instruction.<br/>
		/// <br/>
		/// <c>VMOVMSKPS r64, ymm2</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.W1 50 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vmovmskps(AssemblerRegister64 dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.VEX_Vmovmskps_r64_ymm;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vmovntdq instruction.<br/>
		/// <br/>
		/// <c>VMOVNTDQ m128, xmm1</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG E7 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVNTDQ m128, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 E7 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovntdq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovntdq_m128_xmm : Code.EVEX_Vmovntdq_m128_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>vmovntdq instruction.<br/>
		/// <br/>
		/// <c>VMOVNTDQ m256, ymm1</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG E7 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVNTDQ m256, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 E7 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovntdq(AssemblerMemoryOperand dst, AssemblerRegisterYMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovntdq_m256_ymm : Code.EVEX_Vmovntdq_m256_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>vmovntdq instruction.<br/>
		/// <br/>
		/// <c>VMOVNTDQ m512, zmm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 E7 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovntdq(AssemblerMemoryOperand dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vmovntdq_m512_zmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>vmovntdqa instruction.<br/>
		/// <br/>
		/// <c>VMOVNTDQA xmm1, m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 2A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVNTDQA xmm1, m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 2A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovntdqa(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovntdqa_xmm_m128 : Code.EVEX_Vmovntdqa_xmm_m128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vmovntdqa instruction.<br/>
		/// <br/>
		/// <c>VMOVNTDQA ymm1, m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 2A /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVNTDQA ymm1, m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 2A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovntdqa(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovntdqa_ymm_m256 : Code.EVEX_Vmovntdqa_ymm_m256;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vmovntdqa instruction.<br/>
		/// <br/>
		/// <c>VMOVNTDQA zmm1, m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 2A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovntdqa(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vmovntdqa_zmm_m512;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vmovntpd instruction.<br/>
		/// <br/>
		/// <c>VMOVNTPD m128, xmm1</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 2B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVNTPD m128, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 2B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovntpd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovntpd_m128_xmm : Code.EVEX_Vmovntpd_m128_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>vmovntpd instruction.<br/>
		/// <br/>
		/// <c>VMOVNTPD m256, ymm1</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 2B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVNTPD m256, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 2B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovntpd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovntpd_m256_ymm : Code.EVEX_Vmovntpd_m256_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>vmovntpd instruction.<br/>
		/// <br/>
		/// <c>VMOVNTPD m512, zmm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 2B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovntpd(AssemblerMemoryOperand dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vmovntpd_m512_zmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>vmovntps instruction.<br/>
		/// <br/>
		/// <c>VMOVNTPS m128, xmm1</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 2B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVNTPS m128, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 2B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovntps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovntps_m128_xmm : Code.EVEX_Vmovntps_m128_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>vmovntps instruction.<br/>
		/// <br/>
		/// <c>VMOVNTPS m256, ymm1</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 2B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVNTPS m256, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 2B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovntps(AssemblerMemoryOperand dst, AssemblerRegisterYMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovntps_m256_ymm : Code.EVEX_Vmovntps_m256_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>vmovntps instruction.<br/>
		/// <br/>
		/// <c>VMOVNTPS m512, zmm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 2B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovntps(AssemblerMemoryOperand dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vmovntps_m512_zmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>vmovq instruction.<br/>
		/// <br/>
		/// <c>VMOVQ xmm1, r/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.W1 6E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VMOVQ xmm1, r/m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 6E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vmovq(AssemblerRegisterXMM dst, AssemblerRegister64 src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovq_xmm_rm64 : Code.EVEX_Vmovq_xmm_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vmovq instruction.<br/>
		/// <br/>
		/// <c>VMOVQ r/m64, xmm1</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.W1 7E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VMOVQ r/m64, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 7E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vmovq(AssemblerRegister64 dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovq_rm64_xmm : Code.EVEX_Vmovq_rm64_xmm;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vmovq instruction.<br/>
		/// <br/>
		/// <c>VMOVQ xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.F3.0F.WIG 7E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVQ xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.W1 7E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovq_xmm_xmmm64 : Code.EVEX_Vmovq_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vmovq instruction.<br/>
		/// <br/>
		/// <c>VMOVQ xmm1/m64, xmm2</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG D6 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVQ xmm1/m64, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 D6 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovq_xmmm64_xmm : Code.EVEX_Vmovq_xmmm64_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>vmovq instruction.<br/>
		/// <br/>
		/// <c>VMOVQ xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.F3.0F.WIG 7E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVQ xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.W1 7E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovq_xmm_xmmm64 : Code.EVEX_Vmovq_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vmovsd instruction.<br/>
		/// <br/>
		/// <c>VMOVSD m64, xmm1</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG 11 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVSD m64 {k1}, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 11 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovsd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovsd_m64_xmm : Code.EVEX_Vmovsd_m64_k1_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vmovsd instruction.<br/>
		/// <br/>
		/// <c>VMOVSD xmm1, m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG 10 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVSD xmm1 {k1}{z}, m64</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovsd_xmm_m64 : Code.EVEX_Vmovsd_xmm_k1z_m64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vmovsd instruction.<br/>
		/// <br/>
		/// <c>VMOVSD xmm1, xmm2, xmm3</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG 10 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVSD xmm1 {k1}{z}, xmm2, xmm3</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovsd_xmm_xmm_xmm : Code.EVEX_Vmovsd_xmm_k1z_xmm_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vmovshdup instruction.<br/>
		/// <br/>
		/// <c>VMOVSHDUP xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.F3.0F.WIG 16 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVSHDUP xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.W0 16 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovshdup(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovshdup_xmm_xmmm128 : Code.EVEX_Vmovshdup_xmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vmovshdup instruction.<br/>
		/// <br/>
		/// <c>VMOVSHDUP ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.F3.0F.WIG 16 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVSHDUP ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.W0 16 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovshdup(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovshdup_ymm_ymmm256 : Code.EVEX_Vmovshdup_ymm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vmovshdup instruction.<br/>
		/// <br/>
		/// <c>VMOVSHDUP zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.W0 16 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovshdup(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vmovshdup_zmm_k1z_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vmovshdup instruction.<br/>
		/// <br/>
		/// <c>VMOVSHDUP xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.F3.0F.WIG 16 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVSHDUP xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.W0 16 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovshdup(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovshdup_xmm_xmmm128 : Code.EVEX_Vmovshdup_xmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vmovshdup instruction.<br/>
		/// <br/>
		/// <c>VMOVSHDUP ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.F3.0F.WIG 16 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVSHDUP ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.W0 16 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovshdup(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovshdup_ymm_ymmm256 : Code.EVEX_Vmovshdup_ymm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vmovshdup instruction.<br/>
		/// <br/>
		/// <c>VMOVSHDUP zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.W0 16 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovshdup(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vmovshdup_zmm_k1z_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vmovsldup instruction.<br/>
		/// <br/>
		/// <c>VMOVSLDUP xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.F3.0F.WIG 12 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVSLDUP xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.W0 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovsldup(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovsldup_xmm_xmmm128 : Code.EVEX_Vmovsldup_xmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vmovsldup instruction.<br/>
		/// <br/>
		/// <c>VMOVSLDUP ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.F3.0F.WIG 12 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVSLDUP ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.W0 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovsldup(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovsldup_ymm_ymmm256 : Code.EVEX_Vmovsldup_ymm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vmovsldup instruction.<br/>
		/// <br/>
		/// <c>VMOVSLDUP zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.W0 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovsldup(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vmovsldup_zmm_k1z_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vmovsldup instruction.<br/>
		/// <br/>
		/// <c>VMOVSLDUP xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.F3.0F.WIG 12 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVSLDUP xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.W0 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovsldup(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovsldup_xmm_xmmm128 : Code.EVEX_Vmovsldup_xmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vmovsldup instruction.<br/>
		/// <br/>
		/// <c>VMOVSLDUP ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.F3.0F.WIG 12 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVSLDUP ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.W0 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovsldup(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovsldup_ymm_ymmm256 : Code.EVEX_Vmovsldup_ymm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vmovsldup instruction.<br/>
		/// <br/>
		/// <c>VMOVSLDUP zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.W0 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovsldup(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vmovsldup_zmm_k1z_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vmovss instruction.<br/>
		/// <br/>
		/// <c>VMOVSS m32, xmm1</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG 11 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVSS m32 {k1}, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 11 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovss(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovss_m32_xmm : Code.EVEX_Vmovss_m32_k1_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vmovss instruction.<br/>
		/// <br/>
		/// <c>VMOVSS xmm1, m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG 10 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVSS xmm1 {k1}{z}, m32</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovss_xmm_m32 : Code.EVEX_Vmovss_xmm_k1z_m32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vmovss instruction.<br/>
		/// <br/>
		/// <c>VMOVSS xmm1, xmm2, xmm3</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG 10 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVSS xmm1 {k1}{z}, xmm2, xmm3</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovss_xmm_xmm_xmm : Code.EVEX_Vmovss_xmm_k1z_xmm_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vmovupd instruction.<br/>
		/// <br/>
		/// <c>VMOVUPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 10 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVUPD xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovupd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovupd_xmm_xmmm128 : Code.EVEX_Vmovupd_xmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vmovupd instruction.<br/>
		/// <br/>
		/// <c>VMOVUPD xmm2/m128, xmm1</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 11 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVUPD xmm2/m128 {k1}{z}, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 11 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovupd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovupd_xmmm128_xmm : Code.EVEX_Vmovupd_xmmm128_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vmovupd instruction.<br/>
		/// <br/>
		/// <c>VMOVUPD ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 10 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVUPD ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovupd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovupd_ymm_ymmm256 : Code.EVEX_Vmovupd_ymm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vmovupd instruction.<br/>
		/// <br/>
		/// <c>VMOVUPD ymm2/m256, ymm1</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 11 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVUPD ymm2/m256 {k1}{z}, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 11 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovupd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovupd_ymmm256_ymm : Code.EVEX_Vmovupd_ymmm256_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vmovupd instruction.<br/>
		/// <br/>
		/// <c>VMOVUPD zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovupd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vmovupd_zmm_k1z_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vmovupd instruction.<br/>
		/// <br/>
		/// <c>VMOVUPD zmm2/m512 {k1}{z}, zmm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 11 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovupd(AssemblerMemoryOperand dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vmovupd_zmmm512_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vmovupd instruction.<br/>
		/// <br/>
		/// <c>VMOVUPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 10 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVUPD xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovupd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovupd_xmm_xmmm128 : Code.EVEX_Vmovupd_xmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vmovupd instruction.<br/>
		/// <br/>
		/// <c>VMOVUPD ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 10 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVUPD ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovupd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovupd_ymm_ymmm256 : Code.EVEX_Vmovupd_ymm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vmovupd instruction.<br/>
		/// <br/>
		/// <c>VMOVUPD zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovupd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vmovupd_zmm_k1z_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vmovups instruction.<br/>
		/// <br/>
		/// <c>VMOVUPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 10 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVUPS xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovups(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovups_xmm_xmmm128 : Code.EVEX_Vmovups_xmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vmovups instruction.<br/>
		/// <br/>
		/// <c>VMOVUPS xmm2/m128, xmm1</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 11 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVUPS xmm2/m128 {k1}{z}, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 11 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovups(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovups_xmmm128_xmm : Code.EVEX_Vmovups_xmmm128_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vmovups instruction.<br/>
		/// <br/>
		/// <c>VMOVUPS ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 10 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVUPS ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovups(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovups_ymm_ymmm256 : Code.EVEX_Vmovups_ymm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vmovups instruction.<br/>
		/// <br/>
		/// <c>VMOVUPS ymm2/m256, ymm1</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 11 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVUPS ymm2/m256 {k1}{z}, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 11 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovups(AssemblerMemoryOperand dst, AssemblerRegisterYMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovups_ymmm256_ymm : Code.EVEX_Vmovups_ymmm256_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vmovups instruction.<br/>
		/// <br/>
		/// <c>VMOVUPS zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovups(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vmovups_zmm_k1z_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vmovups instruction.<br/>
		/// <br/>
		/// <c>VMOVUPS zmm2/m512 {k1}{z}, zmm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 11 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovups(AssemblerMemoryOperand dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vmovups_zmmm512_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vmovups instruction.<br/>
		/// <br/>
		/// <c>VMOVUPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 10 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVUPS xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovups(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovups_xmm_xmmm128 : Code.EVEX_Vmovups_xmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vmovups instruction.<br/>
		/// <br/>
		/// <c>VMOVUPS ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 10 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVUPS ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovups(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vmovups_ymm_ymmm256 : Code.EVEX_Vmovups_ymm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vmovups instruction.<br/>
		/// <br/>
		/// <c>VMOVUPS zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmovups(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vmovups_zmm_k1z_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vmpsadbw instruction.<br/>
		/// <br/>
		/// <c>VMPSADBW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 42 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vmpsadbw_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm));
		}
		/// <summary>vmpsadbw instruction.<br/>
		/// <br/>
		/// <c>VMPSADBW ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 42 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmpsadbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vmpsadbw_ymm_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm));
		}
		/// <summary>vmpsadbw instruction.<br/>
		/// <br/>
		/// <c>VMPSADBW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 42 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vmpsadbw_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vmpsadbw instruction.<br/>
		/// <br/>
		/// <c>VMPSADBW ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 42 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmpsadbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vmpsadbw_ymm_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vmpsadbw instruction.<br/>
		/// <br/>
		/// <c>VMPSADBW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 42 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.VEX_Vmpsadbw_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm));
		}
		/// <summary>vmpsadbw instruction.<br/>
		/// <br/>
		/// <c>VMPSADBW ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 42 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmpsadbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = Code.VEX_Vmpsadbw_ymm_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm));
		}
		/// <summary>vmpsadbw instruction.<br/>
		/// <br/>
		/// <c>VMPSADBW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 42 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.VEX_Vmpsadbw_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vmpsadbw instruction.<br/>
		/// <br/>
		/// <c>VMPSADBW ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 42 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmpsadbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.VEX_Vmpsadbw_ymm_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vmptrld instruction.<br/>
		/// <br/>
		/// <c>VMPTRLD m64</c><br/>
		/// <br/>
		/// <c>NP 0F C7 /6</c><br/>
		/// <br/>
		/// <c>VMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmptrld(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Vmptrld_m64;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>vmptrst instruction.<br/>
		/// <br/>
		/// <c>VMPTRST m64</c><br/>
		/// <br/>
		/// <c>NP 0F C7 /7</c><br/>
		/// <br/>
		/// <c>VMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmptrst(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Vmptrst_m64;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>vmread instruction.<br/>
		/// <br/>
		/// <c>VMREAD r/m32, r32</c><br/>
		/// <br/>
		/// <c>NP 0F 78 /r</c><br/>
		/// <br/>
		/// <c>VMX</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void vmread(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Vmread_rm32_r32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vmread instruction.<br/>
		/// <br/>
		/// <c>VMREAD r/m32, r32</c><br/>
		/// <br/>
		/// <c>NP 0F 78 /r</c><br/>
		/// <br/>
		/// <c>VMX</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void vmread(AssemblerMemoryOperand dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Vmread_rm32_r32;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>vmread instruction.<br/>
		/// <br/>
		/// <c>VMREAD r/m64, r64</c><br/>
		/// <br/>
		/// <c>NP 0F 78 /r</c><br/>
		/// <br/>
		/// <c>VMX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vmread(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Vmread_rm64_r64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vmread instruction.<br/>
		/// <br/>
		/// <c>VMREAD r/m64, r64</c><br/>
		/// <br/>
		/// <c>NP 0F 78 /r</c><br/>
		/// <br/>
		/// <c>VMX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vmread(AssemblerMemoryOperand dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Vmread_rm64_r64;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>vmresume instruction.<br/>
		/// <br/>
		/// <c>VMRESUME</c><br/>
		/// <br/>
		/// <c>0F 01 C3</c><br/>
		/// <br/>
		/// <c>VMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmresume() {
			Code op;
			op = Code.Vmresume;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>vmrun instruction.<br/>
		/// <br/>
		/// <c>VMRUN</c><br/>
		/// <br/>
		/// <c>0F 01 D8</c><br/>
		/// <br/>
		/// <c>SVM</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VMRUN</c><br/>
		/// <br/>
		/// <c>a32 0F 01 D8</c><br/>
		/// <br/>
		/// <c>SVM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMRUN</c><br/>
		/// <br/>
		/// <c>a16 0F 01 D8</c><br/>
		/// <br/>
		/// <c>SVM</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void vmrun() {
			Code op;
			if (Bitness == 64) {
				op = Code.Vmrunq;
			} else op = Bitness >= 32 ? Code.Vmrund : Code.Vmrunw;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>vmsave instruction.<br/>
		/// <br/>
		/// <c>VMSAVE</c><br/>
		/// <br/>
		/// <c>0F 01 DB</c><br/>
		/// <br/>
		/// <c>SVM</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VMSAVE</c><br/>
		/// <br/>
		/// <c>a32 0F 01 DB</c><br/>
		/// <br/>
		/// <c>SVM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMSAVE</c><br/>
		/// <br/>
		/// <c>a16 0F 01 DB</c><br/>
		/// <br/>
		/// <c>SVM</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void vmsave() {
			Code op;
			if (Bitness == 64) {
				op = Code.Vmsaveq;
			} else op = Bitness >= 32 ? Code.Vmsaved : Code.Vmsavew;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>vmulpd instruction.<br/>
		/// <br/>
		/// <c>VMULPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 59 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMULPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmulpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vmulpd_xmm_xmm_xmmm128 : Code.EVEX_Vmulpd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vmulpd instruction.<br/>
		/// <br/>
		/// <c>VMULPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 59 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMULPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmulpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vmulpd_ymm_ymm_ymmm256 : Code.EVEX_Vmulpd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vmulpd instruction.<br/>
		/// <br/>
		/// <c>VMULPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmulpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vmulpd_zmm_k1z_zmm_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vmulpd instruction.<br/>
		/// <br/>
		/// <c>VMULPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 59 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMULPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmulpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vmulpd_xmm_k1z_xmm_xmmm128b64;
			} else op = PreferVex ? Code.VEX_Vmulpd_xmm_xmm_xmmm128 : Code.EVEX_Vmulpd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vmulpd instruction.<br/>
		/// <br/>
		/// <c>VMULPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 59 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMULPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmulpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vmulpd_ymm_k1z_ymm_ymmm256b64;
			} else op = PreferVex ? Code.VEX_Vmulpd_ymm_ymm_ymmm256 : Code.EVEX_Vmulpd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vmulpd instruction.<br/>
		/// <br/>
		/// <c>VMULPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmulpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vmulpd_zmm_k1z_zmm_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vmulps instruction.<br/>
		/// <br/>
		/// <c>VMULPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 59 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMULPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmulps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vmulps_xmm_xmm_xmmm128 : Code.EVEX_Vmulps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vmulps instruction.<br/>
		/// <br/>
		/// <c>VMULPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 59 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMULPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmulps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vmulps_ymm_ymm_ymmm256 : Code.EVEX_Vmulps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vmulps instruction.<br/>
		/// <br/>
		/// <c>VMULPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmulps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vmulps_zmm_k1z_zmm_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vmulps instruction.<br/>
		/// <br/>
		/// <c>VMULPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 59 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMULPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmulps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vmulps_xmm_k1z_xmm_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vmulps_xmm_xmm_xmmm128 : Code.EVEX_Vmulps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vmulps instruction.<br/>
		/// <br/>
		/// <c>VMULPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 59 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMULPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmulps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vmulps_ymm_k1z_ymm_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vmulps_ymm_ymm_ymmm256 : Code.EVEX_Vmulps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vmulps instruction.<br/>
		/// <br/>
		/// <c>VMULPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmulps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vmulps_zmm_k1z_zmm_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vmulsd instruction.<br/>
		/// <br/>
		/// <c>VMULSD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG 59 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMULSD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmulsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vmulsd_xmm_xmm_xmmm64 : Code.EVEX_Vmulsd_xmm_k1z_xmm_xmmm64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vmulsd instruction.<br/>
		/// <br/>
		/// <c>VMULSD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG 59 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMULSD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmulsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vmulsd_xmm_xmm_xmmm64 : Code.EVEX_Vmulsd_xmm_k1z_xmm_xmmm64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vmulss instruction.<br/>
		/// <br/>
		/// <c>VMULSS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG 59 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMULSS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmulss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vmulss_xmm_xmm_xmmm32 : Code.EVEX_Vmulss_xmm_k1z_xmm_xmmm32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vmulss instruction.<br/>
		/// <br/>
		/// <c>VMULSS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG 59 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMULSS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmulss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vmulss_xmm_xmm_xmmm32 : Code.EVEX_Vmulss_xmm_k1z_xmm_xmmm32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vmwrite instruction.<br/>
		/// <br/>
		/// <c>VMWRITE r32, r/m32</c><br/>
		/// <br/>
		/// <c>NP 0F 79 /r</c><br/>
		/// <br/>
		/// <c>VMX</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void vmwrite(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Vmwrite_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vmwrite instruction.<br/>
		/// <br/>
		/// <c>VMWRITE r64, r/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 79 /r</c><br/>
		/// <br/>
		/// <c>VMX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vmwrite(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Vmwrite_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vmwrite instruction.<br/>
		/// <br/>
		/// <c>VMWRITE r32, r/m32</c><br/>
		/// <br/>
		/// <c>NP 0F 79 /r</c><br/>
		/// <br/>
		/// <c>VMX</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void vmwrite(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Vmwrite_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vmwrite instruction.<br/>
		/// <br/>
		/// <c>VMWRITE r64, r/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 79 /r</c><br/>
		/// <br/>
		/// <c>VMX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vmwrite(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Vmwrite_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vmxoff instruction.<br/>
		/// <br/>
		/// <c>VMXOFF</c><br/>
		/// <br/>
		/// <c>0F 01 C4</c><br/>
		/// <br/>
		/// <c>VMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmxoff() {
			Code op;
			op = Code.Vmxoff;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>vmxon instruction.<br/>
		/// <br/>
		/// <c>VMXON m64</c><br/>
		/// <br/>
		/// <c>F3 0F C7 /6</c><br/>
		/// <br/>
		/// <c>VMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vmxon(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Vmxon_m64;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>vorpd instruction.<br/>
		/// <br/>
		/// <c>VORPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 56 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VORPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 56 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vorpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vorpd_xmm_xmm_xmmm128 : Code.EVEX_Vorpd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vorpd instruction.<br/>
		/// <br/>
		/// <c>VORPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 56 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VORPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 56 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vorpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vorpd_ymm_ymm_ymmm256 : Code.EVEX_Vorpd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vorpd instruction.<br/>
		/// <br/>
		/// <c>VORPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 56 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vorpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vorpd_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vorpd instruction.<br/>
		/// <br/>
		/// <c>VORPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 56 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VORPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 56 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vorpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vorpd_xmm_k1z_xmm_xmmm128b64;
			} else op = PreferVex ? Code.VEX_Vorpd_xmm_xmm_xmmm128 : Code.EVEX_Vorpd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vorpd instruction.<br/>
		/// <br/>
		/// <c>VORPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 56 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VORPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 56 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vorpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vorpd_ymm_k1z_ymm_ymmm256b64;
			} else op = PreferVex ? Code.VEX_Vorpd_ymm_ymm_ymmm256 : Code.EVEX_Vorpd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vorpd instruction.<br/>
		/// <br/>
		/// <c>VORPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 56 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vorpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vorpd_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vorps instruction.<br/>
		/// <br/>
		/// <c>VORPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 56 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VORPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 56 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vorps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vorps_xmm_xmm_xmmm128 : Code.EVEX_Vorps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vorps instruction.<br/>
		/// <br/>
		/// <c>VORPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 56 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VORPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 56 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vorps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vorps_ymm_ymm_ymmm256 : Code.EVEX_Vorps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vorps instruction.<br/>
		/// <br/>
		/// <c>VORPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 56 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vorps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vorps_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vorps instruction.<br/>
		/// <br/>
		/// <c>VORPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 56 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VORPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 56 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vorps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vorps_xmm_k1z_xmm_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vorps_xmm_xmm_xmmm128 : Code.EVEX_Vorps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vorps instruction.<br/>
		/// <br/>
		/// <c>VORPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 56 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VORPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 56 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vorps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vorps_ymm_k1z_ymm_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vorps_ymm_ymm_ymmm256 : Code.EVEX_Vorps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vorps instruction.<br/>
		/// <br/>
		/// <c>VORPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 56 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vorps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vorps_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vp2intersectd instruction.<br/>
		/// <br/>
		/// <c>VP2INTERSECTD k1+1, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F38.W0 68 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VP2INTERSECT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vp2intersectd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vp2intersectd_kp1_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vp2intersectd instruction.<br/>
		/// <br/>
		/// <c>VP2INTERSECTD k1+1, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F38.W0 68 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VP2INTERSECT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vp2intersectd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vp2intersectd_kp1_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vp2intersectd instruction.<br/>
		/// <br/>
		/// <c>VP2INTERSECTD k1+1, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F38.W0 68 /r</c><br/>
		/// <br/>
		/// <c>AVX512F and AVX512_VP2INTERSECT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vp2intersectd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vp2intersectd_kp1_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vp2intersectd instruction.<br/>
		/// <br/>
		/// <c>VP2INTERSECTD k1+1, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F38.W0 68 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VP2INTERSECT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vp2intersectd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vp2intersectd_kp1_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), src2.Flags);
		}
		/// <summary>vp2intersectd instruction.<br/>
		/// <br/>
		/// <c>VP2INTERSECTD k1+1, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F38.W0 68 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VP2INTERSECT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vp2intersectd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vp2intersectd_kp1_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), src2.Flags);
		}
		/// <summary>vp2intersectd instruction.<br/>
		/// <br/>
		/// <c>VP2INTERSECTD k1+1, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F38.W0 68 /r</c><br/>
		/// <br/>
		/// <c>AVX512F and AVX512_VP2INTERSECT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vp2intersectd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vp2intersectd_kp1_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), src2.Flags);
		}
		/// <summary>vp2intersectq instruction.<br/>
		/// <br/>
		/// <c>VP2INTERSECTQ k1+1, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F38.W1 68 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VP2INTERSECT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vp2intersectq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vp2intersectq_kp1_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vp2intersectq instruction.<br/>
		/// <br/>
		/// <c>VP2INTERSECTQ k1+1, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F38.W1 68 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VP2INTERSECT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vp2intersectq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vp2intersectq_kp1_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vp2intersectq instruction.<br/>
		/// <br/>
		/// <c>VP2INTERSECTQ k1+1, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F38.W1 68 /r</c><br/>
		/// <br/>
		/// <c>AVX512F and AVX512_VP2INTERSECT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vp2intersectq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vp2intersectq_kp1_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vp2intersectq instruction.<br/>
		/// <br/>
		/// <c>VP2INTERSECTQ k1+1, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F38.W1 68 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VP2INTERSECT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vp2intersectq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vp2intersectq_kp1_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), src2.Flags);
		}
		/// <summary>vp2intersectq instruction.<br/>
		/// <br/>
		/// <c>VP2INTERSECTQ k1+1, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F38.W1 68 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VP2INTERSECT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vp2intersectq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vp2intersectq_kp1_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), src2.Flags);
		}
		/// <summary>vp2intersectq instruction.<br/>
		/// <br/>
		/// <c>VP2INTERSECTQ k1+1, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F38.W1 68 /r</c><br/>
		/// <br/>
		/// <c>AVX512F and AVX512_VP2INTERSECT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vp2intersectq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vp2intersectq_kp1_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), src2.Flags);
		}
		/// <summary>vp4dpwssd instruction.<br/>
		/// <br/>
		/// <c>VP4DPWSSD zmm1 {k1}{z}, zmm2+3, m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F38.W0 52 /r</c><br/>
		/// <br/>
		/// <c>AVX512_4VNNIW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vp4dpwssd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vp4dpwssd_zmm_k1z_zmmp3_m128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vp4dpwssds instruction.<br/>
		/// <br/>
		/// <c>VP4DPWSSDS zmm1 {k1}{z}, zmm2+3, m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F38.W0 53 /r</c><br/>
		/// <br/>
		/// <c>AVX512_4VNNIW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vp4dpwssds(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vp4dpwssds_zmm_k1z_zmmp3_m128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpabsb instruction.<br/>
		/// <br/>
		/// <c>VPABSB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 1C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPABSB xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 1C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpabsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpabsb_xmm_xmmm128 : Code.EVEX_Vpabsb_xmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpabsb instruction.<br/>
		/// <br/>
		/// <c>VPABSB ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 1C /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPABSB ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 1C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpabsb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpabsb_ymm_ymmm256 : Code.EVEX_Vpabsb_ymm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpabsb instruction.<br/>
		/// <br/>
		/// <c>VPABSB zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 1C /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpabsb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpabsb_zmm_k1z_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpabsb instruction.<br/>
		/// <br/>
		/// <c>VPABSB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 1C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPABSB xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 1C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpabsb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpabsb_xmm_xmmm128 : Code.EVEX_Vpabsb_xmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpabsb instruction.<br/>
		/// <br/>
		/// <c>VPABSB ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 1C /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPABSB ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 1C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpabsb(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpabsb_ymm_ymmm256 : Code.EVEX_Vpabsb_ymm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpabsb instruction.<br/>
		/// <br/>
		/// <c>VPABSB zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 1C /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpabsb(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpabsb_zmm_k1z_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpabsd instruction.<br/>
		/// <br/>
		/// <c>VPABSD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 1E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPABSD xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 1E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpabsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpabsd_xmm_xmmm128 : Code.EVEX_Vpabsd_xmm_k1z_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpabsd instruction.<br/>
		/// <br/>
		/// <c>VPABSD ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 1E /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPABSD ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 1E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpabsd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpabsd_ymm_ymmm256 : Code.EVEX_Vpabsd_ymm_k1z_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpabsd instruction.<br/>
		/// <br/>
		/// <c>VPABSD zmm1 {k1}{z}, zmm2/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 1E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpabsd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpabsd_zmm_k1z_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpabsd instruction.<br/>
		/// <br/>
		/// <c>VPABSD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 1E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPABSD xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 1E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpabsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			if (src.IsBroadcast) {
				op = Code.EVEX_Vpabsd_xmm_k1z_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vpabsd_xmm_xmmm128 : Code.EVEX_Vpabsd_xmm_k1z_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vpabsd instruction.<br/>
		/// <br/>
		/// <c>VPABSD ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 1E /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPABSD ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 1E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpabsd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			if (src.IsBroadcast) {
				op = Code.EVEX_Vpabsd_ymm_k1z_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vpabsd_ymm_ymmm256 : Code.EVEX_Vpabsd_ymm_k1z_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vpabsd instruction.<br/>
		/// <br/>
		/// <c>VPABSD zmm1 {k1}{z}, zmm2/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 1E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpabsd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpabsd_zmm_k1z_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vpabsq instruction.<br/>
		/// <br/>
		/// <c>VPABSQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 1F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpabsq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpabsq_xmm_k1z_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpabsq instruction.<br/>
		/// <br/>
		/// <c>VPABSQ ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 1F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpabsq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpabsq_ymm_k1z_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpabsq instruction.<br/>
		/// <br/>
		/// <c>VPABSQ zmm1 {k1}{z}, zmm2/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 1F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpabsq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpabsq_zmm_k1z_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpabsq instruction.<br/>
		/// <br/>
		/// <c>VPABSQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 1F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpabsq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpabsq_xmm_k1z_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vpabsq instruction.<br/>
		/// <br/>
		/// <c>VPABSQ ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 1F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpabsq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpabsq_ymm_k1z_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vpabsq instruction.<br/>
		/// <br/>
		/// <c>VPABSQ zmm1 {k1}{z}, zmm2/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 1F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpabsq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpabsq_zmm_k1z_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vpabsw instruction.<br/>
		/// <br/>
		/// <c>VPABSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 1D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPABSW xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 1D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpabsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpabsw_xmm_xmmm128 : Code.EVEX_Vpabsw_xmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpabsw instruction.<br/>
		/// <br/>
		/// <c>VPABSW ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 1D /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPABSW ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 1D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpabsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpabsw_ymm_ymmm256 : Code.EVEX_Vpabsw_ymm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpabsw instruction.<br/>
		/// <br/>
		/// <c>VPABSW zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 1D /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpabsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpabsw_zmm_k1z_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpabsw instruction.<br/>
		/// <br/>
		/// <c>VPABSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 1D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPABSW xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 1D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpabsw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpabsw_xmm_xmmm128 : Code.EVEX_Vpabsw_xmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpabsw instruction.<br/>
		/// <br/>
		/// <c>VPABSW ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 1D /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPABSW ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 1D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpabsw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpabsw_ymm_ymmm256 : Code.EVEX_Vpabsw_ymm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpabsw instruction.<br/>
		/// <br/>
		/// <c>VPABSW zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 1D /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpabsw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpabsw_zmm_k1z_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpackssdw instruction.<br/>
		/// <br/>
		/// <c>VPACKSSDW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 6B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPACKSSDW xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 6B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpackssdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpackssdw_xmm_xmm_xmmm128 : Code.EVEX_Vpackssdw_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpackssdw instruction.<br/>
		/// <br/>
		/// <c>VPACKSSDW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 6B /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPACKSSDW ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 6B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpackssdw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpackssdw_ymm_ymm_ymmm256 : Code.EVEX_Vpackssdw_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpackssdw instruction.<br/>
		/// <br/>
		/// <c>VPACKSSDW zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 6B /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpackssdw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpackssdw_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpackssdw instruction.<br/>
		/// <br/>
		/// <c>VPACKSSDW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 6B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPACKSSDW xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 6B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpackssdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpackssdw_xmm_k1z_xmm_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vpackssdw_xmm_xmm_xmmm128 : Code.EVEX_Vpackssdw_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpackssdw instruction.<br/>
		/// <br/>
		/// <c>VPACKSSDW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 6B /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPACKSSDW ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 6B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpackssdw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpackssdw_ymm_k1z_ymm_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vpackssdw_ymm_ymm_ymmm256 : Code.EVEX_Vpackssdw_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpackssdw instruction.<br/>
		/// <br/>
		/// <c>VPACKSSDW zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 6B /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpackssdw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpackssdw_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpacksswb instruction.<br/>
		/// <br/>
		/// <c>VPACKSSWB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 63 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPACKSSWB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 63 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpacksswb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpacksswb_xmm_xmm_xmmm128 : Code.EVEX_Vpacksswb_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpacksswb instruction.<br/>
		/// <br/>
		/// <c>VPACKSSWB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 63 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPACKSSWB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 63 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpacksswb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpacksswb_ymm_ymm_ymmm256 : Code.EVEX_Vpacksswb_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpacksswb instruction.<br/>
		/// <br/>
		/// <c>VPACKSSWB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 63 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpacksswb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpacksswb_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpacksswb instruction.<br/>
		/// <br/>
		/// <c>VPACKSSWB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 63 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPACKSSWB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 63 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpacksswb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpacksswb_xmm_xmm_xmmm128 : Code.EVEX_Vpacksswb_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpacksswb instruction.<br/>
		/// <br/>
		/// <c>VPACKSSWB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 63 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPACKSSWB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 63 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpacksswb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpacksswb_ymm_ymm_ymmm256 : Code.EVEX_Vpacksswb_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpacksswb instruction.<br/>
		/// <br/>
		/// <c>VPACKSSWB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 63 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpacksswb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpacksswb_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpackusdw instruction.<br/>
		/// <br/>
		/// <c>VPACKUSDW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 2B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPACKUSDW xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 2B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpackusdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpackusdw_xmm_xmm_xmmm128 : Code.EVEX_Vpackusdw_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpackusdw instruction.<br/>
		/// <br/>
		/// <c>VPACKUSDW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 2B /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPACKUSDW ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 2B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpackusdw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpackusdw_ymm_ymm_ymmm256 : Code.EVEX_Vpackusdw_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpackusdw instruction.<br/>
		/// <br/>
		/// <c>VPACKUSDW zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 2B /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpackusdw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpackusdw_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpackusdw instruction.<br/>
		/// <br/>
		/// <c>VPACKUSDW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 2B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPACKUSDW xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 2B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpackusdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpackusdw_xmm_k1z_xmm_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vpackusdw_xmm_xmm_xmmm128 : Code.EVEX_Vpackusdw_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpackusdw instruction.<br/>
		/// <br/>
		/// <c>VPACKUSDW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 2B /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPACKUSDW ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 2B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpackusdw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpackusdw_ymm_k1z_ymm_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vpackusdw_ymm_ymm_ymmm256 : Code.EVEX_Vpackusdw_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpackusdw instruction.<br/>
		/// <br/>
		/// <c>VPACKUSDW zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 2B /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpackusdw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpackusdw_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpackuswb instruction.<br/>
		/// <br/>
		/// <c>VPACKUSWB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 67 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPACKUSWB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 67 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpackuswb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpackuswb_xmm_xmm_xmmm128 : Code.EVEX_Vpackuswb_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpackuswb instruction.<br/>
		/// <br/>
		/// <c>VPACKUSWB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 67 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPACKUSWB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 67 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpackuswb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpackuswb_ymm_ymm_ymmm256 : Code.EVEX_Vpackuswb_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpackuswb instruction.<br/>
		/// <br/>
		/// <c>VPACKUSWB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 67 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpackuswb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpackuswb_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpackuswb instruction.<br/>
		/// <br/>
		/// <c>VPACKUSWB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 67 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPACKUSWB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 67 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpackuswb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpackuswb_xmm_xmm_xmmm128 : Code.EVEX_Vpackuswb_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpackuswb instruction.<br/>
		/// <br/>
		/// <c>VPACKUSWB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 67 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPACKUSWB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 67 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpackuswb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpackuswb_ymm_ymm_ymmm256 : Code.EVEX_Vpackuswb_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpackuswb instruction.<br/>
		/// <br/>
		/// <c>VPACKUSWB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 67 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpackuswb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpackuswb_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpaddb instruction.<br/>
		/// <br/>
		/// <c>VPADDB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG FC /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG FC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpaddb_xmm_xmm_xmmm128 : Code.EVEX_Vpaddb_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpaddb instruction.<br/>
		/// <br/>
		/// <c>VPADDB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG FC /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG FC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpaddb_ymm_ymm_ymmm256 : Code.EVEX_Vpaddb_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpaddb instruction.<br/>
		/// <br/>
		/// <c>VPADDB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG FC /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpaddb_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpaddb instruction.<br/>
		/// <br/>
		/// <c>VPADDB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG FC /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG FC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpaddb_xmm_xmm_xmmm128 : Code.EVEX_Vpaddb_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpaddb instruction.<br/>
		/// <br/>
		/// <c>VPADDB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG FC /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG FC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpaddb_ymm_ymm_ymmm256 : Code.EVEX_Vpaddb_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpaddb instruction.<br/>
		/// <br/>
		/// <c>VPADDB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG FC /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpaddb_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpaddd instruction.<br/>
		/// <br/>
		/// <c>VPADDD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG FE /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 FE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpaddd_xmm_xmm_xmmm128 : Code.EVEX_Vpaddd_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpaddd instruction.<br/>
		/// <br/>
		/// <c>VPADDD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG FE /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 FE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpaddd_ymm_ymm_ymmm256 : Code.EVEX_Vpaddd_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpaddd instruction.<br/>
		/// <br/>
		/// <c>VPADDD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 FE /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpaddd_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpaddd instruction.<br/>
		/// <br/>
		/// <c>VPADDD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG FE /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 FE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpaddd_xmm_k1z_xmm_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vpaddd_xmm_xmm_xmmm128 : Code.EVEX_Vpaddd_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpaddd instruction.<br/>
		/// <br/>
		/// <c>VPADDD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG FE /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 FE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpaddd_ymm_k1z_ymm_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vpaddd_ymm_ymm_ymmm256 : Code.EVEX_Vpaddd_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpaddd instruction.<br/>
		/// <br/>
		/// <c>VPADDD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 FE /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpaddd_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpaddq instruction.<br/>
		/// <br/>
		/// <c>VPADDQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG D4 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 D4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpaddq_xmm_xmm_xmmm128 : Code.EVEX_Vpaddq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpaddq instruction.<br/>
		/// <br/>
		/// <c>VPADDQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG D4 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 D4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpaddq_ymm_ymm_ymmm256 : Code.EVEX_Vpaddq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpaddq instruction.<br/>
		/// <br/>
		/// <c>VPADDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 D4 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpaddq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpaddq instruction.<br/>
		/// <br/>
		/// <c>VPADDQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG D4 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 D4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpaddq_xmm_k1z_xmm_xmmm128b64;
			} else op = PreferVex ? Code.VEX_Vpaddq_xmm_xmm_xmmm128 : Code.EVEX_Vpaddq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpaddq instruction.<br/>
		/// <br/>
		/// <c>VPADDQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG D4 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 D4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpaddq_ymm_k1z_ymm_ymmm256b64;
			} else op = PreferVex ? Code.VEX_Vpaddq_ymm_ymm_ymmm256 : Code.EVEX_Vpaddq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpaddq instruction.<br/>
		/// <br/>
		/// <c>VPADDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 D4 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpaddq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpaddsb instruction.<br/>
		/// <br/>
		/// <c>VPADDSB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG EC /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDSB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG EC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpaddsb_xmm_xmm_xmmm128 : Code.EVEX_Vpaddsb_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpaddsb instruction.<br/>
		/// <br/>
		/// <c>VPADDSB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG EC /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDSB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG EC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddsb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpaddsb_ymm_ymm_ymmm256 : Code.EVEX_Vpaddsb_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpaddsb instruction.<br/>
		/// <br/>
		/// <c>VPADDSB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG EC /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddsb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpaddsb_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpaddsb instruction.<br/>
		/// <br/>
		/// <c>VPADDSB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG EC /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDSB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG EC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpaddsb_xmm_xmm_xmmm128 : Code.EVEX_Vpaddsb_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpaddsb instruction.<br/>
		/// <br/>
		/// <c>VPADDSB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG EC /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDSB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG EC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddsb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpaddsb_ymm_ymm_ymmm256 : Code.EVEX_Vpaddsb_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpaddsb instruction.<br/>
		/// <br/>
		/// <c>VPADDSB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG EC /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddsb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpaddsb_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpaddsw instruction.<br/>
		/// <br/>
		/// <c>VPADDSW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG ED /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDSW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG ED /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpaddsw_xmm_xmm_xmmm128 : Code.EVEX_Vpaddsw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpaddsw instruction.<br/>
		/// <br/>
		/// <c>VPADDSW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG ED /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDSW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG ED /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpaddsw_ymm_ymm_ymmm256 : Code.EVEX_Vpaddsw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpaddsw instruction.<br/>
		/// <br/>
		/// <c>VPADDSW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG ED /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpaddsw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpaddsw instruction.<br/>
		/// <br/>
		/// <c>VPADDSW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG ED /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDSW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG ED /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpaddsw_xmm_xmm_xmmm128 : Code.EVEX_Vpaddsw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpaddsw instruction.<br/>
		/// <br/>
		/// <c>VPADDSW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG ED /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDSW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG ED /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpaddsw_ymm_ymm_ymmm256 : Code.EVEX_Vpaddsw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpaddsw instruction.<br/>
		/// <br/>
		/// <c>VPADDSW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG ED /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpaddsw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpaddusb instruction.<br/>
		/// <br/>
		/// <c>VPADDUSB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG DC /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDUSB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG DC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddusb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpaddusb_xmm_xmm_xmmm128 : Code.EVEX_Vpaddusb_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpaddusb instruction.<br/>
		/// <br/>
		/// <c>VPADDUSB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG DC /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDUSB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG DC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddusb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpaddusb_ymm_ymm_ymmm256 : Code.EVEX_Vpaddusb_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpaddusb instruction.<br/>
		/// <br/>
		/// <c>VPADDUSB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG DC /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddusb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpaddusb_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpaddusb instruction.<br/>
		/// <br/>
		/// <c>VPADDUSB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG DC /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDUSB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG DC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddusb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpaddusb_xmm_xmm_xmmm128 : Code.EVEX_Vpaddusb_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpaddusb instruction.<br/>
		/// <br/>
		/// <c>VPADDUSB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG DC /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDUSB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG DC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddusb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpaddusb_ymm_ymm_ymmm256 : Code.EVEX_Vpaddusb_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpaddusb instruction.<br/>
		/// <br/>
		/// <c>VPADDUSB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG DC /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddusb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpaddusb_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpaddusw instruction.<br/>
		/// <br/>
		/// <c>VPADDUSW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG DD /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDUSW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG DD /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddusw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpaddusw_xmm_xmm_xmmm128 : Code.EVEX_Vpaddusw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpaddusw instruction.<br/>
		/// <br/>
		/// <c>VPADDUSW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG DD /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDUSW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG DD /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddusw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpaddusw_ymm_ymm_ymmm256 : Code.EVEX_Vpaddusw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpaddusw instruction.<br/>
		/// <br/>
		/// <c>VPADDUSW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG DD /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddusw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpaddusw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpaddusw instruction.<br/>
		/// <br/>
		/// <c>VPADDUSW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG DD /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDUSW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG DD /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddusw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpaddusw_xmm_xmm_xmmm128 : Code.EVEX_Vpaddusw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpaddusw instruction.<br/>
		/// <br/>
		/// <c>VPADDUSW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG DD /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDUSW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG DD /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddusw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpaddusw_ymm_ymm_ymmm256 : Code.EVEX_Vpaddusw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpaddusw instruction.<br/>
		/// <br/>
		/// <c>VPADDUSW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG DD /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddusw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpaddusw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpaddw instruction.<br/>
		/// <br/>
		/// <c>VPADDW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG FD /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG FD /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpaddw_xmm_xmm_xmmm128 : Code.EVEX_Vpaddw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpaddw instruction.<br/>
		/// <br/>
		/// <c>VPADDW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG FD /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG FD /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpaddw_ymm_ymm_ymmm256 : Code.EVEX_Vpaddw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpaddw instruction.<br/>
		/// <br/>
		/// <c>VPADDW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG FD /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpaddw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpaddw instruction.<br/>
		/// <br/>
		/// <c>VPADDW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG FD /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG FD /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpaddw_xmm_xmm_xmmm128 : Code.EVEX_Vpaddw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpaddw instruction.<br/>
		/// <br/>
		/// <c>VPADDW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG FD /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG FD /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpaddw_ymm_ymm_ymmm256 : Code.EVEX_Vpaddw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpaddw instruction.<br/>
		/// <br/>
		/// <c>VPADDW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG FD /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpaddw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpaddw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpalignr instruction.<br/>
		/// <br/>
		/// <c>VPALIGNR xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 0F /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPALIGNR xmm1 {k1}{z}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.WIG 0F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpalignr(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpalignr_xmm_xmm_xmmm128_imm8 : Code.EVEX_Vpalignr_xmm_k1z_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpalignr instruction.<br/>
		/// <br/>
		/// <c>VPALIGNR ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 0F /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPALIGNR ymm1 {k1}{z}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.WIG 0F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpalignr(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpalignr_ymm_ymm_ymmm256_imm8 : Code.EVEX_Vpalignr_ymm_k1z_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpalignr instruction.<br/>
		/// <br/>
		/// <c>VPALIGNR zmm1 {k1}{z}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.WIG 0F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpalignr(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpalignr_zmm_k1z_zmm_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpalignr instruction.<br/>
		/// <br/>
		/// <c>VPALIGNR xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 0F /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPALIGNR xmm1 {k1}{z}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.WIG 0F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpalignr(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpalignr_xmm_xmm_xmmm128_imm8 : Code.EVEX_Vpalignr_xmm_k1z_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vpalignr instruction.<br/>
		/// <br/>
		/// <c>VPALIGNR ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 0F /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPALIGNR ymm1 {k1}{z}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.WIG 0F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpalignr(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpalignr_ymm_ymm_ymmm256_imm8 : Code.EVEX_Vpalignr_ymm_k1z_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vpalignr instruction.<br/>
		/// <br/>
		/// <c>VPALIGNR zmm1 {k1}{z}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.WIG 0F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpalignr(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpalignr_zmm_k1z_zmm_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vpalignr instruction.<br/>
		/// <br/>
		/// <c>VPALIGNR xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 0F /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPALIGNR xmm1 {k1}{z}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.WIG 0F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpalignr(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpalignr_xmm_xmm_xmmm128_imm8 : Code.EVEX_Vpalignr_xmm_k1z_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpalignr instruction.<br/>
		/// <br/>
		/// <c>VPALIGNR ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 0F /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPALIGNR ymm1 {k1}{z}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.WIG 0F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpalignr(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpalignr_ymm_ymm_ymmm256_imm8 : Code.EVEX_Vpalignr_ymm_k1z_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpalignr instruction.<br/>
		/// <br/>
		/// <c>VPALIGNR zmm1 {k1}{z}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.WIG 0F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpalignr(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpalignr_zmm_k1z_zmm_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpalignr instruction.<br/>
		/// <br/>
		/// <c>VPALIGNR xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 0F /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPALIGNR xmm1 {k1}{z}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.WIG 0F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpalignr(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpalignr_xmm_xmm_xmmm128_imm8 : Code.EVEX_Vpalignr_xmm_k1z_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vpalignr instruction.<br/>
		/// <br/>
		/// <c>VPALIGNR ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 0F /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPALIGNR ymm1 {k1}{z}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.WIG 0F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpalignr(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpalignr_ymm_ymm_ymmm256_imm8 : Code.EVEX_Vpalignr_ymm_k1z_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vpalignr instruction.<br/>
		/// <br/>
		/// <c>VPALIGNR zmm1 {k1}{z}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.WIG 0F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpalignr(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpalignr_zmm_k1z_zmm_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vpand instruction.<br/>
		/// <br/>
		/// <c>VPAND xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG DB /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpand(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.VEX_Vpand_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vpand instruction.<br/>
		/// <br/>
		/// <c>VPAND ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG DB /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpand(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.VEX_Vpand_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vpand instruction.<br/>
		/// <br/>
		/// <c>VPAND xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG DB /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpand(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vpand_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpand instruction.<br/>
		/// <br/>
		/// <c>VPAND ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG DB /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpand(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vpand_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpandd instruction.<br/>
		/// <br/>
		/// <c>VPANDD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 DB /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpandd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpandd_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpandd instruction.<br/>
		/// <br/>
		/// <c>VPANDD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 DB /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpandd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpandd_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpandd instruction.<br/>
		/// <br/>
		/// <c>VPANDD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 DB /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpandd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpandd_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpandd instruction.<br/>
		/// <br/>
		/// <c>VPANDD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 DB /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpandd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpandd_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpandd instruction.<br/>
		/// <br/>
		/// <c>VPANDD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 DB /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpandd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpandd_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpandd instruction.<br/>
		/// <br/>
		/// <c>VPANDD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 DB /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpandd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpandd_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpandn instruction.<br/>
		/// <br/>
		/// <c>VPANDN xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG DF /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpandn(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.VEX_Vpandn_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vpandn instruction.<br/>
		/// <br/>
		/// <c>VPANDN ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG DF /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpandn(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.VEX_Vpandn_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vpandn instruction.<br/>
		/// <br/>
		/// <c>VPANDN xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG DF /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpandn(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vpandn_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpandn instruction.<br/>
		/// <br/>
		/// <c>VPANDN ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG DF /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpandn(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vpandn_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpandnd instruction.<br/>
		/// <br/>
		/// <c>VPANDND xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 DF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpandnd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpandnd_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpandnd instruction.<br/>
		/// <br/>
		/// <c>VPANDND ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 DF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpandnd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpandnd_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpandnd instruction.<br/>
		/// <br/>
		/// <c>VPANDND zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 DF /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpandnd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpandnd_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpandnd instruction.<br/>
		/// <br/>
		/// <c>VPANDND xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 DF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpandnd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpandnd_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpandnd instruction.<br/>
		/// <br/>
		/// <c>VPANDND ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 DF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpandnd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpandnd_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpandnd instruction.<br/>
		/// <br/>
		/// <c>VPANDND zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 DF /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpandnd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpandnd_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpandnq instruction.<br/>
		/// <br/>
		/// <c>VPANDNQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 DF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpandnq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpandnq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpandnq instruction.<br/>
		/// <br/>
		/// <c>VPANDNQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 DF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpandnq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpandnq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpandnq instruction.<br/>
		/// <br/>
		/// <c>VPANDNQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 DF /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpandnq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpandnq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpandnq instruction.<br/>
		/// <br/>
		/// <c>VPANDNQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 DF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpandnq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpandnq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpandnq instruction.<br/>
		/// <br/>
		/// <c>VPANDNQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 DF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpandnq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpandnq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpandnq instruction.<br/>
		/// <br/>
		/// <c>VPANDNQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 DF /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpandnq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpandnq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpandq instruction.<br/>
		/// <br/>
		/// <c>VPANDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 DB /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpandq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpandq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpandq instruction.<br/>
		/// <br/>
		/// <c>VPANDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 DB /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpandq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpandq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpandq instruction.<br/>
		/// <br/>
		/// <c>VPANDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 DB /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpandq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpandq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpandq instruction.<br/>
		/// <br/>
		/// <c>VPANDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 DB /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpandq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpandq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpandq instruction.<br/>
		/// <br/>
		/// <c>VPANDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 DB /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpandq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpandq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpandq instruction.<br/>
		/// <br/>
		/// <c>VPANDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 DB /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpandq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpandq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpavgb instruction.<br/>
		/// <br/>
		/// <c>VPAVGB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG E0 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPAVGB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG E0 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpavgb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpavgb_xmm_xmm_xmmm128 : Code.EVEX_Vpavgb_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpavgb instruction.<br/>
		/// <br/>
		/// <c>VPAVGB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG E0 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPAVGB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG E0 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpavgb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpavgb_ymm_ymm_ymmm256 : Code.EVEX_Vpavgb_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpavgb instruction.<br/>
		/// <br/>
		/// <c>VPAVGB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG E0 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpavgb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpavgb_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpavgb instruction.<br/>
		/// <br/>
		/// <c>VPAVGB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG E0 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPAVGB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG E0 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpavgb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpavgb_xmm_xmm_xmmm128 : Code.EVEX_Vpavgb_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpavgb instruction.<br/>
		/// <br/>
		/// <c>VPAVGB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG E0 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPAVGB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG E0 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpavgb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpavgb_ymm_ymm_ymmm256 : Code.EVEX_Vpavgb_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpavgb instruction.<br/>
		/// <br/>
		/// <c>VPAVGB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG E0 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpavgb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpavgb_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpavgw instruction.<br/>
		/// <br/>
		/// <c>VPAVGW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG E3 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPAVGW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG E3 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpavgw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpavgw_xmm_xmm_xmmm128 : Code.EVEX_Vpavgw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpavgw instruction.<br/>
		/// <br/>
		/// <c>VPAVGW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG E3 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPAVGW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG E3 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpavgw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpavgw_ymm_ymm_ymmm256 : Code.EVEX_Vpavgw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpavgw instruction.<br/>
		/// <br/>
		/// <c>VPAVGW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG E3 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpavgw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpavgw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpavgw instruction.<br/>
		/// <br/>
		/// <c>VPAVGW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG E3 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPAVGW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG E3 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpavgw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpavgw_xmm_xmm_xmmm128 : Code.EVEX_Vpavgw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpavgw instruction.<br/>
		/// <br/>
		/// <c>VPAVGW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG E3 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPAVGW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG E3 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpavgw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpavgw_ymm_ymm_ymmm256 : Code.EVEX_Vpavgw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpavgw instruction.<br/>
		/// <br/>
		/// <c>VPAVGW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG E3 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpavgw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpavgw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpblendd instruction.<br/>
		/// <br/>
		/// <c>VPBLENDD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 02 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpblendd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vpblendd_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm));
		}
		/// <summary>vpblendd instruction.<br/>
		/// <br/>
		/// <c>VPBLENDD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 02 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpblendd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vpblendd_ymm_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm));
		}
		/// <summary>vpblendd instruction.<br/>
		/// <br/>
		/// <c>VPBLENDD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 02 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpblendd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vpblendd_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vpblendd instruction.<br/>
		/// <br/>
		/// <c>VPBLENDD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 02 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpblendd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vpblendd_ymm_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vpblendd instruction.<br/>
		/// <br/>
		/// <c>VPBLENDD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 02 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpblendd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.VEX_Vpblendd_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm));
		}
		/// <summary>vpblendd instruction.<br/>
		/// <br/>
		/// <c>VPBLENDD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 02 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpblendd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = Code.VEX_Vpblendd_ymm_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm));
		}
		/// <summary>vpblendd instruction.<br/>
		/// <br/>
		/// <c>VPBLENDD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 02 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpblendd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.VEX_Vpblendd_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vpblendd instruction.<br/>
		/// <br/>
		/// <c>VPBLENDD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 02 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpblendd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.VEX_Vpblendd_ymm_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vpblendmb instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 66 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpblendmb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpblendmb_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpblendmb instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 66 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpblendmb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpblendmb_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpblendmb instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 66 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpblendmb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpblendmb_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpblendmb instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 66 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpblendmb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpblendmb_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpblendmb instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 66 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpblendmb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpblendmb_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpblendmb instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 66 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpblendmb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpblendmb_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpblendmd instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 64 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpblendmd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpblendmd_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpblendmd instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 64 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpblendmd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpblendmd_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpblendmd instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 64 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpblendmd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpblendmd_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpblendmd instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 64 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpblendmd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpblendmd_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpblendmd instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 64 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpblendmd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpblendmd_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpblendmd instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 64 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpblendmd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpblendmd_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpblendmq instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 64 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpblendmq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpblendmq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpblendmq instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 64 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpblendmq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpblendmq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpblendmq instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 64 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpblendmq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpblendmq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpblendmq instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 64 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpblendmq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpblendmq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpblendmq instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 64 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpblendmq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpblendmq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpblendmq instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 64 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpblendmq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpblendmq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpblendmw instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 66 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpblendmw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpblendmw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpblendmw instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 66 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpblendmw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpblendmw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpblendmw instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 66 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpblendmw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpblendmw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpblendmw instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 66 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpblendmw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpblendmw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpblendmw instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 66 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpblendmw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpblendmw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpblendmw instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 66 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpblendmw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpblendmw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpblendvb instruction.<br/>
		/// <br/>
		/// <c>VPBLENDVB xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 4C /r /is4</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpblendvb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.VEX_Vpblendvb_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vpblendvb instruction.<br/>
		/// <br/>
		/// <c>VPBLENDVB xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 4C /r /is4</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpblendvb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.VEX_Vpblendvb_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vpblendvb instruction.<br/>
		/// <br/>
		/// <c>VPBLENDVB ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 4C /r /is4</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpblendvb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3) {
			Code op;
			op = Code.VEX_Vpblendvb_ymm_ymm_ymmm256_ymm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vpblendvb instruction.<br/>
		/// <br/>
		/// <c>VPBLENDVB ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 4C /r /is4</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpblendvb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3) {
			Code op;
			op = Code.VEX_Vpblendvb_ymm_ymm_ymmm256_ymm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vpblendw instruction.<br/>
		/// <br/>
		/// <c>VPBLENDW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 0E /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpblendw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vpblendw_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm));
		}
		/// <summary>vpblendw instruction.<br/>
		/// <br/>
		/// <c>VPBLENDW ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 0E /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpblendw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vpblendw_ymm_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm));
		}
		/// <summary>vpblendw instruction.<br/>
		/// <br/>
		/// <c>VPBLENDW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 0E /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpblendw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vpblendw_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vpblendw instruction.<br/>
		/// <br/>
		/// <c>VPBLENDW ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 0E /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpblendw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vpblendw_ymm_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vpblendw instruction.<br/>
		/// <br/>
		/// <c>VPBLENDW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 0E /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpblendw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.VEX_Vpblendw_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm));
		}
		/// <summary>vpblendw instruction.<br/>
		/// <br/>
		/// <c>VPBLENDW ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 0E /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpblendw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = Code.VEX_Vpblendw_ymm_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm));
		}
		/// <summary>vpblendw instruction.<br/>
		/// <br/>
		/// <c>VPBLENDW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 0E /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpblendw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.VEX_Vpblendw_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vpblendw instruction.<br/>
		/// <br/>
		/// <c>VPBLENDW ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 0E /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpblendw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.VEX_Vpblendw_ymm_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vpbroadcastb instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTB xmm1 {k1}{z}, r32</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpbroadcastb(AssemblerRegisterXMM dst, AssemblerRegister32 src) {
			Code op;
			op = Code.EVEX_Vpbroadcastb_xmm_k1z_r32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpbroadcastb instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTB ymm1 {k1}{z}, r32</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpbroadcastb(AssemblerRegisterYMM dst, AssemblerRegister32 src) {
			Code op;
			op = Code.EVEX_Vpbroadcastb_ymm_k1z_r32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpbroadcastb instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTB zmm1 {k1}{z}, r32</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpbroadcastb(AssemblerRegisterZMM dst, AssemblerRegister32 src) {
			Code op;
			op = Code.EVEX_Vpbroadcastb_zmm_k1z_r32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpbroadcastb instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTB xmm1, xmm2/m8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPBROADCASTB xmm1 {k1}{z}, xmm2/m8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpbroadcastb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpbroadcastb_xmm_xmmm8 : Code.EVEX_Vpbroadcastb_xmm_k1z_xmmm8;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpbroadcastb instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTB ymm1, xmm2/m8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPBROADCASTB ymm1 {k1}{z}, xmm2/m8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpbroadcastb(AssemblerRegisterYMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpbroadcastb_ymm_xmmm8 : Code.EVEX_Vpbroadcastb_ymm_k1z_xmmm8;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpbroadcastb instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTB zmm1 {k1}{z}, xmm2/m8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpbroadcastb(AssemblerRegisterZMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpbroadcastb_zmm_k1z_xmmm8;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpbroadcastb instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTB xmm1, xmm2/m8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPBROADCASTB xmm1 {k1}{z}, xmm2/m8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpbroadcastb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpbroadcastb_xmm_xmmm8 : Code.EVEX_Vpbroadcastb_xmm_k1z_xmmm8;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpbroadcastb instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTB ymm1, xmm2/m8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPBROADCASTB ymm1 {k1}{z}, xmm2/m8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpbroadcastb(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpbroadcastb_ymm_xmmm8 : Code.EVEX_Vpbroadcastb_ymm_k1z_xmmm8;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpbroadcastb instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTB zmm1 {k1}{z}, xmm2/m8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpbroadcastb(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpbroadcastb_zmm_k1z_xmmm8;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpbroadcastd instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTD xmm1 {k1}{z}, r32</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 7C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpbroadcastd(AssemblerRegisterXMM dst, AssemblerRegister32 src) {
			Code op;
			op = Code.EVEX_Vpbroadcastd_xmm_k1z_r32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpbroadcastd instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTD ymm1 {k1}{z}, r32</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 7C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpbroadcastd(AssemblerRegisterYMM dst, AssemblerRegister32 src) {
			Code op;
			op = Code.EVEX_Vpbroadcastd_ymm_k1z_r32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpbroadcastd instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTD zmm1 {k1}{z}, r32</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 7C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpbroadcastd(AssemblerRegisterZMM dst, AssemblerRegister32 src) {
			Code op;
			op = Code.EVEX_Vpbroadcastd_zmm_k1z_r32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpbroadcastd instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTD xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 58 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPBROADCASTD xmm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpbroadcastd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpbroadcastd_xmm_xmmm32 : Code.EVEX_Vpbroadcastd_xmm_k1z_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpbroadcastd instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTD ymm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 58 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPBROADCASTD ymm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpbroadcastd(AssemblerRegisterYMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpbroadcastd_ymm_xmmm32 : Code.EVEX_Vpbroadcastd_ymm_k1z_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpbroadcastd instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTD zmm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpbroadcastd(AssemblerRegisterZMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpbroadcastd_zmm_k1z_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpbroadcastd instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTD xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 58 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPBROADCASTD xmm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpbroadcastd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpbroadcastd_xmm_xmmm32 : Code.EVEX_Vpbroadcastd_xmm_k1z_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpbroadcastd instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTD ymm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 58 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPBROADCASTD ymm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpbroadcastd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpbroadcastd_ymm_xmmm32 : Code.EVEX_Vpbroadcastd_ymm_k1z_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpbroadcastd instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTD zmm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpbroadcastd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpbroadcastd_zmm_k1z_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpbroadcastmb2q instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTMB2Q xmm1, k1</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W1 2A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpbroadcastmb2q(AssemblerRegisterXMM dst, AssemblerRegisterK src) {
			Code op;
			op = Code.EVEX_Vpbroadcastmb2q_xmm_kr;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vpbroadcastmb2q instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTMB2Q ymm1, k1</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W1 2A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpbroadcastmb2q(AssemblerRegisterYMM dst, AssemblerRegisterK src) {
			Code op;
			op = Code.EVEX_Vpbroadcastmb2q_ymm_kr;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vpbroadcastmb2q instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTMB2Q zmm1, k1</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W1 2A /r</c><br/>
		/// <br/>
		/// <c>AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpbroadcastmb2q(AssemblerRegisterZMM dst, AssemblerRegisterK src) {
			Code op;
			op = Code.EVEX_Vpbroadcastmb2q_zmm_kr;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vpbroadcastmw2d instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTMW2D xmm1, k1</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 3A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpbroadcastmw2d(AssemblerRegisterXMM dst, AssemblerRegisterK src) {
			Code op;
			op = Code.EVEX_Vpbroadcastmw2d_xmm_kr;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vpbroadcastmw2d instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTMW2D ymm1, k1</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 3A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpbroadcastmw2d(AssemblerRegisterYMM dst, AssemblerRegisterK src) {
			Code op;
			op = Code.EVEX_Vpbroadcastmw2d_ymm_kr;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vpbroadcastmw2d instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTMW2D zmm1, k1</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 3A /r</c><br/>
		/// <br/>
		/// <c>AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpbroadcastmw2d(AssemblerRegisterZMM dst, AssemblerRegisterK src) {
			Code op;
			op = Code.EVEX_Vpbroadcastmw2d_zmm_kr;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vpbroadcastq instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTQ xmm1 {k1}{z}, r64</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 7C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vpbroadcastq(AssemblerRegisterXMM dst, AssemblerRegister64 src) {
			Code op;
			op = Code.EVEX_Vpbroadcastq_xmm_k1z_r64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpbroadcastq instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTQ ymm1 {k1}{z}, r64</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 7C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vpbroadcastq(AssemblerRegisterYMM dst, AssemblerRegister64 src) {
			Code op;
			op = Code.EVEX_Vpbroadcastq_ymm_k1z_r64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpbroadcastq instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTQ zmm1 {k1}{z}, r64</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 7C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vpbroadcastq(AssemblerRegisterZMM dst, AssemblerRegister64 src) {
			Code op;
			op = Code.EVEX_Vpbroadcastq_zmm_k1z_r64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpbroadcastq instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTQ xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 59 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPBROADCASTQ xmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpbroadcastq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpbroadcastq_xmm_xmmm64 : Code.EVEX_Vpbroadcastq_xmm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpbroadcastq instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTQ ymm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 59 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPBROADCASTQ ymm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpbroadcastq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpbroadcastq_ymm_xmmm64 : Code.EVEX_Vpbroadcastq_ymm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpbroadcastq instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTQ zmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpbroadcastq(AssemblerRegisterZMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpbroadcastq_zmm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpbroadcastq instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTQ xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 59 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPBROADCASTQ xmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpbroadcastq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpbroadcastq_xmm_xmmm64 : Code.EVEX_Vpbroadcastq_xmm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpbroadcastq instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTQ ymm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 59 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPBROADCASTQ ymm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpbroadcastq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpbroadcastq_ymm_xmmm64 : Code.EVEX_Vpbroadcastq_ymm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpbroadcastq instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTQ zmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpbroadcastq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpbroadcastq_zmm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpbroadcastw instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTW xmm1 {k1}{z}, r32</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpbroadcastw(AssemblerRegisterXMM dst, AssemblerRegister32 src) {
			Code op;
			op = Code.EVEX_Vpbroadcastw_xmm_k1z_r32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpbroadcastw instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTW ymm1 {k1}{z}, r32</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpbroadcastw(AssemblerRegisterYMM dst, AssemblerRegister32 src) {
			Code op;
			op = Code.EVEX_Vpbroadcastw_ymm_k1z_r32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpbroadcastw instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTW zmm1 {k1}{z}, r32</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpbroadcastw(AssemblerRegisterZMM dst, AssemblerRegister32 src) {
			Code op;
			op = Code.EVEX_Vpbroadcastw_zmm_k1z_r32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpbroadcastw instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTW xmm1, xmm2/m16</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPBROADCASTW xmm1 {k1}{z}, xmm2/m16</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpbroadcastw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpbroadcastw_xmm_xmmm16 : Code.EVEX_Vpbroadcastw_xmm_k1z_xmmm16;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpbroadcastw instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTW ymm1, xmm2/m16</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPBROADCASTW ymm1 {k1}{z}, xmm2/m16</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpbroadcastw(AssemblerRegisterYMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpbroadcastw_ymm_xmmm16 : Code.EVEX_Vpbroadcastw_ymm_k1z_xmmm16;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpbroadcastw instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTW zmm1 {k1}{z}, xmm2/m16</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpbroadcastw(AssemblerRegisterZMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpbroadcastw_zmm_k1z_xmmm16;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpbroadcastw instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTW xmm1, xmm2/m16</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPBROADCASTW xmm1 {k1}{z}, xmm2/m16</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpbroadcastw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpbroadcastw_xmm_xmmm16 : Code.EVEX_Vpbroadcastw_xmm_k1z_xmmm16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpbroadcastw instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTW ymm1, xmm2/m16</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPBROADCASTW ymm1 {k1}{z}, xmm2/m16</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpbroadcastw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpbroadcastw_ymm_xmmm16 : Code.EVEX_Vpbroadcastw_ymm_k1z_xmmm16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpbroadcastw instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTW zmm1 {k1}{z}, xmm2/m16</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpbroadcastw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpbroadcastw_zmm_k1z_xmmm16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpclmulhqhqdq instruction.</summary>
		public void vpclmulhqhqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpclmulqdq(dst, src1, src2, 17);
		}
		/// <summary>vpclmulhqhqdq instruction.</summary>
		public void vpclmulhqhqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vpclmulqdq(dst, src1, src2, 17);
		}
		/// <summary>vpclmulhqhqdq instruction.</summary>
		public void vpclmulhqhqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vpclmulqdq(dst, src1, src2, 17);
		}
		/// <summary>vpclmulhqhqdq instruction.</summary>
		public void vpclmulhqhqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpclmulqdq(dst, src1, src2, 17);
		}
		/// <summary>vpclmulhqhqdq instruction.</summary>
		public void vpclmulhqhqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vpclmulqdq(dst, src1, src2, 17);
		}
		/// <summary>vpclmulhqhqdq instruction.</summary>
		public void vpclmulhqhqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vpclmulqdq(dst, src1, src2, 17);
		}
		/// <summary>vpclmulhqlqdq instruction.</summary>
		public void vpclmulhqlqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpclmulqdq(dst, src1, src2, 1);
		}
		/// <summary>vpclmulhqlqdq instruction.</summary>
		public void vpclmulhqlqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vpclmulqdq(dst, src1, src2, 1);
		}
		/// <summary>vpclmulhqlqdq instruction.</summary>
		public void vpclmulhqlqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vpclmulqdq(dst, src1, src2, 1);
		}
		/// <summary>vpclmulhqlqdq instruction.</summary>
		public void vpclmulhqlqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpclmulqdq(dst, src1, src2, 1);
		}
		/// <summary>vpclmulhqlqdq instruction.</summary>
		public void vpclmulhqlqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vpclmulqdq(dst, src1, src2, 1);
		}
		/// <summary>vpclmulhqlqdq instruction.</summary>
		public void vpclmulhqlqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vpclmulqdq(dst, src1, src2, 1);
		}
		/// <summary>vpclmullqhqdq instruction.</summary>
		public void vpclmullqhqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpclmulqdq(dst, src1, src2, 16);
		}
		/// <summary>vpclmullqhqdq instruction.</summary>
		public void vpclmullqhqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vpclmulqdq(dst, src1, src2, 16);
		}
		/// <summary>vpclmullqhqdq instruction.</summary>
		public void vpclmullqhqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vpclmulqdq(dst, src1, src2, 16);
		}
		/// <summary>vpclmullqhqdq instruction.</summary>
		public void vpclmullqhqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpclmulqdq(dst, src1, src2, 16);
		}
		/// <summary>vpclmullqhqdq instruction.</summary>
		public void vpclmullqhqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vpclmulqdq(dst, src1, src2, 16);
		}
		/// <summary>vpclmullqhqdq instruction.</summary>
		public void vpclmullqhqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vpclmulqdq(dst, src1, src2, 16);
		}
		/// <summary>vpclmullqlqdq instruction.</summary>
		public void vpclmullqlqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpclmulqdq(dst, src1, src2, 0);
		}
		/// <summary>vpclmullqlqdq instruction.</summary>
		public void vpclmullqlqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			vpclmulqdq(dst, src1, src2, 0);
		}
		/// <summary>vpclmullqlqdq instruction.</summary>
		public void vpclmullqlqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			vpclmulqdq(dst, src1, src2, 0);
		}
		/// <summary>vpclmullqlqdq instruction.</summary>
		public void vpclmullqlqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpclmulqdq(dst, src1, src2, 0);
		}
		/// <summary>vpclmullqlqdq instruction.</summary>
		public void vpclmullqlqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			vpclmulqdq(dst, src1, src2, 0);
		}
		/// <summary>vpclmullqlqdq instruction.</summary>
		public void vpclmullqlqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			vpclmulqdq(dst, src1, src2, 0);
		}
		/// <summary>vpclmulqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>PCLMULQDQ and AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpclmulqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8 : Code.EVEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm));
		}
		/// <summary>vpclmulqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpclmulqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8 : Code.EVEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm));
		}
		/// <summary>vpclmulqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ zmm1, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpclmulqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm));
		}
		/// <summary>vpclmulqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>PCLMULQDQ and AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpclmulqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8 : Code.EVEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vpclmulqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpclmulqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8 : Code.EVEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vpclmulqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ zmm1, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpclmulqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vpclmulqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>PCLMULQDQ and AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpclmulqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8 : Code.EVEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm));
		}
		/// <summary>vpclmulqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpclmulqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8 : Code.EVEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm));
		}
		/// <summary>vpclmulqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ zmm1, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpclmulqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm));
		}
		/// <summary>vpclmulqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>PCLMULQDQ and AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpclmulqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8 : Code.EVEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vpclmulqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpclmulqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8 : Code.EVEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vpclmulqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ zmm1, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpclmulqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vpcmov instruction.<br/>
		/// <br/>
		/// <c>VPCMOV xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 A2 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmov(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.XOP_Vpcmov_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vpcmov instruction.<br/>
		/// <br/>
		/// <c>VPCMOV xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 A2 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmov(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.XOP_Vpcmov_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vpcmov instruction.<br/>
		/// <br/>
		/// <c>VPCMOV ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>XOP.256.X8.W0 A2 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmov(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3) {
			Code op;
			op = Code.XOP_Vpcmov_ymm_ymm_ymmm256_ymm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vpcmov instruction.<br/>
		/// <br/>
		/// <c>VPCMOV ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>XOP.256.X8.W0 A2 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmov(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3) {
			Code op;
			op = Code.XOP_Vpcmov_ymm_ymm_ymmm256_ymm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vpcmov instruction.<br/>
		/// <br/>
		/// <c>VPCMOV xmm1, xmm2, xmm3, xmm4/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W1 A2 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmov(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3) {
			Code op;
			op = Code.XOP_Vpcmov_xmm_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpcmov instruction.<br/>
		/// <br/>
		/// <c>VPCMOV ymm1, ymm2, ymm3, ymm4/m256</c><br/>
		/// <br/>
		/// <c>XOP.256.X8.W1 A2 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmov(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3) {
			Code op;
			op = Code.XOP_Vpcmov_ymm_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpcmpb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpcmpb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpcmpb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpcmpb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vpcmpb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vpcmpb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vpcmpb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpcmpb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpcmpb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpcmpb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vpcmpb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vpcmpb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vpcmpd instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpcmpd instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpcmpd instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpcmpd instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpcmpd instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpcmpd instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpcmpd instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpcmpd instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpcmpd instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpcmpd instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpcmpd instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpcmpd instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpcmpeqb instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQB k1 {k2}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 74 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpeqb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpcmpeqb_kr_k1_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpcmpeqb instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 74 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpeqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.VEX_Vpcmpeqb_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vpcmpeqb instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQB k1 {k2}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 74 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpeqb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpcmpeqb_kr_k1_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpcmpeqb instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 74 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpeqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.VEX_Vpcmpeqb_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vpcmpeqb instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQB k1 {k2}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 74 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpeqb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpcmpeqb_kr_k1_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpcmpeqb instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQB k1 {k2}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 74 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpeqb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpcmpeqb_kr_k1_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpcmpeqb instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 74 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpeqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vpcmpeqb_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpcmpeqb instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQB k1 {k2}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 74 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpeqb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpcmpeqb_kr_k1_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpcmpeqb instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 74 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpeqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vpcmpeqb_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpcmpeqb instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQB k1 {k2}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 74 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpeqb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpcmpeqb_kr_k1_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpcmpeqd instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQD k1 {k2}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 76 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpeqd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpcmpeqd_kr_k1_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpcmpeqd instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 76 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpeqd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.VEX_Vpcmpeqd_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vpcmpeqd instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQD k1 {k2}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 76 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpeqd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpcmpeqd_kr_k1_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpcmpeqd instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 76 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpeqd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.VEX_Vpcmpeqd_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vpcmpeqd instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQD k1 {k2}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 76 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpeqd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpcmpeqd_kr_k1_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpcmpeqd instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQD k1 {k2}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 76 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpeqd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpcmpeqd_kr_k1_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpcmpeqd instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 76 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpeqd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vpcmpeqd_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpcmpeqd instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQD k1 {k2}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 76 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpeqd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpcmpeqd_kr_k1_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpcmpeqd instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 76 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpeqd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vpcmpeqd_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpcmpeqd instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQD k1 {k2}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 76 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpeqd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpcmpeqd_kr_k1_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpcmpeqq instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQQ k1 {k2}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 29 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpeqq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpcmpeqq_kr_k1_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpcmpeqq instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 29 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpeqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.VEX_Vpcmpeqq_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vpcmpeqq instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQQ k1 {k2}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 29 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpeqq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpcmpeqq_kr_k1_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpcmpeqq instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 29 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpeqq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.VEX_Vpcmpeqq_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vpcmpeqq instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQQ k1 {k2}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 29 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpeqq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpcmpeqq_kr_k1_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpcmpeqq instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQQ k1 {k2}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 29 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpeqq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpcmpeqq_kr_k1_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpcmpeqq instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 29 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpeqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vpcmpeqq_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpcmpeqq instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQQ k1 {k2}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 29 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpeqq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpcmpeqq_kr_k1_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpcmpeqq instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 29 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpeqq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vpcmpeqq_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpcmpeqq instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQQ k1 {k2}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 29 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpeqq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpcmpeqq_kr_k1_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpcmpeqw instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQW k1 {k2}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 75 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpeqw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpcmpeqw_kr_k1_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpcmpeqw instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 75 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpeqw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.VEX_Vpcmpeqw_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vpcmpeqw instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQW k1 {k2}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 75 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpeqw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpcmpeqw_kr_k1_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpcmpeqw instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 75 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpeqw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.VEX_Vpcmpeqw_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vpcmpeqw instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQW k1 {k2}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 75 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpeqw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpcmpeqw_kr_k1_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpcmpeqw instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQW k1 {k2}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 75 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpeqw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpcmpeqw_kr_k1_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpcmpeqw instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 75 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpeqw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vpcmpeqw_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpcmpeqw instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQW k1 {k2}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 75 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpeqw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpcmpeqw_kr_k1_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpcmpeqw instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 75 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpeqw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vpcmpeqw_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpcmpeqw instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQW k1 {k2}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 75 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpeqw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpcmpeqw_kr_k1_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpcmpestri instruction.<br/>
		/// <br/>
		/// <c>VPCMPESTRI xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 61 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpestri(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.VEX_Vpcmpestri_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>vpcmpestri instruction.<br/>
		/// <br/>
		/// <c>VPCMPESTRI xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 61 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpestri(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.VEX_Vpcmpestri_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vpcmpestri instruction.<br/>
		/// <br/>
		/// <c>VPCMPESTRI xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 61 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpestri(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.VEX_Vpcmpestri_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>vpcmpestri instruction.<br/>
		/// <br/>
		/// <c>VPCMPESTRI xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 61 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpestri(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.VEX_Vpcmpestri_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vpcmpestri64 instruction.<br/>
		/// <br/>
		/// <c>VPCMPESTRI64 xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 61 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vpcmpestri64(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.VEX_Vpcmpestri64_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>vpcmpestri64 instruction.<br/>
		/// <br/>
		/// <c>VPCMPESTRI64 xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 61 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vpcmpestri64(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.VEX_Vpcmpestri64_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vpcmpestri64 instruction.<br/>
		/// <br/>
		/// <c>VPCMPESTRI64 xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 61 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vpcmpestri64(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.VEX_Vpcmpestri64_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>vpcmpestri64 instruction.<br/>
		/// <br/>
		/// <c>VPCMPESTRI64 xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 61 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vpcmpestri64(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.VEX_Vpcmpestri64_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vpcmpestrm instruction.<br/>
		/// <br/>
		/// <c>VPCMPESTRM xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 60 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpestrm(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.VEX_Vpcmpestrm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>vpcmpestrm instruction.<br/>
		/// <br/>
		/// <c>VPCMPESTRM xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 60 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpestrm(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.VEX_Vpcmpestrm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vpcmpestrm instruction.<br/>
		/// <br/>
		/// <c>VPCMPESTRM xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 60 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpestrm(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.VEX_Vpcmpestrm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>vpcmpestrm instruction.<br/>
		/// <br/>
		/// <c>VPCMPESTRM xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 60 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpestrm(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.VEX_Vpcmpestrm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vpcmpestrm64 instruction.<br/>
		/// <br/>
		/// <c>VPCMPESTRM64 xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 60 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vpcmpestrm64(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.VEX_Vpcmpestrm64_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>vpcmpestrm64 instruction.<br/>
		/// <br/>
		/// <c>VPCMPESTRM64 xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 60 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vpcmpestrm64(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.VEX_Vpcmpestrm64_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vpcmpestrm64 instruction.<br/>
		/// <br/>
		/// <c>VPCMPESTRM64 xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 60 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vpcmpestrm64(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.VEX_Vpcmpestrm64_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>vpcmpestrm64 instruction.<br/>
		/// <br/>
		/// <c>VPCMPESTRM64 xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 60 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vpcmpestrm64(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.VEX_Vpcmpestrm64_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vpcmpgtb instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTB k1 {k2}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 64 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpgtb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpcmpgtb_kr_k1_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpcmpgtb instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 64 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpgtb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.VEX_Vpcmpgtb_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vpcmpgtb instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTB k1 {k2}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 64 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpgtb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpcmpgtb_kr_k1_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpcmpgtb instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 64 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpgtb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.VEX_Vpcmpgtb_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vpcmpgtb instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTB k1 {k2}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 64 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpgtb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpcmpgtb_kr_k1_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpcmpgtb instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTB k1 {k2}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 64 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpgtb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpcmpgtb_kr_k1_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpcmpgtb instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 64 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpgtb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vpcmpgtb_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpcmpgtb instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTB k1 {k2}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 64 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpgtb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpcmpgtb_kr_k1_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpcmpgtb instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 64 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpgtb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vpcmpgtb_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpcmpgtb instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTB k1 {k2}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 64 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpgtb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpcmpgtb_kr_k1_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpcmpgtd instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTD k1 {k2}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 66 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpgtd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpcmpgtd_kr_k1_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpcmpgtd instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 66 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpgtd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.VEX_Vpcmpgtd_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vpcmpgtd instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTD k1 {k2}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 66 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpgtd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpcmpgtd_kr_k1_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpcmpgtd instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 66 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpgtd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.VEX_Vpcmpgtd_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vpcmpgtd instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTD k1 {k2}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 66 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpgtd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpcmpgtd_kr_k1_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpcmpgtd instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTD k1 {k2}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 66 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpgtd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpcmpgtd_kr_k1_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpcmpgtd instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 66 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpgtd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vpcmpgtd_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpcmpgtd instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTD k1 {k2}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 66 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpgtd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpcmpgtd_kr_k1_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpcmpgtd instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 66 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpgtd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vpcmpgtd_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpcmpgtd instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTD k1 {k2}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 66 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpgtd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpcmpgtd_kr_k1_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpcmpgtq instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTQ k1 {k2}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 37 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpgtq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpcmpgtq_kr_k1_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpcmpgtq instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 37 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpgtq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.VEX_Vpcmpgtq_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vpcmpgtq instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTQ k1 {k2}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 37 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpgtq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpcmpgtq_kr_k1_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpcmpgtq instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 37 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpgtq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.VEX_Vpcmpgtq_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vpcmpgtq instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTQ k1 {k2}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 37 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpgtq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpcmpgtq_kr_k1_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpcmpgtq instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTQ k1 {k2}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 37 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpgtq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpcmpgtq_kr_k1_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpcmpgtq instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 37 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpgtq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vpcmpgtq_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpcmpgtq instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTQ k1 {k2}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 37 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpgtq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpcmpgtq_kr_k1_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpcmpgtq instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 37 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpgtq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vpcmpgtq_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpcmpgtq instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTQ k1 {k2}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 37 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpgtq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpcmpgtq_kr_k1_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpcmpgtw instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTW k1 {k2}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 65 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpgtw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpcmpgtw_kr_k1_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpcmpgtw instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 65 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpgtw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.VEX_Vpcmpgtw_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vpcmpgtw instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTW k1 {k2}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 65 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpgtw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpcmpgtw_kr_k1_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpcmpgtw instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 65 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpgtw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.VEX_Vpcmpgtw_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vpcmpgtw instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTW k1 {k2}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 65 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpgtw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpcmpgtw_kr_k1_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpcmpgtw instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTW k1 {k2}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 65 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpgtw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpcmpgtw_kr_k1_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpcmpgtw instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 65 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpgtw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vpcmpgtw_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpcmpgtw instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTW k1 {k2}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 65 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpgtw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpcmpgtw_kr_k1_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpcmpgtw instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 65 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpgtw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vpcmpgtw_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpcmpgtw instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTW k1 {k2}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 65 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpgtw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpcmpgtw_kr_k1_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpcmpistri instruction.<br/>
		/// <br/>
		/// <c>VPCMPISTRI xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 63 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpistri(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.VEX_Vpcmpistri_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>vpcmpistri instruction.<br/>
		/// <br/>
		/// <c>VPCMPISTRI xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 63 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpistri(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.VEX_Vpcmpistri_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vpcmpistri instruction.<br/>
		/// <br/>
		/// <c>VPCMPISTRI xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 63 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpistri(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.VEX_Vpcmpistri_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>vpcmpistri instruction.<br/>
		/// <br/>
		/// <c>VPCMPISTRI xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 63 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpistri(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.VEX_Vpcmpistri_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vpcmpistrm instruction.<br/>
		/// <br/>
		/// <c>VPCMPISTRM xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 62 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpistrm(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.VEX_Vpcmpistrm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>vpcmpistrm instruction.<br/>
		/// <br/>
		/// <c>VPCMPISTRM xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 62 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpistrm(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.VEX_Vpcmpistrm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vpcmpistrm instruction.<br/>
		/// <br/>
		/// <c>VPCMPISTRM xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 62 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpistrm(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.VEX_Vpcmpistrm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>vpcmpistrm instruction.<br/>
		/// <br/>
		/// <c>VPCMPISTRM xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 62 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpistrm(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.VEX_Vpcmpistrm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vpcmpq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpcmpq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpcmpq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpcmpq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpcmpq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpcmpq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpcmpq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpcmpq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpcmpq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpcmpq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpcmpq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpcmpq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpcmpub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpcmpub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpcmpub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpcmpub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vpcmpub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vpcmpub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vpcmpub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpcmpub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpcmpub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpcmpub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vpcmpub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vpcmpub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vpcmpud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpcmpud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpcmpud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpcmpud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpcmpud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpcmpud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpcmpud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpcmpud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpcmpud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpcmpud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpcmpud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpcmpud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpcmpuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpcmpuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpcmpuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpcmpuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpcmpuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpcmpuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpcmpuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpcmpuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpcmpuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpcmpuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpcmpuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpcmpuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpcmpuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpcmpuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpcmpuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpcmpuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vpcmpuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vpcmpuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vpcmpuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpcmpuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpcmpuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpcmpuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vpcmpuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vpcmpuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vpcmpw instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpcmpw instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpcmpw instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpcmpw instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vpcmpw instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vpcmpw instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vpcmpw instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpcmpw instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpcmpw instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpcmpw instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vpcmpw instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vpcmpw instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcmpw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vpcomb instruction.<br/>
		/// <br/>
		/// <c>VPCOMB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcomb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.XOP_Vpcomb_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm));
		}
		/// <summary>vpcomb instruction.<br/>
		/// <br/>
		/// <c>VPCOMB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcomb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.XOP_Vpcomb_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vpcomb instruction.<br/>
		/// <br/>
		/// <c>VPCOMB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcomb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.XOP_Vpcomb_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm));
		}
		/// <summary>vpcomb instruction.<br/>
		/// <br/>
		/// <c>VPCOMB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcomb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.XOP_Vpcomb_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vpcomd instruction.<br/>
		/// <br/>
		/// <c>VPCOMD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcomd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.XOP_Vpcomd_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm));
		}
		/// <summary>vpcomd instruction.<br/>
		/// <br/>
		/// <c>VPCOMD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcomd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.XOP_Vpcomd_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vpcomd instruction.<br/>
		/// <br/>
		/// <c>VPCOMD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcomd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.XOP_Vpcomd_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm));
		}
		/// <summary>vpcomd instruction.<br/>
		/// <br/>
		/// <c>VPCOMD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcomd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.XOP_Vpcomd_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vpcomeqb instruction.</summary>
		public void vpcomeqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomb(dst, src1, src2, 4);
		}
		/// <summary>vpcomeqb instruction.</summary>
		public void vpcomeqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomb(dst, src1, src2, 4);
		}
		/// <summary>vpcomeqd instruction.</summary>
		public void vpcomeqd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomd(dst, src1, src2, 4);
		}
		/// <summary>vpcomeqd instruction.</summary>
		public void vpcomeqd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomd(dst, src1, src2, 4);
		}
		/// <summary>vpcomeqq instruction.</summary>
		public void vpcomeqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomq(dst, src1, src2, 4);
		}
		/// <summary>vpcomeqq instruction.</summary>
		public void vpcomeqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomq(dst, src1, src2, 4);
		}
		/// <summary>vpcomequb instruction.</summary>
		public void vpcomequb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomub(dst, src1, src2, 4);
		}
		/// <summary>vpcomequb instruction.</summary>
		public void vpcomequb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomub(dst, src1, src2, 4);
		}
		/// <summary>vpcomequd instruction.</summary>
		public void vpcomequd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomud(dst, src1, src2, 4);
		}
		/// <summary>vpcomequd instruction.</summary>
		public void vpcomequd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomud(dst, src1, src2, 4);
		}
		/// <summary>vpcomequq instruction.</summary>
		public void vpcomequq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomuq(dst, src1, src2, 4);
		}
		/// <summary>vpcomequq instruction.</summary>
		public void vpcomequq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomuq(dst, src1, src2, 4);
		}
		/// <summary>vpcomequw instruction.</summary>
		public void vpcomequw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomuw(dst, src1, src2, 4);
		}
		/// <summary>vpcomequw instruction.</summary>
		public void vpcomequw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomuw(dst, src1, src2, 4);
		}
		/// <summary>vpcomeqw instruction.</summary>
		public void vpcomeqw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomw(dst, src1, src2, 4);
		}
		/// <summary>vpcomeqw instruction.</summary>
		public void vpcomeqw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomw(dst, src1, src2, 4);
		}
		/// <summary>vpcomfalseb instruction.</summary>
		public void vpcomfalseb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomb(dst, src1, src2, 6);
		}
		/// <summary>vpcomfalseb instruction.</summary>
		public void vpcomfalseb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomb(dst, src1, src2, 6);
		}
		/// <summary>vpcomfalsed instruction.</summary>
		public void vpcomfalsed(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomd(dst, src1, src2, 6);
		}
		/// <summary>vpcomfalsed instruction.</summary>
		public void vpcomfalsed(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomd(dst, src1, src2, 6);
		}
		/// <summary>vpcomfalseq instruction.</summary>
		public void vpcomfalseq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomq(dst, src1, src2, 6);
		}
		/// <summary>vpcomfalseq instruction.</summary>
		public void vpcomfalseq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomq(dst, src1, src2, 6);
		}
		/// <summary>vpcomfalseub instruction.</summary>
		public void vpcomfalseub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomub(dst, src1, src2, 6);
		}
		/// <summary>vpcomfalseub instruction.</summary>
		public void vpcomfalseub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomub(dst, src1, src2, 6);
		}
		/// <summary>vpcomfalseud instruction.</summary>
		public void vpcomfalseud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomud(dst, src1, src2, 6);
		}
		/// <summary>vpcomfalseud instruction.</summary>
		public void vpcomfalseud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomud(dst, src1, src2, 6);
		}
		/// <summary>vpcomfalseuq instruction.</summary>
		public void vpcomfalseuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomuq(dst, src1, src2, 6);
		}
		/// <summary>vpcomfalseuq instruction.</summary>
		public void vpcomfalseuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomuq(dst, src1, src2, 6);
		}
		/// <summary>vpcomfalseuw instruction.</summary>
		public void vpcomfalseuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomuw(dst, src1, src2, 6);
		}
		/// <summary>vpcomfalseuw instruction.</summary>
		public void vpcomfalseuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomuw(dst, src1, src2, 6);
		}
		/// <summary>vpcomfalsew instruction.</summary>
		public void vpcomfalsew(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomw(dst, src1, src2, 6);
		}
		/// <summary>vpcomfalsew instruction.</summary>
		public void vpcomfalsew(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomw(dst, src1, src2, 6);
		}
		/// <summary>vpcomgeb instruction.</summary>
		public void vpcomgeb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomb(dst, src1, src2, 3);
		}
		/// <summary>vpcomgeb instruction.</summary>
		public void vpcomgeb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomb(dst, src1, src2, 3);
		}
		/// <summary>vpcomged instruction.</summary>
		public void vpcomged(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomd(dst, src1, src2, 3);
		}
		/// <summary>vpcomged instruction.</summary>
		public void vpcomged(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomd(dst, src1, src2, 3);
		}
		/// <summary>vpcomgeq instruction.</summary>
		public void vpcomgeq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomq(dst, src1, src2, 3);
		}
		/// <summary>vpcomgeq instruction.</summary>
		public void vpcomgeq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomq(dst, src1, src2, 3);
		}
		/// <summary>vpcomgeub instruction.</summary>
		public void vpcomgeub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomub(dst, src1, src2, 3);
		}
		/// <summary>vpcomgeub instruction.</summary>
		public void vpcomgeub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomub(dst, src1, src2, 3);
		}
		/// <summary>vpcomgeud instruction.</summary>
		public void vpcomgeud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomud(dst, src1, src2, 3);
		}
		/// <summary>vpcomgeud instruction.</summary>
		public void vpcomgeud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomud(dst, src1, src2, 3);
		}
		/// <summary>vpcomgeuq instruction.</summary>
		public void vpcomgeuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomuq(dst, src1, src2, 3);
		}
		/// <summary>vpcomgeuq instruction.</summary>
		public void vpcomgeuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomuq(dst, src1, src2, 3);
		}
		/// <summary>vpcomgeuw instruction.</summary>
		public void vpcomgeuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomuw(dst, src1, src2, 3);
		}
		/// <summary>vpcomgeuw instruction.</summary>
		public void vpcomgeuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomuw(dst, src1, src2, 3);
		}
		/// <summary>vpcomgew instruction.</summary>
		public void vpcomgew(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomw(dst, src1, src2, 3);
		}
		/// <summary>vpcomgew instruction.</summary>
		public void vpcomgew(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomw(dst, src1, src2, 3);
		}
		/// <summary>vpcomgtb instruction.</summary>
		public void vpcomgtb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomb(dst, src1, src2, 2);
		}
		/// <summary>vpcomgtb instruction.</summary>
		public void vpcomgtb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomb(dst, src1, src2, 2);
		}
		/// <summary>vpcomgtd instruction.</summary>
		public void vpcomgtd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomd(dst, src1, src2, 2);
		}
		/// <summary>vpcomgtd instruction.</summary>
		public void vpcomgtd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomd(dst, src1, src2, 2);
		}
		/// <summary>vpcomgtq instruction.</summary>
		public void vpcomgtq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomq(dst, src1, src2, 2);
		}
		/// <summary>vpcomgtq instruction.</summary>
		public void vpcomgtq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomq(dst, src1, src2, 2);
		}
		/// <summary>vpcomgtub instruction.</summary>
		public void vpcomgtub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomub(dst, src1, src2, 2);
		}
		/// <summary>vpcomgtub instruction.</summary>
		public void vpcomgtub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomub(dst, src1, src2, 2);
		}
		/// <summary>vpcomgtud instruction.</summary>
		public void vpcomgtud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomud(dst, src1, src2, 2);
		}
		/// <summary>vpcomgtud instruction.</summary>
		public void vpcomgtud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomud(dst, src1, src2, 2);
		}
		/// <summary>vpcomgtuq instruction.</summary>
		public void vpcomgtuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomuq(dst, src1, src2, 2);
		}
		/// <summary>vpcomgtuq instruction.</summary>
		public void vpcomgtuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomuq(dst, src1, src2, 2);
		}
		/// <summary>vpcomgtuw instruction.</summary>
		public void vpcomgtuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomuw(dst, src1, src2, 2);
		}
		/// <summary>vpcomgtuw instruction.</summary>
		public void vpcomgtuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomuw(dst, src1, src2, 2);
		}
		/// <summary>vpcomgtw instruction.</summary>
		public void vpcomgtw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomw(dst, src1, src2, 2);
		}
		/// <summary>vpcomgtw instruction.</summary>
		public void vpcomgtw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomw(dst, src1, src2, 2);
		}
		/// <summary>vpcomleb instruction.</summary>
		public void vpcomleb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomb(dst, src1, src2, 1);
		}
		/// <summary>vpcomleb instruction.</summary>
		public void vpcomleb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomb(dst, src1, src2, 1);
		}
		/// <summary>vpcomled instruction.</summary>
		public void vpcomled(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomd(dst, src1, src2, 1);
		}
		/// <summary>vpcomled instruction.</summary>
		public void vpcomled(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomd(dst, src1, src2, 1);
		}
		/// <summary>vpcomleq instruction.</summary>
		public void vpcomleq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomq(dst, src1, src2, 1);
		}
		/// <summary>vpcomleq instruction.</summary>
		public void vpcomleq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomq(dst, src1, src2, 1);
		}
		/// <summary>vpcomleub instruction.</summary>
		public void vpcomleub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomub(dst, src1, src2, 1);
		}
		/// <summary>vpcomleub instruction.</summary>
		public void vpcomleub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomub(dst, src1, src2, 1);
		}
		/// <summary>vpcomleud instruction.</summary>
		public void vpcomleud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomud(dst, src1, src2, 1);
		}
		/// <summary>vpcomleud instruction.</summary>
		public void vpcomleud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomud(dst, src1, src2, 1);
		}
		/// <summary>vpcomleuq instruction.</summary>
		public void vpcomleuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomuq(dst, src1, src2, 1);
		}
		/// <summary>vpcomleuq instruction.</summary>
		public void vpcomleuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomuq(dst, src1, src2, 1);
		}
		/// <summary>vpcomleuw instruction.</summary>
		public void vpcomleuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomuw(dst, src1, src2, 1);
		}
		/// <summary>vpcomleuw instruction.</summary>
		public void vpcomleuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomuw(dst, src1, src2, 1);
		}
		/// <summary>vpcomlew instruction.</summary>
		public void vpcomlew(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomw(dst, src1, src2, 1);
		}
		/// <summary>vpcomlew instruction.</summary>
		public void vpcomlew(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomw(dst, src1, src2, 1);
		}
		/// <summary>vpcomltb instruction.</summary>
		public void vpcomltb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomb(dst, src1, src2, 0);
		}
		/// <summary>vpcomltb instruction.</summary>
		public void vpcomltb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomb(dst, src1, src2, 0);
		}
		/// <summary>vpcomltd instruction.</summary>
		public void vpcomltd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomd(dst, src1, src2, 0);
		}
		/// <summary>vpcomltd instruction.</summary>
		public void vpcomltd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomd(dst, src1, src2, 0);
		}
		/// <summary>vpcomltq instruction.</summary>
		public void vpcomltq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomq(dst, src1, src2, 0);
		}
		/// <summary>vpcomltq instruction.</summary>
		public void vpcomltq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomq(dst, src1, src2, 0);
		}
		/// <summary>vpcomltub instruction.</summary>
		public void vpcomltub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomub(dst, src1, src2, 0);
		}
		/// <summary>vpcomltub instruction.</summary>
		public void vpcomltub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomub(dst, src1, src2, 0);
		}
		/// <summary>vpcomltud instruction.</summary>
		public void vpcomltud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomud(dst, src1, src2, 0);
		}
		/// <summary>vpcomltud instruction.</summary>
		public void vpcomltud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomud(dst, src1, src2, 0);
		}
		/// <summary>vpcomltuq instruction.</summary>
		public void vpcomltuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomuq(dst, src1, src2, 0);
		}
		/// <summary>vpcomltuq instruction.</summary>
		public void vpcomltuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomuq(dst, src1, src2, 0);
		}
		/// <summary>vpcomltuw instruction.</summary>
		public void vpcomltuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomuw(dst, src1, src2, 0);
		}
		/// <summary>vpcomltuw instruction.</summary>
		public void vpcomltuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomuw(dst, src1, src2, 0);
		}
		/// <summary>vpcomltw instruction.</summary>
		public void vpcomltw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomw(dst, src1, src2, 0);
		}
		/// <summary>vpcomltw instruction.</summary>
		public void vpcomltw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomw(dst, src1, src2, 0);
		}
		/// <summary>vpcomneqb instruction.</summary>
		public void vpcomneqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomb(dst, src1, src2, 5);
		}
		/// <summary>vpcomneqb instruction.</summary>
		public void vpcomneqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomb(dst, src1, src2, 5);
		}
		/// <summary>vpcomneqd instruction.</summary>
		public void vpcomneqd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomd(dst, src1, src2, 5);
		}
		/// <summary>vpcomneqd instruction.</summary>
		public void vpcomneqd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomd(dst, src1, src2, 5);
		}
		/// <summary>vpcomneqq instruction.</summary>
		public void vpcomneqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomq(dst, src1, src2, 5);
		}
		/// <summary>vpcomneqq instruction.</summary>
		public void vpcomneqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomq(dst, src1, src2, 5);
		}
		/// <summary>vpcomnequb instruction.</summary>
		public void vpcomnequb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomub(dst, src1, src2, 5);
		}
		/// <summary>vpcomnequb instruction.</summary>
		public void vpcomnequb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomub(dst, src1, src2, 5);
		}
		/// <summary>vpcomnequd instruction.</summary>
		public void vpcomnequd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomud(dst, src1, src2, 5);
		}
		/// <summary>vpcomnequd instruction.</summary>
		public void vpcomnequd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomud(dst, src1, src2, 5);
		}
		/// <summary>vpcomnequq instruction.</summary>
		public void vpcomnequq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomuq(dst, src1, src2, 5);
		}
		/// <summary>vpcomnequq instruction.</summary>
		public void vpcomnequq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomuq(dst, src1, src2, 5);
		}
		/// <summary>vpcomnequw instruction.</summary>
		public void vpcomnequw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomuw(dst, src1, src2, 5);
		}
		/// <summary>vpcomnequw instruction.</summary>
		public void vpcomnequw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomuw(dst, src1, src2, 5);
		}
		/// <summary>vpcomneqw instruction.</summary>
		public void vpcomneqw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomw(dst, src1, src2, 5);
		}
		/// <summary>vpcomneqw instruction.</summary>
		public void vpcomneqw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomw(dst, src1, src2, 5);
		}
		/// <summary>vpcompressb instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSB xmm1/m128 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 63 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcompressb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpcompressb_xmmm128_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpcompressb instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSB xmm1/m128 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 63 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcompressb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpcompressb_xmmm128_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpcompressb instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSB ymm1/m256 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 63 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcompressb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpcompressb_ymmm256_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpcompressb instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSB ymm1/m256 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 63 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcompressb(AssemblerMemoryOperand dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpcompressb_ymmm256_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpcompressb instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSB zmm1/m512 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 63 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcompressb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpcompressb_zmmm512_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpcompressb instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSB zmm1/m512 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 63 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcompressb(AssemblerMemoryOperand dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpcompressb_zmmm512_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpcompressd instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSD xmm1/m128 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 8B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcompressd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpcompressd_xmmm128_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpcompressd instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSD xmm1/m128 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 8B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcompressd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpcompressd_xmmm128_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpcompressd instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSD ymm1/m256 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 8B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcompressd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpcompressd_ymmm256_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpcompressd instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSD ymm1/m256 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 8B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcompressd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpcompressd_ymmm256_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpcompressd instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSD zmm1/m512 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 8B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcompressd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpcompressd_zmmm512_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpcompressd instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSD zmm1/m512 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 8B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcompressd(AssemblerMemoryOperand dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpcompressd_zmmm512_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpcompressq instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSQ xmm1/m128 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 8B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcompressq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpcompressq_xmmm128_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpcompressq instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSQ xmm1/m128 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 8B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcompressq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpcompressq_xmmm128_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpcompressq instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSQ ymm1/m256 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 8B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcompressq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpcompressq_ymmm256_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpcompressq instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSQ ymm1/m256 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 8B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcompressq(AssemblerMemoryOperand dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpcompressq_ymmm256_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpcompressq instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSQ zmm1/m512 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 8B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcompressq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpcompressq_zmmm512_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpcompressq instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSQ zmm1/m512 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 8B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcompressq(AssemblerMemoryOperand dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpcompressq_zmmm512_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpcompressw instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSW xmm1/m128 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 63 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcompressw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpcompressw_xmmm128_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpcompressw instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSW xmm1/m128 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 63 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcompressw(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpcompressw_xmmm128_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpcompressw instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSW ymm1/m256 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 63 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcompressw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpcompressw_ymmm256_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpcompressw instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSW ymm1/m256 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 63 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcompressw(AssemblerMemoryOperand dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpcompressw_ymmm256_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpcompressw instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSW zmm1/m512 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 63 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcompressw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpcompressw_zmmm512_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpcompressw instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSW zmm1/m512 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 63 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcompressw(AssemblerMemoryOperand dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpcompressw_zmmm512_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpcomq instruction.<br/>
		/// <br/>
		/// <c>VPCOMQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcomq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.XOP_Vpcomq_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm));
		}
		/// <summary>vpcomq instruction.<br/>
		/// <br/>
		/// <c>VPCOMQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcomq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.XOP_Vpcomq_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vpcomq instruction.<br/>
		/// <br/>
		/// <c>VPCOMQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcomq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.XOP_Vpcomq_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm));
		}
		/// <summary>vpcomq instruction.<br/>
		/// <br/>
		/// <c>VPCOMQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcomq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.XOP_Vpcomq_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vpcomtrueb instruction.</summary>
		public void vpcomtrueb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomb(dst, src1, src2, 7);
		}
		/// <summary>vpcomtrueb instruction.</summary>
		public void vpcomtrueb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomb(dst, src1, src2, 7);
		}
		/// <summary>vpcomtrued instruction.</summary>
		public void vpcomtrued(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomd(dst, src1, src2, 7);
		}
		/// <summary>vpcomtrued instruction.</summary>
		public void vpcomtrued(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomd(dst, src1, src2, 7);
		}
		/// <summary>vpcomtrueq instruction.</summary>
		public void vpcomtrueq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomq(dst, src1, src2, 7);
		}
		/// <summary>vpcomtrueq instruction.</summary>
		public void vpcomtrueq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomq(dst, src1, src2, 7);
		}
		/// <summary>vpcomtrueub instruction.</summary>
		public void vpcomtrueub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomub(dst, src1, src2, 7);
		}
		/// <summary>vpcomtrueub instruction.</summary>
		public void vpcomtrueub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomub(dst, src1, src2, 7);
		}
		/// <summary>vpcomtrueud instruction.</summary>
		public void vpcomtrueud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomud(dst, src1, src2, 7);
		}
		/// <summary>vpcomtrueud instruction.</summary>
		public void vpcomtrueud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomud(dst, src1, src2, 7);
		}
		/// <summary>vpcomtrueuq instruction.</summary>
		public void vpcomtrueuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomuq(dst, src1, src2, 7);
		}
		/// <summary>vpcomtrueuq instruction.</summary>
		public void vpcomtrueuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomuq(dst, src1, src2, 7);
		}
		/// <summary>vpcomtrueuw instruction.</summary>
		public void vpcomtrueuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomuw(dst, src1, src2, 7);
		}
		/// <summary>vpcomtrueuw instruction.</summary>
		public void vpcomtrueuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomuw(dst, src1, src2, 7);
		}
		/// <summary>vpcomtruew instruction.</summary>
		public void vpcomtruew(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			vpcomw(dst, src1, src2, 7);
		}
		/// <summary>vpcomtruew instruction.</summary>
		public void vpcomtruew(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			vpcomw(dst, src1, src2, 7);
		}
		/// <summary>vpcomub instruction.<br/>
		/// <br/>
		/// <c>VPCOMUB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcomub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.XOP_Vpcomub_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm));
		}
		/// <summary>vpcomub instruction.<br/>
		/// <br/>
		/// <c>VPCOMUB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcomub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.XOP_Vpcomub_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vpcomub instruction.<br/>
		/// <br/>
		/// <c>VPCOMUB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcomub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.XOP_Vpcomub_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm));
		}
		/// <summary>vpcomub instruction.<br/>
		/// <br/>
		/// <c>VPCOMUB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcomub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.XOP_Vpcomub_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vpcomud instruction.<br/>
		/// <br/>
		/// <c>VPCOMUD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcomud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.XOP_Vpcomud_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm));
		}
		/// <summary>vpcomud instruction.<br/>
		/// <br/>
		/// <c>VPCOMUD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcomud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.XOP_Vpcomud_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vpcomud instruction.<br/>
		/// <br/>
		/// <c>VPCOMUD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcomud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.XOP_Vpcomud_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm));
		}
		/// <summary>vpcomud instruction.<br/>
		/// <br/>
		/// <c>VPCOMUD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcomud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.XOP_Vpcomud_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vpcomuq instruction.<br/>
		/// <br/>
		/// <c>VPCOMUQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcomuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.XOP_Vpcomuq_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm));
		}
		/// <summary>vpcomuq instruction.<br/>
		/// <br/>
		/// <c>VPCOMUQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcomuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.XOP_Vpcomuq_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vpcomuq instruction.<br/>
		/// <br/>
		/// <c>VPCOMUQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcomuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.XOP_Vpcomuq_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm));
		}
		/// <summary>vpcomuq instruction.<br/>
		/// <br/>
		/// <c>VPCOMUQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcomuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.XOP_Vpcomuq_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vpcomuw instruction.<br/>
		/// <br/>
		/// <c>VPCOMUW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 ED /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcomuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.XOP_Vpcomuw_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm));
		}
		/// <summary>vpcomuw instruction.<br/>
		/// <br/>
		/// <c>VPCOMUW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 ED /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcomuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.XOP_Vpcomuw_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vpcomuw instruction.<br/>
		/// <br/>
		/// <c>VPCOMUW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 ED /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcomuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.XOP_Vpcomuw_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm));
		}
		/// <summary>vpcomuw instruction.<br/>
		/// <br/>
		/// <c>VPCOMUW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 ED /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcomuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.XOP_Vpcomuw_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vpcomw instruction.<br/>
		/// <br/>
		/// <c>VPCOMW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CD /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcomw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.XOP_Vpcomw_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm));
		}
		/// <summary>vpcomw instruction.<br/>
		/// <br/>
		/// <c>VPCOMW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CD /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcomw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.XOP_Vpcomw_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vpcomw instruction.<br/>
		/// <br/>
		/// <c>VPCOMW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CD /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcomw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.XOP_Vpcomw_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm));
		}
		/// <summary>vpcomw instruction.<br/>
		/// <br/>
		/// <c>VPCOMW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CD /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpcomw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.XOP_Vpcomw_xmm_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vpconflictd instruction.<br/>
		/// <br/>
		/// <c>VPCONFLICTD xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 C4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpconflictd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpconflictd_xmm_k1z_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpconflictd instruction.<br/>
		/// <br/>
		/// <c>VPCONFLICTD ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 C4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpconflictd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpconflictd_ymm_k1z_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpconflictd instruction.<br/>
		/// <br/>
		/// <c>VPCONFLICTD zmm1 {k1}{z}, zmm2/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 C4 /r</c><br/>
		/// <br/>
		/// <c>AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpconflictd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpconflictd_zmm_k1z_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpconflictd instruction.<br/>
		/// <br/>
		/// <c>VPCONFLICTD xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 C4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpconflictd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpconflictd_xmm_k1z_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vpconflictd instruction.<br/>
		/// <br/>
		/// <c>VPCONFLICTD ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 C4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpconflictd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpconflictd_ymm_k1z_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vpconflictd instruction.<br/>
		/// <br/>
		/// <c>VPCONFLICTD zmm1 {k1}{z}, zmm2/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 C4 /r</c><br/>
		/// <br/>
		/// <c>AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpconflictd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpconflictd_zmm_k1z_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vpconflictq instruction.<br/>
		/// <br/>
		/// <c>VPCONFLICTQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 C4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpconflictq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpconflictq_xmm_k1z_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpconflictq instruction.<br/>
		/// <br/>
		/// <c>VPCONFLICTQ ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 C4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpconflictq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpconflictq_ymm_k1z_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpconflictq instruction.<br/>
		/// <br/>
		/// <c>VPCONFLICTQ zmm1 {k1}{z}, zmm2/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 C4 /r</c><br/>
		/// <br/>
		/// <c>AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpconflictq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpconflictq_zmm_k1z_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpconflictq instruction.<br/>
		/// <br/>
		/// <c>VPCONFLICTQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 C4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpconflictq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpconflictq_xmm_k1z_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vpconflictq instruction.<br/>
		/// <br/>
		/// <c>VPCONFLICTQ ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 C4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpconflictq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpconflictq_ymm_k1z_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vpconflictq instruction.<br/>
		/// <br/>
		/// <c>VPCONFLICTQ zmm1 {k1}{z}, zmm2/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 C4 /r</c><br/>
		/// <br/>
		/// <c>AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpconflictq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpconflictq_zmm_k1z_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vpdpbusd instruction.<br/>
		/// <br/>
		/// <c>VPDPBUSD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 50 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpdpbusd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpdpbusd_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpdpbusd instruction.<br/>
		/// <br/>
		/// <c>VPDPBUSD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 50 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpdpbusd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpdpbusd_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpdpbusd instruction.<br/>
		/// <br/>
		/// <c>VPDPBUSD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 50 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpdpbusd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpdpbusd_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpdpbusd instruction.<br/>
		/// <br/>
		/// <c>VPDPBUSD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 50 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpdpbusd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpdpbusd_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpdpbusd instruction.<br/>
		/// <br/>
		/// <c>VPDPBUSD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 50 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpdpbusd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpdpbusd_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpdpbusd instruction.<br/>
		/// <br/>
		/// <c>VPDPBUSD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 50 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpdpbusd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpdpbusd_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpdpbusds instruction.<br/>
		/// <br/>
		/// <c>VPDPBUSDS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpdpbusds(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpdpbusds_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpdpbusds instruction.<br/>
		/// <br/>
		/// <c>VPDPBUSDS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpdpbusds(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpdpbusds_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpdpbusds instruction.<br/>
		/// <br/>
		/// <c>VPDPBUSDS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpdpbusds(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpdpbusds_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpdpbusds instruction.<br/>
		/// <br/>
		/// <c>VPDPBUSDS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpdpbusds(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpdpbusds_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpdpbusds instruction.<br/>
		/// <br/>
		/// <c>VPDPBUSDS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpdpbusds(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpdpbusds_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpdpbusds instruction.<br/>
		/// <br/>
		/// <c>VPDPBUSDS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpdpbusds(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpdpbusds_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpdpwssd instruction.<br/>
		/// <br/>
		/// <c>VPDPWSSD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 52 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpdpwssd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpdpwssd_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpdpwssd instruction.<br/>
		/// <br/>
		/// <c>VPDPWSSD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 52 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpdpwssd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpdpwssd_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpdpwssd instruction.<br/>
		/// <br/>
		/// <c>VPDPWSSD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 52 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpdpwssd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpdpwssd_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpdpwssd instruction.<br/>
		/// <br/>
		/// <c>VPDPWSSD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 52 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpdpwssd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpdpwssd_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpdpwssd instruction.<br/>
		/// <br/>
		/// <c>VPDPWSSD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 52 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpdpwssd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpdpwssd_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpdpwssd instruction.<br/>
		/// <br/>
		/// <c>VPDPWSSD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 52 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpdpwssd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpdpwssd_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpdpwssds instruction.<br/>
		/// <br/>
		/// <c>VPDPWSSDS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 53 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpdpwssds(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpdpwssds_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpdpwssds instruction.<br/>
		/// <br/>
		/// <c>VPDPWSSDS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 53 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpdpwssds(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpdpwssds_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpdpwssds instruction.<br/>
		/// <br/>
		/// <c>VPDPWSSDS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 53 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpdpwssds(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpdpwssds_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpdpwssds instruction.<br/>
		/// <br/>
		/// <c>VPDPWSSDS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 53 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpdpwssds(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpdpwssds_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpdpwssds instruction.<br/>
		/// <br/>
		/// <c>VPDPWSSDS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 53 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpdpwssds(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpdpwssds_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpdpwssds instruction.<br/>
		/// <br/>
		/// <c>VPDPWSSDS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 53 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpdpwssds(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpdpwssds_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vperm2f128 instruction.<br/>
		/// <br/>
		/// <c>VPERM2F128 ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 06 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vperm2f128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vperm2f128_ymm_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm));
		}
		/// <summary>vperm2f128 instruction.<br/>
		/// <br/>
		/// <c>VPERM2F128 ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 06 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vperm2f128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vperm2f128_ymm_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vperm2f128 instruction.<br/>
		/// <br/>
		/// <c>VPERM2F128 ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 06 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vperm2f128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = Code.VEX_Vperm2f128_ymm_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm));
		}
		/// <summary>vperm2f128 instruction.<br/>
		/// <br/>
		/// <c>VPERM2F128 ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 06 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vperm2f128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.VEX_Vperm2f128_ymm_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vperm2i128 instruction.<br/>
		/// <br/>
		/// <c>VPERM2I128 ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 46 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vperm2i128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vperm2i128_ymm_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm));
		}
		/// <summary>vperm2i128 instruction.<br/>
		/// <br/>
		/// <c>VPERM2I128 ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 46 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vperm2i128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vperm2i128_ymm_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vperm2i128 instruction.<br/>
		/// <br/>
		/// <c>VPERM2I128 ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 46 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vperm2i128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = Code.VEX_Vperm2i128_ymm_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm));
		}
		/// <summary>vperm2i128 instruction.<br/>
		/// <br/>
		/// <c>VPERM2I128 ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 46 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vperm2i128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.VEX_Vperm2i128_ymm_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vpermb instruction.<br/>
		/// <br/>
		/// <c>VPERMB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 8D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpermb_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermb instruction.<br/>
		/// <br/>
		/// <c>VPERMB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 8D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpermb_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermb instruction.<br/>
		/// <br/>
		/// <c>VPERMB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 8D /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpermb_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermb instruction.<br/>
		/// <br/>
		/// <c>VPERMB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 8D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermb_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpermb instruction.<br/>
		/// <br/>
		/// <c>VPERMB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 8D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermb_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpermb instruction.<br/>
		/// <br/>
		/// <c>VPERMB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 8D /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermb_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpermd instruction.<br/>
		/// <br/>
		/// <c>VPERMD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 36 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 36 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpermd_ymm_ymm_ymmm256 : Code.EVEX_Vpermd_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermd instruction.<br/>
		/// <br/>
		/// <c>VPERMD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 36 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpermd_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermd instruction.<br/>
		/// <br/>
		/// <c>VPERMD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 36 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 36 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpermd_ymm_k1z_ymm_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vpermd_ymm_ymm_ymmm256 : Code.EVEX_Vpermd_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpermd instruction.<br/>
		/// <br/>
		/// <c>VPERMD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 36 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermd_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpermi2b instruction.<br/>
		/// <br/>
		/// <c>VPERMI2B xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 75 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermi2b(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpermi2b_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermi2b instruction.<br/>
		/// <br/>
		/// <c>VPERMI2B ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 75 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermi2b(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpermi2b_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermi2b instruction.<br/>
		/// <br/>
		/// <c>VPERMI2B zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 75 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermi2b(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpermi2b_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermi2b instruction.<br/>
		/// <br/>
		/// <c>VPERMI2B xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 75 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermi2b(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermi2b_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpermi2b instruction.<br/>
		/// <br/>
		/// <c>VPERMI2B ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 75 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermi2b(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermi2b_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpermi2b instruction.<br/>
		/// <br/>
		/// <c>VPERMI2B zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 75 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermi2b(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermi2b_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpermi2d instruction.<br/>
		/// <br/>
		/// <c>VPERMI2D xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 76 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermi2d(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpermi2d_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermi2d instruction.<br/>
		/// <br/>
		/// <c>VPERMI2D ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 76 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermi2d(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpermi2d_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermi2d instruction.<br/>
		/// <br/>
		/// <c>VPERMI2D zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 76 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermi2d(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpermi2d_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermi2d instruction.<br/>
		/// <br/>
		/// <c>VPERMI2D xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 76 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermi2d(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermi2d_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpermi2d instruction.<br/>
		/// <br/>
		/// <c>VPERMI2D ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 76 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermi2d(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermi2d_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpermi2d instruction.<br/>
		/// <br/>
		/// <c>VPERMI2D zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 76 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermi2d(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermi2d_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpermi2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMI2PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 77 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermi2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpermi2pd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermi2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMI2PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 77 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermi2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpermi2pd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermi2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMI2PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 77 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermi2pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpermi2pd_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermi2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMI2PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 77 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermi2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermi2pd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpermi2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMI2PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 77 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermi2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermi2pd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpermi2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMI2PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 77 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermi2pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermi2pd_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpermi2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMI2PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 77 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermi2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpermi2ps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermi2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMI2PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 77 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermi2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpermi2ps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermi2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMI2PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 77 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermi2ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpermi2ps_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermi2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMI2PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 77 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermi2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermi2ps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpermi2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMI2PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 77 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermi2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermi2ps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpermi2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMI2PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 77 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermi2ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermi2ps_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpermi2q instruction.<br/>
		/// <br/>
		/// <c>VPERMI2Q xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 76 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermi2q(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpermi2q_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermi2q instruction.<br/>
		/// <br/>
		/// <c>VPERMI2Q ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 76 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermi2q(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpermi2q_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermi2q instruction.<br/>
		/// <br/>
		/// <c>VPERMI2Q zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 76 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermi2q(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpermi2q_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermi2q instruction.<br/>
		/// <br/>
		/// <c>VPERMI2Q xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 76 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermi2q(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermi2q_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpermi2q instruction.<br/>
		/// <br/>
		/// <c>VPERMI2Q ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 76 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermi2q(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermi2q_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpermi2q instruction.<br/>
		/// <br/>
		/// <c>VPERMI2Q zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 76 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermi2q(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermi2q_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpermi2w instruction.<br/>
		/// <br/>
		/// <c>VPERMI2W xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 75 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermi2w(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpermi2w_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermi2w instruction.<br/>
		/// <br/>
		/// <c>VPERMI2W ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 75 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermi2w(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpermi2w_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermi2w instruction.<br/>
		/// <br/>
		/// <c>VPERMI2W zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 75 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermi2w(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpermi2w_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermi2w instruction.<br/>
		/// <br/>
		/// <c>VPERMI2W xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 75 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermi2w(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermi2w_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpermi2w instruction.<br/>
		/// <br/>
		/// <c>VPERMI2W ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 75 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermi2w(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermi2w_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpermi2w instruction.<br/>
		/// <br/>
		/// <c>VPERMI2W zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 75 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermi2w(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermi2w_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpermil2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PD xmm1, xmm2, xmm3/m128, xmm4, imm2</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 49 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermil2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3, sbyte imm) {
			Code op;
			op = Code.VEX_Vpermil2pd_xmm_xmm_xmmm128_xmm_imm2;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3, imm));
		}
		/// <summary>vpermil2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PD xmm1, xmm2, xmm3/m128, xmm4, imm2</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 49 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermil2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3, sbyte imm) {
			Code op;
			op = Code.VEX_Vpermil2pd_xmm_xmm_xmmm128_xmm_imm2;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3, imm));
		}
		/// <summary>vpermil2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PD ymm1, ymm2, ymm3/m256, ymm4, imm2</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 49 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermil2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3, sbyte imm) {
			Code op;
			op = Code.VEX_Vpermil2pd_ymm_ymm_ymmm256_ymm_imm2;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3, imm));
		}
		/// <summary>vpermil2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PD ymm1, ymm2, ymm3/m256, ymm4, imm2</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 49 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermil2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3, sbyte imm) {
			Code op;
			op = Code.VEX_Vpermil2pd_ymm_ymm_ymmm256_ymm_imm2;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3, imm));
		}
		/// <summary>vpermil2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PD xmm1, xmm2, xmm3, xmm4/m128, imm2</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 49 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermil2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3, sbyte imm) {
			Code op;
			op = Code.VEX_Vpermil2pd_xmm_xmm_xmm_xmmm128_imm2;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vpermil2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PD ymm1, ymm2, ymm3, ymm4/m256, imm2</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 49 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermil2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3, sbyte imm) {
			Code op;
			op = Code.VEX_Vpermil2pd_ymm_ymm_ymm_ymmm256_imm2;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vpermil2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PD xmm1, xmm2, xmm3/m128, xmm4, imm2</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 49 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermil2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3, byte imm) {
			Code op;
			op = Code.VEX_Vpermil2pd_xmm_xmm_xmmm128_xmm_imm2;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3, (uint)imm));
		}
		/// <summary>vpermil2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PD xmm1, xmm2, xmm3/m128, xmm4, imm2</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 49 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermil2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3, byte imm) {
			Code op;
			op = Code.VEX_Vpermil2pd_xmm_xmm_xmmm128_xmm_imm2;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3, (uint)imm));
		}
		/// <summary>vpermil2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PD ymm1, ymm2, ymm3/m256, ymm4, imm2</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 49 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermil2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3, byte imm) {
			Code op;
			op = Code.VEX_Vpermil2pd_ymm_ymm_ymmm256_ymm_imm2;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3, (uint)imm));
		}
		/// <summary>vpermil2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PD ymm1, ymm2, ymm3/m256, ymm4, imm2</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 49 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermil2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3, byte imm) {
			Code op;
			op = Code.VEX_Vpermil2pd_ymm_ymm_ymmm256_ymm_imm2;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3, (uint)imm));
		}
		/// <summary>vpermil2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PD xmm1, xmm2, xmm3, xmm4/m128, imm2</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 49 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermil2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3, byte imm) {
			Code op;
			op = Code.VEX_Vpermil2pd_xmm_xmm_xmm_xmmm128_imm2;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vpermil2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PD ymm1, ymm2, ymm3, ymm4/m256, imm2</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 49 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermil2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3, byte imm) {
			Code op;
			op = Code.VEX_Vpermil2pd_ymm_ymm_ymm_ymmm256_imm2;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vpermil2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PS xmm1, xmm2, xmm3/m128, xmm4, imm2</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 48 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermil2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3, sbyte imm) {
			Code op;
			op = Code.VEX_Vpermil2ps_xmm_xmm_xmmm128_xmm_imm2;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3, imm));
		}
		/// <summary>vpermil2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PS xmm1, xmm2, xmm3/m128, xmm4, imm2</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 48 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermil2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3, sbyte imm) {
			Code op;
			op = Code.VEX_Vpermil2ps_xmm_xmm_xmmm128_xmm_imm2;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3, imm));
		}
		/// <summary>vpermil2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PS ymm1, ymm2, ymm3/m256, ymm4, imm2</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 48 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermil2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3, sbyte imm) {
			Code op;
			op = Code.VEX_Vpermil2ps_ymm_ymm_ymmm256_ymm_imm2;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3, imm));
		}
		/// <summary>vpermil2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PS ymm1, ymm2, ymm3/m256, ymm4, imm2</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 48 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermil2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3, sbyte imm) {
			Code op;
			op = Code.VEX_Vpermil2ps_ymm_ymm_ymmm256_ymm_imm2;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3, imm));
		}
		/// <summary>vpermil2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PS xmm1, xmm2, xmm3, xmm4/m128, imm2</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 48 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermil2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3, sbyte imm) {
			Code op;
			op = Code.VEX_Vpermil2ps_xmm_xmm_xmm_xmmm128_imm2;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vpermil2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PS ymm1, ymm2, ymm3, ymm4/m256, imm2</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 48 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermil2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3, sbyte imm) {
			Code op;
			op = Code.VEX_Vpermil2ps_ymm_ymm_ymm_ymmm256_imm2;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vpermil2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PS xmm1, xmm2, xmm3/m128, xmm4, imm2</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 48 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermil2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3, byte imm) {
			Code op;
			op = Code.VEX_Vpermil2ps_xmm_xmm_xmmm128_xmm_imm2;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3, (uint)imm));
		}
		/// <summary>vpermil2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PS xmm1, xmm2, xmm3/m128, xmm4, imm2</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 48 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermil2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3, byte imm) {
			Code op;
			op = Code.VEX_Vpermil2ps_xmm_xmm_xmmm128_xmm_imm2;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3, (uint)imm));
		}
		/// <summary>vpermil2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PS ymm1, ymm2, ymm3/m256, ymm4, imm2</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 48 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermil2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3, byte imm) {
			Code op;
			op = Code.VEX_Vpermil2ps_ymm_ymm_ymmm256_ymm_imm2;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3, (uint)imm));
		}
		/// <summary>vpermil2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PS ymm1, ymm2, ymm3/m256, ymm4, imm2</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 48 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermil2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3, byte imm) {
			Code op;
			op = Code.VEX_Vpermil2ps_ymm_ymm_ymmm256_ymm_imm2;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3, (uint)imm));
		}
		/// <summary>vpermil2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PS xmm1, xmm2, xmm3, xmm4/m128, imm2</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 48 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermil2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3, byte imm) {
			Code op;
			op = Code.VEX_Vpermil2ps_xmm_xmm_xmm_xmmm128_imm2;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vpermil2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PS ymm1, ymm2, ymm3, ymm4/m256, imm2</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 48 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermil2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3, byte imm) {
			Code op;
			op = Code.VEX_Vpermil2ps_ymm_ymm_ymm_ymmm256_imm2;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vpermilpd instruction.<br/>
		/// <br/>
		/// <c>VPERMILPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 0D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 0D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermilpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpermilpd_xmm_xmm_xmmm128 : Code.EVEX_Vpermilpd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermilpd instruction.<br/>
		/// <br/>
		/// <c>VPERMILPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 0D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 0D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermilpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpermilpd_ymm_ymm_ymmm256 : Code.EVEX_Vpermilpd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermilpd instruction.<br/>
		/// <br/>
		/// <c>VPERMILPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 0D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermilpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpermilpd_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermilpd instruction.<br/>
		/// <br/>
		/// <c>VPERMILPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 0D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 0D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermilpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpermilpd_xmm_k1z_xmm_xmmm128b64;
			} else op = PreferVex ? Code.VEX_Vpermilpd_xmm_xmm_xmmm128 : Code.EVEX_Vpermilpd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpermilpd instruction.<br/>
		/// <br/>
		/// <c>VPERMILPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 0D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 0D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermilpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpermilpd_ymm_k1z_ymm_ymmm256b64;
			} else op = PreferVex ? Code.VEX_Vpermilpd_ymm_ymm_ymmm256 : Code.EVEX_Vpermilpd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpermilpd instruction.<br/>
		/// <br/>
		/// <c>VPERMILPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 0D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermilpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermilpd_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpermilpd instruction.<br/>
		/// <br/>
		/// <c>VPERMILPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 05 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 05 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermilpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpermilpd_xmm_xmmm128_imm8 : Code.EVEX_Vpermilpd_xmm_k1z_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vpermilpd instruction.<br/>
		/// <br/>
		/// <c>VPERMILPD ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 05 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 05 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermilpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpermilpd_ymm_ymmm256_imm8 : Code.EVEX_Vpermilpd_ymm_k1z_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vpermilpd instruction.<br/>
		/// <br/>
		/// <c>VPERMILPD zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 05 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermilpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpermilpd_zmm_k1z_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vpermilpd instruction.<br/>
		/// <br/>
		/// <c>VPERMILPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 05 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 05 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermilpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			if (src1.IsBroadcast) {
				op = Code.EVEX_Vpermilpd_xmm_k1z_xmmm128b64_imm8;
			} else op = PreferVex ? Code.VEX_Vpermilpd_xmm_xmmm128_imm8 : Code.EVEX_Vpermilpd_xmm_k1z_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpermilpd instruction.<br/>
		/// <br/>
		/// <c>VPERMILPD ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 05 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 05 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermilpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			if (src1.IsBroadcast) {
				op = Code.EVEX_Vpermilpd_ymm_k1z_ymmm256b64_imm8;
			} else op = PreferVex ? Code.VEX_Vpermilpd_ymm_ymmm256_imm8 : Code.EVEX_Vpermilpd_ymm_k1z_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpermilpd instruction.<br/>
		/// <br/>
		/// <c>VPERMILPD zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 05 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermilpd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpermilpd_zmm_k1z_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpermilpd instruction.<br/>
		/// <br/>
		/// <c>VPERMILPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 05 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 05 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermilpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpermilpd_xmm_xmmm128_imm8 : Code.EVEX_Vpermilpd_xmm_k1z_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vpermilpd instruction.<br/>
		/// <br/>
		/// <c>VPERMILPD ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 05 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 05 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermilpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpermilpd_ymm_ymmm256_imm8 : Code.EVEX_Vpermilpd_ymm_k1z_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vpermilpd instruction.<br/>
		/// <br/>
		/// <c>VPERMILPD zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 05 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermilpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpermilpd_zmm_k1z_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vpermilpd instruction.<br/>
		/// <br/>
		/// <c>VPERMILPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 05 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 05 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermilpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			if (src1.IsBroadcast) {
				op = Code.EVEX_Vpermilpd_xmm_k1z_xmmm128b64_imm8;
			} else op = PreferVex ? Code.VEX_Vpermilpd_xmm_xmmm128_imm8 : Code.EVEX_Vpermilpd_xmm_k1z_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpermilpd instruction.<br/>
		/// <br/>
		/// <c>VPERMILPD ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 05 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 05 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermilpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			if (src1.IsBroadcast) {
				op = Code.EVEX_Vpermilpd_ymm_k1z_ymmm256b64_imm8;
			} else op = PreferVex ? Code.VEX_Vpermilpd_ymm_ymmm256_imm8 : Code.EVEX_Vpermilpd_ymm_k1z_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpermilpd instruction.<br/>
		/// <br/>
		/// <c>VPERMILPD zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 05 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermilpd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpermilpd_zmm_k1z_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpermilps instruction.<br/>
		/// <br/>
		/// <c>VPERMILPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 0C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 0C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermilps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpermilps_xmm_xmm_xmmm128 : Code.EVEX_Vpermilps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermilps instruction.<br/>
		/// <br/>
		/// <c>VPERMILPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 0C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 0C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermilps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpermilps_ymm_ymm_ymmm256 : Code.EVEX_Vpermilps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermilps instruction.<br/>
		/// <br/>
		/// <c>VPERMILPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 0C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermilps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpermilps_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermilps instruction.<br/>
		/// <br/>
		/// <c>VPERMILPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 0C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 0C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermilps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpermilps_xmm_k1z_xmm_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vpermilps_xmm_xmm_xmmm128 : Code.EVEX_Vpermilps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpermilps instruction.<br/>
		/// <br/>
		/// <c>VPERMILPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 0C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 0C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermilps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpermilps_ymm_k1z_ymm_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vpermilps_ymm_ymm_ymmm256 : Code.EVEX_Vpermilps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpermilps instruction.<br/>
		/// <br/>
		/// <c>VPERMILPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 0C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermilps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermilps_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpermilps instruction.<br/>
		/// <br/>
		/// <c>VPERMILPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 04 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 04 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermilps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpermilps_xmm_xmmm128_imm8 : Code.EVEX_Vpermilps_xmm_k1z_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vpermilps instruction.<br/>
		/// <br/>
		/// <c>VPERMILPS ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 04 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPS ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 04 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermilps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpermilps_ymm_ymmm256_imm8 : Code.EVEX_Vpermilps_ymm_k1z_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vpermilps instruction.<br/>
		/// <br/>
		/// <c>VPERMILPS zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 04 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermilps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpermilps_zmm_k1z_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vpermilps instruction.<br/>
		/// <br/>
		/// <c>VPERMILPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 04 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 04 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermilps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			if (src1.IsBroadcast) {
				op = Code.EVEX_Vpermilps_xmm_k1z_xmmm128b32_imm8;
			} else op = PreferVex ? Code.VEX_Vpermilps_xmm_xmmm128_imm8 : Code.EVEX_Vpermilps_xmm_k1z_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpermilps instruction.<br/>
		/// <br/>
		/// <c>VPERMILPS ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 04 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPS ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 04 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermilps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			if (src1.IsBroadcast) {
				op = Code.EVEX_Vpermilps_ymm_k1z_ymmm256b32_imm8;
			} else op = PreferVex ? Code.VEX_Vpermilps_ymm_ymmm256_imm8 : Code.EVEX_Vpermilps_ymm_k1z_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpermilps instruction.<br/>
		/// <br/>
		/// <c>VPERMILPS zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 04 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermilps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpermilps_zmm_k1z_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpermilps instruction.<br/>
		/// <br/>
		/// <c>VPERMILPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 04 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 04 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermilps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpermilps_xmm_xmmm128_imm8 : Code.EVEX_Vpermilps_xmm_k1z_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vpermilps instruction.<br/>
		/// <br/>
		/// <c>VPERMILPS ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 04 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPS ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 04 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermilps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpermilps_ymm_ymmm256_imm8 : Code.EVEX_Vpermilps_ymm_k1z_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vpermilps instruction.<br/>
		/// <br/>
		/// <c>VPERMILPS zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 04 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermilps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpermilps_zmm_k1z_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vpermilps instruction.<br/>
		/// <br/>
		/// <c>VPERMILPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 04 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 04 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermilps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			if (src1.IsBroadcast) {
				op = Code.EVEX_Vpermilps_xmm_k1z_xmmm128b32_imm8;
			} else op = PreferVex ? Code.VEX_Vpermilps_xmm_xmmm128_imm8 : Code.EVEX_Vpermilps_xmm_k1z_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpermilps instruction.<br/>
		/// <br/>
		/// <c>VPERMILPS ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 04 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPS ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 04 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermilps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			if (src1.IsBroadcast) {
				op = Code.EVEX_Vpermilps_ymm_k1z_ymmm256b32_imm8;
			} else op = PreferVex ? Code.VEX_Vpermilps_ymm_ymmm256_imm8 : Code.EVEX_Vpermilps_ymm_k1z_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpermilps instruction.<br/>
		/// <br/>
		/// <c>VPERMILPS zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 04 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermilps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpermilps_zmm_k1z_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpermpd instruction.<br/>
		/// <br/>
		/// <c>VPERMPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 16 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpermpd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermpd instruction.<br/>
		/// <br/>
		/// <c>VPERMPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 16 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpermpd_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermpd instruction.<br/>
		/// <br/>
		/// <c>VPERMPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 16 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermpd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpermpd instruction.<br/>
		/// <br/>
		/// <c>VPERMPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 16 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermpd_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpermpd instruction.<br/>
		/// <br/>
		/// <c>VPERMPD ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 01 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 01 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpermpd_ymm_ymmm256_imm8 : Code.EVEX_Vpermpd_ymm_k1z_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vpermpd instruction.<br/>
		/// <br/>
		/// <c>VPERMPD zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 01 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpermpd_zmm_k1z_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vpermpd instruction.<br/>
		/// <br/>
		/// <c>VPERMPD ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 01 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 01 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			if (src1.IsBroadcast) {
				op = Code.EVEX_Vpermpd_ymm_k1z_ymmm256b64_imm8;
			} else op = PreferVex ? Code.VEX_Vpermpd_ymm_ymmm256_imm8 : Code.EVEX_Vpermpd_ymm_k1z_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpermpd instruction.<br/>
		/// <br/>
		/// <c>VPERMPD zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 01 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermpd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpermpd_zmm_k1z_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpermpd instruction.<br/>
		/// <br/>
		/// <c>VPERMPD ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 01 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 01 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpermpd_ymm_ymmm256_imm8 : Code.EVEX_Vpermpd_ymm_k1z_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vpermpd instruction.<br/>
		/// <br/>
		/// <c>VPERMPD zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 01 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpermpd_zmm_k1z_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vpermpd instruction.<br/>
		/// <br/>
		/// <c>VPERMPD ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 01 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 01 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			if (src1.IsBroadcast) {
				op = Code.EVEX_Vpermpd_ymm_k1z_ymmm256b64_imm8;
			} else op = PreferVex ? Code.VEX_Vpermpd_ymm_ymmm256_imm8 : Code.EVEX_Vpermpd_ymm_k1z_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpermpd instruction.<br/>
		/// <br/>
		/// <c>VPERMPD zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 01 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermpd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpermpd_zmm_k1z_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpermps instruction.<br/>
		/// <br/>
		/// <c>VPERMPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 16 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 16 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpermps_ymm_ymm_ymmm256 : Code.EVEX_Vpermps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermps instruction.<br/>
		/// <br/>
		/// <c>VPERMPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 16 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpermps_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermps instruction.<br/>
		/// <br/>
		/// <c>VPERMPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 16 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 16 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpermps_ymm_k1z_ymm_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vpermps_ymm_ymm_ymmm256 : Code.EVEX_Vpermps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpermps instruction.<br/>
		/// <br/>
		/// <c>VPERMPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 16 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermps_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpermq instruction.<br/>
		/// <br/>
		/// <c>VPERMQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 36 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpermq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermq instruction.<br/>
		/// <br/>
		/// <c>VPERMQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 36 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpermq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermq instruction.<br/>
		/// <br/>
		/// <c>VPERMQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 36 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpermq instruction.<br/>
		/// <br/>
		/// <c>VPERMQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 36 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpermq instruction.<br/>
		/// <br/>
		/// <c>VPERMQ ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 00 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 00 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpermq_ymm_ymmm256_imm8 : Code.EVEX_Vpermq_ymm_k1z_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vpermq instruction.<br/>
		/// <br/>
		/// <c>VPERMQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 00 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpermq_zmm_k1z_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vpermq instruction.<br/>
		/// <br/>
		/// <c>VPERMQ ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 00 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 00 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			if (src1.IsBroadcast) {
				op = Code.EVEX_Vpermq_ymm_k1z_ymmm256b64_imm8;
			} else op = PreferVex ? Code.VEX_Vpermq_ymm_ymmm256_imm8 : Code.EVEX_Vpermq_ymm_k1z_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpermq instruction.<br/>
		/// <br/>
		/// <c>VPERMQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 00 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpermq_zmm_k1z_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpermq instruction.<br/>
		/// <br/>
		/// <c>VPERMQ ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 00 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 00 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpermq_ymm_ymmm256_imm8 : Code.EVEX_Vpermq_ymm_k1z_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vpermq instruction.<br/>
		/// <br/>
		/// <c>VPERMQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 00 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpermq_zmm_k1z_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vpermq instruction.<br/>
		/// <br/>
		/// <c>VPERMQ ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 00 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 00 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			if (src1.IsBroadcast) {
				op = Code.EVEX_Vpermq_ymm_k1z_ymmm256b64_imm8;
			} else op = PreferVex ? Code.VEX_Vpermq_ymm_ymmm256_imm8 : Code.EVEX_Vpermq_ymm_k1z_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpermq instruction.<br/>
		/// <br/>
		/// <c>VPERMQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 00 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpermq_zmm_k1z_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpermt2b instruction.<br/>
		/// <br/>
		/// <c>VPERMT2B xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermt2b(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpermt2b_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermt2b instruction.<br/>
		/// <br/>
		/// <c>VPERMT2B ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermt2b(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpermt2b_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermt2b instruction.<br/>
		/// <br/>
		/// <c>VPERMT2B zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermt2b(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpermt2b_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermt2b instruction.<br/>
		/// <br/>
		/// <c>VPERMT2B xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermt2b(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermt2b_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpermt2b instruction.<br/>
		/// <br/>
		/// <c>VPERMT2B ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermt2b(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermt2b_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpermt2b instruction.<br/>
		/// <br/>
		/// <c>VPERMT2B zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermt2b(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermt2b_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpermt2d instruction.<br/>
		/// <br/>
		/// <c>VPERMT2D xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 7E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermt2d(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpermt2d_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermt2d instruction.<br/>
		/// <br/>
		/// <c>VPERMT2D ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 7E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermt2d(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpermt2d_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermt2d instruction.<br/>
		/// <br/>
		/// <c>VPERMT2D zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 7E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermt2d(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpermt2d_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermt2d instruction.<br/>
		/// <br/>
		/// <c>VPERMT2D xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 7E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermt2d(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermt2d_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpermt2d instruction.<br/>
		/// <br/>
		/// <c>VPERMT2D ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 7E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermt2d(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermt2d_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpermt2d instruction.<br/>
		/// <br/>
		/// <c>VPERMT2D zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 7E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermt2d(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermt2d_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpermt2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMT2PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermt2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpermt2pd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermt2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMT2PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermt2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpermt2pd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermt2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMT2PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermt2pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpermt2pd_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermt2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMT2PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermt2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermt2pd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpermt2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMT2PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermt2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermt2pd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpermt2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMT2PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermt2pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermt2pd_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpermt2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMT2PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermt2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpermt2ps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermt2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMT2PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermt2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpermt2ps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermt2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMT2PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermt2ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpermt2ps_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermt2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMT2PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermt2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermt2ps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpermt2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMT2PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermt2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermt2ps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpermt2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMT2PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermt2ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermt2ps_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpermt2q instruction.<br/>
		/// <br/>
		/// <c>VPERMT2Q xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 7E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermt2q(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpermt2q_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermt2q instruction.<br/>
		/// <br/>
		/// <c>VPERMT2Q ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 7E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermt2q(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpermt2q_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermt2q instruction.<br/>
		/// <br/>
		/// <c>VPERMT2Q zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 7E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermt2q(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpermt2q_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermt2q instruction.<br/>
		/// <br/>
		/// <c>VPERMT2Q xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 7E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermt2q(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermt2q_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpermt2q instruction.<br/>
		/// <br/>
		/// <c>VPERMT2Q ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 7E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermt2q(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermt2q_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpermt2q instruction.<br/>
		/// <br/>
		/// <c>VPERMT2Q zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 7E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermt2q(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermt2q_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpermt2w instruction.<br/>
		/// <br/>
		/// <c>VPERMT2W xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermt2w(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpermt2w_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermt2w instruction.<br/>
		/// <br/>
		/// <c>VPERMT2W ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermt2w(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpermt2w_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermt2w instruction.<br/>
		/// <br/>
		/// <c>VPERMT2W zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermt2w(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpermt2w_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermt2w instruction.<br/>
		/// <br/>
		/// <c>VPERMT2W xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermt2w(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermt2w_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpermt2w instruction.<br/>
		/// <br/>
		/// <c>VPERMT2W ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermt2w(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermt2w_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpermt2w instruction.<br/>
		/// <br/>
		/// <c>VPERMT2W zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermt2w(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermt2w_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpermw instruction.<br/>
		/// <br/>
		/// <c>VPERMW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 8D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpermw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermw instruction.<br/>
		/// <br/>
		/// <c>VPERMW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 8D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpermw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermw instruction.<br/>
		/// <br/>
		/// <c>VPERMW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 8D /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpermw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpermw instruction.<br/>
		/// <br/>
		/// <c>VPERMW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 8D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpermw instruction.<br/>
		/// <br/>
		/// <c>VPERMW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 8D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpermw instruction.<br/>
		/// <br/>
		/// <c>VPERMW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 8D /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpermw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpermw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpexpandb instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDB xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 62 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpexpandb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpexpandb_xmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpexpandb instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDB ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 62 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpexpandb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpexpandb_ymm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpexpandb instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDB zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 62 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpexpandb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpexpandb_zmm_k1z_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpexpandb instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDB xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 62 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpexpandb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpexpandb_xmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpexpandb instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDB ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 62 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpexpandb(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpexpandb_ymm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpexpandb instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDB zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 62 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpexpandb(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpexpandb_zmm_k1z_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpexpandd instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDD xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 89 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpexpandd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpexpandd_xmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpexpandd instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDD ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 89 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpexpandd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpexpandd_ymm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpexpandd instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDD zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 89 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpexpandd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpexpandd_zmm_k1z_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpexpandd instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDD xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 89 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpexpandd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpexpandd_xmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpexpandd instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDD ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 89 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpexpandd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpexpandd_ymm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpexpandd instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDD zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 89 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpexpandd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpexpandd_zmm_k1z_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpexpandq instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDQ xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 89 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpexpandq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpexpandq_xmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpexpandq instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDQ ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 89 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpexpandq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpexpandq_ymm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpexpandq instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDQ zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 89 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpexpandq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpexpandq_zmm_k1z_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpexpandq instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDQ xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 89 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpexpandq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpexpandq_xmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpexpandq instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDQ ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 89 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpexpandq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpexpandq_ymm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpexpandq instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDQ zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 89 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpexpandq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpexpandq_zmm_k1z_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpexpandw instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDW xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 62 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpexpandw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpexpandw_xmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpexpandw instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDW ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 62 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpexpandw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpexpandw_ymm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpexpandw instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDW zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 62 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpexpandw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpexpandw_zmm_k1z_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpexpandw instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDW xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 62 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpexpandw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpexpandw_xmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpexpandw instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDW ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 62 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpexpandw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpexpandw_ymm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpexpandw instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDW zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 62 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpexpandw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpexpandw_zmm_k1z_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpextrb instruction.<br/>
		/// <br/>
		/// <c>VPEXTRB r32/m8, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 14 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPEXTRB r32/m8, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 14 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpextrb(AssemblerRegister32 dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpextrb_r32m8_xmm_imm8 : Code.EVEX_Vpextrb_r32m8_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>vpextrb instruction.<br/>
		/// <br/>
		/// <c>VPEXTRB r64/m8, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 14 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VPEXTRB r64/m8, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 14 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vpextrb(AssemblerRegister64 dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpextrb_r64m8_xmm_imm8 : Code.EVEX_Vpextrb_r64m8_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>vpextrb instruction.<br/>
		/// <br/>
		/// <c>VPEXTRB r32/m8, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 14 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPEXTRB r32/m8, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 14 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpextrb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpextrb_r32m8_xmm_imm8 : Code.EVEX_Vpextrb_r32m8_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, imm));
		}
		/// <summary>vpextrb instruction.<br/>
		/// <br/>
		/// <c>VPEXTRB r32/m8, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 14 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPEXTRB r32/m8, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 14 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpextrb(AssemblerRegister32 dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpextrb_r32m8_xmm_imm8 : Code.EVEX_Vpextrb_r32m8_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>vpextrb instruction.<br/>
		/// <br/>
		/// <c>VPEXTRB r64/m8, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 14 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VPEXTRB r64/m8, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 14 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vpextrb(AssemblerRegister64 dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpextrb_r64m8_xmm_imm8 : Code.EVEX_Vpextrb_r64m8_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>vpextrb instruction.<br/>
		/// <br/>
		/// <c>VPEXTRB r32/m8, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 14 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPEXTRB r32/m8, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 14 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpextrb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpextrb_r32m8_xmm_imm8 : Code.EVEX_Vpextrb_r32m8_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, (uint)imm));
		}
		/// <summary>vpextrd instruction.<br/>
		/// <br/>
		/// <c>VPEXTRD r/m32, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 16 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPEXTRD r/m32, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 16 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpextrd(AssemblerRegister32 dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpextrd_rm32_xmm_imm8 : Code.EVEX_Vpextrd_rm32_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>vpextrd instruction.<br/>
		/// <br/>
		/// <c>VPEXTRD r/m32, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 16 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPEXTRD r/m32, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 16 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpextrd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpextrd_rm32_xmm_imm8 : Code.EVEX_Vpextrd_rm32_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, imm));
		}
		/// <summary>vpextrd instruction.<br/>
		/// <br/>
		/// <c>VPEXTRD r/m32, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 16 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPEXTRD r/m32, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 16 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpextrd(AssemblerRegister32 dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpextrd_rm32_xmm_imm8 : Code.EVEX_Vpextrd_rm32_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>vpextrd instruction.<br/>
		/// <br/>
		/// <c>VPEXTRD r/m32, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 16 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPEXTRD r/m32, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 16 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpextrd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpextrd_rm32_xmm_imm8 : Code.EVEX_Vpextrd_rm32_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, (uint)imm));
		}
		/// <summary>vpextrq instruction.<br/>
		/// <br/>
		/// <c>VPEXTRQ r/m64, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 16 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VPEXTRQ r/m64, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 16 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vpextrq(AssemblerRegister64 dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpextrq_rm64_xmm_imm8 : Code.EVEX_Vpextrq_rm64_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>vpextrq instruction.<br/>
		/// <br/>
		/// <c>VPEXTRQ r/m64, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 16 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VPEXTRQ r/m64, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 16 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vpextrq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpextrq_rm64_xmm_imm8 : Code.EVEX_Vpextrq_rm64_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, imm));
		}
		/// <summary>vpextrq instruction.<br/>
		/// <br/>
		/// <c>VPEXTRQ r/m64, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 16 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VPEXTRQ r/m64, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 16 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vpextrq(AssemblerRegister64 dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpextrq_rm64_xmm_imm8 : Code.EVEX_Vpextrq_rm64_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>vpextrq instruction.<br/>
		/// <br/>
		/// <c>VPEXTRQ r/m64, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 16 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VPEXTRQ r/m64, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 16 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vpextrq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpextrq_rm64_xmm_imm8 : Code.EVEX_Vpextrq_rm64_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, (uint)imm));
		}
		/// <summary>vpextrw instruction.<br/>
		/// <br/>
		/// <c>VPEXTRW r32, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.W0 C5 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPEXTRW r32, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 C5 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpextrw(AssemblerRegister32 dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpextrw_r32_xmm_imm8 : Code.EVEX_Vpextrw_r32_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>vpextrw instruction.<br/>
		/// <br/>
		/// <c>VPEXTRW r64, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.W1 C5 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VPEXTRW r64, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C5 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vpextrw(AssemblerRegister64 dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpextrw_r64_xmm_imm8 : Code.EVEX_Vpextrw_r64_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>vpextrw instruction.<br/>
		/// <br/>
		/// <c>VPEXTRW r32/m16, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 15 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPEXTRW r32/m16, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 15 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpextrw(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpextrw_r32m16_xmm_imm8 : Code.EVEX_Vpextrw_r32m16_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, imm));
		}
		/// <summary>vpextrw instruction.<br/>
		/// <br/>
		/// <c>VPEXTRW r32, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.W0 C5 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPEXTRW r32, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 C5 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpextrw(AssemblerRegister32 dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpextrw_r32_xmm_imm8 : Code.EVEX_Vpextrw_r32_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>vpextrw instruction.<br/>
		/// <br/>
		/// <c>VPEXTRW r64, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.W1 C5 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VPEXTRW r64, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C5 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vpextrw(AssemblerRegister64 dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpextrw_r64_xmm_imm8 : Code.EVEX_Vpextrw_r64_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>vpextrw instruction.<br/>
		/// <br/>
		/// <c>VPEXTRW r32/m16, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 15 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPEXTRW r32/m16, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 15 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpextrw(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpextrw_r32m16_xmm_imm8 : Code.EVEX_Vpextrw_r32m16_xmm_imm8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, (uint)imm));
		}
		/// <summary>vpgatherdd instruction.<br/>
		/// <br/>
		/// <c>VPGATHERDD xmm1 {k1}, vm32x</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 90 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpgatherdd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpgatherdd_xmm_k1_vm32x;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpgatherdd instruction.<br/>
		/// <br/>
		/// <c>VPGATHERDD ymm1 {k1}, vm32y</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 90 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpgatherdd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpgatherdd_ymm_k1_vm32y;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpgatherdd instruction.<br/>
		/// <br/>
		/// <c>VPGATHERDD zmm1 {k1}, vm32z</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 90 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpgatherdd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpgatherdd_zmm_k1_vm32z;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpgatherdd instruction.<br/>
		/// <br/>
		/// <c>VPGATHERDD xmm1, vm32x, xmm2</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 90 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpgatherdd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.VEX_Vpgatherdd_xmm_vm32x_xmm;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), src2));
		}
		/// <summary>vpgatherdd instruction.<br/>
		/// <br/>
		/// <c>VPGATHERDD ymm1, vm32y, ymm2</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 90 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpgatherdd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.VEX_Vpgatherdd_ymm_vm32y_ymm;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), src2));
		}
		/// <summary>vpgatherdq instruction.<br/>
		/// <br/>
		/// <c>VPGATHERDQ xmm1 {k1}, vm32x</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 90 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpgatherdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpgatherdq_xmm_k1_vm32x;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpgatherdq instruction.<br/>
		/// <br/>
		/// <c>VPGATHERDQ ymm1 {k1}, vm32x</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 90 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpgatherdq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpgatherdq_ymm_k1_vm32x;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpgatherdq instruction.<br/>
		/// <br/>
		/// <c>VPGATHERDQ zmm1 {k1}, vm32y</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 90 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpgatherdq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpgatherdq_zmm_k1_vm32y;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpgatherdq instruction.<br/>
		/// <br/>
		/// <c>VPGATHERDQ xmm1, vm32x, xmm2</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 90 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpgatherdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.VEX_Vpgatherdq_xmm_vm32x_xmm;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), src2));
		}
		/// <summary>vpgatherdq instruction.<br/>
		/// <br/>
		/// <c>VPGATHERDQ ymm1, vm32x, ymm2</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 90 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpgatherdq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.VEX_Vpgatherdq_ymm_vm32x_ymm;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), src2));
		}
		/// <summary>vpgatherqd instruction.<br/>
		/// <br/>
		/// <c>VPGATHERQD xmm1 {k1}, vm64x</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 91 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPGATHERQD xmm1 {k1}, vm64y</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 91 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpgatherqd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			if (src.Index.IsXMM()) {
				op = Code.EVEX_Vpgatherqd_xmm_k1_vm64x;
			} else if (src.Index.IsYMM()) {
				op = Code.EVEX_Vpgatherqd_xmm_k1_vm64y;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Vpgatherqd, dst, src);
			}
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpgatherqd instruction.<br/>
		/// <br/>
		/// <c>VPGATHERQD ymm1 {k1}, vm64z</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 91 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpgatherqd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpgatherqd_ymm_k1_vm64z;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpgatherqd instruction.<br/>
		/// <br/>
		/// <c>VPGATHERQD xmm1, vm64x, xmm2</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 91 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPGATHERQD xmm1, vm64y, xmm2</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 91 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpgatherqd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2) {
			Code op;
			if (src1.Index.IsXMM()) {
				op = Code.VEX_Vpgatherqd_xmm_vm64x_xmm;
			} else if (src1.Index.IsYMM()) {
				op = Code.VEX_Vpgatherqd_xmm_vm64y_xmm;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Vpgatherqd, dst, src1, src2);
			}
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), src2));
		}
		/// <summary>vpgatherqq instruction.<br/>
		/// <br/>
		/// <c>VPGATHERQQ xmm1 {k1}, vm64x</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 91 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpgatherqq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpgatherqq_xmm_k1_vm64x;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpgatherqq instruction.<br/>
		/// <br/>
		/// <c>VPGATHERQQ ymm1 {k1}, vm64y</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 91 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpgatherqq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpgatherqq_ymm_k1_vm64y;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpgatherqq instruction.<br/>
		/// <br/>
		/// <c>VPGATHERQQ zmm1 {k1}, vm64z</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 91 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpgatherqq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpgatherqq_zmm_k1_vm64z;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpgatherqq instruction.<br/>
		/// <br/>
		/// <c>VPGATHERQQ xmm1, vm64x, xmm2</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 91 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpgatherqq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.VEX_Vpgatherqq_xmm_vm64x_xmm;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), src2));
		}
		/// <summary>vpgatherqq instruction.<br/>
		/// <br/>
		/// <c>VPGATHERQQ ymm1, vm64y, ymm2</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 91 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpgatherqq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.VEX_Vpgatherqq_ymm_vm64y_ymm;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), src2));
		}
		/// <summary>vphaddbd instruction.<br/>
		/// <br/>
		/// <c>VPHADDBD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 C2 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphaddbd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.XOP_Vphaddbd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vphaddbd instruction.<br/>
		/// <br/>
		/// <c>VPHADDBD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 C2 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphaddbd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.XOP_Vphaddbd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vphaddbq instruction.<br/>
		/// <br/>
		/// <c>VPHADDBQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 C3 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphaddbq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.XOP_Vphaddbq_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vphaddbq instruction.<br/>
		/// <br/>
		/// <c>VPHADDBQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 C3 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphaddbq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.XOP_Vphaddbq_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vphaddbw instruction.<br/>
		/// <br/>
		/// <c>VPHADDBW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 C1 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphaddbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.XOP_Vphaddbw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vphaddbw instruction.<br/>
		/// <br/>
		/// <c>VPHADDBW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 C1 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphaddbw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.XOP_Vphaddbw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vphaddd instruction.<br/>
		/// <br/>
		/// <c>VPHADDD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 02 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphaddd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.VEX_Vphaddd_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vphaddd instruction.<br/>
		/// <br/>
		/// <c>VPHADDD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 02 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphaddd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.VEX_Vphaddd_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vphaddd instruction.<br/>
		/// <br/>
		/// <c>VPHADDD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 02 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphaddd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vphaddd_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vphaddd instruction.<br/>
		/// <br/>
		/// <c>VPHADDD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 02 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphaddd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vphaddd_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vphadddq instruction.<br/>
		/// <br/>
		/// <c>VPHADDDQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 CB /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphadddq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.XOP_Vphadddq_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vphadddq instruction.<br/>
		/// <br/>
		/// <c>VPHADDDQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 CB /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphadddq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.XOP_Vphadddq_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vphaddsw instruction.<br/>
		/// <br/>
		/// <c>VPHADDSW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 03 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphaddsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.VEX_Vphaddsw_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vphaddsw instruction.<br/>
		/// <br/>
		/// <c>VPHADDSW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 03 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphaddsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.VEX_Vphaddsw_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vphaddsw instruction.<br/>
		/// <br/>
		/// <c>VPHADDSW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 03 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphaddsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vphaddsw_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vphaddsw instruction.<br/>
		/// <br/>
		/// <c>VPHADDSW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 03 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphaddsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vphaddsw_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vphaddubd instruction.<br/>
		/// <br/>
		/// <c>VPHADDUBD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 D2 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphaddubd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.XOP_Vphaddubd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vphaddubd instruction.<br/>
		/// <br/>
		/// <c>VPHADDUBD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 D2 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphaddubd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.XOP_Vphaddubd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vphaddubq instruction.<br/>
		/// <br/>
		/// <c>VPHADDUBQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 D3 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphaddubq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.XOP_Vphaddubq_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vphaddubq instruction.<br/>
		/// <br/>
		/// <c>VPHADDUBQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 D3 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphaddubq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.XOP_Vphaddubq_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vphaddubw instruction.<br/>
		/// <br/>
		/// <c>VPHADDUBW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 D1 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphaddubw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.XOP_Vphaddubw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vphaddubw instruction.<br/>
		/// <br/>
		/// <c>VPHADDUBW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 D1 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphaddubw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.XOP_Vphaddubw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vphaddudq instruction.<br/>
		/// <br/>
		/// <c>VPHADDUDQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 DB /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphaddudq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.XOP_Vphaddudq_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vphaddudq instruction.<br/>
		/// <br/>
		/// <c>VPHADDUDQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 DB /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphaddudq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.XOP_Vphaddudq_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vphadduwd instruction.<br/>
		/// <br/>
		/// <c>VPHADDUWD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 D6 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphadduwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.XOP_Vphadduwd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vphadduwd instruction.<br/>
		/// <br/>
		/// <c>VPHADDUWD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 D6 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphadduwd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.XOP_Vphadduwd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vphadduwq instruction.<br/>
		/// <br/>
		/// <c>VPHADDUWQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 D7 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphadduwq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.XOP_Vphadduwq_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vphadduwq instruction.<br/>
		/// <br/>
		/// <c>VPHADDUWQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 D7 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphadduwq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.XOP_Vphadduwq_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vphaddw instruction.<br/>
		/// <br/>
		/// <c>VPHADDW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 01 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphaddw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.VEX_Vphaddw_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vphaddw instruction.<br/>
		/// <br/>
		/// <c>VPHADDW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 01 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphaddw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.VEX_Vphaddw_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vphaddw instruction.<br/>
		/// <br/>
		/// <c>VPHADDW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 01 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphaddw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vphaddw_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vphaddw instruction.<br/>
		/// <br/>
		/// <c>VPHADDW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 01 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphaddw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vphaddw_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vphaddwd instruction.<br/>
		/// <br/>
		/// <c>VPHADDWD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 C6 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphaddwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.XOP_Vphaddwd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vphaddwd instruction.<br/>
		/// <br/>
		/// <c>VPHADDWD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 C6 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphaddwd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.XOP_Vphaddwd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vphaddwq instruction.<br/>
		/// <br/>
		/// <c>VPHADDWQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 C7 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphaddwq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.XOP_Vphaddwq_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vphaddwq instruction.<br/>
		/// <br/>
		/// <c>VPHADDWQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 C7 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphaddwq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.XOP_Vphaddwq_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vphminposuw instruction.<br/>
		/// <br/>
		/// <c>VPHMINPOSUW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 41 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphminposuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.VEX_Vphminposuw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vphminposuw instruction.<br/>
		/// <br/>
		/// <c>VPHMINPOSUW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 41 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphminposuw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.VEX_Vphminposuw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vphsubbw instruction.<br/>
		/// <br/>
		/// <c>VPHSUBBW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 E1 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphsubbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.XOP_Vphsubbw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vphsubbw instruction.<br/>
		/// <br/>
		/// <c>VPHSUBBW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 E1 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphsubbw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.XOP_Vphsubbw_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vphsubd instruction.<br/>
		/// <br/>
		/// <c>VPHSUBD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 06 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphsubd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.VEX_Vphsubd_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vphsubd instruction.<br/>
		/// <br/>
		/// <c>VPHSUBD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 06 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphsubd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.VEX_Vphsubd_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vphsubd instruction.<br/>
		/// <br/>
		/// <c>VPHSUBD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 06 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphsubd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vphsubd_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vphsubd instruction.<br/>
		/// <br/>
		/// <c>VPHSUBD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 06 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphsubd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vphsubd_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vphsubdq instruction.<br/>
		/// <br/>
		/// <c>VPHSUBDQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 E3 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphsubdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.XOP_Vphsubdq_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vphsubdq instruction.<br/>
		/// <br/>
		/// <c>VPHSUBDQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 E3 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphsubdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.XOP_Vphsubdq_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vphsubsw instruction.<br/>
		/// <br/>
		/// <c>VPHSUBSW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 07 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphsubsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.VEX_Vphsubsw_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vphsubsw instruction.<br/>
		/// <br/>
		/// <c>VPHSUBSW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 07 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphsubsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.VEX_Vphsubsw_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vphsubsw instruction.<br/>
		/// <br/>
		/// <c>VPHSUBSW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 07 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphsubsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vphsubsw_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vphsubsw instruction.<br/>
		/// <br/>
		/// <c>VPHSUBSW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 07 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphsubsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vphsubsw_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vphsubw instruction.<br/>
		/// <br/>
		/// <c>VPHSUBW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 05 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphsubw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.VEX_Vphsubw_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vphsubw instruction.<br/>
		/// <br/>
		/// <c>VPHSUBW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 05 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphsubw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.VEX_Vphsubw_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vphsubw instruction.<br/>
		/// <br/>
		/// <c>VPHSUBW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 05 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphsubw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vphsubw_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vphsubw instruction.<br/>
		/// <br/>
		/// <c>VPHSUBW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 05 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphsubw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vphsubw_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vphsubwd instruction.<br/>
		/// <br/>
		/// <c>VPHSUBWD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 E2 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphsubwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.XOP_Vphsubwd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vphsubwd instruction.<br/>
		/// <br/>
		/// <c>VPHSUBWD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 E2 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vphsubwd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.XOP_Vphsubwd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpinsrb instruction.<br/>
		/// <br/>
		/// <c>VPINSRB xmm1, xmm2, r32/m8, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 20 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPINSRB xmm1, xmm2, r32/m8, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 20 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpinsrb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister32 src2, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpinsrb_xmm_xmm_r32m8_imm8 : Code.EVEX_Vpinsrb_xmm_xmm_r32m8_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm));
		}
		/// <summary>vpinsrb instruction.<br/>
		/// <br/>
		/// <c>VPINSRB xmm1, xmm2, r64/m8, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 20 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VPINSRB xmm1, xmm2, r64/m8, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 20 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vpinsrb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister64 src2, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpinsrb_xmm_xmm_r64m8_imm8 : Code.EVEX_Vpinsrb_xmm_xmm_r64m8_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm));
		}
		/// <summary>vpinsrb instruction.<br/>
		/// <br/>
		/// <c>VPINSRB xmm1, xmm2, r32/m8, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 20 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPINSRB xmm1, xmm2, r32/m8, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 20 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpinsrb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpinsrb_xmm_xmm_r32m8_imm8 : Code.EVEX_Vpinsrb_xmm_xmm_r32m8_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vpinsrb instruction.<br/>
		/// <br/>
		/// <c>VPINSRB xmm1, xmm2, r32/m8, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 20 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPINSRB xmm1, xmm2, r32/m8, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 20 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpinsrb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister32 src2, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpinsrb_xmm_xmm_r32m8_imm8 : Code.EVEX_Vpinsrb_xmm_xmm_r32m8_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm));
		}
		/// <summary>vpinsrb instruction.<br/>
		/// <br/>
		/// <c>VPINSRB xmm1, xmm2, r64/m8, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 20 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VPINSRB xmm1, xmm2, r64/m8, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 20 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vpinsrb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister64 src2, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpinsrb_xmm_xmm_r64m8_imm8 : Code.EVEX_Vpinsrb_xmm_xmm_r64m8_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm));
		}
		/// <summary>vpinsrb instruction.<br/>
		/// <br/>
		/// <c>VPINSRB xmm1, xmm2, r32/m8, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 20 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPINSRB xmm1, xmm2, r32/m8, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 20 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpinsrb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpinsrb_xmm_xmm_r32m8_imm8 : Code.EVEX_Vpinsrb_xmm_xmm_r32m8_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vpinsrd instruction.<br/>
		/// <br/>
		/// <c>VPINSRD xmm1, xmm2, r/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 22 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPINSRD xmm1, xmm2, r/m32, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 22 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpinsrd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister32 src2, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpinsrd_xmm_xmm_rm32_imm8 : Code.EVEX_Vpinsrd_xmm_xmm_rm32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm));
		}
		/// <summary>vpinsrd instruction.<br/>
		/// <br/>
		/// <c>VPINSRD xmm1, xmm2, r/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 22 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPINSRD xmm1, xmm2, r/m32, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 22 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpinsrd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpinsrd_xmm_xmm_rm32_imm8 : Code.EVEX_Vpinsrd_xmm_xmm_rm32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vpinsrd instruction.<br/>
		/// <br/>
		/// <c>VPINSRD xmm1, xmm2, r/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 22 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPINSRD xmm1, xmm2, r/m32, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 22 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpinsrd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister32 src2, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpinsrd_xmm_xmm_rm32_imm8 : Code.EVEX_Vpinsrd_xmm_xmm_rm32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm));
		}
		/// <summary>vpinsrd instruction.<br/>
		/// <br/>
		/// <c>VPINSRD xmm1, xmm2, r/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 22 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPINSRD xmm1, xmm2, r/m32, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 22 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpinsrd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpinsrd_xmm_xmm_rm32_imm8 : Code.EVEX_Vpinsrd_xmm_xmm_rm32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vpinsrq instruction.<br/>
		/// <br/>
		/// <c>VPINSRQ xmm1, xmm2, r/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 22 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VPINSRQ xmm1, xmm2, r/m64, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 22 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vpinsrq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister64 src2, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpinsrq_xmm_xmm_rm64_imm8 : Code.EVEX_Vpinsrq_xmm_xmm_rm64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm));
		}
		/// <summary>vpinsrq instruction.<br/>
		/// <br/>
		/// <c>VPINSRQ xmm1, xmm2, r/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 22 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VPINSRQ xmm1, xmm2, r/m64, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 22 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vpinsrq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpinsrq_xmm_xmm_rm64_imm8 : Code.EVEX_Vpinsrq_xmm_xmm_rm64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vpinsrq instruction.<br/>
		/// <br/>
		/// <c>VPINSRQ xmm1, xmm2, r/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 22 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VPINSRQ xmm1, xmm2, r/m64, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 22 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vpinsrq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister64 src2, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpinsrq_xmm_xmm_rm64_imm8 : Code.EVEX_Vpinsrq_xmm_xmm_rm64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm));
		}
		/// <summary>vpinsrq instruction.<br/>
		/// <br/>
		/// <c>VPINSRQ xmm1, xmm2, r/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 22 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VPINSRQ xmm1, xmm2, r/m64, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 22 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vpinsrq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpinsrq_xmm_xmm_rm64_imm8 : Code.EVEX_Vpinsrq_xmm_xmm_rm64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vpinsrw instruction.<br/>
		/// <br/>
		/// <c>VPINSRW xmm1, xmm2, r32/m16, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.W0 C4 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPINSRW xmm1, xmm2, r32/m16, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 C4 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpinsrw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister32 src2, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpinsrw_xmm_xmm_r32m16_imm8 : Code.EVEX_Vpinsrw_xmm_xmm_r32m16_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm));
		}
		/// <summary>vpinsrw instruction.<br/>
		/// <br/>
		/// <c>VPINSRW xmm1, xmm2, r64/m16, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.W1 C4 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VPINSRW xmm1, xmm2, r64/m16, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C4 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vpinsrw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister64 src2, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpinsrw_xmm_xmm_r64m16_imm8 : Code.EVEX_Vpinsrw_xmm_xmm_r64m16_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm));
		}
		/// <summary>vpinsrw instruction.<br/>
		/// <br/>
		/// <c>VPINSRW xmm1, xmm2, r32/m16, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.W0 C4 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPINSRW xmm1, xmm2, r32/m16, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 C4 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpinsrw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpinsrw_xmm_xmm_r32m16_imm8 : Code.EVEX_Vpinsrw_xmm_xmm_r32m16_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vpinsrw instruction.<br/>
		/// <br/>
		/// <c>VPINSRW xmm1, xmm2, r32/m16, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.W0 C4 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPINSRW xmm1, xmm2, r32/m16, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 C4 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpinsrw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister32 src2, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpinsrw_xmm_xmm_r32m16_imm8 : Code.EVEX_Vpinsrw_xmm_xmm_r32m16_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm));
		}
		/// <summary>vpinsrw instruction.<br/>
		/// <br/>
		/// <c>VPINSRW xmm1, xmm2, r64/m16, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.W1 C4 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VPINSRW xmm1, xmm2, r64/m16, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C4 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vpinsrw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister64 src2, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpinsrw_xmm_xmm_r64m16_imm8 : Code.EVEX_Vpinsrw_xmm_xmm_r64m16_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm));
		}
		/// <summary>vpinsrw instruction.<br/>
		/// <br/>
		/// <c>VPINSRW xmm1, xmm2, r32/m16, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.W0 C4 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPINSRW xmm1, xmm2, r32/m16, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 C4 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpinsrw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpinsrw_xmm_xmm_r32m16_imm8 : Code.EVEX_Vpinsrw_xmm_xmm_r32m16_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vplzcntd instruction.<br/>
		/// <br/>
		/// <c>VPLZCNTD xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 44 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vplzcntd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vplzcntd_xmm_k1z_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vplzcntd instruction.<br/>
		/// <br/>
		/// <c>VPLZCNTD ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 44 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vplzcntd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vplzcntd_ymm_k1z_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vplzcntd instruction.<br/>
		/// <br/>
		/// <c>VPLZCNTD zmm1 {k1}{z}, zmm2/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 44 /r</c><br/>
		/// <br/>
		/// <c>AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vplzcntd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vplzcntd_zmm_k1z_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vplzcntd instruction.<br/>
		/// <br/>
		/// <c>VPLZCNTD xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 44 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vplzcntd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vplzcntd_xmm_k1z_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vplzcntd instruction.<br/>
		/// <br/>
		/// <c>VPLZCNTD ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 44 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vplzcntd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vplzcntd_ymm_k1z_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vplzcntd instruction.<br/>
		/// <br/>
		/// <c>VPLZCNTD zmm1 {k1}{z}, zmm2/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 44 /r</c><br/>
		/// <br/>
		/// <c>AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vplzcntd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vplzcntd_zmm_k1z_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vplzcntq instruction.<br/>
		/// <br/>
		/// <c>VPLZCNTQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 44 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vplzcntq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vplzcntq_xmm_k1z_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vplzcntq instruction.<br/>
		/// <br/>
		/// <c>VPLZCNTQ ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 44 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vplzcntq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vplzcntq_ymm_k1z_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vplzcntq instruction.<br/>
		/// <br/>
		/// <c>VPLZCNTQ zmm1 {k1}{z}, zmm2/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 44 /r</c><br/>
		/// <br/>
		/// <c>AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vplzcntq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vplzcntq_zmm_k1z_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vplzcntq instruction.<br/>
		/// <br/>
		/// <c>VPLZCNTQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 44 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vplzcntq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vplzcntq_xmm_k1z_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vplzcntq instruction.<br/>
		/// <br/>
		/// <c>VPLZCNTQ ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 44 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vplzcntq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vplzcntq_ymm_k1z_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vplzcntq instruction.<br/>
		/// <br/>
		/// <c>VPLZCNTQ zmm1 {k1}{z}, zmm2/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 44 /r</c><br/>
		/// <br/>
		/// <c>AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vplzcntq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vplzcntq_zmm_k1z_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vpmacsdd instruction.<br/>
		/// <br/>
		/// <c>VPMACSDD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 9E /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmacsdd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.XOP_Vpmacsdd_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vpmacsdd instruction.<br/>
		/// <br/>
		/// <c>VPMACSDD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 9E /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmacsdd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.XOP_Vpmacsdd_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vpmacsdqh instruction.<br/>
		/// <br/>
		/// <c>VPMACSDQH xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 9F /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmacsdqh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.XOP_Vpmacsdqh_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vpmacsdqh instruction.<br/>
		/// <br/>
		/// <c>VPMACSDQH xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 9F /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmacsdqh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.XOP_Vpmacsdqh_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vpmacsdql instruction.<br/>
		/// <br/>
		/// <c>VPMACSDQL xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 97 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmacsdql(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.XOP_Vpmacsdql_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vpmacsdql instruction.<br/>
		/// <br/>
		/// <c>VPMACSDQL xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 97 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmacsdql(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.XOP_Vpmacsdql_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vpmacssdd instruction.<br/>
		/// <br/>
		/// <c>VPMACSSDD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 8E /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmacssdd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.XOP_Vpmacssdd_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vpmacssdd instruction.<br/>
		/// <br/>
		/// <c>VPMACSSDD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 8E /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmacssdd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.XOP_Vpmacssdd_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vpmacssdqh instruction.<br/>
		/// <br/>
		/// <c>VPMACSSDQH xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 8F /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmacssdqh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.XOP_Vpmacssdqh_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vpmacssdqh instruction.<br/>
		/// <br/>
		/// <c>VPMACSSDQH xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 8F /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmacssdqh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.XOP_Vpmacssdqh_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vpmacssdql instruction.<br/>
		/// <br/>
		/// <c>VPMACSSDQL xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 87 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmacssdql(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.XOP_Vpmacssdql_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vpmacssdql instruction.<br/>
		/// <br/>
		/// <c>VPMACSSDQL xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 87 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmacssdql(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.XOP_Vpmacssdql_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vpmacsswd instruction.<br/>
		/// <br/>
		/// <c>VPMACSSWD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 86 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmacsswd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.XOP_Vpmacsswd_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vpmacsswd instruction.<br/>
		/// <br/>
		/// <c>VPMACSSWD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 86 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmacsswd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.XOP_Vpmacsswd_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vpmacssww instruction.<br/>
		/// <br/>
		/// <c>VPMACSSWW xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 85 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmacssww(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.XOP_Vpmacssww_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vpmacssww instruction.<br/>
		/// <br/>
		/// <c>VPMACSSWW xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 85 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmacssww(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.XOP_Vpmacssww_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vpmacswd instruction.<br/>
		/// <br/>
		/// <c>VPMACSWD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 96 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmacswd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.XOP_Vpmacswd_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vpmacswd instruction.<br/>
		/// <br/>
		/// <c>VPMACSWD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 96 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmacswd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.XOP_Vpmacswd_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vpmacsww instruction.<br/>
		/// <br/>
		/// <c>VPMACSWW xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 95 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmacsww(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.XOP_Vpmacsww_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vpmacsww instruction.<br/>
		/// <br/>
		/// <c>VPMACSWW xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 95 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmacsww(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.XOP_Vpmacsww_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vpmadcsswd instruction.<br/>
		/// <br/>
		/// <c>VPMADCSSWD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 A6 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmadcsswd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.XOP_Vpmadcsswd_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vpmadcsswd instruction.<br/>
		/// <br/>
		/// <c>VPMADCSSWD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 A6 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmadcsswd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.XOP_Vpmadcsswd_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vpmadcswd instruction.<br/>
		/// <br/>
		/// <c>VPMADCSWD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 B6 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmadcswd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.XOP_Vpmadcswd_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vpmadcswd instruction.<br/>
		/// <br/>
		/// <c>VPMADCSWD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 B6 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmadcswd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.XOP_Vpmadcswd_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vpmadd52huq instruction.<br/>
		/// <br/>
		/// <c>VPMADD52HUQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 B5 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_IFMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmadd52huq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpmadd52huq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmadd52huq instruction.<br/>
		/// <br/>
		/// <c>VPMADD52HUQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 B5 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_IFMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmadd52huq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpmadd52huq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmadd52huq instruction.<br/>
		/// <br/>
		/// <c>VPMADD52HUQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 B5 /r</c><br/>
		/// <br/>
		/// <c>AVX512_IFMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmadd52huq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpmadd52huq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmadd52huq instruction.<br/>
		/// <br/>
		/// <c>VPMADD52HUQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 B5 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_IFMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmadd52huq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpmadd52huq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpmadd52huq instruction.<br/>
		/// <br/>
		/// <c>VPMADD52HUQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 B5 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_IFMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmadd52huq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpmadd52huq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpmadd52huq instruction.<br/>
		/// <br/>
		/// <c>VPMADD52HUQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 B5 /r</c><br/>
		/// <br/>
		/// <c>AVX512_IFMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmadd52huq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpmadd52huq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpmadd52luq instruction.<br/>
		/// <br/>
		/// <c>VPMADD52LUQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 B4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_IFMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmadd52luq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpmadd52luq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmadd52luq instruction.<br/>
		/// <br/>
		/// <c>VPMADD52LUQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 B4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_IFMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmadd52luq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpmadd52luq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmadd52luq instruction.<br/>
		/// <br/>
		/// <c>VPMADD52LUQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 B4 /r</c><br/>
		/// <br/>
		/// <c>AVX512_IFMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmadd52luq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpmadd52luq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmadd52luq instruction.<br/>
		/// <br/>
		/// <c>VPMADD52LUQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 B4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_IFMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmadd52luq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpmadd52luq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpmadd52luq instruction.<br/>
		/// <br/>
		/// <c>VPMADD52LUQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 B4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_IFMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmadd52luq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpmadd52luq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpmadd52luq instruction.<br/>
		/// <br/>
		/// <c>VPMADD52LUQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 B4 /r</c><br/>
		/// <br/>
		/// <c>AVX512_IFMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmadd52luq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpmadd52luq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpmaddubsw instruction.<br/>
		/// <br/>
		/// <c>VPMADDUBSW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 04 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMADDUBSW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 04 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaddubsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmaddubsw_xmm_xmm_xmmm128 : Code.EVEX_Vpmaddubsw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmaddubsw instruction.<br/>
		/// <br/>
		/// <c>VPMADDUBSW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 04 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMADDUBSW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 04 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaddubsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmaddubsw_ymm_ymm_ymmm256 : Code.EVEX_Vpmaddubsw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmaddubsw instruction.<br/>
		/// <br/>
		/// <c>VPMADDUBSW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 04 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaddubsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpmaddubsw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmaddubsw instruction.<br/>
		/// <br/>
		/// <c>VPMADDUBSW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 04 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMADDUBSW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 04 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaddubsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmaddubsw_xmm_xmm_xmmm128 : Code.EVEX_Vpmaddubsw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmaddubsw instruction.<br/>
		/// <br/>
		/// <c>VPMADDUBSW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 04 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMADDUBSW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 04 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaddubsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmaddubsw_ymm_ymm_ymmm256 : Code.EVEX_Vpmaddubsw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmaddubsw instruction.<br/>
		/// <br/>
		/// <c>VPMADDUBSW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 04 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaddubsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpmaddubsw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmaddwd instruction.<br/>
		/// <br/>
		/// <c>VPMADDWD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG F5 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMADDWD xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG F5 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaddwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmaddwd_xmm_xmm_xmmm128 : Code.EVEX_Vpmaddwd_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmaddwd instruction.<br/>
		/// <br/>
		/// <c>VPMADDWD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG F5 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMADDWD ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG F5 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaddwd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmaddwd_ymm_ymm_ymmm256 : Code.EVEX_Vpmaddwd_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmaddwd instruction.<br/>
		/// <br/>
		/// <c>VPMADDWD zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG F5 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaddwd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpmaddwd_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmaddwd instruction.<br/>
		/// <br/>
		/// <c>VPMADDWD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG F5 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMADDWD xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG F5 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaddwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmaddwd_xmm_xmm_xmmm128 : Code.EVEX_Vpmaddwd_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmaddwd instruction.<br/>
		/// <br/>
		/// <c>VPMADDWD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG F5 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMADDWD ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG F5 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaddwd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmaddwd_ymm_ymm_ymmm256 : Code.EVEX_Vpmaddwd_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmaddwd instruction.<br/>
		/// <br/>
		/// <c>VPMADDWD zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG F5 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaddwd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpmaddwd_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmaskmovd instruction.<br/>
		/// <br/>
		/// <c>VPMASKMOVD m128, xmm1, xmm2</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 8E /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaskmovd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.VEX_Vpmaskmovd_m128_xmm_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, src2));
		}
		/// <summary>vpmaskmovd instruction.<br/>
		/// <br/>
		/// <c>VPMASKMOVD m256, ymm1, ymm2</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 8E /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaskmovd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.VEX_Vpmaskmovd_m256_ymm_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, src2));
		}
		/// <summary>vpmaskmovd instruction.<br/>
		/// <br/>
		/// <c>VPMASKMOVD xmm1, xmm2, m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 8C /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaskmovd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vpmaskmovd_xmm_xmm_m128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpmaskmovd instruction.<br/>
		/// <br/>
		/// <c>VPMASKMOVD ymm1, ymm2, m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 8C /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaskmovd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vpmaskmovd_ymm_ymm_m256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpmaskmovq instruction.<br/>
		/// <br/>
		/// <c>VPMASKMOVQ m128, xmm1, xmm2</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 8E /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaskmovq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.VEX_Vpmaskmovq_m128_xmm_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, src2));
		}
		/// <summary>vpmaskmovq instruction.<br/>
		/// <br/>
		/// <c>VPMASKMOVQ m256, ymm1, ymm2</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 8E /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaskmovq(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.VEX_Vpmaskmovq_m256_ymm_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src1, src2));
		}
		/// <summary>vpmaskmovq instruction.<br/>
		/// <br/>
		/// <c>VPMASKMOVQ xmm1, xmm2, m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 8C /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaskmovq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vpmaskmovq_xmm_xmm_m128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpmaskmovq instruction.<br/>
		/// <br/>
		/// <c>VPMASKMOVQ ymm1, ymm2, m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 8C /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaskmovq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vpmaskmovq_ymm_ymm_m256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpmaxsb instruction.<br/>
		/// <br/>
		/// <c>VPMAXSB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 3C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXSB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 3C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmaxsb_xmm_xmm_xmmm128 : Code.EVEX_Vpmaxsb_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmaxsb instruction.<br/>
		/// <br/>
		/// <c>VPMAXSB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 3C /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXSB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 3C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxsb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmaxsb_ymm_ymm_ymmm256 : Code.EVEX_Vpmaxsb_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmaxsb instruction.<br/>
		/// <br/>
		/// <c>VPMAXSB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 3C /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxsb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpmaxsb_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmaxsb instruction.<br/>
		/// <br/>
		/// <c>VPMAXSB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 3C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXSB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 3C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmaxsb_xmm_xmm_xmmm128 : Code.EVEX_Vpmaxsb_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmaxsb instruction.<br/>
		/// <br/>
		/// <c>VPMAXSB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 3C /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXSB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 3C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxsb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmaxsb_ymm_ymm_ymmm256 : Code.EVEX_Vpmaxsb_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmaxsb instruction.<br/>
		/// <br/>
		/// <c>VPMAXSB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 3C /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxsb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpmaxsb_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmaxsd instruction.<br/>
		/// <br/>
		/// <c>VPMAXSD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 3D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXSD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 3D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmaxsd_xmm_xmm_xmmm128 : Code.EVEX_Vpmaxsd_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmaxsd instruction.<br/>
		/// <br/>
		/// <c>VPMAXSD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 3D /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXSD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 3D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxsd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmaxsd_ymm_ymm_ymmm256 : Code.EVEX_Vpmaxsd_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmaxsd instruction.<br/>
		/// <br/>
		/// <c>VPMAXSD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 3D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxsd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpmaxsd_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmaxsd instruction.<br/>
		/// <br/>
		/// <c>VPMAXSD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 3D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXSD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 3D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpmaxsd_xmm_k1z_xmm_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vpmaxsd_xmm_xmm_xmmm128 : Code.EVEX_Vpmaxsd_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpmaxsd instruction.<br/>
		/// <br/>
		/// <c>VPMAXSD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 3D /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXSD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 3D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxsd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpmaxsd_ymm_k1z_ymm_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vpmaxsd_ymm_ymm_ymmm256 : Code.EVEX_Vpmaxsd_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpmaxsd instruction.<br/>
		/// <br/>
		/// <c>VPMAXSD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 3D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxsd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpmaxsd_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpmaxsq instruction.<br/>
		/// <br/>
		/// <c>VPMAXSQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 3D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxsq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpmaxsq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmaxsq instruction.<br/>
		/// <br/>
		/// <c>VPMAXSQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 3D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxsq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpmaxsq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmaxsq instruction.<br/>
		/// <br/>
		/// <c>VPMAXSQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 3D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxsq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpmaxsq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmaxsq instruction.<br/>
		/// <br/>
		/// <c>VPMAXSQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 3D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxsq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpmaxsq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpmaxsq instruction.<br/>
		/// <br/>
		/// <c>VPMAXSQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 3D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxsq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpmaxsq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpmaxsq instruction.<br/>
		/// <br/>
		/// <c>VPMAXSQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 3D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxsq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpmaxsq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpmaxsw instruction.<br/>
		/// <br/>
		/// <c>VPMAXSW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG EE /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXSW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG EE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmaxsw_xmm_xmm_xmmm128 : Code.EVEX_Vpmaxsw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmaxsw instruction.<br/>
		/// <br/>
		/// <c>VPMAXSW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG EE /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXSW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG EE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmaxsw_ymm_ymm_ymmm256 : Code.EVEX_Vpmaxsw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmaxsw instruction.<br/>
		/// <br/>
		/// <c>VPMAXSW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG EE /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpmaxsw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmaxsw instruction.<br/>
		/// <br/>
		/// <c>VPMAXSW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG EE /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXSW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG EE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmaxsw_xmm_xmm_xmmm128 : Code.EVEX_Vpmaxsw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmaxsw instruction.<br/>
		/// <br/>
		/// <c>VPMAXSW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG EE /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXSW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG EE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmaxsw_ymm_ymm_ymmm256 : Code.EVEX_Vpmaxsw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmaxsw instruction.<br/>
		/// <br/>
		/// <c>VPMAXSW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG EE /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpmaxsw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmaxub instruction.<br/>
		/// <br/>
		/// <c>VPMAXUB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG DE /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXUB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG DE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmaxub_xmm_xmm_xmmm128 : Code.EVEX_Vpmaxub_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmaxub instruction.<br/>
		/// <br/>
		/// <c>VPMAXUB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG DE /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXUB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG DE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxub(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmaxub_ymm_ymm_ymmm256 : Code.EVEX_Vpmaxub_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmaxub instruction.<br/>
		/// <br/>
		/// <c>VPMAXUB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG DE /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxub(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpmaxub_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmaxub instruction.<br/>
		/// <br/>
		/// <c>VPMAXUB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG DE /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXUB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG DE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmaxub_xmm_xmm_xmmm128 : Code.EVEX_Vpmaxub_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmaxub instruction.<br/>
		/// <br/>
		/// <c>VPMAXUB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG DE /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXUB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG DE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxub(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmaxub_ymm_ymm_ymmm256 : Code.EVEX_Vpmaxub_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmaxub instruction.<br/>
		/// <br/>
		/// <c>VPMAXUB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG DE /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxub(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpmaxub_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmaxud instruction.<br/>
		/// <br/>
		/// <c>VPMAXUD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 3F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXUD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 3F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmaxud_xmm_xmm_xmmm128 : Code.EVEX_Vpmaxud_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmaxud instruction.<br/>
		/// <br/>
		/// <c>VPMAXUD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 3F /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXUD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 3F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxud(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmaxud_ymm_ymm_ymmm256 : Code.EVEX_Vpmaxud_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmaxud instruction.<br/>
		/// <br/>
		/// <c>VPMAXUD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 3F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxud(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpmaxud_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmaxud instruction.<br/>
		/// <br/>
		/// <c>VPMAXUD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 3F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXUD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 3F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpmaxud_xmm_k1z_xmm_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vpmaxud_xmm_xmm_xmmm128 : Code.EVEX_Vpmaxud_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpmaxud instruction.<br/>
		/// <br/>
		/// <c>VPMAXUD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 3F /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXUD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 3F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxud(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpmaxud_ymm_k1z_ymm_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vpmaxud_ymm_ymm_ymmm256 : Code.EVEX_Vpmaxud_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpmaxud instruction.<br/>
		/// <br/>
		/// <c>VPMAXUD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 3F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxud(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpmaxud_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpmaxuq instruction.<br/>
		/// <br/>
		/// <c>VPMAXUQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 3F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpmaxuq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmaxuq instruction.<br/>
		/// <br/>
		/// <c>VPMAXUQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 3F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxuq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpmaxuq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmaxuq instruction.<br/>
		/// <br/>
		/// <c>VPMAXUQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 3F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxuq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpmaxuq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmaxuq instruction.<br/>
		/// <br/>
		/// <c>VPMAXUQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 3F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpmaxuq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpmaxuq instruction.<br/>
		/// <br/>
		/// <c>VPMAXUQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 3F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxuq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpmaxuq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpmaxuq instruction.<br/>
		/// <br/>
		/// <c>VPMAXUQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 3F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxuq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpmaxuq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpmaxuw instruction.<br/>
		/// <br/>
		/// <c>VPMAXUW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 3E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXUW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 3E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmaxuw_xmm_xmm_xmmm128 : Code.EVEX_Vpmaxuw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmaxuw instruction.<br/>
		/// <br/>
		/// <c>VPMAXUW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 3E /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXUW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 3E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxuw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmaxuw_ymm_ymm_ymmm256 : Code.EVEX_Vpmaxuw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmaxuw instruction.<br/>
		/// <br/>
		/// <c>VPMAXUW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 3E /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxuw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpmaxuw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmaxuw instruction.<br/>
		/// <br/>
		/// <c>VPMAXUW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 3E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXUW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 3E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmaxuw_xmm_xmm_xmmm128 : Code.EVEX_Vpmaxuw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmaxuw instruction.<br/>
		/// <br/>
		/// <c>VPMAXUW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 3E /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXUW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 3E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxuw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmaxuw_ymm_ymm_ymmm256 : Code.EVEX_Vpmaxuw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmaxuw instruction.<br/>
		/// <br/>
		/// <c>VPMAXUW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 3E /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmaxuw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpmaxuw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpminsb instruction.<br/>
		/// <br/>
		/// <c>VPMINSB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 38 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINSB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 38 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpminsb_xmm_xmm_xmmm128 : Code.EVEX_Vpminsb_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpminsb instruction.<br/>
		/// <br/>
		/// <c>VPMINSB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 38 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINSB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 38 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminsb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpminsb_ymm_ymm_ymmm256 : Code.EVEX_Vpminsb_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpminsb instruction.<br/>
		/// <br/>
		/// <c>VPMINSB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 38 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminsb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpminsb_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpminsb instruction.<br/>
		/// <br/>
		/// <c>VPMINSB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 38 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINSB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 38 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpminsb_xmm_xmm_xmmm128 : Code.EVEX_Vpminsb_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpminsb instruction.<br/>
		/// <br/>
		/// <c>VPMINSB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 38 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINSB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 38 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminsb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpminsb_ymm_ymm_ymmm256 : Code.EVEX_Vpminsb_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpminsb instruction.<br/>
		/// <br/>
		/// <c>VPMINSB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 38 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminsb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpminsb_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpminsd instruction.<br/>
		/// <br/>
		/// <c>VPMINSD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 39 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINSD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 39 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpminsd_xmm_xmm_xmmm128 : Code.EVEX_Vpminsd_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpminsd instruction.<br/>
		/// <br/>
		/// <c>VPMINSD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 39 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINSD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 39 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminsd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpminsd_ymm_ymm_ymmm256 : Code.EVEX_Vpminsd_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpminsd instruction.<br/>
		/// <br/>
		/// <c>VPMINSD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 39 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminsd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpminsd_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpminsd instruction.<br/>
		/// <br/>
		/// <c>VPMINSD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 39 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINSD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 39 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpminsd_xmm_k1z_xmm_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vpminsd_xmm_xmm_xmmm128 : Code.EVEX_Vpminsd_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpminsd instruction.<br/>
		/// <br/>
		/// <c>VPMINSD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 39 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINSD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 39 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminsd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpminsd_ymm_k1z_ymm_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vpminsd_ymm_ymm_ymmm256 : Code.EVEX_Vpminsd_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpminsd instruction.<br/>
		/// <br/>
		/// <c>VPMINSD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 39 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminsd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpminsd_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpminsq instruction.<br/>
		/// <br/>
		/// <c>VPMINSQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 39 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminsq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpminsq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpminsq instruction.<br/>
		/// <br/>
		/// <c>VPMINSQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 39 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminsq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpminsq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpminsq instruction.<br/>
		/// <br/>
		/// <c>VPMINSQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 39 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminsq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpminsq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpminsq instruction.<br/>
		/// <br/>
		/// <c>VPMINSQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 39 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminsq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpminsq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpminsq instruction.<br/>
		/// <br/>
		/// <c>VPMINSQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 39 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminsq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpminsq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpminsq instruction.<br/>
		/// <br/>
		/// <c>VPMINSQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 39 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminsq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpminsq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpminsw instruction.<br/>
		/// <br/>
		/// <c>VPMINSW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG EA /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINSW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG EA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpminsw_xmm_xmm_xmmm128 : Code.EVEX_Vpminsw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpminsw instruction.<br/>
		/// <br/>
		/// <c>VPMINSW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG EA /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINSW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG EA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpminsw_ymm_ymm_ymmm256 : Code.EVEX_Vpminsw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpminsw instruction.<br/>
		/// <br/>
		/// <c>VPMINSW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG EA /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpminsw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpminsw instruction.<br/>
		/// <br/>
		/// <c>VPMINSW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG EA /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINSW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG EA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpminsw_xmm_xmm_xmmm128 : Code.EVEX_Vpminsw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpminsw instruction.<br/>
		/// <br/>
		/// <c>VPMINSW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG EA /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINSW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG EA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpminsw_ymm_ymm_ymmm256 : Code.EVEX_Vpminsw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpminsw instruction.<br/>
		/// <br/>
		/// <c>VPMINSW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG EA /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpminsw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpminub instruction.<br/>
		/// <br/>
		/// <c>VPMINUB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG DA /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINUB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG DA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpminub_xmm_xmm_xmmm128 : Code.EVEX_Vpminub_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpminub instruction.<br/>
		/// <br/>
		/// <c>VPMINUB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG DA /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINUB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG DA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminub(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpminub_ymm_ymm_ymmm256 : Code.EVEX_Vpminub_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpminub instruction.<br/>
		/// <br/>
		/// <c>VPMINUB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG DA /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminub(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpminub_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpminub instruction.<br/>
		/// <br/>
		/// <c>VPMINUB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG DA /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINUB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG DA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpminub_xmm_xmm_xmmm128 : Code.EVEX_Vpminub_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpminub instruction.<br/>
		/// <br/>
		/// <c>VPMINUB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG DA /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINUB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG DA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminub(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpminub_ymm_ymm_ymmm256 : Code.EVEX_Vpminub_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpminub instruction.<br/>
		/// <br/>
		/// <c>VPMINUB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG DA /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminub(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpminub_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpminud instruction.<br/>
		/// <br/>
		/// <c>VPMINUD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 3B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINUD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 3B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpminud_xmm_xmm_xmmm128 : Code.EVEX_Vpminud_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpminud instruction.<br/>
		/// <br/>
		/// <c>VPMINUD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 3B /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINUD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 3B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminud(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpminud_ymm_ymm_ymmm256 : Code.EVEX_Vpminud_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpminud instruction.<br/>
		/// <br/>
		/// <c>VPMINUD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 3B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminud(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpminud_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpminud instruction.<br/>
		/// <br/>
		/// <c>VPMINUD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 3B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINUD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 3B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpminud_xmm_k1z_xmm_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vpminud_xmm_xmm_xmmm128 : Code.EVEX_Vpminud_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpminud instruction.<br/>
		/// <br/>
		/// <c>VPMINUD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 3B /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINUD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 3B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminud(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpminud_ymm_k1z_ymm_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vpminud_ymm_ymm_ymmm256 : Code.EVEX_Vpminud_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpminud instruction.<br/>
		/// <br/>
		/// <c>VPMINUD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 3B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminud(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpminud_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpminuq instruction.<br/>
		/// <br/>
		/// <c>VPMINUQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 3B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpminuq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpminuq instruction.<br/>
		/// <br/>
		/// <c>VPMINUQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 3B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminuq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpminuq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpminuq instruction.<br/>
		/// <br/>
		/// <c>VPMINUQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 3B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminuq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpminuq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpminuq instruction.<br/>
		/// <br/>
		/// <c>VPMINUQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 3B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpminuq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpminuq instruction.<br/>
		/// <br/>
		/// <c>VPMINUQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 3B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminuq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpminuq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpminuq instruction.<br/>
		/// <br/>
		/// <c>VPMINUQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 3B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminuq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpminuq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpminuw instruction.<br/>
		/// <br/>
		/// <c>VPMINUW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 3A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINUW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 3A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpminuw_xmm_xmm_xmmm128 : Code.EVEX_Vpminuw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpminuw instruction.<br/>
		/// <br/>
		/// <c>VPMINUW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 3A /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINUW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 3A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminuw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpminuw_ymm_ymm_ymmm256 : Code.EVEX_Vpminuw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpminuw instruction.<br/>
		/// <br/>
		/// <c>VPMINUW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 3A /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminuw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpminuw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpminuw instruction.<br/>
		/// <br/>
		/// <c>VPMINUW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 3A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINUW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 3A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpminuw_xmm_xmm_xmmm128 : Code.EVEX_Vpminuw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpminuw instruction.<br/>
		/// <br/>
		/// <c>VPMINUW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 3A /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINUW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 3A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminuw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpminuw_ymm_ymm_ymmm256 : Code.EVEX_Vpminuw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpminuw instruction.<br/>
		/// <br/>
		/// <c>VPMINUW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 3A /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpminuw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpminuw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmovb2m instruction.<br/>
		/// <br/>
		/// <c>VPMOVB2M k1, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 29 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovb2m(AssemblerRegisterK dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpmovb2m_kr_xmm;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vpmovb2m instruction.<br/>
		/// <br/>
		/// <c>VPMOVB2M k1, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 29 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovb2m(AssemblerRegisterK dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpmovb2m_kr_ymm;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vpmovb2m instruction.<br/>
		/// <br/>
		/// <c>VPMOVB2M k1, zmm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 29 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovb2m(AssemblerRegisterK dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpmovb2m_kr_zmm;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vpmovd2m instruction.<br/>
		/// <br/>
		/// <c>VPMOVD2M k1, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 39 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovd2m(AssemblerRegisterK dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpmovd2m_kr_xmm;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vpmovd2m instruction.<br/>
		/// <br/>
		/// <c>VPMOVD2M k1, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 39 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovd2m(AssemblerRegisterK dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpmovd2m_kr_ymm;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vpmovd2m instruction.<br/>
		/// <br/>
		/// <c>VPMOVD2M k1, zmm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 39 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovd2m(AssemblerRegisterK dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpmovd2m_kr_zmm;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vpmovdb instruction.<br/>
		/// <br/>
		/// <c>VPMOVDB xmm1/m32 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 31 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovdb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpmovdb_xmmm32_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovdb instruction.<br/>
		/// <br/>
		/// <c>VPMOVDB xmm1/m32 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 31 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovdb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpmovdb_xmmm32_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovdb instruction.<br/>
		/// <br/>
		/// <c>VPMOVDB xmm1/m64 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 31 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovdb(AssemblerRegisterXMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpmovdb_xmmm64_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovdb instruction.<br/>
		/// <br/>
		/// <c>VPMOVDB xmm1/m64 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 31 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovdb(AssemblerMemoryOperand dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpmovdb_xmmm64_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovdb instruction.<br/>
		/// <br/>
		/// <c>VPMOVDB xmm1/m128 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 31 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovdb(AssemblerRegisterXMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpmovdb_xmmm128_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovdb instruction.<br/>
		/// <br/>
		/// <c>VPMOVDB xmm1/m128 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 31 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovdb(AssemblerMemoryOperand dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpmovdb_xmmm128_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovdw instruction.<br/>
		/// <br/>
		/// <c>VPMOVDW xmm1/m64 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 33 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpmovdw_xmmm64_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovdw instruction.<br/>
		/// <br/>
		/// <c>VPMOVDW xmm1/m64 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 33 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovdw(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpmovdw_xmmm64_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovdw instruction.<br/>
		/// <br/>
		/// <c>VPMOVDW xmm1/m128 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 33 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovdw(AssemblerRegisterXMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpmovdw_xmmm128_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovdw instruction.<br/>
		/// <br/>
		/// <c>VPMOVDW xmm1/m128 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 33 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovdw(AssemblerMemoryOperand dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpmovdw_xmmm128_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovdw instruction.<br/>
		/// <br/>
		/// <c>VPMOVDW ymm1/m256 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 33 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovdw(AssemblerRegisterYMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpmovdw_ymmm256_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovdw instruction.<br/>
		/// <br/>
		/// <c>VPMOVDW ymm1/m256 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 33 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovdw(AssemblerMemoryOperand dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpmovdw_ymmm256_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovm2b instruction.<br/>
		/// <br/>
		/// <c>VPMOVM2B xmm1, k1</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovm2b(AssemblerRegisterXMM dst, AssemblerRegisterK src) {
			Code op;
			op = Code.EVEX_Vpmovm2b_xmm_kr;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vpmovm2b instruction.<br/>
		/// <br/>
		/// <c>VPMOVM2B ymm1, k1</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovm2b(AssemblerRegisterYMM dst, AssemblerRegisterK src) {
			Code op;
			op = Code.EVEX_Vpmovm2b_ymm_kr;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vpmovm2b instruction.<br/>
		/// <br/>
		/// <c>VPMOVM2B zmm1, k1</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovm2b(AssemblerRegisterZMM dst, AssemblerRegisterK src) {
			Code op;
			op = Code.EVEX_Vpmovm2b_zmm_kr;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vpmovm2d instruction.<br/>
		/// <br/>
		/// <c>VPMOVM2D xmm1, k1</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 38 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovm2d(AssemblerRegisterXMM dst, AssemblerRegisterK src) {
			Code op;
			op = Code.EVEX_Vpmovm2d_xmm_kr;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vpmovm2d instruction.<br/>
		/// <br/>
		/// <c>VPMOVM2D ymm1, k1</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 38 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovm2d(AssemblerRegisterYMM dst, AssemblerRegisterK src) {
			Code op;
			op = Code.EVEX_Vpmovm2d_ymm_kr;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vpmovm2d instruction.<br/>
		/// <br/>
		/// <c>VPMOVM2D zmm1, k1</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 38 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovm2d(AssemblerRegisterZMM dst, AssemblerRegisterK src) {
			Code op;
			op = Code.EVEX_Vpmovm2d_zmm_kr;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vpmovm2q instruction.<br/>
		/// <br/>
		/// <c>VPMOVM2Q xmm1, k1</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W1 38 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovm2q(AssemblerRegisterXMM dst, AssemblerRegisterK src) {
			Code op;
			op = Code.EVEX_Vpmovm2q_xmm_kr;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vpmovm2q instruction.<br/>
		/// <br/>
		/// <c>VPMOVM2Q ymm1, k1</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W1 38 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovm2q(AssemblerRegisterYMM dst, AssemblerRegisterK src) {
			Code op;
			op = Code.EVEX_Vpmovm2q_ymm_kr;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vpmovm2q instruction.<br/>
		/// <br/>
		/// <c>VPMOVM2Q zmm1, k1</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W1 38 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovm2q(AssemblerRegisterZMM dst, AssemblerRegisterK src) {
			Code op;
			op = Code.EVEX_Vpmovm2q_zmm_kr;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vpmovm2w instruction.<br/>
		/// <br/>
		/// <c>VPMOVM2W xmm1, k1</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W1 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovm2w(AssemblerRegisterXMM dst, AssemblerRegisterK src) {
			Code op;
			op = Code.EVEX_Vpmovm2w_xmm_kr;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vpmovm2w instruction.<br/>
		/// <br/>
		/// <c>VPMOVM2W ymm1, k1</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W1 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovm2w(AssemblerRegisterYMM dst, AssemblerRegisterK src) {
			Code op;
			op = Code.EVEX_Vpmovm2w_ymm_kr;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vpmovm2w instruction.<br/>
		/// <br/>
		/// <c>VPMOVM2W zmm1, k1</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W1 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovm2w(AssemblerRegisterZMM dst, AssemblerRegisterK src) {
			Code op;
			op = Code.EVEX_Vpmovm2w_zmm_kr;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vpmovmskb instruction.<br/>
		/// <br/>
		/// <c>VPMOVMSKB r32, xmm1</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.W0 D7 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovmskb(AssemblerRegister32 dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.VEX_Vpmovmskb_r32_xmm;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vpmovmskb instruction.<br/>
		/// <br/>
		/// <c>VPMOVMSKB r64, xmm1</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.W1 D7 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vpmovmskb(AssemblerRegister64 dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.VEX_Vpmovmskb_r64_xmm;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vpmovmskb instruction.<br/>
		/// <br/>
		/// <c>VPMOVMSKB r32, ymm1</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.W0 D7 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovmskb(AssemblerRegister32 dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.VEX_Vpmovmskb_r32_ymm;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vpmovmskb instruction.<br/>
		/// <br/>
		/// <c>VPMOVMSKB r64, ymm1</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.W1 D7 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void vpmovmskb(AssemblerRegister64 dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.VEX_Vpmovmskb_r64_ymm;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vpmovq2m instruction.<br/>
		/// <br/>
		/// <c>VPMOVQ2M k1, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W1 39 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovq2m(AssemblerRegisterK dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpmovq2m_kr_xmm;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vpmovq2m instruction.<br/>
		/// <br/>
		/// <c>VPMOVQ2M k1, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W1 39 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovq2m(AssemblerRegisterK dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpmovq2m_kr_ymm;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vpmovq2m instruction.<br/>
		/// <br/>
		/// <c>VPMOVQ2M k1, zmm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W1 39 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovq2m(AssemblerRegisterK dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpmovq2m_kr_zmm;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vpmovqb instruction.<br/>
		/// <br/>
		/// <c>VPMOVQB xmm1/m16 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 32 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpmovqb_xmmm16_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovqb instruction.<br/>
		/// <br/>
		/// <c>VPMOVQB xmm1/m16 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 32 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovqb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpmovqb_xmmm16_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovqb instruction.<br/>
		/// <br/>
		/// <c>VPMOVQB xmm1/m32 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 32 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovqb(AssemblerRegisterXMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpmovqb_xmmm32_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovqb instruction.<br/>
		/// <br/>
		/// <c>VPMOVQB xmm1/m32 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 32 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovqb(AssemblerMemoryOperand dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpmovqb_xmmm32_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovqb instruction.<br/>
		/// <br/>
		/// <c>VPMOVQB xmm1/m64 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 32 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovqb(AssemblerRegisterXMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpmovqb_xmmm64_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovqb instruction.<br/>
		/// <br/>
		/// <c>VPMOVQB xmm1/m64 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 32 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovqb(AssemblerMemoryOperand dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpmovqb_xmmm64_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovqd instruction.<br/>
		/// <br/>
		/// <c>VPMOVQD xmm1/m64 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 35 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovqd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpmovqd_xmmm64_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovqd instruction.<br/>
		/// <br/>
		/// <c>VPMOVQD xmm1/m64 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 35 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovqd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpmovqd_xmmm64_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovqd instruction.<br/>
		/// <br/>
		/// <c>VPMOVQD xmm1/m128 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 35 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovqd(AssemblerRegisterXMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpmovqd_xmmm128_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovqd instruction.<br/>
		/// <br/>
		/// <c>VPMOVQD xmm1/m128 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 35 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovqd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpmovqd_xmmm128_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovqd instruction.<br/>
		/// <br/>
		/// <c>VPMOVQD ymm1/m256 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 35 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovqd(AssemblerRegisterYMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpmovqd_ymmm256_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovqd instruction.<br/>
		/// <br/>
		/// <c>VPMOVQD ymm1/m256 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 35 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovqd(AssemblerMemoryOperand dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpmovqd_ymmm256_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovqw instruction.<br/>
		/// <br/>
		/// <c>VPMOVQW xmm1/m32 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 34 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovqw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpmovqw_xmmm32_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovqw instruction.<br/>
		/// <br/>
		/// <c>VPMOVQW xmm1/m32 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 34 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovqw(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpmovqw_xmmm32_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovqw instruction.<br/>
		/// <br/>
		/// <c>VPMOVQW xmm1/m64 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 34 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovqw(AssemblerRegisterXMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpmovqw_xmmm64_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovqw instruction.<br/>
		/// <br/>
		/// <c>VPMOVQW xmm1/m64 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 34 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovqw(AssemblerMemoryOperand dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpmovqw_xmmm64_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovqw instruction.<br/>
		/// <br/>
		/// <c>VPMOVQW xmm1/m128 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 34 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovqw(AssemblerRegisterXMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpmovqw_xmmm128_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovqw instruction.<br/>
		/// <br/>
		/// <c>VPMOVQW xmm1/m128 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 34 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovqw(AssemblerMemoryOperand dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpmovqw_xmmm128_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovsdb instruction.<br/>
		/// <br/>
		/// <c>VPMOVSDB xmm1/m32 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 21 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsdb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpmovsdb_xmmm32_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovsdb instruction.<br/>
		/// <br/>
		/// <c>VPMOVSDB xmm1/m32 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 21 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsdb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpmovsdb_xmmm32_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovsdb instruction.<br/>
		/// <br/>
		/// <c>VPMOVSDB xmm1/m64 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 21 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsdb(AssemblerRegisterXMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpmovsdb_xmmm64_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovsdb instruction.<br/>
		/// <br/>
		/// <c>VPMOVSDB xmm1/m64 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 21 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsdb(AssemblerMemoryOperand dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpmovsdb_xmmm64_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovsdb instruction.<br/>
		/// <br/>
		/// <c>VPMOVSDB xmm1/m128 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 21 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsdb(AssemblerRegisterXMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpmovsdb_xmmm128_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovsdb instruction.<br/>
		/// <br/>
		/// <c>VPMOVSDB xmm1/m128 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 21 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsdb(AssemblerMemoryOperand dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpmovsdb_xmmm128_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovsdw instruction.<br/>
		/// <br/>
		/// <c>VPMOVSDW xmm1/m64 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 23 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpmovsdw_xmmm64_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovsdw instruction.<br/>
		/// <br/>
		/// <c>VPMOVSDW xmm1/m64 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 23 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsdw(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpmovsdw_xmmm64_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovsdw instruction.<br/>
		/// <br/>
		/// <c>VPMOVSDW xmm1/m128 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 23 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsdw(AssemblerRegisterXMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpmovsdw_xmmm128_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovsdw instruction.<br/>
		/// <br/>
		/// <c>VPMOVSDW xmm1/m128 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 23 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsdw(AssemblerMemoryOperand dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpmovsdw_xmmm128_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovsdw instruction.<br/>
		/// <br/>
		/// <c>VPMOVSDW ymm1/m256 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 23 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsdw(AssemblerRegisterYMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpmovsdw_ymmm256_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovsdw instruction.<br/>
		/// <br/>
		/// <c>VPMOVSDW ymm1/m256 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 23 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsdw(AssemblerMemoryOperand dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpmovsdw_ymmm256_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovsqb instruction.<br/>
		/// <br/>
		/// <c>VPMOVSQB xmm1/m16 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 22 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpmovsqb_xmmm16_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovsqb instruction.<br/>
		/// <br/>
		/// <c>VPMOVSQB xmm1/m16 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 22 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsqb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpmovsqb_xmmm16_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovsqb instruction.<br/>
		/// <br/>
		/// <c>VPMOVSQB xmm1/m32 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 22 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsqb(AssemblerRegisterXMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpmovsqb_xmmm32_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovsqb instruction.<br/>
		/// <br/>
		/// <c>VPMOVSQB xmm1/m32 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 22 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsqb(AssemblerMemoryOperand dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpmovsqb_xmmm32_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovsqb instruction.<br/>
		/// <br/>
		/// <c>VPMOVSQB xmm1/m64 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 22 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsqb(AssemblerRegisterXMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpmovsqb_xmmm64_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovsqb instruction.<br/>
		/// <br/>
		/// <c>VPMOVSQB xmm1/m64 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 22 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsqb(AssemblerMemoryOperand dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpmovsqb_xmmm64_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovsqd instruction.<br/>
		/// <br/>
		/// <c>VPMOVSQD xmm1/m64 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 25 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsqd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpmovsqd_xmmm64_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovsqd instruction.<br/>
		/// <br/>
		/// <c>VPMOVSQD xmm1/m64 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 25 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsqd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpmovsqd_xmmm64_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovsqd instruction.<br/>
		/// <br/>
		/// <c>VPMOVSQD xmm1/m128 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 25 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsqd(AssemblerRegisterXMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpmovsqd_xmmm128_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovsqd instruction.<br/>
		/// <br/>
		/// <c>VPMOVSQD xmm1/m128 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 25 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsqd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpmovsqd_xmmm128_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovsqd instruction.<br/>
		/// <br/>
		/// <c>VPMOVSQD ymm1/m256 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 25 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsqd(AssemblerRegisterYMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpmovsqd_ymmm256_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovsqd instruction.<br/>
		/// <br/>
		/// <c>VPMOVSQD ymm1/m256 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 25 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsqd(AssemblerMemoryOperand dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpmovsqd_ymmm256_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovsqw instruction.<br/>
		/// <br/>
		/// <c>VPMOVSQW xmm1/m32 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 24 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsqw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpmovsqw_xmmm32_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovsqw instruction.<br/>
		/// <br/>
		/// <c>VPMOVSQW xmm1/m32 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 24 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsqw(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpmovsqw_xmmm32_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovsqw instruction.<br/>
		/// <br/>
		/// <c>VPMOVSQW xmm1/m64 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 24 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsqw(AssemblerRegisterXMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpmovsqw_xmmm64_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovsqw instruction.<br/>
		/// <br/>
		/// <c>VPMOVSQW xmm1/m64 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 24 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsqw(AssemblerMemoryOperand dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpmovsqw_xmmm64_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovsqw instruction.<br/>
		/// <br/>
		/// <c>VPMOVSQW xmm1/m128 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 24 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsqw(AssemblerRegisterXMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpmovsqw_xmmm128_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovsqw instruction.<br/>
		/// <br/>
		/// <c>VPMOVSQW xmm1/m128 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 24 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsqw(AssemblerMemoryOperand dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpmovsqw_xmmm128_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovswb instruction.<br/>
		/// <br/>
		/// <c>VPMOVSWB xmm1/m64 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 20 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovswb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpmovswb_xmmm64_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovswb instruction.<br/>
		/// <br/>
		/// <c>VPMOVSWB xmm1/m64 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 20 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovswb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpmovswb_xmmm64_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovswb instruction.<br/>
		/// <br/>
		/// <c>VPMOVSWB xmm1/m128 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 20 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovswb(AssemblerRegisterXMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpmovswb_xmmm128_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovswb instruction.<br/>
		/// <br/>
		/// <c>VPMOVSWB xmm1/m128 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 20 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovswb(AssemblerMemoryOperand dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpmovswb_xmmm128_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovswb instruction.<br/>
		/// <br/>
		/// <c>VPMOVSWB ymm1/m256 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 20 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovswb(AssemblerRegisterYMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpmovswb_ymmm256_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovswb instruction.<br/>
		/// <br/>
		/// <c>VPMOVSWB ymm1/m256 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 20 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovswb(AssemblerMemoryOperand dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpmovswb_ymmm256_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovsxbd instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXBD xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 21 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXBD xmm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 21 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsxbd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovsxbd_xmm_xmmm32 : Code.EVEX_Vpmovsxbd_xmm_k1z_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovsxbd instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXBD ymm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 21 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXBD ymm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 21 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsxbd(AssemblerRegisterYMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovsxbd_ymm_xmmm64 : Code.EVEX_Vpmovsxbd_ymm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovsxbd instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXBD zmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 21 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsxbd(AssemblerRegisterZMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpmovsxbd_zmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovsxbd instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXBD xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 21 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXBD xmm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 21 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsxbd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovsxbd_xmm_xmmm32 : Code.EVEX_Vpmovsxbd_xmm_k1z_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmovsxbd instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXBD ymm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 21 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXBD ymm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 21 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsxbd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovsxbd_ymm_xmmm64 : Code.EVEX_Vpmovsxbd_ymm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmovsxbd instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXBD zmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 21 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsxbd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpmovsxbd_zmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmovsxbq instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXBQ xmm1, xmm2/m16</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 22 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXBQ xmm1 {k1}{z}, xmm2/m16</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 22 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsxbq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovsxbq_xmm_xmmm16 : Code.EVEX_Vpmovsxbq_xmm_k1z_xmmm16;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovsxbq instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXBQ ymm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 22 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXBQ ymm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 22 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsxbq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovsxbq_ymm_xmmm32 : Code.EVEX_Vpmovsxbq_ymm_k1z_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovsxbq instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXBQ zmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 22 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsxbq(AssemblerRegisterZMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpmovsxbq_zmm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovsxbq instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXBQ xmm1, xmm2/m16</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 22 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXBQ xmm1 {k1}{z}, xmm2/m16</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 22 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsxbq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovsxbq_xmm_xmmm16 : Code.EVEX_Vpmovsxbq_xmm_k1z_xmmm16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmovsxbq instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXBQ ymm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 22 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXBQ ymm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 22 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsxbq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovsxbq_ymm_xmmm32 : Code.EVEX_Vpmovsxbq_ymm_k1z_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmovsxbq instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXBQ zmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 22 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsxbq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpmovsxbq_zmm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmovsxbw instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXBW xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 20 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXBW xmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 20 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsxbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovsxbw_xmm_xmmm64 : Code.EVEX_Vpmovsxbw_xmm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovsxbw instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXBW ymm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 20 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXBW ymm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 20 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsxbw(AssemblerRegisterYMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovsxbw_ymm_xmmm128 : Code.EVEX_Vpmovsxbw_ymm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovsxbw instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXBW zmm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 20 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsxbw(AssemblerRegisterZMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpmovsxbw_zmm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovsxbw instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXBW xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 20 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXBW xmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 20 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsxbw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovsxbw_xmm_xmmm64 : Code.EVEX_Vpmovsxbw_xmm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmovsxbw instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXBW ymm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 20 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXBW ymm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 20 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsxbw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovsxbw_ymm_xmmm128 : Code.EVEX_Vpmovsxbw_ymm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmovsxbw instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXBW zmm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 20 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsxbw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpmovsxbw_zmm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmovsxdq instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXDQ xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 25 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXDQ xmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 25 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsxdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovsxdq_xmm_xmmm64 : Code.EVEX_Vpmovsxdq_xmm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovsxdq instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXDQ ymm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 25 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXDQ ymm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 25 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsxdq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovsxdq_ymm_xmmm128 : Code.EVEX_Vpmovsxdq_ymm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovsxdq instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXDQ zmm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 25 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsxdq(AssemblerRegisterZMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpmovsxdq_zmm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovsxdq instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXDQ xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 25 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXDQ xmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 25 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsxdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovsxdq_xmm_xmmm64 : Code.EVEX_Vpmovsxdq_xmm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmovsxdq instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXDQ ymm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 25 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXDQ ymm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 25 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsxdq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovsxdq_ymm_xmmm128 : Code.EVEX_Vpmovsxdq_ymm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmovsxdq instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXDQ zmm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 25 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsxdq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpmovsxdq_zmm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmovsxwd instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXWD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 23 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXWD xmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 23 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsxwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovsxwd_xmm_xmmm64 : Code.EVEX_Vpmovsxwd_xmm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovsxwd instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXWD ymm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 23 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXWD ymm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 23 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsxwd(AssemblerRegisterYMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovsxwd_ymm_xmmm128 : Code.EVEX_Vpmovsxwd_ymm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovsxwd instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXWD zmm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 23 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsxwd(AssemblerRegisterZMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpmovsxwd_zmm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovsxwd instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXWD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 23 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXWD xmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 23 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsxwd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovsxwd_xmm_xmmm64 : Code.EVEX_Vpmovsxwd_xmm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmovsxwd instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXWD ymm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 23 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXWD ymm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 23 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsxwd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovsxwd_ymm_xmmm128 : Code.EVEX_Vpmovsxwd_ymm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmovsxwd instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXWD zmm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 23 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsxwd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpmovsxwd_zmm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmovsxwq instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXWQ xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 24 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXWQ xmm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 24 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsxwq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovsxwq_xmm_xmmm32 : Code.EVEX_Vpmovsxwq_xmm_k1z_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovsxwq instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXWQ ymm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 24 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXWQ ymm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 24 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsxwq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovsxwq_ymm_xmmm64 : Code.EVEX_Vpmovsxwq_ymm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovsxwq instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXWQ zmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 24 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsxwq(AssemblerRegisterZMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpmovsxwq_zmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovsxwq instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXWQ xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 24 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXWQ xmm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 24 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsxwq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovsxwq_xmm_xmmm32 : Code.EVEX_Vpmovsxwq_xmm_k1z_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmovsxwq instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXWQ ymm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 24 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXWQ ymm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 24 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsxwq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovsxwq_ymm_xmmm64 : Code.EVEX_Vpmovsxwq_ymm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmovsxwq instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXWQ zmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 24 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovsxwq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpmovsxwq_zmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmovusdb instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSDB xmm1/m32 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 11 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovusdb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpmovusdb_xmmm32_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovusdb instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSDB xmm1/m32 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 11 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovusdb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpmovusdb_xmmm32_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovusdb instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSDB xmm1/m64 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 11 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovusdb(AssemblerRegisterXMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpmovusdb_xmmm64_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovusdb instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSDB xmm1/m64 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 11 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovusdb(AssemblerMemoryOperand dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpmovusdb_xmmm64_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovusdb instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSDB xmm1/m128 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 11 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovusdb(AssemblerRegisterXMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpmovusdb_xmmm128_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovusdb instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSDB xmm1/m128 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 11 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovusdb(AssemblerMemoryOperand dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpmovusdb_xmmm128_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovusdw instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSDW xmm1/m64 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 13 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovusdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpmovusdw_xmmm64_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovusdw instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSDW xmm1/m64 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 13 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovusdw(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpmovusdw_xmmm64_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovusdw instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSDW xmm1/m128 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 13 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovusdw(AssemblerRegisterXMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpmovusdw_xmmm128_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovusdw instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSDW xmm1/m128 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 13 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovusdw(AssemblerMemoryOperand dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpmovusdw_xmmm128_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovusdw instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSDW ymm1/m256 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 13 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovusdw(AssemblerRegisterYMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpmovusdw_ymmm256_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovusdw instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSDW ymm1/m256 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 13 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovusdw(AssemblerMemoryOperand dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpmovusdw_ymmm256_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovusqb instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSQB xmm1/m16 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovusqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpmovusqb_xmmm16_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovusqb instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSQB xmm1/m16 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovusqb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpmovusqb_xmmm16_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovusqb instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSQB xmm1/m32 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovusqb(AssemblerRegisterXMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpmovusqb_xmmm32_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovusqb instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSQB xmm1/m32 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovusqb(AssemblerMemoryOperand dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpmovusqb_xmmm32_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovusqb instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSQB xmm1/m64 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovusqb(AssemblerRegisterXMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpmovusqb_xmmm64_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovusqb instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSQB xmm1/m64 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovusqb(AssemblerMemoryOperand dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpmovusqb_xmmm64_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovusqd instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSQD xmm1/m64 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovusqd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpmovusqd_xmmm64_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovusqd instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSQD xmm1/m64 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovusqd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpmovusqd_xmmm64_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovusqd instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSQD xmm1/m128 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovusqd(AssemblerRegisterXMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpmovusqd_xmmm128_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovusqd instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSQD xmm1/m128 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovusqd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpmovusqd_xmmm128_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovusqd instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSQD ymm1/m256 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovusqd(AssemblerRegisterYMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpmovusqd_ymmm256_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovusqd instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSQD ymm1/m256 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovusqd(AssemblerMemoryOperand dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpmovusqd_ymmm256_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovusqw instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSQW xmm1/m32 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovusqw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpmovusqw_xmmm32_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovusqw instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSQW xmm1/m32 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovusqw(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpmovusqw_xmmm32_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovusqw instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSQW xmm1/m64 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovusqw(AssemblerRegisterXMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpmovusqw_xmmm64_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovusqw instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSQW xmm1/m64 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovusqw(AssemblerMemoryOperand dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpmovusqw_xmmm64_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovusqw instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSQW xmm1/m128 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovusqw(AssemblerRegisterXMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpmovusqw_xmmm128_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovusqw instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSQW xmm1/m128 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovusqw(AssemblerMemoryOperand dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpmovusqw_xmmm128_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovuswb instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSWB xmm1/m64 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovuswb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpmovuswb_xmmm64_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovuswb instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSWB xmm1/m64 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovuswb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpmovuswb_xmmm64_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovuswb instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSWB xmm1/m128 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovuswb(AssemblerRegisterXMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpmovuswb_xmmm128_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovuswb instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSWB xmm1/m128 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovuswb(AssemblerMemoryOperand dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpmovuswb_xmmm128_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovuswb instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSWB ymm1/m256 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovuswb(AssemblerRegisterYMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpmovuswb_ymmm256_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovuswb instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSWB ymm1/m256 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovuswb(AssemblerMemoryOperand dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpmovuswb_ymmm256_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovw2m instruction.<br/>
		/// <br/>
		/// <c>VPMOVW2M k1, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W1 29 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovw2m(AssemblerRegisterK dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpmovw2m_kr_xmm;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vpmovw2m instruction.<br/>
		/// <br/>
		/// <c>VPMOVW2M k1, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W1 29 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovw2m(AssemblerRegisterK dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpmovw2m_kr_ymm;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vpmovw2m instruction.<br/>
		/// <br/>
		/// <c>VPMOVW2M k1, zmm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W1 29 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovw2m(AssemblerRegisterK dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpmovw2m_kr_zmm;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vpmovwb instruction.<br/>
		/// <br/>
		/// <c>VPMOVWB xmm1/m64 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 30 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovwb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpmovwb_xmmm64_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovwb instruction.<br/>
		/// <br/>
		/// <c>VPMOVWB xmm1/m64 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 30 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovwb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpmovwb_xmmm64_k1z_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovwb instruction.<br/>
		/// <br/>
		/// <c>VPMOVWB xmm1/m128 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 30 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovwb(AssemblerRegisterXMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpmovwb_xmmm128_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovwb instruction.<br/>
		/// <br/>
		/// <c>VPMOVWB xmm1/m128 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 30 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovwb(AssemblerMemoryOperand dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpmovwb_xmmm128_k1z_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovwb instruction.<br/>
		/// <br/>
		/// <c>VPMOVWB ymm1/m256 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 30 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovwb(AssemblerRegisterYMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpmovwb_ymmm256_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovwb instruction.<br/>
		/// <br/>
		/// <c>VPMOVWB ymm1/m256 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 30 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovwb(AssemblerMemoryOperand dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpmovwb_ymmm256_k1z_zmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpmovzxbd instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXBD xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 31 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXBD xmm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 31 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovzxbd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovzxbd_xmm_xmmm32 : Code.EVEX_Vpmovzxbd_xmm_k1z_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovzxbd instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXBD ymm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 31 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXBD ymm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 31 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovzxbd(AssemblerRegisterYMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovzxbd_ymm_xmmm64 : Code.EVEX_Vpmovzxbd_ymm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovzxbd instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXBD zmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 31 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovzxbd(AssemblerRegisterZMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpmovzxbd_zmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovzxbd instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXBD xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 31 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXBD xmm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 31 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovzxbd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovzxbd_xmm_xmmm32 : Code.EVEX_Vpmovzxbd_xmm_k1z_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmovzxbd instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXBD ymm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 31 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXBD ymm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 31 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovzxbd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovzxbd_ymm_xmmm64 : Code.EVEX_Vpmovzxbd_ymm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmovzxbd instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXBD zmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 31 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovzxbd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpmovzxbd_zmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmovzxbq instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXBQ xmm1, xmm2/m16</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 32 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXBQ xmm1 {k1}{z}, xmm2/m16</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 32 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovzxbq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovzxbq_xmm_xmmm16 : Code.EVEX_Vpmovzxbq_xmm_k1z_xmmm16;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovzxbq instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXBQ ymm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 32 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXBQ ymm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 32 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovzxbq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovzxbq_ymm_xmmm32 : Code.EVEX_Vpmovzxbq_ymm_k1z_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovzxbq instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXBQ zmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 32 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovzxbq(AssemblerRegisterZMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpmovzxbq_zmm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovzxbq instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXBQ xmm1, xmm2/m16</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 32 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXBQ xmm1 {k1}{z}, xmm2/m16</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 32 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovzxbq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovzxbq_xmm_xmmm16 : Code.EVEX_Vpmovzxbq_xmm_k1z_xmmm16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmovzxbq instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXBQ ymm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 32 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXBQ ymm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 32 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovzxbq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovzxbq_ymm_xmmm32 : Code.EVEX_Vpmovzxbq_ymm_k1z_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmovzxbq instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXBQ zmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 32 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovzxbq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpmovzxbq_zmm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmovzxbw instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXBW xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 30 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXBW xmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 30 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovzxbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovzxbw_xmm_xmmm64 : Code.EVEX_Vpmovzxbw_xmm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovzxbw instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXBW ymm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 30 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXBW ymm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 30 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovzxbw(AssemblerRegisterYMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovzxbw_ymm_xmmm128 : Code.EVEX_Vpmovzxbw_ymm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovzxbw instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXBW zmm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 30 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovzxbw(AssemblerRegisterZMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpmovzxbw_zmm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovzxbw instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXBW xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 30 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXBW xmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 30 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovzxbw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovzxbw_xmm_xmmm64 : Code.EVEX_Vpmovzxbw_xmm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmovzxbw instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXBW ymm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 30 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXBW ymm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 30 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovzxbw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovzxbw_ymm_xmmm128 : Code.EVEX_Vpmovzxbw_ymm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmovzxbw instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXBW zmm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 30 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovzxbw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpmovzxbw_zmm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmovzxdq instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXDQ xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 35 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXDQ xmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 35 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovzxdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovzxdq_xmm_xmmm64 : Code.EVEX_Vpmovzxdq_xmm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovzxdq instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXDQ ymm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 35 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXDQ ymm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 35 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovzxdq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovzxdq_ymm_xmmm128 : Code.EVEX_Vpmovzxdq_ymm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovzxdq instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXDQ zmm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 35 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovzxdq(AssemblerRegisterZMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpmovzxdq_zmm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovzxdq instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXDQ xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 35 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXDQ xmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 35 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovzxdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovzxdq_xmm_xmmm64 : Code.EVEX_Vpmovzxdq_xmm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmovzxdq instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXDQ ymm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 35 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXDQ ymm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 35 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovzxdq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovzxdq_ymm_xmmm128 : Code.EVEX_Vpmovzxdq_ymm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmovzxdq instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXDQ zmm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 35 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovzxdq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpmovzxdq_zmm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmovzxwd instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXWD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 33 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXWD xmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 33 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovzxwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovzxwd_xmm_xmmm64 : Code.EVEX_Vpmovzxwd_xmm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovzxwd instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXWD ymm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 33 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXWD ymm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 33 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovzxwd(AssemblerRegisterYMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovzxwd_ymm_xmmm128 : Code.EVEX_Vpmovzxwd_ymm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovzxwd instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXWD zmm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 33 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovzxwd(AssemblerRegisterZMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpmovzxwd_zmm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovzxwd instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXWD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 33 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXWD xmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 33 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovzxwd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovzxwd_xmm_xmmm64 : Code.EVEX_Vpmovzxwd_xmm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmovzxwd instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXWD ymm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 33 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXWD ymm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 33 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovzxwd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovzxwd_ymm_xmmm128 : Code.EVEX_Vpmovzxwd_ymm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmovzxwd instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXWD zmm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 33 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovzxwd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpmovzxwd_zmm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmovzxwq instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXWQ xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 34 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXWQ xmm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 34 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovzxwq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovzxwq_xmm_xmmm32 : Code.EVEX_Vpmovzxwq_xmm_k1z_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovzxwq instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXWQ ymm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 34 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXWQ ymm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 34 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovzxwq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovzxwq_ymm_xmmm64 : Code.EVEX_Vpmovzxwq_ymm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovzxwq instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXWQ zmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 34 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovzxwq(AssemblerRegisterZMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpmovzxwq_zmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpmovzxwq instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXWQ xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 34 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXWQ xmm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 34 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovzxwq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovzxwq_xmm_xmmm32 : Code.EVEX_Vpmovzxwq_xmm_k1z_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmovzxwq instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXWQ ymm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 34 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXWQ ymm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 34 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovzxwq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmovzxwq_ymm_xmmm64 : Code.EVEX_Vpmovzxwq_ymm_k1z_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmovzxwq instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXWQ zmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 34 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmovzxwq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpmovzxwq_zmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmuldq instruction.<br/>
		/// <br/>
		/// <c>VPMULDQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 28 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmuldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmuldq_xmm_xmm_xmmm128 : Code.EVEX_Vpmuldq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmuldq instruction.<br/>
		/// <br/>
		/// <c>VPMULDQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 28 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmuldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmuldq_ymm_ymm_ymmm256 : Code.EVEX_Vpmuldq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmuldq instruction.<br/>
		/// <br/>
		/// <c>VPMULDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmuldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpmuldq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmuldq instruction.<br/>
		/// <br/>
		/// <c>VPMULDQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 28 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmuldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpmuldq_xmm_k1z_xmm_xmmm128b64;
			} else op = PreferVex ? Code.VEX_Vpmuldq_xmm_xmm_xmmm128 : Code.EVEX_Vpmuldq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpmuldq instruction.<br/>
		/// <br/>
		/// <c>VPMULDQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 28 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmuldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpmuldq_ymm_k1z_ymm_ymmm256b64;
			} else op = PreferVex ? Code.VEX_Vpmuldq_ymm_ymm_ymmm256 : Code.EVEX_Vpmuldq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpmuldq instruction.<br/>
		/// <br/>
		/// <c>VPMULDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmuldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpmuldq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpmulhrsw instruction.<br/>
		/// <br/>
		/// <c>VPMULHRSW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 0B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULHRSW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 0B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmulhrsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmulhrsw_xmm_xmm_xmmm128 : Code.EVEX_Vpmulhrsw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmulhrsw instruction.<br/>
		/// <br/>
		/// <c>VPMULHRSW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 0B /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULHRSW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 0B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmulhrsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmulhrsw_ymm_ymm_ymmm256 : Code.EVEX_Vpmulhrsw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmulhrsw instruction.<br/>
		/// <br/>
		/// <c>VPMULHRSW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 0B /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmulhrsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpmulhrsw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmulhrsw instruction.<br/>
		/// <br/>
		/// <c>VPMULHRSW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 0B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULHRSW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 0B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmulhrsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmulhrsw_xmm_xmm_xmmm128 : Code.EVEX_Vpmulhrsw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmulhrsw instruction.<br/>
		/// <br/>
		/// <c>VPMULHRSW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 0B /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULHRSW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 0B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmulhrsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmulhrsw_ymm_ymm_ymmm256 : Code.EVEX_Vpmulhrsw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmulhrsw instruction.<br/>
		/// <br/>
		/// <c>VPMULHRSW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 0B /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmulhrsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpmulhrsw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmulhuw instruction.<br/>
		/// <br/>
		/// <c>VPMULHUW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG E4 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULHUW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG E4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmulhuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmulhuw_xmm_xmm_xmmm128 : Code.EVEX_Vpmulhuw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmulhuw instruction.<br/>
		/// <br/>
		/// <c>VPMULHUW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG E4 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULHUW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG E4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmulhuw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmulhuw_ymm_ymm_ymmm256 : Code.EVEX_Vpmulhuw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmulhuw instruction.<br/>
		/// <br/>
		/// <c>VPMULHUW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG E4 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmulhuw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpmulhuw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmulhuw instruction.<br/>
		/// <br/>
		/// <c>VPMULHUW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG E4 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULHUW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG E4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmulhuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmulhuw_xmm_xmm_xmmm128 : Code.EVEX_Vpmulhuw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmulhuw instruction.<br/>
		/// <br/>
		/// <c>VPMULHUW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG E4 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULHUW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG E4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmulhuw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmulhuw_ymm_ymm_ymmm256 : Code.EVEX_Vpmulhuw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmulhuw instruction.<br/>
		/// <br/>
		/// <c>VPMULHUW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG E4 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmulhuw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpmulhuw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmulhw instruction.<br/>
		/// <br/>
		/// <c>VPMULHW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG E5 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULHW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG E5 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmulhw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmulhw_xmm_xmm_xmmm128 : Code.EVEX_Vpmulhw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmulhw instruction.<br/>
		/// <br/>
		/// <c>VPMULHW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG E5 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULHW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG E5 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmulhw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmulhw_ymm_ymm_ymmm256 : Code.EVEX_Vpmulhw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmulhw instruction.<br/>
		/// <br/>
		/// <c>VPMULHW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG E5 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmulhw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpmulhw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmulhw instruction.<br/>
		/// <br/>
		/// <c>VPMULHW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG E5 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULHW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG E5 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmulhw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmulhw_xmm_xmm_xmmm128 : Code.EVEX_Vpmulhw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmulhw instruction.<br/>
		/// <br/>
		/// <c>VPMULHW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG E5 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULHW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG E5 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmulhw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmulhw_ymm_ymm_ymmm256 : Code.EVEX_Vpmulhw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmulhw instruction.<br/>
		/// <br/>
		/// <c>VPMULHW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG E5 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmulhw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpmulhw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmulld instruction.<br/>
		/// <br/>
		/// <c>VPMULLD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 40 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULLD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 40 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmulld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmulld_xmm_xmm_xmmm128 : Code.EVEX_Vpmulld_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmulld instruction.<br/>
		/// <br/>
		/// <c>VPMULLD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 40 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULLD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 40 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmulld(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmulld_ymm_ymm_ymmm256 : Code.EVEX_Vpmulld_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmulld instruction.<br/>
		/// <br/>
		/// <c>VPMULLD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 40 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmulld(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpmulld_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmulld instruction.<br/>
		/// <br/>
		/// <c>VPMULLD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 40 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULLD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 40 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmulld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpmulld_xmm_k1z_xmm_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vpmulld_xmm_xmm_xmmm128 : Code.EVEX_Vpmulld_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpmulld instruction.<br/>
		/// <br/>
		/// <c>VPMULLD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 40 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULLD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 40 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmulld(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpmulld_ymm_k1z_ymm_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vpmulld_ymm_ymm_ymmm256 : Code.EVEX_Vpmulld_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpmulld instruction.<br/>
		/// <br/>
		/// <c>VPMULLD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 40 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmulld(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpmulld_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpmullq instruction.<br/>
		/// <br/>
		/// <c>VPMULLQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 40 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmullq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpmullq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmullq instruction.<br/>
		/// <br/>
		/// <c>VPMULLQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 40 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmullq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpmullq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmullq instruction.<br/>
		/// <br/>
		/// <c>VPMULLQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 40 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmullq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpmullq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmullq instruction.<br/>
		/// <br/>
		/// <c>VPMULLQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 40 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmullq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpmullq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpmullq instruction.<br/>
		/// <br/>
		/// <c>VPMULLQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 40 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmullq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpmullq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpmullq instruction.<br/>
		/// <br/>
		/// <c>VPMULLQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 40 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmullq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpmullq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpmullw instruction.<br/>
		/// <br/>
		/// <c>VPMULLW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG D5 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULLW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG D5 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmullw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmullw_xmm_xmm_xmmm128 : Code.EVEX_Vpmullw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmullw instruction.<br/>
		/// <br/>
		/// <c>VPMULLW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG D5 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULLW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG D5 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmullw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmullw_ymm_ymm_ymmm256 : Code.EVEX_Vpmullw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmullw instruction.<br/>
		/// <br/>
		/// <c>VPMULLW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG D5 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmullw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpmullw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmullw instruction.<br/>
		/// <br/>
		/// <c>VPMULLW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG D5 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULLW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG D5 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmullw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmullw_xmm_xmm_xmmm128 : Code.EVEX_Vpmullw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmullw instruction.<br/>
		/// <br/>
		/// <c>VPMULLW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG D5 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULLW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG D5 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmullw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmullw_ymm_ymm_ymmm256 : Code.EVEX_Vpmullw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmullw instruction.<br/>
		/// <br/>
		/// <c>VPMULLW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG D5 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmullw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpmullw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpmultishiftqb instruction.<br/>
		/// <br/>
		/// <c>VPMULTISHIFTQB xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 83 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmultishiftqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpmultishiftqb_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmultishiftqb instruction.<br/>
		/// <br/>
		/// <c>VPMULTISHIFTQB ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 83 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmultishiftqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpmultishiftqb_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmultishiftqb instruction.<br/>
		/// <br/>
		/// <c>VPMULTISHIFTQB zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 83 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmultishiftqb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpmultishiftqb_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmultishiftqb instruction.<br/>
		/// <br/>
		/// <c>VPMULTISHIFTQB xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 83 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmultishiftqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpmultishiftqb_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpmultishiftqb instruction.<br/>
		/// <br/>
		/// <c>VPMULTISHIFTQB ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 83 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmultishiftqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpmultishiftqb_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpmultishiftqb instruction.<br/>
		/// <br/>
		/// <c>VPMULTISHIFTQB zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 83 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmultishiftqb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpmultishiftqb_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpmuludq instruction.<br/>
		/// <br/>
		/// <c>VPMULUDQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG F4 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULUDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 F4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmuludq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmuludq_xmm_xmm_xmmm128 : Code.EVEX_Vpmuludq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmuludq instruction.<br/>
		/// <br/>
		/// <c>VPMULUDQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG F4 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULUDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 F4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmuludq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpmuludq_ymm_ymm_ymmm256 : Code.EVEX_Vpmuludq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmuludq instruction.<br/>
		/// <br/>
		/// <c>VPMULUDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 F4 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmuludq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpmuludq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpmuludq instruction.<br/>
		/// <br/>
		/// <c>VPMULUDQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG F4 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULUDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 F4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmuludq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpmuludq_xmm_k1z_xmm_xmmm128b64;
			} else op = PreferVex ? Code.VEX_Vpmuludq_xmm_xmm_xmmm128 : Code.EVEX_Vpmuludq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpmuludq instruction.<br/>
		/// <br/>
		/// <c>VPMULUDQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG F4 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULUDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 F4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmuludq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpmuludq_ymm_k1z_ymm_ymmm256b64;
			} else op = PreferVex ? Code.VEX_Vpmuludq_ymm_ymm_ymmm256 : Code.EVEX_Vpmuludq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpmuludq instruction.<br/>
		/// <br/>
		/// <c>VPMULUDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 F4 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpmuludq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpmuludq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpopcntb instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTB xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BITALG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpopcntb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpopcntb_xmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpopcntb instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTB ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BITALG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpopcntb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpopcntb_ymm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpopcntb instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTB zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512_BITALG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpopcntb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpopcntb_zmm_k1z_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpopcntb instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTB xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BITALG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpopcntb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpopcntb_xmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpopcntb instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTB ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BITALG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpopcntb(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpopcntb_ymm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpopcntb instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTB zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512_BITALG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpopcntb(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpopcntb_zmm_k1z_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpopcntd instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTD xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VPOPCNTDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpopcntd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpopcntd_xmm_k1z_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpopcntd instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTD ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VPOPCNTDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpopcntd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpopcntd_ymm_k1z_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpopcntd instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTD zmm1 {k1}{z}, zmm2/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VPOPCNTDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpopcntd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpopcntd_zmm_k1z_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpopcntd instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTD xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VPOPCNTDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpopcntd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpopcntd_xmm_k1z_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vpopcntd instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTD ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VPOPCNTDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpopcntd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpopcntd_ymm_k1z_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vpopcntd instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTD zmm1 {k1}{z}, zmm2/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VPOPCNTDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpopcntd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpopcntd_zmm_k1z_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vpopcntq instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VPOPCNTDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpopcntq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpopcntq_xmm_k1z_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpopcntq instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTQ ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VPOPCNTDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpopcntq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpopcntq_ymm_k1z_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpopcntq instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTQ zmm1 {k1}{z}, zmm2/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VPOPCNTDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpopcntq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpopcntq_zmm_k1z_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpopcntq instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VPOPCNTDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpopcntq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpopcntq_xmm_k1z_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vpopcntq instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTQ ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VPOPCNTDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpopcntq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpopcntq_ymm_k1z_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vpopcntq instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTQ zmm1 {k1}{z}, zmm2/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VPOPCNTDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpopcntq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpopcntq_zmm_k1z_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vpopcntw instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTW xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BITALG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpopcntw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpopcntw_xmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpopcntw instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTW ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BITALG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpopcntw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpopcntw_ymm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpopcntw instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTW zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512_BITALG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpopcntw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpopcntw_zmm_k1z_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vpopcntw instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTW xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BITALG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpopcntw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpopcntw_xmm_k1z_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpopcntw instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTW ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BITALG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpopcntw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpopcntw_ymm_k1z_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpopcntw instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTW zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512_BITALG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpopcntw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vpopcntw_zmm_k1z_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpor instruction.<br/>
		/// <br/>
		/// <c>VPOR xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG EB /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpor(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.VEX_Vpor_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vpor instruction.<br/>
		/// <br/>
		/// <c>VPOR ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG EB /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpor(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.VEX_Vpor_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vpor instruction.<br/>
		/// <br/>
		/// <c>VPOR xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG EB /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpor(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vpor_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpor instruction.<br/>
		/// <br/>
		/// <c>VPOR ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG EB /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpor(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vpor_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpord instruction.<br/>
		/// <br/>
		/// <c>VPORD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 EB /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpord(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpord_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpord instruction.<br/>
		/// <br/>
		/// <c>VPORD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 EB /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpord(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpord_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpord instruction.<br/>
		/// <br/>
		/// <c>VPORD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 EB /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpord(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpord_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpord instruction.<br/>
		/// <br/>
		/// <c>VPORD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 EB /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpord(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpord_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpord instruction.<br/>
		/// <br/>
		/// <c>VPORD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 EB /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpord(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpord_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpord instruction.<br/>
		/// <br/>
		/// <c>VPORD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 EB /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpord(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpord_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vporq instruction.<br/>
		/// <br/>
		/// <c>VPORQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 EB /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vporq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vporq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vporq instruction.<br/>
		/// <br/>
		/// <c>VPORQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 EB /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vporq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vporq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vporq instruction.<br/>
		/// <br/>
		/// <c>VPORQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 EB /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vporq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vporq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vporq instruction.<br/>
		/// <br/>
		/// <c>VPORQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 EB /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vporq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vporq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vporq instruction.<br/>
		/// <br/>
		/// <c>VPORQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 EB /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vporq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vporq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vporq instruction.<br/>
		/// <br/>
		/// <c>VPORQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 EB /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vporq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vporq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpperm instruction.<br/>
		/// <br/>
		/// <c>VPPERM xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 A3 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpperm(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.XOP_Vpperm_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3));
		}
		/// <summary>vpperm instruction.<br/>
		/// <br/>
		/// <c>VPPERM xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 A3 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpperm(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3) {
			Code op;
			op = Code.XOP_Vpperm_xmm_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), src3));
		}
		/// <summary>vpperm instruction.<br/>
		/// <br/>
		/// <c>VPPERM xmm1, xmm2, xmm3, xmm4/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W1 A3 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpperm(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3) {
			Code op;
			op = Code.XOP_Vpperm_xmm_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2, src3.ToMemoryOperand(Bitness)));
		}
		/// <summary>vprold instruction.<br/>
		/// <br/>
		/// <c>VPROLD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprold(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vprold_xmm_k1z_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vprold instruction.<br/>
		/// <br/>
		/// <c>VPROLD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprold(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vprold_ymm_k1z_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vprold instruction.<br/>
		/// <br/>
		/// <c>VPROLD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprold(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vprold_zmm_k1z_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vprold instruction.<br/>
		/// <br/>
		/// <c>VPROLD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprold(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vprold_xmm_k1z_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vprold instruction.<br/>
		/// <br/>
		/// <c>VPROLD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprold(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vprold_ymm_k1z_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vprold instruction.<br/>
		/// <br/>
		/// <c>VPROLD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprold(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vprold_zmm_k1z_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vprold instruction.<br/>
		/// <br/>
		/// <c>VPROLD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprold(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vprold_xmm_k1z_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vprold instruction.<br/>
		/// <br/>
		/// <c>VPROLD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprold(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vprold_ymm_k1z_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vprold instruction.<br/>
		/// <br/>
		/// <c>VPROLD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprold(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vprold_zmm_k1z_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vprold instruction.<br/>
		/// <br/>
		/// <c>VPROLD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprold(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vprold_xmm_k1z_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vprold instruction.<br/>
		/// <br/>
		/// <c>VPROLD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprold(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vprold_ymm_k1z_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vprold instruction.<br/>
		/// <br/>
		/// <c>VPROLD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprold(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vprold_zmm_k1z_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vprolq instruction.<br/>
		/// <br/>
		/// <c>VPROLQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprolq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vprolq_xmm_k1z_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vprolq instruction.<br/>
		/// <br/>
		/// <c>VPROLQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprolq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vprolq_ymm_k1z_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vprolq instruction.<br/>
		/// <br/>
		/// <c>VPROLQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprolq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vprolq_zmm_k1z_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vprolq instruction.<br/>
		/// <br/>
		/// <c>VPROLQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprolq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vprolq_xmm_k1z_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vprolq instruction.<br/>
		/// <br/>
		/// <c>VPROLQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprolq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vprolq_ymm_k1z_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vprolq instruction.<br/>
		/// <br/>
		/// <c>VPROLQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprolq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vprolq_zmm_k1z_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vprolq instruction.<br/>
		/// <br/>
		/// <c>VPROLQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprolq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vprolq_xmm_k1z_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vprolq instruction.<br/>
		/// <br/>
		/// <c>VPROLQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprolq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vprolq_ymm_k1z_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vprolq instruction.<br/>
		/// <br/>
		/// <c>VPROLQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprolq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vprolq_zmm_k1z_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vprolq instruction.<br/>
		/// <br/>
		/// <c>VPROLQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprolq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vprolq_xmm_k1z_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vprolq instruction.<br/>
		/// <br/>
		/// <c>VPROLQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprolq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vprolq_ymm_k1z_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vprolq instruction.<br/>
		/// <br/>
		/// <c>VPROLQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprolq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vprolq_zmm_k1z_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vprolvd instruction.<br/>
		/// <br/>
		/// <c>VPROLVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprolvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vprolvd_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vprolvd instruction.<br/>
		/// <br/>
		/// <c>VPROLVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprolvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vprolvd_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vprolvd instruction.<br/>
		/// <br/>
		/// <c>VPROLVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprolvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vprolvd_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vprolvd instruction.<br/>
		/// <br/>
		/// <c>VPROLVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprolvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vprolvd_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vprolvd instruction.<br/>
		/// <br/>
		/// <c>VPROLVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprolvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vprolvd_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vprolvd instruction.<br/>
		/// <br/>
		/// <c>VPROLVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprolvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vprolvd_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vprolvq instruction.<br/>
		/// <br/>
		/// <c>VPROLVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprolvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vprolvq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vprolvq instruction.<br/>
		/// <br/>
		/// <c>VPROLVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprolvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vprolvq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vprolvq instruction.<br/>
		/// <br/>
		/// <c>VPROLVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprolvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vprolvq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vprolvq instruction.<br/>
		/// <br/>
		/// <c>VPROLVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprolvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vprolvq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vprolvq instruction.<br/>
		/// <br/>
		/// <c>VPROLVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprolvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vprolvq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vprolvq instruction.<br/>
		/// <br/>
		/// <c>VPROLVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprolvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vprolvq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vprord instruction.<br/>
		/// <br/>
		/// <c>VPRORD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprord(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vprord_xmm_k1z_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vprord instruction.<br/>
		/// <br/>
		/// <c>VPRORD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprord(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vprord_ymm_k1z_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vprord instruction.<br/>
		/// <br/>
		/// <c>VPRORD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprord(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vprord_zmm_k1z_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vprord instruction.<br/>
		/// <br/>
		/// <c>VPRORD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprord(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vprord_xmm_k1z_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vprord instruction.<br/>
		/// <br/>
		/// <c>VPRORD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprord(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vprord_ymm_k1z_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vprord instruction.<br/>
		/// <br/>
		/// <c>VPRORD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprord(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vprord_zmm_k1z_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vprord instruction.<br/>
		/// <br/>
		/// <c>VPRORD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprord(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vprord_xmm_k1z_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vprord instruction.<br/>
		/// <br/>
		/// <c>VPRORD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprord(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vprord_ymm_k1z_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vprord instruction.<br/>
		/// <br/>
		/// <c>VPRORD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprord(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vprord_zmm_k1z_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vprord instruction.<br/>
		/// <br/>
		/// <c>VPRORD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprord(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vprord_xmm_k1z_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vprord instruction.<br/>
		/// <br/>
		/// <c>VPRORD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprord(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vprord_ymm_k1z_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vprord instruction.<br/>
		/// <br/>
		/// <c>VPRORD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprord(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vprord_zmm_k1z_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vprorq instruction.<br/>
		/// <br/>
		/// <c>VPRORQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprorq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vprorq_xmm_k1z_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vprorq instruction.<br/>
		/// <br/>
		/// <c>VPRORQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprorq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vprorq_ymm_k1z_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vprorq instruction.<br/>
		/// <br/>
		/// <c>VPRORQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprorq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vprorq_zmm_k1z_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vprorq instruction.<br/>
		/// <br/>
		/// <c>VPRORQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprorq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vprorq_xmm_k1z_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vprorq instruction.<br/>
		/// <br/>
		/// <c>VPRORQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprorq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vprorq_ymm_k1z_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vprorq instruction.<br/>
		/// <br/>
		/// <c>VPRORQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprorq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vprorq_zmm_k1z_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vprorq instruction.<br/>
		/// <br/>
		/// <c>VPRORQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprorq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vprorq_xmm_k1z_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vprorq instruction.<br/>
		/// <br/>
		/// <c>VPRORQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprorq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vprorq_ymm_k1z_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vprorq instruction.<br/>
		/// <br/>
		/// <c>VPRORQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprorq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vprorq_zmm_k1z_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vprorq instruction.<br/>
		/// <br/>
		/// <c>VPRORQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprorq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vprorq_xmm_k1z_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vprorq instruction.<br/>
		/// <br/>
		/// <c>VPRORQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprorq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vprorq_ymm_k1z_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vprorq instruction.<br/>
		/// <br/>
		/// <c>VPRORQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprorq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vprorq_zmm_k1z_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vprorvd instruction.<br/>
		/// <br/>
		/// <c>VPRORVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprorvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vprorvd_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vprorvd instruction.<br/>
		/// <br/>
		/// <c>VPRORVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprorvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vprorvd_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vprorvd instruction.<br/>
		/// <br/>
		/// <c>VPRORVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprorvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vprorvd_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vprorvd instruction.<br/>
		/// <br/>
		/// <c>VPRORVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprorvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vprorvd_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vprorvd instruction.<br/>
		/// <br/>
		/// <c>VPRORVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprorvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vprorvd_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vprorvd instruction.<br/>
		/// <br/>
		/// <c>VPRORVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprorvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vprorvd_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vprorvq instruction.<br/>
		/// <br/>
		/// <c>VPRORVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprorvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vprorvq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vprorvq instruction.<br/>
		/// <br/>
		/// <c>VPRORVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprorvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vprorvq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vprorvq instruction.<br/>
		/// <br/>
		/// <c>VPRORVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprorvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vprorvq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vprorvq instruction.<br/>
		/// <br/>
		/// <c>VPRORVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprorvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vprorvq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vprorvq instruction.<br/>
		/// <br/>
		/// <c>VPRORVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprorvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vprorvq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vprorvq instruction.<br/>
		/// <br/>
		/// <c>VPRORVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprorvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vprorvq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vprotb instruction.<br/>
		/// <br/>
		/// <c>VPROTB xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 90 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprotb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.XOP_Vprotb_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vprotb instruction.<br/>
		/// <br/>
		/// <c>VPROTB xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 90 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprotb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.XOP_Vprotb_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), src2));
		}
		/// <summary>vprotb instruction.<br/>
		/// <br/>
		/// <c>VPROTB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W1 90 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprotb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.XOP_Vprotb_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vprotb instruction.<br/>
		/// <br/>
		/// <c>VPROTB xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 C0 /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprotb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.XOP_Vprotb_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>vprotb instruction.<br/>
		/// <br/>
		/// <c>VPROTB xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 C0 /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprotb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.XOP_Vprotb_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vprotb instruction.<br/>
		/// <br/>
		/// <c>VPROTB xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 C0 /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprotb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.XOP_Vprotb_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>vprotb instruction.<br/>
		/// <br/>
		/// <c>VPROTB xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 C0 /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprotb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.XOP_Vprotb_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vprotd instruction.<br/>
		/// <br/>
		/// <c>VPROTD xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 92 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprotd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.XOP_Vprotd_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vprotd instruction.<br/>
		/// <br/>
		/// <c>VPROTD xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 92 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprotd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.XOP_Vprotd_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), src2));
		}
		/// <summary>vprotd instruction.<br/>
		/// <br/>
		/// <c>VPROTD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W1 92 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprotd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.XOP_Vprotd_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vprotd instruction.<br/>
		/// <br/>
		/// <c>VPROTD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprotd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.XOP_Vprotd_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>vprotd instruction.<br/>
		/// <br/>
		/// <c>VPROTD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprotd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.XOP_Vprotd_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vprotd instruction.<br/>
		/// <br/>
		/// <c>VPROTD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprotd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.XOP_Vprotd_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>vprotd instruction.<br/>
		/// <br/>
		/// <c>VPROTD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprotd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.XOP_Vprotd_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vprotq instruction.<br/>
		/// <br/>
		/// <c>VPROTQ xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 93 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprotq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.XOP_Vprotq_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vprotq instruction.<br/>
		/// <br/>
		/// <c>VPROTQ xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 93 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprotq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.XOP_Vprotq_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), src2));
		}
		/// <summary>vprotq instruction.<br/>
		/// <br/>
		/// <c>VPROTQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W1 93 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprotq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.XOP_Vprotq_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vprotq instruction.<br/>
		/// <br/>
		/// <c>VPROTQ xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 C3 /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprotq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.XOP_Vprotq_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>vprotq instruction.<br/>
		/// <br/>
		/// <c>VPROTQ xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 C3 /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprotq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.XOP_Vprotq_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vprotq instruction.<br/>
		/// <br/>
		/// <c>VPROTQ xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 C3 /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprotq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.XOP_Vprotq_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>vprotq instruction.<br/>
		/// <br/>
		/// <c>VPROTQ xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 C3 /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprotq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.XOP_Vprotq_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vprotw instruction.<br/>
		/// <br/>
		/// <c>VPROTW xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 91 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprotw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.XOP_Vprotw_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vprotw instruction.<br/>
		/// <br/>
		/// <c>VPROTW xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 91 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprotw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.XOP_Vprotw_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), src2));
		}
		/// <summary>vprotw instruction.<br/>
		/// <br/>
		/// <c>VPROTW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W1 91 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprotw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.XOP_Vprotw_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vprotw instruction.<br/>
		/// <br/>
		/// <c>VPROTW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 C1 /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprotw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.XOP_Vprotw_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>vprotw instruction.<br/>
		/// <br/>
		/// <c>VPROTW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 C1 /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprotw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.XOP_Vprotw_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vprotw instruction.<br/>
		/// <br/>
		/// <c>VPROTW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 C1 /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprotw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.XOP_Vprotw_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>vprotw instruction.<br/>
		/// <br/>
		/// <c>VPROTW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 C1 /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vprotw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.XOP_Vprotw_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vpsadbw instruction.<br/>
		/// <br/>
		/// <c>VPSADBW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG F6 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSADBW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG F6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsadbw_xmm_xmm_xmmm128 : Code.EVEX_Vpsadbw_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vpsadbw instruction.<br/>
		/// <br/>
		/// <c>VPSADBW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG F6 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSADBW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG F6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsadbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsadbw_ymm_ymm_ymmm256 : Code.EVEX_Vpsadbw_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vpsadbw instruction.<br/>
		/// <br/>
		/// <c>VPSADBW zmm1, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG F6 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsadbw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpsadbw_zmm_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vpsadbw instruction.<br/>
		/// <br/>
		/// <c>VPSADBW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG F6 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSADBW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG F6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsadbw_xmm_xmm_xmmm128 : Code.EVEX_Vpsadbw_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpsadbw instruction.<br/>
		/// <br/>
		/// <c>VPSADBW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG F6 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSADBW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG F6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsadbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsadbw_ymm_ymm_ymmm256 : Code.EVEX_Vpsadbw_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpsadbw instruction.<br/>
		/// <br/>
		/// <c>VPSADBW zmm1, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG F6 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsadbw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpsadbw_zmm_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpscatterdd instruction.<br/>
		/// <br/>
		/// <c>VPSCATTERDD vm32x {k1}, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 A0 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpscatterdd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpscatterdd_vm32x_k1_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpscatterdd instruction.<br/>
		/// <br/>
		/// <c>VPSCATTERDD vm32y {k1}, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 A0 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpscatterdd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpscatterdd_vm32y_k1_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpscatterdd instruction.<br/>
		/// <br/>
		/// <c>VPSCATTERDD vm32z {k1}, zmm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 A0 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpscatterdd(AssemblerMemoryOperand dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpscatterdd_vm32z_k1_zmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpscatterdq instruction.<br/>
		/// <br/>
		/// <c>VPSCATTERDQ vm32x {k1}, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 A0 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpscatterdq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpscatterdq_vm32x_k1_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpscatterdq instruction.<br/>
		/// <br/>
		/// <c>VPSCATTERDQ vm32x {k1}, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 A0 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpscatterdq(AssemblerMemoryOperand dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpscatterdq_vm32x_k1_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpscatterdq instruction.<br/>
		/// <br/>
		/// <c>VPSCATTERDQ vm32y {k1}, zmm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 A0 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpscatterdq(AssemblerMemoryOperand dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpscatterdq_vm32y_k1_zmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpscatterqd instruction.<br/>
		/// <br/>
		/// <c>VPSCATTERQD vm64x {k1}, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 A1 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSCATTERQD vm64y {k1}, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 A1 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpscatterqd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			if (dst.Index.IsXMM()) {
				op = Code.EVEX_Vpscatterqd_vm64x_k1_xmm;
			} else if (dst.Index.IsYMM()) {
				op = Code.EVEX_Vpscatterqd_vm64y_k1_xmm;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Vpscatterqd, dst, src);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpscatterqd instruction.<br/>
		/// <br/>
		/// <c>VPSCATTERQD vm64z {k1}, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 A1 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpscatterqd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpscatterqd_vm64z_k1_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpscatterqq instruction.<br/>
		/// <br/>
		/// <c>VPSCATTERQQ vm64x {k1}, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 A1 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpscatterqq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vpscatterqq_vm64x_k1_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpscatterqq instruction.<br/>
		/// <br/>
		/// <c>VPSCATTERQQ vm64y {k1}, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 A1 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpscatterqq(AssemblerMemoryOperand dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vpscatterqq_vm64y_k1_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpscatterqq instruction.<br/>
		/// <br/>
		/// <c>VPSCATTERQQ vm64z {k1}, zmm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 A1 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpscatterqq(AssemblerMemoryOperand dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vpscatterqq_vm64z_k1_zmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vpshab instruction.<br/>
		/// <br/>
		/// <c>VPSHAB xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 98 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshab(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.XOP_Vpshab_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vpshab instruction.<br/>
		/// <br/>
		/// <c>VPSHAB xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 98 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshab(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.XOP_Vpshab_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), src2));
		}
		/// <summary>vpshab instruction.<br/>
		/// <br/>
		/// <c>VPSHAB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W1 98 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshab(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.XOP_Vpshab_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpshad instruction.<br/>
		/// <br/>
		/// <c>VPSHAD xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 9A /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshad(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.XOP_Vpshad_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vpshad instruction.<br/>
		/// <br/>
		/// <c>VPSHAD xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 9A /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshad(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.XOP_Vpshad_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), src2));
		}
		/// <summary>vpshad instruction.<br/>
		/// <br/>
		/// <c>VPSHAD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W1 9A /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshad(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.XOP_Vpshad_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpshaq instruction.<br/>
		/// <br/>
		/// <c>VPSHAQ xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 9B /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshaq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.XOP_Vpshaq_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vpshaq instruction.<br/>
		/// <br/>
		/// <c>VPSHAQ xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 9B /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshaq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.XOP_Vpshaq_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), src2));
		}
		/// <summary>vpshaq instruction.<br/>
		/// <br/>
		/// <c>VPSHAQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W1 9B /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshaq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.XOP_Vpshaq_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpshaw instruction.<br/>
		/// <br/>
		/// <c>VPSHAW xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 99 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshaw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.XOP_Vpshaw_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vpshaw instruction.<br/>
		/// <br/>
		/// <c>VPSHAW xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 99 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshaw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.XOP_Vpshaw_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), src2));
		}
		/// <summary>vpshaw instruction.<br/>
		/// <br/>
		/// <c>VPSHAW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W1 99 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshaw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.XOP_Vpshaw_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpshlb instruction.<br/>
		/// <br/>
		/// <c>VPSHLB xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 94 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshlb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.XOP_Vpshlb_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vpshlb instruction.<br/>
		/// <br/>
		/// <c>VPSHLB xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 94 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshlb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.XOP_Vpshlb_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), src2));
		}
		/// <summary>vpshlb instruction.<br/>
		/// <br/>
		/// <c>VPSHLB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W1 94 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshlb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.XOP_Vpshlb_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpshld instruction.<br/>
		/// <br/>
		/// <c>VPSHLD xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 96 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.XOP_Vpshld_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vpshld instruction.<br/>
		/// <br/>
		/// <c>VPSHLD xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 96 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshld(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.XOP_Vpshld_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), src2));
		}
		/// <summary>vpshld instruction.<br/>
		/// <br/>
		/// <c>VPSHLD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W1 96 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.XOP_Vpshld_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpshldd instruction.<br/>
		/// <br/>
		/// <c>VPSHLDD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpshldd_xmm_k1z_xmm_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpshldd instruction.<br/>
		/// <br/>
		/// <c>VPSHLDD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpshldd_ymm_k1z_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpshldd instruction.<br/>
		/// <br/>
		/// <c>VPSHLDD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpshldd_zmm_k1z_zmm_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpshldd instruction.<br/>
		/// <br/>
		/// <c>VPSHLDD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpshldd_xmm_k1z_xmm_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpshldd instruction.<br/>
		/// <br/>
		/// <c>VPSHLDD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpshldd_ymm_k1z_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpshldd instruction.<br/>
		/// <br/>
		/// <c>VPSHLDD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpshldd_zmm_k1z_zmm_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpshldd instruction.<br/>
		/// <br/>
		/// <c>VPSHLDD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpshldd_xmm_k1z_xmm_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpshldd instruction.<br/>
		/// <br/>
		/// <c>VPSHLDD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpshldd_ymm_k1z_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpshldd instruction.<br/>
		/// <br/>
		/// <c>VPSHLDD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpshldd_zmm_k1z_zmm_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpshldd instruction.<br/>
		/// <br/>
		/// <c>VPSHLDD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpshldd_xmm_k1z_xmm_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpshldd instruction.<br/>
		/// <br/>
		/// <c>VPSHLDD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpshldd_ymm_k1z_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpshldd instruction.<br/>
		/// <br/>
		/// <c>VPSHLDD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpshldd_zmm_k1z_zmm_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpshldq instruction.<br/>
		/// <br/>
		/// <c>VPSHLDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpshldq_xmm_k1z_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpshldq instruction.<br/>
		/// <br/>
		/// <c>VPSHLDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpshldq_ymm_k1z_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpshldq instruction.<br/>
		/// <br/>
		/// <c>VPSHLDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpshldq_zmm_k1z_zmm_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpshldq instruction.<br/>
		/// <br/>
		/// <c>VPSHLDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpshldq_xmm_k1z_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpshldq instruction.<br/>
		/// <br/>
		/// <c>VPSHLDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpshldq_ymm_k1z_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpshldq instruction.<br/>
		/// <br/>
		/// <c>VPSHLDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpshldq_zmm_k1z_zmm_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpshldq instruction.<br/>
		/// <br/>
		/// <c>VPSHLDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpshldq_xmm_k1z_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpshldq instruction.<br/>
		/// <br/>
		/// <c>VPSHLDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpshldq_ymm_k1z_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpshldq instruction.<br/>
		/// <br/>
		/// <c>VPSHLDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpshldq_zmm_k1z_zmm_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpshldq instruction.<br/>
		/// <br/>
		/// <c>VPSHLDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpshldq_xmm_k1z_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpshldq instruction.<br/>
		/// <br/>
		/// <c>VPSHLDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpshldq_ymm_k1z_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpshldq instruction.<br/>
		/// <br/>
		/// <c>VPSHLDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpshldq_zmm_k1z_zmm_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpshldvd instruction.<br/>
		/// <br/>
		/// <c>VPSHLDVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 71 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpshldvd_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpshldvd instruction.<br/>
		/// <br/>
		/// <c>VPSHLDVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 71 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpshldvd_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpshldvd instruction.<br/>
		/// <br/>
		/// <c>VPSHLDVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 71 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpshldvd_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpshldvd instruction.<br/>
		/// <br/>
		/// <c>VPSHLDVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 71 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpshldvd_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpshldvd instruction.<br/>
		/// <br/>
		/// <c>VPSHLDVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 71 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpshldvd_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpshldvd instruction.<br/>
		/// <br/>
		/// <c>VPSHLDVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 71 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpshldvd_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpshldvq instruction.<br/>
		/// <br/>
		/// <c>VPSHLDVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 71 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpshldvq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpshldvq instruction.<br/>
		/// <br/>
		/// <c>VPSHLDVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 71 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpshldvq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpshldvq instruction.<br/>
		/// <br/>
		/// <c>VPSHLDVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 71 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpshldvq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpshldvq instruction.<br/>
		/// <br/>
		/// <c>VPSHLDVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 71 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpshldvq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpshldvq instruction.<br/>
		/// <br/>
		/// <c>VPSHLDVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 71 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpshldvq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpshldvq instruction.<br/>
		/// <br/>
		/// <c>VPSHLDVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 71 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpshldvq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpshldvw instruction.<br/>
		/// <br/>
		/// <c>VPSHLDVW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 70 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldvw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpshldvw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpshldvw instruction.<br/>
		/// <br/>
		/// <c>VPSHLDVW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 70 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldvw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpshldvw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpshldvw instruction.<br/>
		/// <br/>
		/// <c>VPSHLDVW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 70 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldvw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpshldvw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpshldvw instruction.<br/>
		/// <br/>
		/// <c>VPSHLDVW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 70 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldvw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpshldvw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpshldvw instruction.<br/>
		/// <br/>
		/// <c>VPSHLDVW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 70 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldvw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpshldvw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpshldvw instruction.<br/>
		/// <br/>
		/// <c>VPSHLDVW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 70 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldvw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpshldvw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpshldw instruction.<br/>
		/// <br/>
		/// <c>VPSHLDW xmm1 {k1}{z}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpshldw_xmm_k1z_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpshldw instruction.<br/>
		/// <br/>
		/// <c>VPSHLDW ymm1 {k1}{z}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpshldw_ymm_k1z_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpshldw instruction.<br/>
		/// <br/>
		/// <c>VPSHLDW zmm1 {k1}{z}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpshldw_zmm_k1z_zmm_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpshldw instruction.<br/>
		/// <br/>
		/// <c>VPSHLDW xmm1 {k1}{z}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpshldw_xmm_k1z_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vpshldw instruction.<br/>
		/// <br/>
		/// <c>VPSHLDW ymm1 {k1}{z}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpshldw_ymm_k1z_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vpshldw instruction.<br/>
		/// <br/>
		/// <c>VPSHLDW zmm1 {k1}{z}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpshldw_zmm_k1z_zmm_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vpshldw instruction.<br/>
		/// <br/>
		/// <c>VPSHLDW xmm1 {k1}{z}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpshldw_xmm_k1z_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpshldw instruction.<br/>
		/// <br/>
		/// <c>VPSHLDW ymm1 {k1}{z}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpshldw_ymm_k1z_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpshldw instruction.<br/>
		/// <br/>
		/// <c>VPSHLDW zmm1 {k1}{z}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpshldw_zmm_k1z_zmm_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpshldw instruction.<br/>
		/// <br/>
		/// <c>VPSHLDW xmm1 {k1}{z}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpshldw_xmm_k1z_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vpshldw instruction.<br/>
		/// <br/>
		/// <c>VPSHLDW ymm1 {k1}{z}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpshldw_ymm_k1z_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vpshldw instruction.<br/>
		/// <br/>
		/// <c>VPSHLDW zmm1 {k1}{z}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshldw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpshldw_zmm_k1z_zmm_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vpshlq instruction.<br/>
		/// <br/>
		/// <c>VPSHLQ xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 97 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshlq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.XOP_Vpshlq_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vpshlq instruction.<br/>
		/// <br/>
		/// <c>VPSHLQ xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 97 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshlq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.XOP_Vpshlq_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), src2));
		}
		/// <summary>vpshlq instruction.<br/>
		/// <br/>
		/// <c>VPSHLQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W1 97 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshlq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.XOP_Vpshlq_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpshlw instruction.<br/>
		/// <br/>
		/// <c>VPSHLW xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 95 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshlw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.XOP_Vpshlw_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vpshlw instruction.<br/>
		/// <br/>
		/// <c>VPSHLW xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 95 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshlw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.XOP_Vpshlw_xmm_xmmm128_xmm;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), src2));
		}
		/// <summary>vpshlw instruction.<br/>
		/// <br/>
		/// <c>VPSHLW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W1 95 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshlw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.XOP_Vpshlw_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpshrdd instruction.<br/>
		/// <br/>
		/// <c>VPSHRDD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpshrdd_xmm_k1z_xmm_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpshrdd instruction.<br/>
		/// <br/>
		/// <c>VPSHRDD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpshrdd_ymm_k1z_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpshrdd instruction.<br/>
		/// <br/>
		/// <c>VPSHRDD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpshrdd_zmm_k1z_zmm_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpshrdd instruction.<br/>
		/// <br/>
		/// <c>VPSHRDD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpshrdd_xmm_k1z_xmm_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpshrdd instruction.<br/>
		/// <br/>
		/// <c>VPSHRDD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpshrdd_ymm_k1z_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpshrdd instruction.<br/>
		/// <br/>
		/// <c>VPSHRDD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpshrdd_zmm_k1z_zmm_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpshrdd instruction.<br/>
		/// <br/>
		/// <c>VPSHRDD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpshrdd_xmm_k1z_xmm_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpshrdd instruction.<br/>
		/// <br/>
		/// <c>VPSHRDD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpshrdd_ymm_k1z_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpshrdd instruction.<br/>
		/// <br/>
		/// <c>VPSHRDD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpshrdd_zmm_k1z_zmm_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpshrdd instruction.<br/>
		/// <br/>
		/// <c>VPSHRDD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpshrdd_xmm_k1z_xmm_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpshrdd instruction.<br/>
		/// <br/>
		/// <c>VPSHRDD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpshrdd_ymm_k1z_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpshrdd instruction.<br/>
		/// <br/>
		/// <c>VPSHRDD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpshrdd_zmm_k1z_zmm_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpshrdq instruction.<br/>
		/// <br/>
		/// <c>VPSHRDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpshrdq_xmm_k1z_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpshrdq instruction.<br/>
		/// <br/>
		/// <c>VPSHRDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpshrdq_ymm_k1z_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpshrdq instruction.<br/>
		/// <br/>
		/// <c>VPSHRDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpshrdq_zmm_k1z_zmm_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpshrdq instruction.<br/>
		/// <br/>
		/// <c>VPSHRDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpshrdq_xmm_k1z_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpshrdq instruction.<br/>
		/// <br/>
		/// <c>VPSHRDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpshrdq_ymm_k1z_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpshrdq instruction.<br/>
		/// <br/>
		/// <c>VPSHRDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpshrdq_zmm_k1z_zmm_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpshrdq instruction.<br/>
		/// <br/>
		/// <c>VPSHRDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpshrdq_xmm_k1z_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpshrdq instruction.<br/>
		/// <br/>
		/// <c>VPSHRDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpshrdq_ymm_k1z_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpshrdq instruction.<br/>
		/// <br/>
		/// <c>VPSHRDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpshrdq_zmm_k1z_zmm_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpshrdq instruction.<br/>
		/// <br/>
		/// <c>VPSHRDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpshrdq_xmm_k1z_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpshrdq instruction.<br/>
		/// <br/>
		/// <c>VPSHRDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpshrdq_ymm_k1z_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpshrdq instruction.<br/>
		/// <br/>
		/// <c>VPSHRDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpshrdq_zmm_k1z_zmm_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpshrdvd instruction.<br/>
		/// <br/>
		/// <c>VPSHRDVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 73 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpshrdvd_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpshrdvd instruction.<br/>
		/// <br/>
		/// <c>VPSHRDVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 73 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpshrdvd_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpshrdvd instruction.<br/>
		/// <br/>
		/// <c>VPSHRDVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 73 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpshrdvd_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpshrdvd instruction.<br/>
		/// <br/>
		/// <c>VPSHRDVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 73 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpshrdvd_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpshrdvd instruction.<br/>
		/// <br/>
		/// <c>VPSHRDVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 73 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpshrdvd_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpshrdvd instruction.<br/>
		/// <br/>
		/// <c>VPSHRDVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 73 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpshrdvd_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpshrdvq instruction.<br/>
		/// <br/>
		/// <c>VPSHRDVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 73 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpshrdvq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpshrdvq instruction.<br/>
		/// <br/>
		/// <c>VPSHRDVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 73 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpshrdvq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpshrdvq instruction.<br/>
		/// <br/>
		/// <c>VPSHRDVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 73 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpshrdvq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpshrdvq instruction.<br/>
		/// <br/>
		/// <c>VPSHRDVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 73 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpshrdvq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpshrdvq instruction.<br/>
		/// <br/>
		/// <c>VPSHRDVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 73 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpshrdvq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpshrdvq instruction.<br/>
		/// <br/>
		/// <c>VPSHRDVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 73 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpshrdvq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpshrdvw instruction.<br/>
		/// <br/>
		/// <c>VPSHRDVW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 72 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdvw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpshrdvw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpshrdvw instruction.<br/>
		/// <br/>
		/// <c>VPSHRDVW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 72 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdvw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpshrdvw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpshrdvw instruction.<br/>
		/// <br/>
		/// <c>VPSHRDVW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 72 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdvw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpshrdvw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpshrdvw instruction.<br/>
		/// <br/>
		/// <c>VPSHRDVW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 72 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdvw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpshrdvw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpshrdvw instruction.<br/>
		/// <br/>
		/// <c>VPSHRDVW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 72 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdvw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpshrdvw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpshrdvw instruction.<br/>
		/// <br/>
		/// <c>VPSHRDVW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 72 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdvw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpshrdvw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpshrdw instruction.<br/>
		/// <br/>
		/// <c>VPSHRDW xmm1 {k1}{z}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 72 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpshrdw_xmm_k1z_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpshrdw instruction.<br/>
		/// <br/>
		/// <c>VPSHRDW ymm1 {k1}{z}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 72 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpshrdw_ymm_k1z_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpshrdw instruction.<br/>
		/// <br/>
		/// <c>VPSHRDW zmm1 {k1}{z}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 72 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpshrdw_zmm_k1z_zmm_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpshrdw instruction.<br/>
		/// <br/>
		/// <c>VPSHRDW xmm1 {k1}{z}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 72 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpshrdw_xmm_k1z_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vpshrdw instruction.<br/>
		/// <br/>
		/// <c>VPSHRDW ymm1 {k1}{z}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 72 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpshrdw_ymm_k1z_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vpshrdw instruction.<br/>
		/// <br/>
		/// <c>VPSHRDW zmm1 {k1}{z}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 72 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpshrdw_zmm_k1z_zmm_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vpshrdw instruction.<br/>
		/// <br/>
		/// <c>VPSHRDW xmm1 {k1}{z}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 72 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpshrdw_xmm_k1z_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpshrdw instruction.<br/>
		/// <br/>
		/// <c>VPSHRDW ymm1 {k1}{z}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 72 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpshrdw_ymm_k1z_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpshrdw instruction.<br/>
		/// <br/>
		/// <c>VPSHRDW zmm1 {k1}{z}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 72 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpshrdw_zmm_k1z_zmm_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpshrdw instruction.<br/>
		/// <br/>
		/// <c>VPSHRDW xmm1 {k1}{z}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 72 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpshrdw_xmm_k1z_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vpshrdw instruction.<br/>
		/// <br/>
		/// <c>VPSHRDW ymm1 {k1}{z}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 72 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpshrdw_ymm_k1z_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vpshrdw instruction.<br/>
		/// <br/>
		/// <c>VPSHRDW zmm1 {k1}{z}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 72 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshrdw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpshrdw_zmm_k1z_zmm_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vpshufb instruction.<br/>
		/// <br/>
		/// <c>VPSHUFB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 00 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 00 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshufb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpshufb_xmm_xmm_xmmm128 : Code.EVEX_Vpshufb_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpshufb instruction.<br/>
		/// <br/>
		/// <c>VPSHUFB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 00 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 00 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshufb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpshufb_ymm_ymm_ymmm256 : Code.EVEX_Vpshufb_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpshufb instruction.<br/>
		/// <br/>
		/// <c>VPSHUFB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 00 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshufb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpshufb_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpshufb instruction.<br/>
		/// <br/>
		/// <c>VPSHUFB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 00 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 00 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshufb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpshufb_xmm_xmm_xmmm128 : Code.EVEX_Vpshufb_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpshufb instruction.<br/>
		/// <br/>
		/// <c>VPSHUFB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 00 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 00 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshufb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpshufb_ymm_ymm_ymmm256 : Code.EVEX_Vpshufb_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpshufb instruction.<br/>
		/// <br/>
		/// <c>VPSHUFB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 00 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshufb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpshufb_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpshufbitqmb instruction.<br/>
		/// <br/>
		/// <c>VPSHUFBITQMB k1 {k2}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 8F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BITALG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshufbitqmb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpshufbitqmb_kr_k1_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpshufbitqmb instruction.<br/>
		/// <br/>
		/// <c>VPSHUFBITQMB k1 {k2}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 8F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BITALG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshufbitqmb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpshufbitqmb_kr_k1_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpshufbitqmb instruction.<br/>
		/// <br/>
		/// <c>VPSHUFBITQMB k1 {k2}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 8F /r</c><br/>
		/// <br/>
		/// <c>AVX512_BITALG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshufbitqmb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpshufbitqmb_kr_k1_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpshufbitqmb instruction.<br/>
		/// <br/>
		/// <c>VPSHUFBITQMB k1 {k2}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 8F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BITALG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshufbitqmb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpshufbitqmb_kr_k1_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpshufbitqmb instruction.<br/>
		/// <br/>
		/// <c>VPSHUFBITQMB k1 {k2}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 8F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BITALG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshufbitqmb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpshufbitqmb_kr_k1_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpshufbitqmb instruction.<br/>
		/// <br/>
		/// <c>VPSHUFBITQMB k1 {k2}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 8F /r</c><br/>
		/// <br/>
		/// <c>AVX512_BITALG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshufbitqmb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpshufbitqmb_kr_k1_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpshufd instruction.<br/>
		/// <br/>
		/// <c>VPSHUFD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshufd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpshufd_xmm_xmmm128_imm8 : Code.EVEX_Vpshufd_xmm_k1z_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vpshufd instruction.<br/>
		/// <br/>
		/// <c>VPSHUFD ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshufd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpshufd_ymm_ymmm256_imm8 : Code.EVEX_Vpshufd_ymm_k1z_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vpshufd instruction.<br/>
		/// <br/>
		/// <c>VPSHUFD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshufd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpshufd_zmm_k1z_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vpshufd instruction.<br/>
		/// <br/>
		/// <c>VPSHUFD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshufd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			if (src1.IsBroadcast) {
				op = Code.EVEX_Vpshufd_xmm_k1z_xmmm128b32_imm8;
			} else op = PreferVex ? Code.VEX_Vpshufd_xmm_xmmm128_imm8 : Code.EVEX_Vpshufd_xmm_k1z_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpshufd instruction.<br/>
		/// <br/>
		/// <c>VPSHUFD ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshufd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			if (src1.IsBroadcast) {
				op = Code.EVEX_Vpshufd_ymm_k1z_ymmm256b32_imm8;
			} else op = PreferVex ? Code.VEX_Vpshufd_ymm_ymmm256_imm8 : Code.EVEX_Vpshufd_ymm_k1z_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpshufd instruction.<br/>
		/// <br/>
		/// <c>VPSHUFD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshufd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpshufd_zmm_k1z_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpshufd instruction.<br/>
		/// <br/>
		/// <c>VPSHUFD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshufd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpshufd_xmm_xmmm128_imm8 : Code.EVEX_Vpshufd_xmm_k1z_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vpshufd instruction.<br/>
		/// <br/>
		/// <c>VPSHUFD ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshufd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpshufd_ymm_ymmm256_imm8 : Code.EVEX_Vpshufd_ymm_k1z_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vpshufd instruction.<br/>
		/// <br/>
		/// <c>VPSHUFD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshufd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpshufd_zmm_k1z_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vpshufd instruction.<br/>
		/// <br/>
		/// <c>VPSHUFD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshufd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			if (src1.IsBroadcast) {
				op = Code.EVEX_Vpshufd_xmm_k1z_xmmm128b32_imm8;
			} else op = PreferVex ? Code.VEX_Vpshufd_xmm_xmmm128_imm8 : Code.EVEX_Vpshufd_xmm_k1z_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpshufd instruction.<br/>
		/// <br/>
		/// <c>VPSHUFD ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshufd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			if (src1.IsBroadcast) {
				op = Code.EVEX_Vpshufd_ymm_k1z_ymmm256b32_imm8;
			} else op = PreferVex ? Code.VEX_Vpshufd_ymm_ymmm256_imm8 : Code.EVEX_Vpshufd_ymm_k1z_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpshufd instruction.<br/>
		/// <br/>
		/// <c>VPSHUFD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshufd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpshufd_zmm_k1z_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpshufhw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFHW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.F3.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFHW xmm1 {k1}{z}, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshufhw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpshufhw_xmm_xmmm128_imm8 : Code.EVEX_Vpshufhw_xmm_k1z_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vpshufhw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFHW ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.F3.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFHW ymm1 {k1}{z}, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshufhw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpshufhw_ymm_ymmm256_imm8 : Code.EVEX_Vpshufhw_ymm_k1z_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vpshufhw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFHW zmm1 {k1}{z}, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshufhw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpshufhw_zmm_k1z_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vpshufhw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFHW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.F3.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFHW xmm1 {k1}{z}, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshufhw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpshufhw_xmm_xmmm128_imm8 : Code.EVEX_Vpshufhw_xmm_k1z_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vpshufhw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFHW ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.F3.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFHW ymm1 {k1}{z}, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshufhw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpshufhw_ymm_ymmm256_imm8 : Code.EVEX_Vpshufhw_ymm_k1z_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vpshufhw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFHW zmm1 {k1}{z}, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshufhw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpshufhw_zmm_k1z_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vpshufhw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFHW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.F3.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFHW xmm1 {k1}{z}, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshufhw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpshufhw_xmm_xmmm128_imm8 : Code.EVEX_Vpshufhw_xmm_k1z_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vpshufhw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFHW ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.F3.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFHW ymm1 {k1}{z}, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshufhw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpshufhw_ymm_ymmm256_imm8 : Code.EVEX_Vpshufhw_ymm_k1z_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vpshufhw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFHW zmm1 {k1}{z}, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshufhw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpshufhw_zmm_k1z_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vpshufhw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFHW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.F3.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFHW xmm1 {k1}{z}, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshufhw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpshufhw_xmm_xmmm128_imm8 : Code.EVEX_Vpshufhw_xmm_k1z_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vpshufhw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFHW ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.F3.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFHW ymm1 {k1}{z}, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshufhw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpshufhw_ymm_ymmm256_imm8 : Code.EVEX_Vpshufhw_ymm_k1z_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vpshufhw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFHW zmm1 {k1}{z}, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshufhw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpshufhw_zmm_k1z_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vpshuflw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFLW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.F2.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFLW xmm1 {k1}{z}, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshuflw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpshuflw_xmm_xmmm128_imm8 : Code.EVEX_Vpshuflw_xmm_k1z_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vpshuflw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFLW ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.F2.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFLW ymm1 {k1}{z}, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshuflw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpshuflw_ymm_ymmm256_imm8 : Code.EVEX_Vpshuflw_ymm_k1z_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vpshuflw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFLW zmm1 {k1}{z}, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshuflw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpshuflw_zmm_k1z_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vpshuflw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFLW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.F2.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFLW xmm1 {k1}{z}, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshuflw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpshuflw_xmm_xmmm128_imm8 : Code.EVEX_Vpshuflw_xmm_k1z_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vpshuflw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFLW ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.F2.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFLW ymm1 {k1}{z}, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshuflw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpshuflw_ymm_ymmm256_imm8 : Code.EVEX_Vpshuflw_ymm_k1z_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vpshuflw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFLW zmm1 {k1}{z}, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshuflw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpshuflw_zmm_k1z_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vpshuflw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFLW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.F2.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFLW xmm1 {k1}{z}, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshuflw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpshuflw_xmm_xmmm128_imm8 : Code.EVEX_Vpshuflw_xmm_k1z_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vpshuflw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFLW ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.F2.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFLW ymm1 {k1}{z}, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshuflw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpshuflw_ymm_ymmm256_imm8 : Code.EVEX_Vpshuflw_ymm_k1z_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vpshuflw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFLW zmm1 {k1}{z}, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshuflw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpshuflw_zmm_k1z_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vpshuflw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFLW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.F2.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFLW xmm1 {k1}{z}, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshuflw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpshuflw_xmm_xmmm128_imm8 : Code.EVEX_Vpshuflw_xmm_k1z_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vpshuflw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFLW ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.F2.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFLW ymm1 {k1}{z}, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshuflw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpshuflw_ymm_ymmm256_imm8 : Code.EVEX_Vpshuflw_ymm_k1z_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vpshuflw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFLW zmm1 {k1}{z}, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpshuflw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpshuflw_zmm_k1z_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vpsignb instruction.<br/>
		/// <br/>
		/// <c>VPSIGNB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 08 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsignb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.VEX_Vpsignb_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vpsignb instruction.<br/>
		/// <br/>
		/// <c>VPSIGNB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 08 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsignb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.VEX_Vpsignb_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vpsignb instruction.<br/>
		/// <br/>
		/// <c>VPSIGNB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 08 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsignb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vpsignb_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpsignb instruction.<br/>
		/// <br/>
		/// <c>VPSIGNB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 08 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsignb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vpsignb_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpsignd instruction.<br/>
		/// <br/>
		/// <c>VPSIGND xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 0A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsignd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.VEX_Vpsignd_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vpsignd instruction.<br/>
		/// <br/>
		/// <c>VPSIGND ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 0A /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsignd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.VEX_Vpsignd_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vpsignd instruction.<br/>
		/// <br/>
		/// <c>VPSIGND xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 0A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsignd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vpsignd_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpsignd instruction.<br/>
		/// <br/>
		/// <c>VPSIGND ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 0A /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsignd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vpsignd_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpsignw instruction.<br/>
		/// <br/>
		/// <c>VPSIGNW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 09 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsignw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.VEX_Vpsignw_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vpsignw instruction.<br/>
		/// <br/>
		/// <c>VPSIGNW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 09 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsignw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.VEX_Vpsignw_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vpsignw instruction.<br/>
		/// <br/>
		/// <c>VPSIGNW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 09 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsignw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vpsignw_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpsignw instruction.<br/>
		/// <br/>
		/// <c>VPSIGNW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 09 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsignw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vpsignw_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpslld instruction.<br/>
		/// <br/>
		/// <c>VPSLLD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG F2 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLD xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 F2 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpslld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpslld_xmm_xmm_xmmm128 : Code.EVEX_Vpslld_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpslld instruction.<br/>
		/// <br/>
		/// <c>VPSLLD ymm1, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG F2 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLD ymm1 {k1}{z}, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 F2 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpslld(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpslld_ymm_ymm_xmmm128 : Code.EVEX_Vpslld_ymm_k1z_ymm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpslld instruction.<br/>
		/// <br/>
		/// <c>VPSLLD zmm1 {k1}{z}, zmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 F2 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpslld(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpslld_zmm_k1z_zmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpslld instruction.<br/>
		/// <br/>
		/// <c>VPSLLD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG F2 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLD xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 F2 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpslld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpslld_xmm_xmm_xmmm128 : Code.EVEX_Vpslld_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpslld instruction.<br/>
		/// <br/>
		/// <c>VPSLLD ymm1, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG F2 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLD ymm1 {k1}{z}, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 F2 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpslld(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpslld_ymm_ymm_xmmm128 : Code.EVEX_Vpslld_ymm_k1z_ymm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpslld instruction.<br/>
		/// <br/>
		/// <c>VPSLLD zmm1 {k1}{z}, zmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 F2 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpslld(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpslld_zmm_k1z_zmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpslld instruction.<br/>
		/// <br/>
		/// <c>VPSLLD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 72 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLD xmm1, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 72 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpslld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpslld_xmm_xmm_imm8 : Code.EVEX_Vpslld_xmm_k1z_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vpslld instruction.<br/>
		/// <br/>
		/// <c>VPSLLD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 72 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLD ymm1, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 72 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpslld(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpslld_ymm_ymm_imm8 : Code.EVEX_Vpslld_ymm_k1z_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vpslld instruction.<br/>
		/// <br/>
		/// <c>VPSLLD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 72 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpslld(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpslld_zmm_k1z_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vpslld instruction.<br/>
		/// <br/>
		/// <c>VPSLLD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 72 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpslld(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpslld_xmm_k1z_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpslld instruction.<br/>
		/// <br/>
		/// <c>VPSLLD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 72 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpslld(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpslld_ymm_k1z_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpslld instruction.<br/>
		/// <br/>
		/// <c>VPSLLD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 72 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpslld(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpslld_zmm_k1z_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpslld instruction.<br/>
		/// <br/>
		/// <c>VPSLLD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 72 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLD xmm1, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 72 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpslld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpslld_xmm_xmm_imm8 : Code.EVEX_Vpslld_xmm_k1z_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vpslld instruction.<br/>
		/// <br/>
		/// <c>VPSLLD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 72 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLD ymm1, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 72 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpslld(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpslld_ymm_ymm_imm8 : Code.EVEX_Vpslld_ymm_k1z_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vpslld instruction.<br/>
		/// <br/>
		/// <c>VPSLLD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 72 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpslld(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpslld_zmm_k1z_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vpslld instruction.<br/>
		/// <br/>
		/// <c>VPSLLD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 72 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpslld(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpslld_xmm_k1z_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpslld instruction.<br/>
		/// <br/>
		/// <c>VPSLLD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 72 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpslld(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpslld_ymm_k1z_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpslld instruction.<br/>
		/// <br/>
		/// <c>VPSLLD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 72 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpslld(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpslld_zmm_k1z_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpslldq instruction.<br/>
		/// <br/>
		/// <c>VPSLLDQ xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 73 /7 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLDQ xmm1, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 73 /7 ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpslldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpslldq_xmm_xmm_imm8 : Code.EVEX_Vpslldq_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>vpslldq instruction.<br/>
		/// <br/>
		/// <c>VPSLLDQ ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 73 /7 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLDQ ymm1, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 73 /7 ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpslldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpslldq_ymm_ymm_imm8 : Code.EVEX_Vpslldq_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>vpslldq instruction.<br/>
		/// <br/>
		/// <c>VPSLLDQ zmm1, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 73 /7 ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpslldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpslldq_zmm_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>vpslldq instruction.<br/>
		/// <br/>
		/// <c>VPSLLDQ xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 73 /7 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpslldq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpslldq_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vpslldq instruction.<br/>
		/// <br/>
		/// <c>VPSLLDQ ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 73 /7 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpslldq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpslldq_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vpslldq instruction.<br/>
		/// <br/>
		/// <c>VPSLLDQ zmm1, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 73 /7 ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpslldq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpslldq_zmm_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vpslldq instruction.<br/>
		/// <br/>
		/// <c>VPSLLDQ xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 73 /7 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLDQ xmm1, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 73 /7 ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpslldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpslldq_xmm_xmm_imm8 : Code.EVEX_Vpslldq_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>vpslldq instruction.<br/>
		/// <br/>
		/// <c>VPSLLDQ ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 73 /7 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLDQ ymm1, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 73 /7 ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpslldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpslldq_ymm_ymm_imm8 : Code.EVEX_Vpslldq_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>vpslldq instruction.<br/>
		/// <br/>
		/// <c>VPSLLDQ zmm1, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 73 /7 ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpslldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpslldq_zmm_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>vpslldq instruction.<br/>
		/// <br/>
		/// <c>VPSLLDQ xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 73 /7 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpslldq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpslldq_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vpslldq instruction.<br/>
		/// <br/>
		/// <c>VPSLLDQ ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 73 /7 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpslldq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpslldq_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vpslldq instruction.<br/>
		/// <br/>
		/// <c>VPSLLDQ zmm1, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 73 /7 ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpslldq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpslldq_zmm_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vpsllq instruction.<br/>
		/// <br/>
		/// <c>VPSLLQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG F3 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLQ xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 F3 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsllq_xmm_xmm_xmmm128 : Code.EVEX_Vpsllq_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsllq instruction.<br/>
		/// <br/>
		/// <c>VPSLLQ ymm1, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG F3 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLQ ymm1 {k1}{z}, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 F3 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsllq_ymm_ymm_xmmm128 : Code.EVEX_Vpsllq_ymm_k1z_ymm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsllq instruction.<br/>
		/// <br/>
		/// <c>VPSLLQ zmm1 {k1}{z}, zmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 F3 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpsllq_zmm_k1z_zmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsllq instruction.<br/>
		/// <br/>
		/// <c>VPSLLQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG F3 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLQ xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 F3 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsllq_xmm_xmm_xmmm128 : Code.EVEX_Vpsllq_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsllq instruction.<br/>
		/// <br/>
		/// <c>VPSLLQ ymm1, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG F3 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLQ ymm1 {k1}{z}, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 F3 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsllq_ymm_ymm_xmmm128 : Code.EVEX_Vpsllq_ymm_k1z_ymm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsllq instruction.<br/>
		/// <br/>
		/// <c>VPSLLQ zmm1 {k1}{z}, zmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 F3 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpsllq_zmm_k1z_zmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsllq instruction.<br/>
		/// <br/>
		/// <c>VPSLLQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 73 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLQ xmm1, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 73 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsllq_xmm_xmm_imm8 : Code.EVEX_Vpsllq_xmm_k1z_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vpsllq instruction.<br/>
		/// <br/>
		/// <c>VPSLLQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 73 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLQ ymm1, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 73 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsllq_ymm_ymm_imm8 : Code.EVEX_Vpsllq_ymm_k1z_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vpsllq instruction.<br/>
		/// <br/>
		/// <c>VPSLLQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 73 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpsllq_zmm_k1z_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vpsllq instruction.<br/>
		/// <br/>
		/// <c>VPSLLQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 73 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpsllq_xmm_k1z_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpsllq instruction.<br/>
		/// <br/>
		/// <c>VPSLLQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 73 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpsllq_ymm_k1z_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpsllq instruction.<br/>
		/// <br/>
		/// <c>VPSLLQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 73 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpsllq_zmm_k1z_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpsllq instruction.<br/>
		/// <br/>
		/// <c>VPSLLQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 73 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLQ xmm1, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 73 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsllq_xmm_xmm_imm8 : Code.EVEX_Vpsllq_xmm_k1z_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vpsllq instruction.<br/>
		/// <br/>
		/// <c>VPSLLQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 73 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLQ ymm1, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 73 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsllq_ymm_ymm_imm8 : Code.EVEX_Vpsllq_ymm_k1z_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vpsllq instruction.<br/>
		/// <br/>
		/// <c>VPSLLQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 73 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpsllq_zmm_k1z_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vpsllq instruction.<br/>
		/// <br/>
		/// <c>VPSLLQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 73 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpsllq_xmm_k1z_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpsllq instruction.<br/>
		/// <br/>
		/// <c>VPSLLQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 73 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpsllq_ymm_k1z_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpsllq instruction.<br/>
		/// <br/>
		/// <c>VPSLLQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 73 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpsllq_zmm_k1z_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpsllvd instruction.<br/>
		/// <br/>
		/// <c>VPSLLVD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 47 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 47 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsllvd_xmm_xmm_xmmm128 : Code.EVEX_Vpsllvd_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsllvd instruction.<br/>
		/// <br/>
		/// <c>VPSLLVD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 47 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 47 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsllvd_ymm_ymm_ymmm256 : Code.EVEX_Vpsllvd_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsllvd instruction.<br/>
		/// <br/>
		/// <c>VPSLLVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 47 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpsllvd_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsllvd instruction.<br/>
		/// <br/>
		/// <c>VPSLLVD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 47 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 47 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpsllvd_xmm_k1z_xmm_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vpsllvd_xmm_xmm_xmmm128 : Code.EVEX_Vpsllvd_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpsllvd instruction.<br/>
		/// <br/>
		/// <c>VPSLLVD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 47 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 47 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpsllvd_ymm_k1z_ymm_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vpsllvd_ymm_ymm_ymmm256 : Code.EVEX_Vpsllvd_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpsllvd instruction.<br/>
		/// <br/>
		/// <c>VPSLLVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 47 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpsllvd_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpsllvq instruction.<br/>
		/// <br/>
		/// <c>VPSLLVQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 47 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 47 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsllvq_xmm_xmm_xmmm128 : Code.EVEX_Vpsllvq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsllvq instruction.<br/>
		/// <br/>
		/// <c>VPSLLVQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 47 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 47 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsllvq_ymm_ymm_ymmm256 : Code.EVEX_Vpsllvq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsllvq instruction.<br/>
		/// <br/>
		/// <c>VPSLLVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 47 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpsllvq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsllvq instruction.<br/>
		/// <br/>
		/// <c>VPSLLVQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 47 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 47 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpsllvq_xmm_k1z_xmm_xmmm128b64;
			} else op = PreferVex ? Code.VEX_Vpsllvq_xmm_xmm_xmmm128 : Code.EVEX_Vpsllvq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpsllvq instruction.<br/>
		/// <br/>
		/// <c>VPSLLVQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 47 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 47 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpsllvq_ymm_k1z_ymm_ymmm256b64;
			} else op = PreferVex ? Code.VEX_Vpsllvq_ymm_ymm_ymmm256 : Code.EVEX_Vpsllvq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpsllvq instruction.<br/>
		/// <br/>
		/// <c>VPSLLVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 47 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpsllvq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpsllvw instruction.<br/>
		/// <br/>
		/// <c>VPSLLVW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllvw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpsllvw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsllvw instruction.<br/>
		/// <br/>
		/// <c>VPSLLVW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllvw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpsllvw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsllvw instruction.<br/>
		/// <br/>
		/// <c>VPSLLVW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllvw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpsllvw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsllvw instruction.<br/>
		/// <br/>
		/// <c>VPSLLVW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllvw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpsllvw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsllvw instruction.<br/>
		/// <br/>
		/// <c>VPSLLVW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllvw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpsllvw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsllvw instruction.<br/>
		/// <br/>
		/// <c>VPSLLVW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllvw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpsllvw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsllw instruction.<br/>
		/// <br/>
		/// <c>VPSLLW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG F1 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG F1 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsllw_xmm_xmm_xmmm128 : Code.EVEX_Vpsllw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsllw instruction.<br/>
		/// <br/>
		/// <c>VPSLLW ymm1, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG F1 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLW ymm1 {k1}{z}, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG F1 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsllw_ymm_ymm_xmmm128 : Code.EVEX_Vpsllw_ymm_k1z_ymm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsllw instruction.<br/>
		/// <br/>
		/// <c>VPSLLW zmm1 {k1}{z}, zmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG F1 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpsllw_zmm_k1z_zmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsllw instruction.<br/>
		/// <br/>
		/// <c>VPSLLW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG F1 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG F1 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsllw_xmm_xmm_xmmm128 : Code.EVEX_Vpsllw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsllw instruction.<br/>
		/// <br/>
		/// <c>VPSLLW ymm1, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG F1 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLW ymm1 {k1}{z}, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG F1 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsllw_ymm_ymm_xmmm128 : Code.EVEX_Vpsllw_ymm_k1z_ymm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsllw instruction.<br/>
		/// <br/>
		/// <c>VPSLLW zmm1 {k1}{z}, zmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG F1 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpsllw_zmm_k1z_zmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsllw instruction.<br/>
		/// <br/>
		/// <c>VPSLLW xmm1 {k1}{z}, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 71 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLW xmm1, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 71 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsllw_xmm_xmm_imm8 : Code.EVEX_Vpsllw_xmm_k1z_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vpsllw instruction.<br/>
		/// <br/>
		/// <c>VPSLLW ymm1 {k1}{z}, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 71 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLW ymm1, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 71 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsllw_ymm_ymm_imm8 : Code.EVEX_Vpsllw_ymm_k1z_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vpsllw instruction.<br/>
		/// <br/>
		/// <c>VPSLLW zmm1 {k1}{z}, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 71 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpsllw_zmm_k1z_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vpsllw instruction.<br/>
		/// <br/>
		/// <c>VPSLLW xmm1 {k1}{z}, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 71 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpsllw_xmm_k1z_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vpsllw instruction.<br/>
		/// <br/>
		/// <c>VPSLLW ymm1 {k1}{z}, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 71 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpsllw_ymm_k1z_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vpsllw instruction.<br/>
		/// <br/>
		/// <c>VPSLLW zmm1 {k1}{z}, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 71 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpsllw_zmm_k1z_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vpsllw instruction.<br/>
		/// <br/>
		/// <c>VPSLLW xmm1 {k1}{z}, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 71 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLW xmm1, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 71 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsllw_xmm_xmm_imm8 : Code.EVEX_Vpsllw_xmm_k1z_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vpsllw instruction.<br/>
		/// <br/>
		/// <c>VPSLLW ymm1 {k1}{z}, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 71 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLW ymm1, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 71 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsllw_ymm_ymm_imm8 : Code.EVEX_Vpsllw_ymm_k1z_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vpsllw instruction.<br/>
		/// <br/>
		/// <c>VPSLLW zmm1 {k1}{z}, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 71 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpsllw_zmm_k1z_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vpsllw instruction.<br/>
		/// <br/>
		/// <c>VPSLLW xmm1 {k1}{z}, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 71 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpsllw_xmm_k1z_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vpsllw instruction.<br/>
		/// <br/>
		/// <c>VPSLLW ymm1 {k1}{z}, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 71 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpsllw_ymm_k1z_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vpsllw instruction.<br/>
		/// <br/>
		/// <c>VPSLLW zmm1 {k1}{z}, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 71 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsllw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpsllw_zmm_k1z_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vpsrad instruction.<br/>
		/// <br/>
		/// <c>VPSRAD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG E2 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRAD xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 E2 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrad(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsrad_xmm_xmm_xmmm128 : Code.EVEX_Vpsrad_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsrad instruction.<br/>
		/// <br/>
		/// <c>VPSRAD ymm1, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG E2 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRAD ymm1 {k1}{z}, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 E2 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrad(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsrad_ymm_ymm_xmmm128 : Code.EVEX_Vpsrad_ymm_k1z_ymm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsrad instruction.<br/>
		/// <br/>
		/// <c>VPSRAD zmm1 {k1}{z}, zmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 E2 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrad(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpsrad_zmm_k1z_zmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsrad instruction.<br/>
		/// <br/>
		/// <c>VPSRAD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG E2 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRAD xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 E2 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrad(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsrad_xmm_xmm_xmmm128 : Code.EVEX_Vpsrad_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsrad instruction.<br/>
		/// <br/>
		/// <c>VPSRAD ymm1, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG E2 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRAD ymm1 {k1}{z}, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 E2 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrad(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsrad_ymm_ymm_xmmm128 : Code.EVEX_Vpsrad_ymm_k1z_ymm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsrad instruction.<br/>
		/// <br/>
		/// <c>VPSRAD zmm1 {k1}{z}, zmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 E2 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrad(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpsrad_zmm_k1z_zmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsrad instruction.<br/>
		/// <br/>
		/// <c>VPSRAD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRAD xmm1, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrad(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsrad_xmm_xmm_imm8 : Code.EVEX_Vpsrad_xmm_k1z_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vpsrad instruction.<br/>
		/// <br/>
		/// <c>VPSRAD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRAD ymm1, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrad(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsrad_ymm_ymm_imm8 : Code.EVEX_Vpsrad_ymm_k1z_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vpsrad instruction.<br/>
		/// <br/>
		/// <c>VPSRAD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrad(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpsrad_zmm_k1z_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vpsrad instruction.<br/>
		/// <br/>
		/// <c>VPSRAD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrad(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpsrad_xmm_k1z_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpsrad instruction.<br/>
		/// <br/>
		/// <c>VPSRAD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrad(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpsrad_ymm_k1z_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpsrad instruction.<br/>
		/// <br/>
		/// <c>VPSRAD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrad(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpsrad_zmm_k1z_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpsrad instruction.<br/>
		/// <br/>
		/// <c>VPSRAD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRAD xmm1, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrad(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsrad_xmm_xmm_imm8 : Code.EVEX_Vpsrad_xmm_k1z_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vpsrad instruction.<br/>
		/// <br/>
		/// <c>VPSRAD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRAD ymm1, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrad(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsrad_ymm_ymm_imm8 : Code.EVEX_Vpsrad_ymm_k1z_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vpsrad instruction.<br/>
		/// <br/>
		/// <c>VPSRAD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrad(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpsrad_zmm_k1z_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vpsrad instruction.<br/>
		/// <br/>
		/// <c>VPSRAD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrad(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpsrad_xmm_k1z_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpsrad instruction.<br/>
		/// <br/>
		/// <c>VPSRAD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrad(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpsrad_ymm_k1z_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpsrad instruction.<br/>
		/// <br/>
		/// <c>VPSRAD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrad(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpsrad_zmm_k1z_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpsraq instruction.<br/>
		/// <br/>
		/// <c>VPSRAQ xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 E2 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsraq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpsraq_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsraq instruction.<br/>
		/// <br/>
		/// <c>VPSRAQ ymm1 {k1}{z}, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 E2 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsraq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpsraq_ymm_k1z_ymm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsraq instruction.<br/>
		/// <br/>
		/// <c>VPSRAQ zmm1 {k1}{z}, zmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 E2 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsraq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpsraq_zmm_k1z_zmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsraq instruction.<br/>
		/// <br/>
		/// <c>VPSRAQ xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 E2 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsraq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpsraq_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsraq instruction.<br/>
		/// <br/>
		/// <c>VPSRAQ ymm1 {k1}{z}, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 E2 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsraq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpsraq_ymm_k1z_ymm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsraq instruction.<br/>
		/// <br/>
		/// <c>VPSRAQ zmm1 {k1}{z}, zmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 E2 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsraq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpsraq_zmm_k1z_zmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsraq instruction.<br/>
		/// <br/>
		/// <c>VPSRAQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsraq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpsraq_xmm_k1z_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vpsraq instruction.<br/>
		/// <br/>
		/// <c>VPSRAQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsraq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpsraq_ymm_k1z_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vpsraq instruction.<br/>
		/// <br/>
		/// <c>VPSRAQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsraq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpsraq_zmm_k1z_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vpsraq instruction.<br/>
		/// <br/>
		/// <c>VPSRAQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsraq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpsraq_xmm_k1z_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpsraq instruction.<br/>
		/// <br/>
		/// <c>VPSRAQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsraq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpsraq_ymm_k1z_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpsraq instruction.<br/>
		/// <br/>
		/// <c>VPSRAQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsraq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpsraq_zmm_k1z_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpsraq instruction.<br/>
		/// <br/>
		/// <c>VPSRAQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsraq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpsraq_xmm_k1z_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vpsraq instruction.<br/>
		/// <br/>
		/// <c>VPSRAQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsraq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpsraq_ymm_k1z_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vpsraq instruction.<br/>
		/// <br/>
		/// <c>VPSRAQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsraq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpsraq_zmm_k1z_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vpsraq instruction.<br/>
		/// <br/>
		/// <c>VPSRAQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsraq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpsraq_xmm_k1z_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpsraq instruction.<br/>
		/// <br/>
		/// <c>VPSRAQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsraq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpsraq_ymm_k1z_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpsraq instruction.<br/>
		/// <br/>
		/// <c>VPSRAQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsraq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpsraq_zmm_k1z_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpsravd instruction.<br/>
		/// <br/>
		/// <c>VPSRAVD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 46 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRAVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 46 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsravd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsravd_xmm_xmm_xmmm128 : Code.EVEX_Vpsravd_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsravd instruction.<br/>
		/// <br/>
		/// <c>VPSRAVD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 46 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRAVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 46 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsravd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsravd_ymm_ymm_ymmm256 : Code.EVEX_Vpsravd_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsravd instruction.<br/>
		/// <br/>
		/// <c>VPSRAVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 46 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsravd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpsravd_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsravd instruction.<br/>
		/// <br/>
		/// <c>VPSRAVD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 46 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRAVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 46 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsravd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpsravd_xmm_k1z_xmm_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vpsravd_xmm_xmm_xmmm128 : Code.EVEX_Vpsravd_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpsravd instruction.<br/>
		/// <br/>
		/// <c>VPSRAVD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 46 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRAVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 46 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsravd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpsravd_ymm_k1z_ymm_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vpsravd_ymm_ymm_ymmm256 : Code.EVEX_Vpsravd_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpsravd instruction.<br/>
		/// <br/>
		/// <c>VPSRAVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 46 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsravd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpsravd_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpsravq instruction.<br/>
		/// <br/>
		/// <c>VPSRAVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 46 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsravq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpsravq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsravq instruction.<br/>
		/// <br/>
		/// <c>VPSRAVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 46 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsravq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpsravq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsravq instruction.<br/>
		/// <br/>
		/// <c>VPSRAVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 46 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsravq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpsravq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsravq instruction.<br/>
		/// <br/>
		/// <c>VPSRAVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 46 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsravq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpsravq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpsravq instruction.<br/>
		/// <br/>
		/// <c>VPSRAVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 46 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsravq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpsravq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpsravq instruction.<br/>
		/// <br/>
		/// <c>VPSRAVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 46 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsravq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpsravq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpsravw instruction.<br/>
		/// <br/>
		/// <c>VPSRAVW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 11 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsravw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpsravw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsravw instruction.<br/>
		/// <br/>
		/// <c>VPSRAVW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 11 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsravw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpsravw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsravw instruction.<br/>
		/// <br/>
		/// <c>VPSRAVW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 11 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsravw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpsravw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsravw instruction.<br/>
		/// <br/>
		/// <c>VPSRAVW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 11 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsravw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpsravw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsravw instruction.<br/>
		/// <br/>
		/// <c>VPSRAVW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 11 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsravw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpsravw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsravw instruction.<br/>
		/// <br/>
		/// <c>VPSRAVW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 11 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsravw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpsravw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsraw instruction.<br/>
		/// <br/>
		/// <c>VPSRAW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG E1 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRAW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG E1 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsraw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsraw_xmm_xmm_xmmm128 : Code.EVEX_Vpsraw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsraw instruction.<br/>
		/// <br/>
		/// <c>VPSRAW ymm1, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG E1 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRAW ymm1 {k1}{z}, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG E1 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsraw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsraw_ymm_ymm_xmmm128 : Code.EVEX_Vpsraw_ymm_k1z_ymm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsraw instruction.<br/>
		/// <br/>
		/// <c>VPSRAW zmm1 {k1}{z}, zmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG E1 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsraw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpsraw_zmm_k1z_zmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsraw instruction.<br/>
		/// <br/>
		/// <c>VPSRAW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG E1 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRAW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG E1 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsraw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsraw_xmm_xmm_xmmm128 : Code.EVEX_Vpsraw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsraw instruction.<br/>
		/// <br/>
		/// <c>VPSRAW ymm1, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG E1 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRAW ymm1 {k1}{z}, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG E1 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsraw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsraw_ymm_ymm_xmmm128 : Code.EVEX_Vpsraw_ymm_k1z_ymm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsraw instruction.<br/>
		/// <br/>
		/// <c>VPSRAW zmm1 {k1}{z}, zmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG E1 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsraw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpsraw_zmm_k1z_zmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsraw instruction.<br/>
		/// <br/>
		/// <c>VPSRAW xmm1 {k1}{z}, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 71 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRAW xmm1, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 71 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsraw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsraw_xmm_xmm_imm8 : Code.EVEX_Vpsraw_xmm_k1z_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vpsraw instruction.<br/>
		/// <br/>
		/// <c>VPSRAW ymm1 {k1}{z}, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 71 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRAW ymm1, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 71 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsraw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsraw_ymm_ymm_imm8 : Code.EVEX_Vpsraw_ymm_k1z_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vpsraw instruction.<br/>
		/// <br/>
		/// <c>VPSRAW zmm1 {k1}{z}, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 71 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsraw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpsraw_zmm_k1z_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vpsraw instruction.<br/>
		/// <br/>
		/// <c>VPSRAW xmm1 {k1}{z}, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 71 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsraw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpsraw_xmm_k1z_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vpsraw instruction.<br/>
		/// <br/>
		/// <c>VPSRAW ymm1 {k1}{z}, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 71 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsraw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpsraw_ymm_k1z_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vpsraw instruction.<br/>
		/// <br/>
		/// <c>VPSRAW zmm1 {k1}{z}, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 71 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsraw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpsraw_zmm_k1z_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vpsraw instruction.<br/>
		/// <br/>
		/// <c>VPSRAW xmm1 {k1}{z}, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 71 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRAW xmm1, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 71 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsraw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsraw_xmm_xmm_imm8 : Code.EVEX_Vpsraw_xmm_k1z_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vpsraw instruction.<br/>
		/// <br/>
		/// <c>VPSRAW ymm1 {k1}{z}, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 71 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRAW ymm1, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 71 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsraw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsraw_ymm_ymm_imm8 : Code.EVEX_Vpsraw_ymm_k1z_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vpsraw instruction.<br/>
		/// <br/>
		/// <c>VPSRAW zmm1 {k1}{z}, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 71 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsraw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpsraw_zmm_k1z_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vpsraw instruction.<br/>
		/// <br/>
		/// <c>VPSRAW xmm1 {k1}{z}, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 71 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsraw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpsraw_xmm_k1z_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vpsraw instruction.<br/>
		/// <br/>
		/// <c>VPSRAW ymm1 {k1}{z}, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 71 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsraw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpsraw_ymm_k1z_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vpsraw instruction.<br/>
		/// <br/>
		/// <c>VPSRAW zmm1 {k1}{z}, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 71 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsraw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpsraw_zmm_k1z_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vpsrld instruction.<br/>
		/// <br/>
		/// <c>VPSRLD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG D2 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLD xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 D2 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsrld_xmm_xmm_xmmm128 : Code.EVEX_Vpsrld_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsrld instruction.<br/>
		/// <br/>
		/// <c>VPSRLD ymm1, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG D2 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLD ymm1 {k1}{z}, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 D2 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrld(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsrld_ymm_ymm_xmmm128 : Code.EVEX_Vpsrld_ymm_k1z_ymm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsrld instruction.<br/>
		/// <br/>
		/// <c>VPSRLD zmm1 {k1}{z}, zmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 D2 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrld(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpsrld_zmm_k1z_zmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsrld instruction.<br/>
		/// <br/>
		/// <c>VPSRLD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG D2 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLD xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 D2 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsrld_xmm_xmm_xmmm128 : Code.EVEX_Vpsrld_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsrld instruction.<br/>
		/// <br/>
		/// <c>VPSRLD ymm1, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG D2 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLD ymm1 {k1}{z}, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 D2 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrld(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsrld_ymm_ymm_xmmm128 : Code.EVEX_Vpsrld_ymm_k1z_ymm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsrld instruction.<br/>
		/// <br/>
		/// <c>VPSRLD zmm1 {k1}{z}, zmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 D2 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrld(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpsrld_zmm_k1z_zmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsrld instruction.<br/>
		/// <br/>
		/// <c>VPSRLD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 72 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLD xmm1, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 72 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsrld_xmm_xmm_imm8 : Code.EVEX_Vpsrld_xmm_k1z_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vpsrld instruction.<br/>
		/// <br/>
		/// <c>VPSRLD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 72 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLD ymm1, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 72 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrld(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsrld_ymm_ymm_imm8 : Code.EVEX_Vpsrld_ymm_k1z_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vpsrld instruction.<br/>
		/// <br/>
		/// <c>VPSRLD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 72 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrld(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpsrld_zmm_k1z_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vpsrld instruction.<br/>
		/// <br/>
		/// <c>VPSRLD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 72 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrld(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpsrld_xmm_k1z_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpsrld instruction.<br/>
		/// <br/>
		/// <c>VPSRLD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 72 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrld(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpsrld_ymm_k1z_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpsrld instruction.<br/>
		/// <br/>
		/// <c>VPSRLD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 72 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrld(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpsrld_zmm_k1z_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpsrld instruction.<br/>
		/// <br/>
		/// <c>VPSRLD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 72 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLD xmm1, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 72 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsrld_xmm_xmm_imm8 : Code.EVEX_Vpsrld_xmm_k1z_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vpsrld instruction.<br/>
		/// <br/>
		/// <c>VPSRLD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 72 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLD ymm1, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 72 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrld(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsrld_ymm_ymm_imm8 : Code.EVEX_Vpsrld_ymm_k1z_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vpsrld instruction.<br/>
		/// <br/>
		/// <c>VPSRLD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 72 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrld(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpsrld_zmm_k1z_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vpsrld instruction.<br/>
		/// <br/>
		/// <c>VPSRLD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 72 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrld(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpsrld_xmm_k1z_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpsrld instruction.<br/>
		/// <br/>
		/// <c>VPSRLD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 72 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrld(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpsrld_ymm_k1z_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpsrld instruction.<br/>
		/// <br/>
		/// <c>VPSRLD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 72 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrld(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpsrld_zmm_k1z_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpsrldq instruction.<br/>
		/// <br/>
		/// <c>VPSRLDQ xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 73 /3 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLDQ xmm1, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 73 /3 ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsrldq_xmm_xmm_imm8 : Code.EVEX_Vpsrldq_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>vpsrldq instruction.<br/>
		/// <br/>
		/// <c>VPSRLDQ ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 73 /3 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLDQ ymm1, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 73 /3 ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsrldq_ymm_ymm_imm8 : Code.EVEX_Vpsrldq_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>vpsrldq instruction.<br/>
		/// <br/>
		/// <c>VPSRLDQ zmm1, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 73 /3 ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpsrldq_zmm_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>vpsrldq instruction.<br/>
		/// <br/>
		/// <c>VPSRLDQ xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 73 /3 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrldq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpsrldq_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vpsrldq instruction.<br/>
		/// <br/>
		/// <c>VPSRLDQ ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 73 /3 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrldq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpsrldq_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vpsrldq instruction.<br/>
		/// <br/>
		/// <c>VPSRLDQ zmm1, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 73 /3 ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrldq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpsrldq_zmm_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vpsrldq instruction.<br/>
		/// <br/>
		/// <c>VPSRLDQ xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 73 /3 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLDQ xmm1, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 73 /3 ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsrldq_xmm_xmm_imm8 : Code.EVEX_Vpsrldq_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>vpsrldq instruction.<br/>
		/// <br/>
		/// <c>VPSRLDQ ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 73 /3 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLDQ ymm1, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 73 /3 ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsrldq_ymm_ymm_imm8 : Code.EVEX_Vpsrldq_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>vpsrldq instruction.<br/>
		/// <br/>
		/// <c>VPSRLDQ zmm1, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 73 /3 ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpsrldq_zmm_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>vpsrldq instruction.<br/>
		/// <br/>
		/// <c>VPSRLDQ xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 73 /3 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrldq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpsrldq_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vpsrldq instruction.<br/>
		/// <br/>
		/// <c>VPSRLDQ ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 73 /3 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrldq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpsrldq_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vpsrldq instruction.<br/>
		/// <br/>
		/// <c>VPSRLDQ zmm1, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 73 /3 ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrldq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpsrldq_zmm_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vpsrlq instruction.<br/>
		/// <br/>
		/// <c>VPSRLQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG D3 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLQ xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 D3 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsrlq_xmm_xmm_xmmm128 : Code.EVEX_Vpsrlq_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsrlq instruction.<br/>
		/// <br/>
		/// <c>VPSRLQ ymm1, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG D3 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLQ ymm1 {k1}{z}, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 D3 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsrlq_ymm_ymm_xmmm128 : Code.EVEX_Vpsrlq_ymm_k1z_ymm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsrlq instruction.<br/>
		/// <br/>
		/// <c>VPSRLQ zmm1 {k1}{z}, zmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 D3 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpsrlq_zmm_k1z_zmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsrlq instruction.<br/>
		/// <br/>
		/// <c>VPSRLQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG D3 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLQ xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 D3 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsrlq_xmm_xmm_xmmm128 : Code.EVEX_Vpsrlq_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsrlq instruction.<br/>
		/// <br/>
		/// <c>VPSRLQ ymm1, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG D3 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLQ ymm1 {k1}{z}, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 D3 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsrlq_ymm_ymm_xmmm128 : Code.EVEX_Vpsrlq_ymm_k1z_ymm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsrlq instruction.<br/>
		/// <br/>
		/// <c>VPSRLQ zmm1 {k1}{z}, zmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 D3 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpsrlq_zmm_k1z_zmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsrlq instruction.<br/>
		/// <br/>
		/// <c>VPSRLQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 73 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLQ xmm1, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 73 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsrlq_xmm_xmm_imm8 : Code.EVEX_Vpsrlq_xmm_k1z_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vpsrlq instruction.<br/>
		/// <br/>
		/// <c>VPSRLQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 73 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLQ ymm1, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 73 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsrlq_ymm_ymm_imm8 : Code.EVEX_Vpsrlq_ymm_k1z_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vpsrlq instruction.<br/>
		/// <br/>
		/// <c>VPSRLQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 73 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpsrlq_zmm_k1z_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vpsrlq instruction.<br/>
		/// <br/>
		/// <c>VPSRLQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 73 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpsrlq_xmm_k1z_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpsrlq instruction.<br/>
		/// <br/>
		/// <c>VPSRLQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 73 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpsrlq_ymm_k1z_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpsrlq instruction.<br/>
		/// <br/>
		/// <c>VPSRLQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 73 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpsrlq_zmm_k1z_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpsrlq instruction.<br/>
		/// <br/>
		/// <c>VPSRLQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 73 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLQ xmm1, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 73 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsrlq_xmm_xmm_imm8 : Code.EVEX_Vpsrlq_xmm_k1z_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vpsrlq instruction.<br/>
		/// <br/>
		/// <c>VPSRLQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 73 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLQ ymm1, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 73 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsrlq_ymm_ymm_imm8 : Code.EVEX_Vpsrlq_ymm_k1z_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vpsrlq instruction.<br/>
		/// <br/>
		/// <c>VPSRLQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 73 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpsrlq_zmm_k1z_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vpsrlq instruction.<br/>
		/// <br/>
		/// <c>VPSRLQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 73 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpsrlq_xmm_k1z_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpsrlq instruction.<br/>
		/// <br/>
		/// <c>VPSRLQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 73 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpsrlq_ymm_k1z_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpsrlq instruction.<br/>
		/// <br/>
		/// <c>VPSRLQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 73 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpsrlq_zmm_k1z_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vpsrlvd instruction.<br/>
		/// <br/>
		/// <c>VPSRLVD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 45 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 45 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsrlvd_xmm_xmm_xmmm128 : Code.EVEX_Vpsrlvd_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsrlvd instruction.<br/>
		/// <br/>
		/// <c>VPSRLVD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 45 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 45 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsrlvd_ymm_ymm_ymmm256 : Code.EVEX_Vpsrlvd_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsrlvd instruction.<br/>
		/// <br/>
		/// <c>VPSRLVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 45 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpsrlvd_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsrlvd instruction.<br/>
		/// <br/>
		/// <c>VPSRLVD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 45 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 45 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpsrlvd_xmm_k1z_xmm_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vpsrlvd_xmm_xmm_xmmm128 : Code.EVEX_Vpsrlvd_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpsrlvd instruction.<br/>
		/// <br/>
		/// <c>VPSRLVD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 45 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 45 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpsrlvd_ymm_k1z_ymm_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vpsrlvd_ymm_ymm_ymmm256 : Code.EVEX_Vpsrlvd_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpsrlvd instruction.<br/>
		/// <br/>
		/// <c>VPSRLVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 45 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpsrlvd_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpsrlvq instruction.<br/>
		/// <br/>
		/// <c>VPSRLVQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 45 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 45 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsrlvq_xmm_xmm_xmmm128 : Code.EVEX_Vpsrlvq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsrlvq instruction.<br/>
		/// <br/>
		/// <c>VPSRLVQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 45 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 45 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsrlvq_ymm_ymm_ymmm256 : Code.EVEX_Vpsrlvq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsrlvq instruction.<br/>
		/// <br/>
		/// <c>VPSRLVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 45 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpsrlvq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsrlvq instruction.<br/>
		/// <br/>
		/// <c>VPSRLVQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 45 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 45 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpsrlvq_xmm_k1z_xmm_xmmm128b64;
			} else op = PreferVex ? Code.VEX_Vpsrlvq_xmm_xmm_xmmm128 : Code.EVEX_Vpsrlvq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpsrlvq instruction.<br/>
		/// <br/>
		/// <c>VPSRLVQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 45 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 45 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpsrlvq_ymm_k1z_ymm_ymmm256b64;
			} else op = PreferVex ? Code.VEX_Vpsrlvq_ymm_ymm_ymmm256 : Code.EVEX_Vpsrlvq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpsrlvq instruction.<br/>
		/// <br/>
		/// <c>VPSRLVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 45 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpsrlvq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpsrlvw instruction.<br/>
		/// <br/>
		/// <c>VPSRLVW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlvw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpsrlvw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsrlvw instruction.<br/>
		/// <br/>
		/// <c>VPSRLVW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlvw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpsrlvw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsrlvw instruction.<br/>
		/// <br/>
		/// <c>VPSRLVW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlvw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpsrlvw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsrlvw instruction.<br/>
		/// <br/>
		/// <c>VPSRLVW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlvw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpsrlvw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsrlvw instruction.<br/>
		/// <br/>
		/// <c>VPSRLVW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlvw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpsrlvw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsrlvw instruction.<br/>
		/// <br/>
		/// <c>VPSRLVW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlvw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpsrlvw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsrlw instruction.<br/>
		/// <br/>
		/// <c>VPSRLW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG D1 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG D1 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsrlw_xmm_xmm_xmmm128 : Code.EVEX_Vpsrlw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsrlw instruction.<br/>
		/// <br/>
		/// <c>VPSRLW ymm1, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG D1 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLW ymm1 {k1}{z}, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG D1 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsrlw_ymm_ymm_xmmm128 : Code.EVEX_Vpsrlw_ymm_k1z_ymm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsrlw instruction.<br/>
		/// <br/>
		/// <c>VPSRLW zmm1 {k1}{z}, zmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG D1 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpsrlw_zmm_k1z_zmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsrlw instruction.<br/>
		/// <br/>
		/// <c>VPSRLW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG D1 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG D1 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsrlw_xmm_xmm_xmmm128 : Code.EVEX_Vpsrlw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsrlw instruction.<br/>
		/// <br/>
		/// <c>VPSRLW ymm1, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG D1 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLW ymm1 {k1}{z}, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG D1 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsrlw_ymm_ymm_xmmm128 : Code.EVEX_Vpsrlw_ymm_k1z_ymm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsrlw instruction.<br/>
		/// <br/>
		/// <c>VPSRLW zmm1 {k1}{z}, zmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG D1 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpsrlw_zmm_k1z_zmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsrlw instruction.<br/>
		/// <br/>
		/// <c>VPSRLW xmm1 {k1}{z}, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 71 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLW xmm1, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 71 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsrlw_xmm_xmm_imm8 : Code.EVEX_Vpsrlw_xmm_k1z_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vpsrlw instruction.<br/>
		/// <br/>
		/// <c>VPSRLW ymm1 {k1}{z}, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 71 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLW ymm1, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 71 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsrlw_ymm_ymm_imm8 : Code.EVEX_Vpsrlw_ymm_k1z_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vpsrlw instruction.<br/>
		/// <br/>
		/// <c>VPSRLW zmm1 {k1}{z}, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 71 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpsrlw_zmm_k1z_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vpsrlw instruction.<br/>
		/// <br/>
		/// <c>VPSRLW xmm1 {k1}{z}, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 71 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpsrlw_xmm_k1z_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vpsrlw instruction.<br/>
		/// <br/>
		/// <c>VPSRLW ymm1 {k1}{z}, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 71 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpsrlw_ymm_k1z_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vpsrlw instruction.<br/>
		/// <br/>
		/// <c>VPSRLW zmm1 {k1}{z}, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 71 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpsrlw_zmm_k1z_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags);
		}
		/// <summary>vpsrlw instruction.<br/>
		/// <br/>
		/// <c>VPSRLW xmm1 {k1}{z}, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 71 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLW xmm1, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 71 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsrlw_xmm_xmm_imm8 : Code.EVEX_Vpsrlw_xmm_k1z_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vpsrlw instruction.<br/>
		/// <br/>
		/// <c>VPSRLW ymm1 {k1}{z}, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 71 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLW ymm1, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 71 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsrlw_ymm_ymm_imm8 : Code.EVEX_Vpsrlw_ymm_k1z_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vpsrlw instruction.<br/>
		/// <br/>
		/// <c>VPSRLW zmm1 {k1}{z}, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 71 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpsrlw_zmm_k1z_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vpsrlw instruction.<br/>
		/// <br/>
		/// <c>VPSRLW xmm1 {k1}{z}, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 71 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpsrlw_xmm_k1z_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vpsrlw instruction.<br/>
		/// <br/>
		/// <c>VPSRLW ymm1 {k1}{z}, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 71 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpsrlw_ymm_k1z_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vpsrlw instruction.<br/>
		/// <br/>
		/// <c>VPSRLW zmm1 {k1}{z}, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 71 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsrlw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vpsrlw_zmm_k1z_zmmm512_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags);
		}
		/// <summary>vpsubb instruction.<br/>
		/// <br/>
		/// <c>VPSUBB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG F8 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG F8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsubb_xmm_xmm_xmmm128 : Code.EVEX_Vpsubb_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsubb instruction.<br/>
		/// <br/>
		/// <c>VPSUBB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG F8 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG F8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsubb_ymm_ymm_ymmm256 : Code.EVEX_Vpsubb_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsubb instruction.<br/>
		/// <br/>
		/// <c>VPSUBB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG F8 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpsubb_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsubb instruction.<br/>
		/// <br/>
		/// <c>VPSUBB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG F8 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG F8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsubb_xmm_xmm_xmmm128 : Code.EVEX_Vpsubb_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsubb instruction.<br/>
		/// <br/>
		/// <c>VPSUBB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG F8 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG F8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsubb_ymm_ymm_ymmm256 : Code.EVEX_Vpsubb_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsubb instruction.<br/>
		/// <br/>
		/// <c>VPSUBB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG F8 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpsubb_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsubd instruction.<br/>
		/// <br/>
		/// <c>VPSUBD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG FA /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 FA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsubd_xmm_xmm_xmmm128 : Code.EVEX_Vpsubd_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsubd instruction.<br/>
		/// <br/>
		/// <c>VPSUBD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG FA /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 FA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsubd_ymm_ymm_ymmm256 : Code.EVEX_Vpsubd_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsubd instruction.<br/>
		/// <br/>
		/// <c>VPSUBD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 FA /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpsubd_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsubd instruction.<br/>
		/// <br/>
		/// <c>VPSUBD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG FA /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 FA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpsubd_xmm_k1z_xmm_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vpsubd_xmm_xmm_xmmm128 : Code.EVEX_Vpsubd_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpsubd instruction.<br/>
		/// <br/>
		/// <c>VPSUBD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG FA /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 FA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpsubd_ymm_k1z_ymm_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vpsubd_ymm_ymm_ymmm256 : Code.EVEX_Vpsubd_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpsubd instruction.<br/>
		/// <br/>
		/// <c>VPSUBD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 FA /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpsubd_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpsubq instruction.<br/>
		/// <br/>
		/// <c>VPSUBQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG FB /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 FB /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsubq_xmm_xmm_xmmm128 : Code.EVEX_Vpsubq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsubq instruction.<br/>
		/// <br/>
		/// <c>VPSUBQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG FB /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 FB /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsubq_ymm_ymm_ymmm256 : Code.EVEX_Vpsubq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsubq instruction.<br/>
		/// <br/>
		/// <c>VPSUBQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 FB /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpsubq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsubq instruction.<br/>
		/// <br/>
		/// <c>VPSUBQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG FB /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 FB /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpsubq_xmm_k1z_xmm_xmmm128b64;
			} else op = PreferVex ? Code.VEX_Vpsubq_xmm_xmm_xmmm128 : Code.EVEX_Vpsubq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpsubq instruction.<br/>
		/// <br/>
		/// <c>VPSUBQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG FB /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 FB /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpsubq_ymm_k1z_ymm_ymmm256b64;
			} else op = PreferVex ? Code.VEX_Vpsubq_ymm_ymm_ymmm256 : Code.EVEX_Vpsubq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpsubq instruction.<br/>
		/// <br/>
		/// <c>VPSUBQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 FB /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpsubq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpsubsb instruction.<br/>
		/// <br/>
		/// <c>VPSUBSB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG E8 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBSB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG E8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsubsb_xmm_xmm_xmmm128 : Code.EVEX_Vpsubsb_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsubsb instruction.<br/>
		/// <br/>
		/// <c>VPSUBSB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG E8 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBSB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG E8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubsb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsubsb_ymm_ymm_ymmm256 : Code.EVEX_Vpsubsb_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsubsb instruction.<br/>
		/// <br/>
		/// <c>VPSUBSB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG E8 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubsb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpsubsb_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsubsb instruction.<br/>
		/// <br/>
		/// <c>VPSUBSB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG E8 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBSB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG E8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsubsb_xmm_xmm_xmmm128 : Code.EVEX_Vpsubsb_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsubsb instruction.<br/>
		/// <br/>
		/// <c>VPSUBSB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG E8 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBSB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG E8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubsb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsubsb_ymm_ymm_ymmm256 : Code.EVEX_Vpsubsb_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsubsb instruction.<br/>
		/// <br/>
		/// <c>VPSUBSB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG E8 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubsb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpsubsb_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsubsw instruction.<br/>
		/// <br/>
		/// <c>VPSUBSW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG E9 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBSW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG E9 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsubsw_xmm_xmm_xmmm128 : Code.EVEX_Vpsubsw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsubsw instruction.<br/>
		/// <br/>
		/// <c>VPSUBSW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG E9 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBSW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG E9 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsubsw_ymm_ymm_ymmm256 : Code.EVEX_Vpsubsw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsubsw instruction.<br/>
		/// <br/>
		/// <c>VPSUBSW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG E9 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpsubsw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsubsw instruction.<br/>
		/// <br/>
		/// <c>VPSUBSW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG E9 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBSW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG E9 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsubsw_xmm_xmm_xmmm128 : Code.EVEX_Vpsubsw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsubsw instruction.<br/>
		/// <br/>
		/// <c>VPSUBSW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG E9 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBSW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG E9 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsubsw_ymm_ymm_ymmm256 : Code.EVEX_Vpsubsw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsubsw instruction.<br/>
		/// <br/>
		/// <c>VPSUBSW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG E9 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpsubsw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsubusb instruction.<br/>
		/// <br/>
		/// <c>VPSUBUSB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG D8 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBUSB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG D8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubusb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsubusb_xmm_xmm_xmmm128 : Code.EVEX_Vpsubusb_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsubusb instruction.<br/>
		/// <br/>
		/// <c>VPSUBUSB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG D8 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBUSB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG D8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubusb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsubusb_ymm_ymm_ymmm256 : Code.EVEX_Vpsubusb_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsubusb instruction.<br/>
		/// <br/>
		/// <c>VPSUBUSB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG D8 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubusb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpsubusb_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsubusb instruction.<br/>
		/// <br/>
		/// <c>VPSUBUSB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG D8 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBUSB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG D8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubusb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsubusb_xmm_xmm_xmmm128 : Code.EVEX_Vpsubusb_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsubusb instruction.<br/>
		/// <br/>
		/// <c>VPSUBUSB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG D8 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBUSB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG D8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubusb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsubusb_ymm_ymm_ymmm256 : Code.EVEX_Vpsubusb_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsubusb instruction.<br/>
		/// <br/>
		/// <c>VPSUBUSB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG D8 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubusb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpsubusb_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsubusw instruction.<br/>
		/// <br/>
		/// <c>VPSUBUSW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG D9 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBUSW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG D9 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubusw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsubusw_xmm_xmm_xmmm128 : Code.EVEX_Vpsubusw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsubusw instruction.<br/>
		/// <br/>
		/// <c>VPSUBUSW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG D9 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBUSW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG D9 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubusw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsubusw_ymm_ymm_ymmm256 : Code.EVEX_Vpsubusw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsubusw instruction.<br/>
		/// <br/>
		/// <c>VPSUBUSW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG D9 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubusw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpsubusw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsubusw instruction.<br/>
		/// <br/>
		/// <c>VPSUBUSW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG D9 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBUSW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG D9 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubusw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsubusw_xmm_xmm_xmmm128 : Code.EVEX_Vpsubusw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsubusw instruction.<br/>
		/// <br/>
		/// <c>VPSUBUSW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG D9 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBUSW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG D9 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubusw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsubusw_ymm_ymm_ymmm256 : Code.EVEX_Vpsubusw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsubusw instruction.<br/>
		/// <br/>
		/// <c>VPSUBUSW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG D9 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubusw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpsubusw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsubw instruction.<br/>
		/// <br/>
		/// <c>VPSUBW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG F9 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG F9 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsubw_xmm_xmm_xmmm128 : Code.EVEX_Vpsubw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsubw instruction.<br/>
		/// <br/>
		/// <c>VPSUBW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG F9 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG F9 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsubw_ymm_ymm_ymmm256 : Code.EVEX_Vpsubw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsubw instruction.<br/>
		/// <br/>
		/// <c>VPSUBW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG F9 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpsubw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpsubw instruction.<br/>
		/// <br/>
		/// <c>VPSUBW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG F9 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG F9 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsubw_xmm_xmm_xmmm128 : Code.EVEX_Vpsubw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsubw instruction.<br/>
		/// <br/>
		/// <c>VPSUBW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG F9 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG F9 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpsubw_ymm_ymm_ymmm256 : Code.EVEX_Vpsubw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpsubw instruction.<br/>
		/// <br/>
		/// <c>VPSUBW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG F9 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpsubw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpsubw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpternlogd instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpternlogd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpternlogd_xmm_k1z_xmm_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpternlogd instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpternlogd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpternlogd_ymm_k1z_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpternlogd instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpternlogd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpternlogd_zmm_k1z_zmm_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpternlogd instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpternlogd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpternlogd_xmm_k1z_xmm_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpternlogd instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpternlogd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpternlogd_ymm_k1z_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpternlogd instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpternlogd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpternlogd_zmm_k1z_zmm_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpternlogd instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpternlogd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpternlogd_xmm_k1z_xmm_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpternlogd instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpternlogd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpternlogd_ymm_k1z_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpternlogd instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpternlogd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpternlogd_zmm_k1z_zmm_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpternlogd instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpternlogd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpternlogd_xmm_k1z_xmm_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpternlogd instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpternlogd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpternlogd_ymm_k1z_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpternlogd instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpternlogd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpternlogd_zmm_k1z_zmm_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpternlogq instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpternlogq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpternlogq_xmm_k1z_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpternlogq instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpternlogq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpternlogq_ymm_k1z_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpternlogq instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpternlogq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpternlogq_zmm_k1z_zmm_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vpternlogq instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpternlogq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpternlogq_xmm_k1z_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpternlogq instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpternlogq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpternlogq_ymm_k1z_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpternlogq instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpternlogq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vpternlogq_zmm_k1z_zmm_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpternlogq instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpternlogq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpternlogq_xmm_k1z_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpternlogq instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpternlogq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpternlogq_ymm_k1z_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpternlogq instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpternlogq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpternlogq_zmm_k1z_zmm_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vpternlogq instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpternlogq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpternlogq_xmm_k1z_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpternlogq instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpternlogq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpternlogq_ymm_k1z_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vpternlogq instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpternlogq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vpternlogq_zmm_k1z_zmm_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vptest instruction.<br/>
		/// <br/>
		/// <c>VPTEST xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 17 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptest(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.VEX_Vptest_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vptest instruction.<br/>
		/// <br/>
		/// <c>VPTEST ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 17 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptest(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.VEX_Vptest_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vptest instruction.<br/>
		/// <br/>
		/// <c>VPTEST xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 17 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptest(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.VEX_Vptest_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vptest instruction.<br/>
		/// <br/>
		/// <c>VPTEST ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 17 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptest(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.VEX_Vptest_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vptestmb instruction.<br/>
		/// <br/>
		/// <c>VPTESTMB k2 {k1}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestmb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vptestmb_kr_k1_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vptestmb instruction.<br/>
		/// <br/>
		/// <c>VPTESTMB k2 {k1}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestmb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vptestmb_kr_k1_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vptestmb instruction.<br/>
		/// <br/>
		/// <c>VPTESTMB k2 {k1}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestmb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vptestmb_kr_k1_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vptestmb instruction.<br/>
		/// <br/>
		/// <c>VPTESTMB k2 {k1}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestmb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vptestmb_kr_k1_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vptestmb instruction.<br/>
		/// <br/>
		/// <c>VPTESTMB k2 {k1}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestmb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vptestmb_kr_k1_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vptestmb instruction.<br/>
		/// <br/>
		/// <c>VPTESTMB k2 {k1}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestmb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vptestmb_kr_k1_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vptestmd instruction.<br/>
		/// <br/>
		/// <c>VPTESTMD k2 {k1}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestmd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vptestmd_kr_k1_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vptestmd instruction.<br/>
		/// <br/>
		/// <c>VPTESTMD k2 {k1}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestmd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vptestmd_kr_k1_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vptestmd instruction.<br/>
		/// <br/>
		/// <c>VPTESTMD k2 {k1}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestmd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vptestmd_kr_k1_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vptestmd instruction.<br/>
		/// <br/>
		/// <c>VPTESTMD k2 {k1}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestmd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vptestmd_kr_k1_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vptestmd instruction.<br/>
		/// <br/>
		/// <c>VPTESTMD k2 {k1}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestmd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vptestmd_kr_k1_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vptestmd instruction.<br/>
		/// <br/>
		/// <c>VPTESTMD k2 {k1}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestmd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vptestmd_kr_k1_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vptestmq instruction.<br/>
		/// <br/>
		/// <c>VPTESTMQ k2 {k1}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestmq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vptestmq_kr_k1_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vptestmq instruction.<br/>
		/// <br/>
		/// <c>VPTESTMQ k2 {k1}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestmq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vptestmq_kr_k1_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vptestmq instruction.<br/>
		/// <br/>
		/// <c>VPTESTMQ k2 {k1}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestmq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vptestmq_kr_k1_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vptestmq instruction.<br/>
		/// <br/>
		/// <c>VPTESTMQ k2 {k1}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestmq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vptestmq_kr_k1_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vptestmq instruction.<br/>
		/// <br/>
		/// <c>VPTESTMQ k2 {k1}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestmq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vptestmq_kr_k1_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vptestmq instruction.<br/>
		/// <br/>
		/// <c>VPTESTMQ k2 {k1}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestmq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vptestmq_kr_k1_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vptestmw instruction.<br/>
		/// <br/>
		/// <c>VPTESTMW k2 {k1}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestmw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vptestmw_kr_k1_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vptestmw instruction.<br/>
		/// <br/>
		/// <c>VPTESTMW k2 {k1}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestmw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vptestmw_kr_k1_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vptestmw instruction.<br/>
		/// <br/>
		/// <c>VPTESTMW k2 {k1}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestmw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vptestmw_kr_k1_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vptestmw instruction.<br/>
		/// <br/>
		/// <c>VPTESTMW k2 {k1}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestmw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vptestmw_kr_k1_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vptestmw instruction.<br/>
		/// <br/>
		/// <c>VPTESTMW k2 {k1}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestmw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vptestmw_kr_k1_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vptestmw instruction.<br/>
		/// <br/>
		/// <c>VPTESTMW k2 {k1}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestmw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vptestmw_kr_k1_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vptestnmb instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMB k2 {k1}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestnmb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vptestnmb_kr_k1_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vptestnmb instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMB k2 {k1}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestnmb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vptestnmb_kr_k1_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vptestnmb instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMB k2 {k1}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestnmb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vptestnmb_kr_k1_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vptestnmb instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMB k2 {k1}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestnmb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vptestnmb_kr_k1_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vptestnmb instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMB k2 {k1}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestnmb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vptestnmb_kr_k1_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vptestnmb instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMB k2 {k1}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestnmb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vptestnmb_kr_k1_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vptestnmd instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMD k2 {k1}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestnmd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vptestnmd_kr_k1_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vptestnmd instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMD k2 {k1}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestnmd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vptestnmd_kr_k1_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vptestnmd instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMD k2 {k1}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestnmd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vptestnmd_kr_k1_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vptestnmd instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMD k2 {k1}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestnmd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vptestnmd_kr_k1_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vptestnmd instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMD k2 {k1}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestnmd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vptestnmd_kr_k1_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vptestnmd instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMD k2 {k1}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestnmd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vptestnmd_kr_k1_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vptestnmq instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMQ k2 {k1}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W1 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestnmq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vptestnmq_kr_k1_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vptestnmq instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMQ k2 {k1}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W1 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestnmq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vptestnmq_kr_k1_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vptestnmq instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMQ k2 {k1}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W1 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestnmq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vptestnmq_kr_k1_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vptestnmq instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMQ k2 {k1}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W1 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestnmq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vptestnmq_kr_k1_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vptestnmq instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMQ k2 {k1}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W1 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestnmq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vptestnmq_kr_k1_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vptestnmq instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMQ k2 {k1}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W1 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestnmq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vptestnmq_kr_k1_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vptestnmw instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMW k2 {k1}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W1 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestnmw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vptestnmw_kr_k1_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vptestnmw instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMW k2 {k1}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W1 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestnmw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vptestnmw_kr_k1_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vptestnmw instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMW k2 {k1}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W1 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestnmw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vptestnmw_kr_k1_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vptestnmw instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMW k2 {k1}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W1 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestnmw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vptestnmw_kr_k1_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vptestnmw instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMW k2 {k1}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W1 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestnmw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vptestnmw_kr_k1_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vptestnmw instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMW k2 {k1}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W1 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vptestnmw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vptestnmw_kr_k1_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpunpckhbw instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHBW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 68 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKHBW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 68 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpckhbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpunpckhbw_xmm_xmm_xmmm128 : Code.EVEX_Vpunpckhbw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpunpckhbw instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHBW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 68 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKHBW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 68 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpckhbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpunpckhbw_ymm_ymm_ymmm256 : Code.EVEX_Vpunpckhbw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpunpckhbw instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHBW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 68 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpckhbw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpunpckhbw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpunpckhbw instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHBW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 68 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKHBW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 68 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpckhbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpunpckhbw_xmm_xmm_xmmm128 : Code.EVEX_Vpunpckhbw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpunpckhbw instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHBW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 68 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKHBW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 68 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpckhbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpunpckhbw_ymm_ymm_ymmm256 : Code.EVEX_Vpunpckhbw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpunpckhbw instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHBW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 68 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpckhbw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpunpckhbw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpunpckhdq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHDQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 6A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKHDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 6A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpckhdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpunpckhdq_xmm_xmm_xmmm128 : Code.EVEX_Vpunpckhdq_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpunpckhdq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHDQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 6A /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKHDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 6A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpckhdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpunpckhdq_ymm_ymm_ymmm256 : Code.EVEX_Vpunpckhdq_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpunpckhdq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 6A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpckhdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpunpckhdq_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpunpckhdq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHDQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 6A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKHDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 6A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpckhdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpunpckhdq_xmm_k1z_xmm_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vpunpckhdq_xmm_xmm_xmmm128 : Code.EVEX_Vpunpckhdq_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpunpckhdq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHDQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 6A /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKHDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 6A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpckhdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpunpckhdq_ymm_k1z_ymm_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vpunpckhdq_ymm_ymm_ymmm256 : Code.EVEX_Vpunpckhdq_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpunpckhdq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 6A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpckhdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpunpckhdq_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpunpckhqdq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHQDQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 6D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKHQDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 6D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpckhqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpunpckhqdq_xmm_xmm_xmmm128 : Code.EVEX_Vpunpckhqdq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpunpckhqdq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHQDQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 6D /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKHQDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 6D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpckhqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpunpckhqdq_ymm_ymm_ymmm256 : Code.EVEX_Vpunpckhqdq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpunpckhqdq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHQDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 6D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpckhqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpunpckhqdq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpunpckhqdq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHQDQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 6D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKHQDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 6D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpckhqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpunpckhqdq_xmm_k1z_xmm_xmmm128b64;
			} else op = PreferVex ? Code.VEX_Vpunpckhqdq_xmm_xmm_xmmm128 : Code.EVEX_Vpunpckhqdq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpunpckhqdq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHQDQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 6D /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKHQDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 6D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpckhqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpunpckhqdq_ymm_k1z_ymm_ymmm256b64;
			} else op = PreferVex ? Code.VEX_Vpunpckhqdq_ymm_ymm_ymmm256 : Code.EVEX_Vpunpckhqdq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpunpckhqdq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHQDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 6D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpckhqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpunpckhqdq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpunpckhwd instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHWD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 69 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKHWD xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 69 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpckhwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpunpckhwd_xmm_xmm_xmmm128 : Code.EVEX_Vpunpckhwd_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpunpckhwd instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHWD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 69 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKHWD ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 69 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpckhwd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpunpckhwd_ymm_ymm_ymmm256 : Code.EVEX_Vpunpckhwd_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpunpckhwd instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHWD zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 69 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpckhwd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpunpckhwd_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpunpckhwd instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHWD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 69 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKHWD xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 69 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpckhwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpunpckhwd_xmm_xmm_xmmm128 : Code.EVEX_Vpunpckhwd_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpunpckhwd instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHWD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 69 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKHWD ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 69 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpckhwd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpunpckhwd_ymm_ymm_ymmm256 : Code.EVEX_Vpunpckhwd_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpunpckhwd instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHWD zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 69 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpckhwd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpunpckhwd_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpunpcklbw instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLBW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 60 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKLBW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 60 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpcklbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpunpcklbw_xmm_xmm_xmmm128 : Code.EVEX_Vpunpcklbw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpunpcklbw instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLBW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 60 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKLBW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 60 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpcklbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpunpcklbw_ymm_ymm_ymmm256 : Code.EVEX_Vpunpcklbw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpunpcklbw instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLBW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 60 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpcklbw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpunpcklbw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpunpcklbw instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLBW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 60 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKLBW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 60 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpcklbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpunpcklbw_xmm_xmm_xmmm128 : Code.EVEX_Vpunpcklbw_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpunpcklbw instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLBW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 60 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKLBW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 60 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpcklbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpunpcklbw_ymm_ymm_ymmm256 : Code.EVEX_Vpunpcklbw_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpunpcklbw instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLBW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 60 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpcklbw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpunpcklbw_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpunpckldq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLDQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 62 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKLDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 62 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpckldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpunpckldq_xmm_xmm_xmmm128 : Code.EVEX_Vpunpckldq_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpunpckldq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLDQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 62 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKLDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 62 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpckldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpunpckldq_ymm_ymm_ymmm256 : Code.EVEX_Vpunpckldq_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpunpckldq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 62 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpckldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpunpckldq_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpunpckldq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLDQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 62 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKLDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 62 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpckldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpunpckldq_xmm_k1z_xmm_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vpunpckldq_xmm_xmm_xmmm128 : Code.EVEX_Vpunpckldq_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpunpckldq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLDQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 62 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKLDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 62 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpckldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpunpckldq_ymm_k1z_ymm_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vpunpckldq_ymm_ymm_ymmm256 : Code.EVEX_Vpunpckldq_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpunpckldq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 62 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpckldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpunpckldq_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpunpcklqdq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLQDQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 6C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKLQDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 6C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpcklqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpunpcklqdq_xmm_xmm_xmmm128 : Code.EVEX_Vpunpcklqdq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpunpcklqdq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLQDQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 6C /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKLQDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 6C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpcklqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpunpcklqdq_ymm_ymm_ymmm256 : Code.EVEX_Vpunpcklqdq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpunpcklqdq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLQDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 6C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpcklqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpunpcklqdq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpunpcklqdq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLQDQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 6C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKLQDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 6C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpcklqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpunpcklqdq_xmm_k1z_xmm_xmmm128b64;
			} else op = PreferVex ? Code.VEX_Vpunpcklqdq_xmm_xmm_xmmm128 : Code.EVEX_Vpunpcklqdq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpunpcklqdq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLQDQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 6C /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKLQDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 6C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpcklqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vpunpcklqdq_ymm_k1z_ymm_ymmm256b64;
			} else op = PreferVex ? Code.VEX_Vpunpcklqdq_ymm_ymm_ymmm256 : Code.EVEX_Vpunpcklqdq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpunpcklqdq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLQDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 6C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpcklqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpunpcklqdq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpunpcklwd instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLWD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 61 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKLWD xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 61 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpcklwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpunpcklwd_xmm_xmm_xmmm128 : Code.EVEX_Vpunpcklwd_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpunpcklwd instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLWD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 61 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKLWD ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 61 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpcklwd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpunpcklwd_ymm_ymm_ymmm256 : Code.EVEX_Vpunpcklwd_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpunpcklwd instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLWD zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 61 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpcklwd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpunpcklwd_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpunpcklwd instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLWD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 61 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKLWD xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 61 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpcklwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpunpcklwd_xmm_xmm_xmmm128 : Code.EVEX_Vpunpcklwd_xmm_k1z_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpunpcklwd instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLWD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 61 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKLWD ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 61 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpcklwd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vpunpcklwd_ymm_ymm_ymmm256 : Code.EVEX_Vpunpcklwd_ymm_k1z_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpunpcklwd instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLWD zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 61 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpunpcklwd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpunpcklwd_zmm_k1z_zmm_zmmm512;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vpxor instruction.<br/>
		/// <br/>
		/// <c>VPXOR xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG EF /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpxor(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.VEX_Vpxor_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vpxor instruction.<br/>
		/// <br/>
		/// <c>VPXOR ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG EF /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpxor(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.VEX_Vpxor_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vpxor instruction.<br/>
		/// <br/>
		/// <c>VPXOR xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG EF /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpxor(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vpxor_xmm_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpxor instruction.<br/>
		/// <br/>
		/// <c>VPXOR ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG EF /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpxor(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vpxor_ymm_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vpxord instruction.<br/>
		/// <br/>
		/// <c>VPXORD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 EF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpxord(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpxord_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpxord instruction.<br/>
		/// <br/>
		/// <c>VPXORD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 EF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpxord(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpxord_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpxord instruction.<br/>
		/// <br/>
		/// <c>VPXORD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 EF /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpxord(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpxord_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpxord instruction.<br/>
		/// <br/>
		/// <c>VPXORD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 EF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpxord(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpxord_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpxord instruction.<br/>
		/// <br/>
		/// <c>VPXORD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 EF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpxord(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpxord_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpxord instruction.<br/>
		/// <br/>
		/// <c>VPXORD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 EF /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpxord(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpxord_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpxorq instruction.<br/>
		/// <br/>
		/// <c>VPXORQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 EF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpxorq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vpxorq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpxorq instruction.<br/>
		/// <br/>
		/// <c>VPXORQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 EF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpxorq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vpxorq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpxorq instruction.<br/>
		/// <br/>
		/// <c>VPXORQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 EF /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpxorq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vpxorq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vpxorq instruction.<br/>
		/// <br/>
		/// <c>VPXORQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 EF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpxorq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpxorq_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpxorq instruction.<br/>
		/// <br/>
		/// <c>VPXORQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 EF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpxorq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpxorq_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vpxorq instruction.<br/>
		/// <br/>
		/// <c>VPXORQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 EF /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vpxorq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vpxorq_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vrangepd instruction.<br/>
		/// <br/>
		/// <c>VRANGEPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrangepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vrangepd_xmm_k1z_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vrangepd instruction.<br/>
		/// <br/>
		/// <c>VRANGEPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrangepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vrangepd_ymm_k1z_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vrangepd instruction.<br/>
		/// <br/>
		/// <c>VRANGEPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrangepd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vrangepd_zmm_k1z_zmm_zmmm512b64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags | src2.Flags);
		}
		/// <summary>vrangepd instruction.<br/>
		/// <br/>
		/// <c>VRANGEPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrangepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vrangepd_xmm_k1z_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vrangepd instruction.<br/>
		/// <br/>
		/// <c>VRANGEPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrangepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vrangepd_ymm_k1z_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vrangepd instruction.<br/>
		/// <br/>
		/// <c>VRANGEPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrangepd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vrangepd_zmm_k1z_zmm_zmmm512b64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vrangepd instruction.<br/>
		/// <br/>
		/// <c>VRANGEPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrangepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vrangepd_xmm_k1z_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vrangepd instruction.<br/>
		/// <br/>
		/// <c>VRANGEPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrangepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vrangepd_ymm_k1z_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vrangepd instruction.<br/>
		/// <br/>
		/// <c>VRANGEPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrangepd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vrangepd_zmm_k1z_zmm_zmmm512b64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vrangepd instruction.<br/>
		/// <br/>
		/// <c>VRANGEPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrangepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vrangepd_xmm_k1z_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vrangepd instruction.<br/>
		/// <br/>
		/// <c>VRANGEPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrangepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vrangepd_ymm_k1z_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vrangepd instruction.<br/>
		/// <br/>
		/// <c>VRANGEPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrangepd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vrangepd_zmm_k1z_zmm_zmmm512b64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vrangeps instruction.<br/>
		/// <br/>
		/// <c>VRANGEPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrangeps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vrangeps_xmm_k1z_xmm_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vrangeps instruction.<br/>
		/// <br/>
		/// <c>VRANGEPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrangeps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vrangeps_ymm_k1z_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vrangeps instruction.<br/>
		/// <br/>
		/// <c>VRANGEPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrangeps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vrangeps_zmm_k1z_zmm_zmmm512b32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags | src2.Flags);
		}
		/// <summary>vrangeps instruction.<br/>
		/// <br/>
		/// <c>VRANGEPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrangeps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vrangeps_xmm_k1z_xmm_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vrangeps instruction.<br/>
		/// <br/>
		/// <c>VRANGEPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrangeps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vrangeps_ymm_k1z_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vrangeps instruction.<br/>
		/// <br/>
		/// <c>VRANGEPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrangeps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vrangeps_zmm_k1z_zmm_zmmm512b32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vrangeps instruction.<br/>
		/// <br/>
		/// <c>VRANGEPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrangeps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vrangeps_xmm_k1z_xmm_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vrangeps instruction.<br/>
		/// <br/>
		/// <c>VRANGEPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrangeps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vrangeps_ymm_k1z_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vrangeps instruction.<br/>
		/// <br/>
		/// <c>VRANGEPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrangeps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vrangeps_zmm_k1z_zmm_zmmm512b32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vrangeps instruction.<br/>
		/// <br/>
		/// <c>VRANGEPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrangeps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vrangeps_xmm_k1z_xmm_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vrangeps instruction.<br/>
		/// <br/>
		/// <c>VRANGEPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrangeps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vrangeps_ymm_k1z_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vrangeps instruction.<br/>
		/// <br/>
		/// <c>VRANGEPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrangeps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vrangeps_zmm_k1z_zmm_zmmm512b32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vrangesd instruction.<br/>
		/// <br/>
		/// <c>VRANGESD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 51 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrangesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vrangesd_xmm_k1z_xmm_xmmm64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags | src2.Flags);
		}
		/// <summary>vrangesd instruction.<br/>
		/// <br/>
		/// <c>VRANGESD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 51 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrangesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vrangesd_xmm_k1z_xmm_xmmm64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vrangesd instruction.<br/>
		/// <br/>
		/// <c>VRANGESD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 51 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrangesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vrangesd_xmm_k1z_xmm_xmmm64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vrangesd instruction.<br/>
		/// <br/>
		/// <c>VRANGESD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 51 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrangesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vrangesd_xmm_k1z_xmm_xmmm64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vrangess instruction.<br/>
		/// <br/>
		/// <c>VRANGESS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 51 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrangess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vrangess_xmm_k1z_xmm_xmmm32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags | src2.Flags);
		}
		/// <summary>vrangess instruction.<br/>
		/// <br/>
		/// <c>VRANGESS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 51 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrangess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vrangess_xmm_k1z_xmm_xmmm32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vrangess instruction.<br/>
		/// <br/>
		/// <c>VRANGESS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 51 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrangess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vrangess_xmm_k1z_xmm_xmmm32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vrangess instruction.<br/>
		/// <br/>
		/// <c>VRANGESS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 51 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrangess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vrangess_xmm_k1z_xmm_xmmm32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vrcp14pd instruction.<br/>
		/// <br/>
		/// <c>VRCP14PD xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 4C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrcp14pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vrcp14pd_xmm_k1z_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vrcp14pd instruction.<br/>
		/// <br/>
		/// <c>VRCP14PD ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 4C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrcp14pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vrcp14pd_ymm_k1z_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vrcp14pd instruction.<br/>
		/// <br/>
		/// <c>VRCP14PD zmm1 {k1}{z}, zmm2/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 4C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrcp14pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vrcp14pd_zmm_k1z_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vrcp14pd instruction.<br/>
		/// <br/>
		/// <c>VRCP14PD xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 4C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrcp14pd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vrcp14pd_xmm_k1z_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vrcp14pd instruction.<br/>
		/// <br/>
		/// <c>VRCP14PD ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 4C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrcp14pd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vrcp14pd_ymm_k1z_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vrcp14pd instruction.<br/>
		/// <br/>
		/// <c>VRCP14PD zmm1 {k1}{z}, zmm2/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 4C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrcp14pd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vrcp14pd_zmm_k1z_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vrcp14ps instruction.<br/>
		/// <br/>
		/// <c>VRCP14PS xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 4C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrcp14ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vrcp14ps_xmm_k1z_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vrcp14ps instruction.<br/>
		/// <br/>
		/// <c>VRCP14PS ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 4C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrcp14ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vrcp14ps_ymm_k1z_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vrcp14ps instruction.<br/>
		/// <br/>
		/// <c>VRCP14PS zmm1 {k1}{z}, zmm2/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 4C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrcp14ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vrcp14ps_zmm_k1z_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vrcp14ps instruction.<br/>
		/// <br/>
		/// <c>VRCP14PS xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 4C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrcp14ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vrcp14ps_xmm_k1z_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vrcp14ps instruction.<br/>
		/// <br/>
		/// <c>VRCP14PS ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 4C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrcp14ps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vrcp14ps_ymm_k1z_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vrcp14ps instruction.<br/>
		/// <br/>
		/// <c>VRCP14PS zmm1 {k1}{z}, zmm2/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 4C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrcp14ps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vrcp14ps_zmm_k1z_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vrcp14sd instruction.<br/>
		/// <br/>
		/// <c>VRCP14SD xmm1 {k1}{z}, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 4D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrcp14sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vrcp14sd_xmm_k1z_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vrcp14sd instruction.<br/>
		/// <br/>
		/// <c>VRCP14SD xmm1 {k1}{z}, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 4D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrcp14sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vrcp14sd_xmm_k1z_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vrcp14ss instruction.<br/>
		/// <br/>
		/// <c>VRCP14SS xmm1 {k1}{z}, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 4D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrcp14ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vrcp14ss_xmm_k1z_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vrcp14ss instruction.<br/>
		/// <br/>
		/// <c>VRCP14SS xmm1 {k1}{z}, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 4D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrcp14ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vrcp14ss_xmm_k1z_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vrcp28pd instruction.<br/>
		/// <br/>
		/// <c>VRCP28PD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 CA /r</c><br/>
		/// <br/>
		/// <c>AVX512ER</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrcp28pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vrcp28pd_zmm_k1z_zmmm512b64_sae;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags | src.Flags);
		}
		/// <summary>vrcp28pd instruction.<br/>
		/// <br/>
		/// <c>VRCP28PD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 CA /r</c><br/>
		/// <br/>
		/// <c>AVX512ER</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrcp28pd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vrcp28pd_zmm_k1z_zmmm512b64_sae;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vrcp28ps instruction.<br/>
		/// <br/>
		/// <c>VRCP28PS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 CA /r</c><br/>
		/// <br/>
		/// <c>AVX512ER</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrcp28ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vrcp28ps_zmm_k1z_zmmm512b32_sae;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags | src.Flags);
		}
		/// <summary>vrcp28ps instruction.<br/>
		/// <br/>
		/// <c>VRCP28PS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 CA /r</c><br/>
		/// <br/>
		/// <c>AVX512ER</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrcp28ps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vrcp28ps_zmm_k1z_zmmm512b32_sae;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vrcp28sd instruction.<br/>
		/// <br/>
		/// <c>VRCP28SD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 CB /r</c><br/>
		/// <br/>
		/// <c>AVX512ER</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrcp28sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vrcp28sd_xmm_k1z_xmm_xmmm64_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vrcp28sd instruction.<br/>
		/// <br/>
		/// <c>VRCP28SD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 CB /r</c><br/>
		/// <br/>
		/// <c>AVX512ER</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrcp28sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vrcp28sd_xmm_k1z_xmm_xmmm64_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vrcp28ss instruction.<br/>
		/// <br/>
		/// <c>VRCP28SS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 CB /r</c><br/>
		/// <br/>
		/// <c>AVX512ER</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrcp28ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vrcp28ss_xmm_k1z_xmm_xmmm32_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vrcp28ss instruction.<br/>
		/// <br/>
		/// <c>VRCP28SS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 CB /r</c><br/>
		/// <br/>
		/// <c>AVX512ER</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrcp28ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vrcp28ss_xmm_k1z_xmm_xmmm32_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vrcpps instruction.<br/>
		/// <br/>
		/// <c>VRCPPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 53 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrcpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.VEX_Vrcpps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vrcpps instruction.<br/>
		/// <br/>
		/// <c>VRCPPS ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 53 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrcpps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.VEX_Vrcpps_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vrcpps instruction.<br/>
		/// <br/>
		/// <c>VRCPPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 53 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrcpps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.VEX_Vrcpps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vrcpps instruction.<br/>
		/// <br/>
		/// <c>VRCPPS ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 53 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrcpps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.VEX_Vrcpps_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vrcpss instruction.<br/>
		/// <br/>
		/// <c>VRCPSS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG 53 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrcpss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.VEX_Vrcpss_xmm_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vrcpss instruction.<br/>
		/// <br/>
		/// <c>VRCPSS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG 53 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrcpss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vrcpss_xmm_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vreducepd instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vreducepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vreducepd_xmm_k1z_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vreducepd instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vreducepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vreducepd_ymm_k1z_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vreducepd instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vreducepd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vreducepd_zmm_k1z_zmmm512b64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags | src1.Flags);
		}
		/// <summary>vreducepd instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vreducepd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vreducepd_xmm_k1z_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vreducepd instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vreducepd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vreducepd_ymm_k1z_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vreducepd instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vreducepd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vreducepd_zmm_k1z_zmmm512b64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vreducepd instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vreducepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vreducepd_xmm_k1z_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vreducepd instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vreducepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vreducepd_ymm_k1z_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vreducepd instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vreducepd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vreducepd_zmm_k1z_zmmm512b64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vreducepd instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vreducepd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vreducepd_xmm_k1z_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vreducepd instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vreducepd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vreducepd_ymm_k1z_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vreducepd instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vreducepd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vreducepd_zmm_k1z_zmmm512b64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vreduceps instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vreduceps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vreduceps_xmm_k1z_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vreduceps instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPS ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vreduceps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vreduceps_ymm_k1z_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vreduceps instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vreduceps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vreduceps_zmm_k1z_zmmm512b32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags | src1.Flags);
		}
		/// <summary>vreduceps instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vreduceps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vreduceps_xmm_k1z_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vreduceps instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPS ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vreduceps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vreduceps_ymm_k1z_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vreduceps instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vreduceps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vreduceps_zmm_k1z_zmmm512b32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vreduceps instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vreduceps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vreduceps_xmm_k1z_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vreduceps instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPS ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vreduceps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vreduceps_ymm_k1z_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vreduceps instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vreduceps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vreduceps_zmm_k1z_zmmm512b32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vreduceps instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vreduceps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vreduceps_xmm_k1z_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vreduceps instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPS ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vreduceps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vreduceps_ymm_k1z_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vreduceps instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vreduceps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vreduceps_zmm_k1z_zmmm512b32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vreducesd instruction.<br/>
		/// <br/>
		/// <c>VREDUCESD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 57 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vreducesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vreducesd_xmm_k1z_xmm_xmmm64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags | src2.Flags);
		}
		/// <summary>vreducesd instruction.<br/>
		/// <br/>
		/// <c>VREDUCESD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 57 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vreducesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vreducesd_xmm_k1z_xmm_xmmm64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vreducesd instruction.<br/>
		/// <br/>
		/// <c>VREDUCESD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 57 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vreducesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vreducesd_xmm_k1z_xmm_xmmm64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vreducesd instruction.<br/>
		/// <br/>
		/// <c>VREDUCESD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 57 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vreducesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vreducesd_xmm_k1z_xmm_xmmm64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vreducess instruction.<br/>
		/// <br/>
		/// <c>VREDUCESS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 57 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vreducess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vreducess_xmm_k1z_xmm_xmmm32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags | src2.Flags);
		}
		/// <summary>vreducess instruction.<br/>
		/// <br/>
		/// <c>VREDUCESS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 57 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vreducess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vreducess_xmm_k1z_xmm_xmmm32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vreducess instruction.<br/>
		/// <br/>
		/// <c>VREDUCESS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 57 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vreducess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vreducess_xmm_k1z_xmm_xmmm32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vreducess instruction.<br/>
		/// <br/>
		/// <c>VREDUCESS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 57 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vreducess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vreducess_xmm_k1z_xmm_xmmm32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vrndscalepd instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 09 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrndscalepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vrndscalepd_xmm_k1z_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vrndscalepd instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 09 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrndscalepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vrndscalepd_ymm_k1z_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vrndscalepd instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 09 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrndscalepd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vrndscalepd_zmm_k1z_zmmm512b64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags | src1.Flags);
		}
		/// <summary>vrndscalepd instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 09 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrndscalepd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vrndscalepd_xmm_k1z_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vrndscalepd instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 09 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrndscalepd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vrndscalepd_ymm_k1z_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vrndscalepd instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 09 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrndscalepd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vrndscalepd_zmm_k1z_zmmm512b64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vrndscalepd instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 09 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrndscalepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vrndscalepd_xmm_k1z_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vrndscalepd instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 09 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrndscalepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vrndscalepd_ymm_k1z_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vrndscalepd instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 09 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrndscalepd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vrndscalepd_zmm_k1z_zmmm512b64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vrndscalepd instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 09 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrndscalepd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vrndscalepd_xmm_k1z_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vrndscalepd instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 09 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrndscalepd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vrndscalepd_ymm_k1z_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vrndscalepd instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 09 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrndscalepd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vrndscalepd_zmm_k1z_zmmm512b64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vrndscaleps instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrndscaleps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vrndscaleps_xmm_k1z_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vrndscaleps instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPS ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrndscaleps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vrndscaleps_ymm_k1z_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags);
		}
		/// <summary>vrndscaleps instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrndscaleps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vrndscaleps_zmm_k1z_zmmm512b32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, imm), dst.Flags | src1.Flags);
		}
		/// <summary>vrndscaleps instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrndscaleps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vrndscaleps_xmm_k1z_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vrndscaleps instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPS ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrndscaleps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vrndscaleps_ymm_k1z_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vrndscaleps instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrndscaleps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.EVEX_Vrndscaleps_zmm_k1z_zmmm512b32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm), dst.Flags | src1.Flags);
		}
		/// <summary>vrndscaleps instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrndscaleps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vrndscaleps_xmm_k1z_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vrndscaleps instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPS ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrndscaleps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vrndscaleps_ymm_k1z_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags);
		}
		/// <summary>vrndscaleps instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrndscaleps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm) {
			Code op;
			op = Code.EVEX_Vrndscaleps_zmm_k1z_zmmm512b32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vrndscaleps instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrndscaleps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vrndscaleps_xmm_k1z_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vrndscaleps instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPS ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrndscaleps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vrndscaleps_ymm_k1z_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vrndscaleps instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrndscaleps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.EVEX_Vrndscaleps_zmm_k1z_zmmm512b32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src1.Flags);
		}
		/// <summary>vrndscalesd instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALESD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 0B /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrndscalesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vrndscalesd_xmm_k1z_xmm_xmmm64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags | src2.Flags);
		}
		/// <summary>vrndscalesd instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALESD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 0B /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrndscalesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vrndscalesd_xmm_k1z_xmm_xmmm64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vrndscalesd instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALESD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 0B /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrndscalesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vrndscalesd_xmm_k1z_xmm_xmmm64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vrndscalesd instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALESD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 0B /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrndscalesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vrndscalesd_xmm_k1z_xmm_xmmm64_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vrndscaless instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALESS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 0A /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrndscaless(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vrndscaless_xmm_k1z_xmm_xmmm32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags | src2.Flags);
		}
		/// <summary>vrndscaless instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALESS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 0A /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrndscaless(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vrndscaless_xmm_k1z_xmm_xmmm32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vrndscaless instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALESS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 0A /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrndscaless(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vrndscaless_xmm_k1z_xmm_xmmm32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vrndscaless instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALESS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 0A /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrndscaless(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vrndscaless_xmm_k1z_xmm_xmmm32_imm8_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vroundpd instruction.<br/>
		/// <br/>
		/// <c>VROUNDPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 09 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vroundpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.VEX_Vroundpd_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>vroundpd instruction.<br/>
		/// <br/>
		/// <c>VROUNDPD ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 09 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vroundpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm) {
			Code op;
			op = Code.VEX_Vroundpd_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>vroundpd instruction.<br/>
		/// <br/>
		/// <c>VROUNDPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 09 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vroundpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.VEX_Vroundpd_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vroundpd instruction.<br/>
		/// <br/>
		/// <c>VROUNDPD ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 09 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vroundpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.VEX_Vroundpd_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vroundpd instruction.<br/>
		/// <br/>
		/// <c>VROUNDPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 09 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vroundpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.VEX_Vroundpd_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>vroundpd instruction.<br/>
		/// <br/>
		/// <c>VROUNDPD ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 09 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vroundpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm) {
			Code op;
			op = Code.VEX_Vroundpd_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>vroundpd instruction.<br/>
		/// <br/>
		/// <c>VROUNDPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 09 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vroundpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.VEX_Vroundpd_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vroundpd instruction.<br/>
		/// <br/>
		/// <c>VROUNDPD ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 09 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vroundpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.VEX_Vroundpd_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vroundps instruction.<br/>
		/// <br/>
		/// <c>VROUNDPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vroundps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm) {
			Code op;
			op = Code.VEX_Vroundps_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>vroundps instruction.<br/>
		/// <br/>
		/// <c>VROUNDPS ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vroundps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm) {
			Code op;
			op = Code.VEX_Vroundps_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, imm));
		}
		/// <summary>vroundps instruction.<br/>
		/// <br/>
		/// <c>VROUNDPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vroundps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.VEX_Vroundps_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vroundps instruction.<br/>
		/// <br/>
		/// <c>VROUNDPS ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vroundps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm) {
			Code op;
			op = Code.VEX_Vroundps_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vroundps instruction.<br/>
		/// <br/>
		/// <c>VROUNDPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vroundps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm) {
			Code op;
			op = Code.VEX_Vroundps_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>vroundps instruction.<br/>
		/// <br/>
		/// <c>VROUNDPS ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vroundps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm) {
			Code op;
			op = Code.VEX_Vroundps_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, (uint)imm));
		}
		/// <summary>vroundps instruction.<br/>
		/// <br/>
		/// <c>VROUNDPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vroundps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.VEX_Vroundps_xmm_xmmm128_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vroundps instruction.<br/>
		/// <br/>
		/// <c>VROUNDPS ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vroundps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm) {
			Code op;
			op = Code.VEX_Vroundps_ymm_ymmm256_imm8;
			AddInstruction(Instruction.Create(op, dst, src1.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vroundsd instruction.<br/>
		/// <br/>
		/// <c>VROUNDSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.WIG 0B /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vroundsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vroundsd_xmm_xmm_xmmm64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm));
		}
		/// <summary>vroundsd instruction.<br/>
		/// <br/>
		/// <c>VROUNDSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.WIG 0B /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vroundsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vroundsd_xmm_xmm_xmmm64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vroundsd instruction.<br/>
		/// <br/>
		/// <c>VROUNDSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.WIG 0B /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vroundsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.VEX_Vroundsd_xmm_xmm_xmmm64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm));
		}
		/// <summary>vroundsd instruction.<br/>
		/// <br/>
		/// <c>VROUNDSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.WIG 0B /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vroundsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.VEX_Vroundsd_xmm_xmm_xmmm64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vroundss instruction.<br/>
		/// <br/>
		/// <c>VROUNDSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.WIG 0A /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vroundss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vroundss_xmm_xmm_xmmm32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm));
		}
		/// <summary>vroundss instruction.<br/>
		/// <br/>
		/// <c>VROUNDSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.WIG 0A /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vroundss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.VEX_Vroundss_xmm_xmm_xmmm32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>vroundss instruction.<br/>
		/// <br/>
		/// <c>VROUNDSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.WIG 0A /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vroundss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = Code.VEX_Vroundss_xmm_xmm_xmmm32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm));
		}
		/// <summary>vroundss instruction.<br/>
		/// <br/>
		/// <c>VROUNDSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.WIG 0A /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vroundss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.VEX_Vroundss_xmm_xmm_xmmm32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm));
		}
		/// <summary>vrsqrt14pd instruction.<br/>
		/// <br/>
		/// <c>VRSQRT14PD xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 4E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrsqrt14pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vrsqrt14pd_xmm_k1z_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vrsqrt14pd instruction.<br/>
		/// <br/>
		/// <c>VRSQRT14PD ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 4E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrsqrt14pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vrsqrt14pd_ymm_k1z_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vrsqrt14pd instruction.<br/>
		/// <br/>
		/// <c>VRSQRT14PD zmm1 {k1}{z}, zmm2/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 4E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrsqrt14pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vrsqrt14pd_zmm_k1z_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vrsqrt14pd instruction.<br/>
		/// <br/>
		/// <c>VRSQRT14PD xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 4E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrsqrt14pd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vrsqrt14pd_xmm_k1z_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vrsqrt14pd instruction.<br/>
		/// <br/>
		/// <c>VRSQRT14PD ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 4E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrsqrt14pd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vrsqrt14pd_ymm_k1z_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vrsqrt14pd instruction.<br/>
		/// <br/>
		/// <c>VRSQRT14PD zmm1 {k1}{z}, zmm2/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 4E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrsqrt14pd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vrsqrt14pd_zmm_k1z_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vrsqrt14ps instruction.<br/>
		/// <br/>
		/// <c>VRSQRT14PS xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 4E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrsqrt14ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vrsqrt14ps_xmm_k1z_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vrsqrt14ps instruction.<br/>
		/// <br/>
		/// <c>VRSQRT14PS ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 4E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrsqrt14ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vrsqrt14ps_ymm_k1z_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vrsqrt14ps instruction.<br/>
		/// <br/>
		/// <c>VRSQRT14PS zmm1 {k1}{z}, zmm2/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 4E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrsqrt14ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vrsqrt14ps_zmm_k1z_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vrsqrt14ps instruction.<br/>
		/// <br/>
		/// <c>VRSQRT14PS xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 4E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrsqrt14ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vrsqrt14ps_xmm_k1z_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vrsqrt14ps instruction.<br/>
		/// <br/>
		/// <c>VRSQRT14PS ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 4E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrsqrt14ps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vrsqrt14ps_ymm_k1z_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vrsqrt14ps instruction.<br/>
		/// <br/>
		/// <c>VRSQRT14PS zmm1 {k1}{z}, zmm2/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 4E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrsqrt14ps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vrsqrt14ps_zmm_k1z_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vrsqrt14sd instruction.<br/>
		/// <br/>
		/// <c>VRSQRT14SD xmm1 {k1}{z}, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 4F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrsqrt14sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vrsqrt14sd_xmm_k1z_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vrsqrt14sd instruction.<br/>
		/// <br/>
		/// <c>VRSQRT14SD xmm1 {k1}{z}, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 4F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrsqrt14sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vrsqrt14sd_xmm_k1z_xmm_xmmm64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vrsqrt14ss instruction.<br/>
		/// <br/>
		/// <c>VRSQRT14SS xmm1 {k1}{z}, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 4F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrsqrt14ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vrsqrt14ss_xmm_k1z_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vrsqrt14ss instruction.<br/>
		/// <br/>
		/// <c>VRSQRT14SS xmm1 {k1}{z}, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 4F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrsqrt14ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vrsqrt14ss_xmm_k1z_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vrsqrt28pd instruction.<br/>
		/// <br/>
		/// <c>VRSQRT28PD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 CC /r</c><br/>
		/// <br/>
		/// <c>AVX512ER</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrsqrt28pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vrsqrt28pd_zmm_k1z_zmmm512b64_sae;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags | src.Flags);
		}
		/// <summary>vrsqrt28pd instruction.<br/>
		/// <br/>
		/// <c>VRSQRT28PD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 CC /r</c><br/>
		/// <br/>
		/// <c>AVX512ER</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrsqrt28pd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vrsqrt28pd_zmm_k1z_zmmm512b64_sae;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vrsqrt28ps instruction.<br/>
		/// <br/>
		/// <c>VRSQRT28PS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 CC /r</c><br/>
		/// <br/>
		/// <c>AVX512ER</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrsqrt28ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vrsqrt28ps_zmm_k1z_zmmm512b32_sae;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags | src.Flags);
		}
		/// <summary>vrsqrt28ps instruction.<br/>
		/// <br/>
		/// <c>VRSQRT28PS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 CC /r</c><br/>
		/// <br/>
		/// <c>AVX512ER</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrsqrt28ps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vrsqrt28ps_zmm_k1z_zmmm512b32_sae;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vrsqrt28sd instruction.<br/>
		/// <br/>
		/// <c>VRSQRT28SD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 CD /r</c><br/>
		/// <br/>
		/// <c>AVX512ER</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrsqrt28sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vrsqrt28sd_xmm_k1z_xmm_xmmm64_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vrsqrt28sd instruction.<br/>
		/// <br/>
		/// <c>VRSQRT28SD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 CD /r</c><br/>
		/// <br/>
		/// <c>AVX512ER</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrsqrt28sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vrsqrt28sd_xmm_k1z_xmm_xmmm64_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vrsqrt28ss instruction.<br/>
		/// <br/>
		/// <c>VRSQRT28SS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 CD /r</c><br/>
		/// <br/>
		/// <c>AVX512ER</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrsqrt28ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vrsqrt28ss_xmm_k1z_xmm_xmmm32_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vrsqrt28ss instruction.<br/>
		/// <br/>
		/// <c>VRSQRT28SS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 CD /r</c><br/>
		/// <br/>
		/// <c>AVX512ER</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrsqrt28ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vrsqrt28ss_xmm_k1z_xmm_xmmm32_sae;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vrsqrtps instruction.<br/>
		/// <br/>
		/// <c>VRSQRTPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 52 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrsqrtps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.VEX_Vrsqrtps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vrsqrtps instruction.<br/>
		/// <br/>
		/// <c>VRSQRTPS ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 52 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrsqrtps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.VEX_Vrsqrtps_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vrsqrtps instruction.<br/>
		/// <br/>
		/// <c>VRSQRTPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 52 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrsqrtps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.VEX_Vrsqrtps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vrsqrtps instruction.<br/>
		/// <br/>
		/// <c>VRSQRTPS ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 52 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrsqrtps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.VEX_Vrsqrtps_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vrsqrtss instruction.<br/>
		/// <br/>
		/// <c>VRSQRTSS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG 52 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrsqrtss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.VEX_Vrsqrtss_xmm_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src1, src2));
		}
		/// <summary>vrsqrtss instruction.<br/>
		/// <br/>
		/// <c>VRSQRTSS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG 52 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vrsqrtss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.VEX_Vrsqrtss_xmm_xmm_xmmm32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)));
		}
		/// <summary>vscalefpd instruction.<br/>
		/// <br/>
		/// <c>VSCALEFPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vscalefpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vscalefpd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vscalefpd instruction.<br/>
		/// <br/>
		/// <c>VSCALEFPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vscalefpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vscalefpd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vscalefpd instruction.<br/>
		/// <br/>
		/// <c>VSCALEFPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vscalefpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vscalefpd_zmm_k1z_zmm_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vscalefpd instruction.<br/>
		/// <br/>
		/// <c>VSCALEFPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vscalefpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vscalefpd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vscalefpd instruction.<br/>
		/// <br/>
		/// <c>VSCALEFPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vscalefpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vscalefpd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vscalefpd instruction.<br/>
		/// <br/>
		/// <c>VSCALEFPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vscalefpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vscalefpd_zmm_k1z_zmm_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vscalefps instruction.<br/>
		/// <br/>
		/// <c>VSCALEFPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vscalefps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vscalefps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vscalefps instruction.<br/>
		/// <br/>
		/// <c>VSCALEFPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vscalefps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = Code.EVEX_Vscalefps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vscalefps instruction.<br/>
		/// <br/>
		/// <c>VSCALEFPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vscalefps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vscalefps_zmm_k1z_zmm_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vscalefps instruction.<br/>
		/// <br/>
		/// <c>VSCALEFPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vscalefps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vscalefps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vscalefps instruction.<br/>
		/// <br/>
		/// <c>VSCALEFPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vscalefps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vscalefps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vscalefps instruction.<br/>
		/// <br/>
		/// <c>VSCALEFPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vscalefps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vscalefps_zmm_k1z_zmm_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vscalefsd instruction.<br/>
		/// <br/>
		/// <c>VSCALEFSD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 2D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vscalefsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vscalefsd_xmm_k1z_xmm_xmmm64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vscalefsd instruction.<br/>
		/// <br/>
		/// <c>VSCALEFSD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 2D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vscalefsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vscalefsd_xmm_k1z_xmm_xmmm64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vscalefss instruction.<br/>
		/// <br/>
		/// <c>VSCALEFSS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 2D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vscalefss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = Code.EVEX_Vscalefss_xmm_k1z_xmm_xmmm32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vscalefss instruction.<br/>
		/// <br/>
		/// <c>VSCALEFSS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 2D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vscalefss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vscalefss_xmm_k1z_xmm_xmmm32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vscatterdpd instruction.<br/>
		/// <br/>
		/// <c>VSCATTERDPD vm32x {k1}, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 A2 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vscatterdpd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vscatterdpd_vm32x_k1_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vscatterdpd instruction.<br/>
		/// <br/>
		/// <c>VSCATTERDPD vm32x {k1}, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 A2 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vscatterdpd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vscatterdpd_vm32x_k1_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vscatterdpd instruction.<br/>
		/// <br/>
		/// <c>VSCATTERDPD vm32y {k1}, zmm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 A2 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vscatterdpd(AssemblerMemoryOperand dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vscatterdpd_vm32y_k1_zmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vscatterdps instruction.<br/>
		/// <br/>
		/// <c>VSCATTERDPS vm32x {k1}, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 A2 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vscatterdps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vscatterdps_vm32x_k1_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vscatterdps instruction.<br/>
		/// <br/>
		/// <c>VSCATTERDPS vm32y {k1}, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 A2 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vscatterdps(AssemblerMemoryOperand dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vscatterdps_vm32y_k1_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vscatterdps instruction.<br/>
		/// <br/>
		/// <c>VSCATTERDPS vm32z {k1}, zmm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 A2 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vscatterdps(AssemblerMemoryOperand dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vscatterdps_vm32z_k1_zmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vscatterpf0dpd instruction.<br/>
		/// <br/>
		/// <c>VSCATTERPF0DPD vm32y {k1}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 C6 /5 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512PF</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vscatterpf0dpd(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.EVEX_Vscatterpf0dpd_vm32y_k1;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vscatterpf0dps instruction.<br/>
		/// <br/>
		/// <c>VSCATTERPF0DPS vm32z {k1}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 C6 /5 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512PF</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vscatterpf0dps(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.EVEX_Vscatterpf0dps_vm32z_k1;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vscatterpf0qpd instruction.<br/>
		/// <br/>
		/// <c>VSCATTERPF0QPD vm64z {k1}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 C7 /5 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512PF</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vscatterpf0qpd(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.EVEX_Vscatterpf0qpd_vm64z_k1;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vscatterpf0qps instruction.<br/>
		/// <br/>
		/// <c>VSCATTERPF0QPS vm64z {k1}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 C7 /5 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512PF</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vscatterpf0qps(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.EVEX_Vscatterpf0qps_vm64z_k1;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vscatterpf1dpd instruction.<br/>
		/// <br/>
		/// <c>VSCATTERPF1DPD vm32y {k1}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 C6 /6 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512PF</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vscatterpf1dpd(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.EVEX_Vscatterpf1dpd_vm32y_k1;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vscatterpf1dps instruction.<br/>
		/// <br/>
		/// <c>VSCATTERPF1DPS vm32z {k1}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 C6 /6 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512PF</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vscatterpf1dps(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.EVEX_Vscatterpf1dps_vm32z_k1;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vscatterpf1qpd instruction.<br/>
		/// <br/>
		/// <c>VSCATTERPF1QPD vm64z {k1}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 C7 /6 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512PF</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vscatterpf1qpd(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.EVEX_Vscatterpf1qpd_vm64z_k1;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vscatterpf1qps instruction.<br/>
		/// <br/>
		/// <c>VSCATTERPF1QPS vm64z {k1}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 C7 /6 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512PF</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vscatterpf1qps(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.EVEX_Vscatterpf1qps_vm64z_k1;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)), dst.Flags);
		}
		/// <summary>vscatterqpd instruction.<br/>
		/// <br/>
		/// <c>VSCATTERQPD vm64x {k1}, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 A3 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vscatterqpd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.EVEX_Vscatterqpd_vm64x_k1_xmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vscatterqpd instruction.<br/>
		/// <br/>
		/// <c>VSCATTERQPD vm64y {k1}, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 A3 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vscatterqpd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vscatterqpd_vm64y_k1_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vscatterqpd instruction.<br/>
		/// <br/>
		/// <c>VSCATTERQPD vm64z {k1}, zmm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 A3 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vscatterqpd(AssemblerMemoryOperand dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vscatterqpd_vm64z_k1_zmm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vscatterqps instruction.<br/>
		/// <br/>
		/// <c>VSCATTERQPS vm64x {k1}, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 A3 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSCATTERQPS vm64y {k1}, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 A3 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vscatterqps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src) {
			Code op;
			if (dst.Index.IsXMM()) {
				op = Code.EVEX_Vscatterqps_vm64x_k1_xmm;
			} else if (dst.Index.IsYMM()) {
				op = Code.EVEX_Vscatterqps_vm64y_k1_xmm;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Vscatterqps, dst, src);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vscatterqps instruction.<br/>
		/// <br/>
		/// <c>VSCATTERQPS vm64z {k1}, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 A3 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vscatterqps(AssemblerMemoryOperand dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.EVEX_Vscatterqps_vm64z_k1_ymm;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src), dst.Flags);
		}
		/// <summary>vshuff32x4 instruction.<br/>
		/// <br/>
		/// <c>VSHUFF32X4 ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 23 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshuff32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vshuff32x4_ymm_k1z_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vshuff32x4 instruction.<br/>
		/// <br/>
		/// <c>VSHUFF32X4 zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 23 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshuff32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vshuff32x4_zmm_k1z_zmm_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vshuff32x4 instruction.<br/>
		/// <br/>
		/// <c>VSHUFF32X4 ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 23 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshuff32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vshuff32x4_ymm_k1z_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vshuff32x4 instruction.<br/>
		/// <br/>
		/// <c>VSHUFF32X4 zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 23 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshuff32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vshuff32x4_zmm_k1z_zmm_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vshuff32x4 instruction.<br/>
		/// <br/>
		/// <c>VSHUFF32X4 ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 23 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshuff32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vshuff32x4_ymm_k1z_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vshuff32x4 instruction.<br/>
		/// <br/>
		/// <c>VSHUFF32X4 zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 23 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshuff32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vshuff32x4_zmm_k1z_zmm_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vshuff32x4 instruction.<br/>
		/// <br/>
		/// <c>VSHUFF32X4 ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 23 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshuff32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vshuff32x4_ymm_k1z_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vshuff32x4 instruction.<br/>
		/// <br/>
		/// <c>VSHUFF32X4 zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 23 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshuff32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vshuff32x4_zmm_k1z_zmm_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vshuff64x2 instruction.<br/>
		/// <br/>
		/// <c>VSHUFF64X2 ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 23 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshuff64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vshuff64x2_ymm_k1z_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vshuff64x2 instruction.<br/>
		/// <br/>
		/// <c>VSHUFF64X2 zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 23 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshuff64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vshuff64x2_zmm_k1z_zmm_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vshuff64x2 instruction.<br/>
		/// <br/>
		/// <c>VSHUFF64X2 ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 23 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshuff64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vshuff64x2_ymm_k1z_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vshuff64x2 instruction.<br/>
		/// <br/>
		/// <c>VSHUFF64X2 zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 23 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshuff64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vshuff64x2_zmm_k1z_zmm_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vshuff64x2 instruction.<br/>
		/// <br/>
		/// <c>VSHUFF64X2 ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 23 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshuff64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vshuff64x2_ymm_k1z_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vshuff64x2 instruction.<br/>
		/// <br/>
		/// <c>VSHUFF64X2 zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 23 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshuff64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vshuff64x2_zmm_k1z_zmm_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vshuff64x2 instruction.<br/>
		/// <br/>
		/// <c>VSHUFF64X2 ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 23 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshuff64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vshuff64x2_ymm_k1z_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vshuff64x2 instruction.<br/>
		/// <br/>
		/// <c>VSHUFF64X2 zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 23 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshuff64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vshuff64x2_zmm_k1z_zmm_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vshufi32x4 instruction.<br/>
		/// <br/>
		/// <c>VSHUFI32X4 ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 43 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshufi32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vshufi32x4_ymm_k1z_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vshufi32x4 instruction.<br/>
		/// <br/>
		/// <c>VSHUFI32X4 zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 43 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshufi32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vshufi32x4_zmm_k1z_zmm_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vshufi32x4 instruction.<br/>
		/// <br/>
		/// <c>VSHUFI32X4 ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 43 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshufi32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vshufi32x4_ymm_k1z_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vshufi32x4 instruction.<br/>
		/// <br/>
		/// <c>VSHUFI32X4 zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 43 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshufi32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vshufi32x4_zmm_k1z_zmm_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vshufi32x4 instruction.<br/>
		/// <br/>
		/// <c>VSHUFI32X4 ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 43 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshufi32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vshufi32x4_ymm_k1z_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vshufi32x4 instruction.<br/>
		/// <br/>
		/// <c>VSHUFI32X4 zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 43 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshufi32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vshufi32x4_zmm_k1z_zmm_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vshufi32x4 instruction.<br/>
		/// <br/>
		/// <c>VSHUFI32X4 ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 43 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshufi32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vshufi32x4_ymm_k1z_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vshufi32x4 instruction.<br/>
		/// <br/>
		/// <c>VSHUFI32X4 zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 43 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshufi32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vshufi32x4_zmm_k1z_zmm_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vshufi64x2 instruction.<br/>
		/// <br/>
		/// <c>VSHUFI64X2 ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 43 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshufi64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vshufi64x2_ymm_k1z_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vshufi64x2 instruction.<br/>
		/// <br/>
		/// <c>VSHUFI64X2 zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 43 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshufi64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vshufi64x2_zmm_k1z_zmm_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vshufi64x2 instruction.<br/>
		/// <br/>
		/// <c>VSHUFI64X2 ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 43 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshufi64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vshufi64x2_ymm_k1z_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vshufi64x2 instruction.<br/>
		/// <br/>
		/// <c>VSHUFI64X2 zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 43 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshufi64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vshufi64x2_zmm_k1z_zmm_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vshufi64x2 instruction.<br/>
		/// <br/>
		/// <c>VSHUFI64X2 ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 43 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshufi64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vshufi64x2_ymm_k1z_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vshufi64x2 instruction.<br/>
		/// <br/>
		/// <c>VSHUFI64X2 zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 43 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshufi64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vshufi64x2_zmm_k1z_zmm_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vshufi64x2 instruction.<br/>
		/// <br/>
		/// <c>VSHUFI64X2 ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 43 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshufi64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vshufi64x2_ymm_k1z_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vshufi64x2 instruction.<br/>
		/// <br/>
		/// <c>VSHUFI64X2 zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 43 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshufi64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vshufi64x2_zmm_k1z_zmm_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vshufpd instruction.<br/>
		/// <br/>
		/// <c>VSHUFPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSHUFPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshufpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vshufpd_xmm_xmm_xmmm128_imm8 : Code.EVEX_Vshufpd_xmm_k1z_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vshufpd instruction.<br/>
		/// <br/>
		/// <c>VSHUFPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSHUFPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshufpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vshufpd_ymm_ymm_ymmm256_imm8 : Code.EVEX_Vshufpd_ymm_k1z_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vshufpd instruction.<br/>
		/// <br/>
		/// <c>VSHUFPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshufpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vshufpd_zmm_k1z_zmm_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vshufpd instruction.<br/>
		/// <br/>
		/// <c>VSHUFPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSHUFPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshufpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vshufpd_xmm_k1z_xmm_xmmm128b64_imm8;
			} else op = PreferVex ? Code.VEX_Vshufpd_xmm_xmm_xmmm128_imm8 : Code.EVEX_Vshufpd_xmm_k1z_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vshufpd instruction.<br/>
		/// <br/>
		/// <c>VSHUFPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSHUFPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshufpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vshufpd_ymm_k1z_ymm_ymmm256b64_imm8;
			} else op = PreferVex ? Code.VEX_Vshufpd_ymm_ymm_ymmm256_imm8 : Code.EVEX_Vshufpd_ymm_k1z_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vshufpd instruction.<br/>
		/// <br/>
		/// <c>VSHUFPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshufpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vshufpd_zmm_k1z_zmm_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vshufpd instruction.<br/>
		/// <br/>
		/// <c>VSHUFPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSHUFPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshufpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vshufpd_xmm_xmm_xmmm128_imm8 : Code.EVEX_Vshufpd_xmm_k1z_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vshufpd instruction.<br/>
		/// <br/>
		/// <c>VSHUFPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSHUFPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshufpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vshufpd_ymm_ymm_ymmm256_imm8 : Code.EVEX_Vshufpd_ymm_k1z_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vshufpd instruction.<br/>
		/// <br/>
		/// <c>VSHUFPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshufpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vshufpd_zmm_k1z_zmm_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vshufpd instruction.<br/>
		/// <br/>
		/// <c>VSHUFPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSHUFPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshufpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vshufpd_xmm_k1z_xmm_xmmm128b64_imm8;
			} else op = PreferVex ? Code.VEX_Vshufpd_xmm_xmm_xmmm128_imm8 : Code.EVEX_Vshufpd_xmm_k1z_xmm_xmmm128b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vshufpd instruction.<br/>
		/// <br/>
		/// <c>VSHUFPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSHUFPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshufpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vshufpd_ymm_k1z_ymm_ymmm256b64_imm8;
			} else op = PreferVex ? Code.VEX_Vshufpd_ymm_ymm_ymmm256_imm8 : Code.EVEX_Vshufpd_ymm_k1z_ymm_ymmm256b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vshufpd instruction.<br/>
		/// <br/>
		/// <c>VSHUFPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshufpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vshufpd_zmm_k1z_zmm_zmmm512b64_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vshufps instruction.<br/>
		/// <br/>
		/// <c>VSHUFPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSHUFPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshufps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vshufps_xmm_xmm_xmmm128_imm8 : Code.EVEX_Vshufps_xmm_k1z_xmm_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vshufps instruction.<br/>
		/// <br/>
		/// <c>VSHUFPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSHUFPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshufps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vshufps_ymm_ymm_ymmm256_imm8 : Code.EVEX_Vshufps_ymm_k1z_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vshufps instruction.<br/>
		/// <br/>
		/// <c>VSHUFPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshufps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vshufps_zmm_k1z_zmm_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, imm), dst.Flags);
		}
		/// <summary>vshufps instruction.<br/>
		/// <br/>
		/// <c>VSHUFPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSHUFPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshufps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vshufps_xmm_k1z_xmm_xmmm128b32_imm8;
			} else op = PreferVex ? Code.VEX_Vshufps_xmm_xmm_xmmm128_imm8 : Code.EVEX_Vshufps_xmm_k1z_xmm_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vshufps instruction.<br/>
		/// <br/>
		/// <c>VSHUFPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSHUFPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshufps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vshufps_ymm_k1z_ymm_ymmm256b32_imm8;
			} else op = PreferVex ? Code.VEX_Vshufps_ymm_ymm_ymmm256_imm8 : Code.EVEX_Vshufps_ymm_k1z_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vshufps instruction.<br/>
		/// <br/>
		/// <c>VSHUFPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshufps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm) {
			Code op;
			op = Code.EVEX_Vshufps_zmm_k1z_zmm_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), imm), dst.Flags | src2.Flags);
		}
		/// <summary>vshufps instruction.<br/>
		/// <br/>
		/// <c>VSHUFPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSHUFPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshufps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vshufps_xmm_xmm_xmmm128_imm8 : Code.EVEX_Vshufps_xmm_k1z_xmm_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vshufps instruction.<br/>
		/// <br/>
		/// <c>VSHUFPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSHUFPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshufps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm) {
			Code op;
			op = PreferVex ? Code.VEX_Vshufps_ymm_ymm_ymmm256_imm8 : Code.EVEX_Vshufps_ymm_k1z_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vshufps instruction.<br/>
		/// <br/>
		/// <c>VSHUFPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshufps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm) {
			Code op;
			op = Code.EVEX_Vshufps_zmm_k1z_zmm_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2, (uint)imm), dst.Flags);
		}
		/// <summary>vshufps instruction.<br/>
		/// <br/>
		/// <c>VSHUFPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSHUFPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshufps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vshufps_xmm_k1z_xmm_xmmm128b32_imm8;
			} else op = PreferVex ? Code.VEX_Vshufps_xmm_xmm_xmmm128_imm8 : Code.EVEX_Vshufps_xmm_k1z_xmm_xmmm128b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vshufps instruction.<br/>
		/// <br/>
		/// <c>VSHUFPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSHUFPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshufps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vshufps_ymm_k1z_ymm_ymmm256b32_imm8;
			} else op = PreferVex ? Code.VEX_Vshufps_ymm_ymm_ymmm256_imm8 : Code.EVEX_Vshufps_ymm_k1z_ymm_ymmm256b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vshufps instruction.<br/>
		/// <br/>
		/// <c>VSHUFPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vshufps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm) {
			Code op;
			op = Code.EVEX_Vshufps_zmm_k1z_zmm_zmmm512b32_imm8;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness), (uint)imm), dst.Flags | src2.Flags);
		}
		/// <summary>vsqrtpd instruction.<br/>
		/// <br/>
		/// <c>VSQRTPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 51 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSQRTPD xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vsqrtpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vsqrtpd_xmm_xmmm128 : Code.EVEX_Vsqrtpd_xmm_k1z_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vsqrtpd instruction.<br/>
		/// <br/>
		/// <c>VSQRTPD ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 51 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSQRTPD ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vsqrtpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vsqrtpd_ymm_ymmm256 : Code.EVEX_Vsqrtpd_ymm_k1z_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vsqrtpd instruction.<br/>
		/// <br/>
		/// <c>VSQRTPD zmm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vsqrtpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vsqrtpd_zmm_k1z_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags | src.Flags);
		}
		/// <summary>vsqrtpd instruction.<br/>
		/// <br/>
		/// <c>VSQRTPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 51 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSQRTPD xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vsqrtpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			if (src.IsBroadcast) {
				op = Code.EVEX_Vsqrtpd_xmm_k1z_xmmm128b64;
			} else op = PreferVex ? Code.VEX_Vsqrtpd_xmm_xmmm128 : Code.EVEX_Vsqrtpd_xmm_k1z_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vsqrtpd instruction.<br/>
		/// <br/>
		/// <c>VSQRTPD ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 51 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSQRTPD ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vsqrtpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			if (src.IsBroadcast) {
				op = Code.EVEX_Vsqrtpd_ymm_k1z_ymmm256b64;
			} else op = PreferVex ? Code.VEX_Vsqrtpd_ymm_ymmm256 : Code.EVEX_Vsqrtpd_ymm_k1z_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vsqrtpd instruction.<br/>
		/// <br/>
		/// <c>VSQRTPD zmm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vsqrtpd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vsqrtpd_zmm_k1z_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vsqrtps instruction.<br/>
		/// <br/>
		/// <c>VSQRTPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 51 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSQRTPS xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vsqrtps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vsqrtps_xmm_xmmm128 : Code.EVEX_Vsqrtps_xmm_k1z_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vsqrtps instruction.<br/>
		/// <br/>
		/// <c>VSQRTPS ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 51 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSQRTPS ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vsqrtps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vsqrtps_ymm_ymmm256 : Code.EVEX_Vsqrtps_ymm_k1z_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags);
		}
		/// <summary>vsqrtps instruction.<br/>
		/// <br/>
		/// <c>VSQRTPS zmm1 {k1}{z}, zmm2/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vsqrtps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src) {
			Code op;
			op = Code.EVEX_Vsqrtps_zmm_k1z_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src), dst.Flags | src.Flags);
		}
		/// <summary>vsqrtps instruction.<br/>
		/// <br/>
		/// <c>VSQRTPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 51 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSQRTPS xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vsqrtps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			if (src.IsBroadcast) {
				op = Code.EVEX_Vsqrtps_xmm_k1z_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vsqrtps_xmm_xmmm128 : Code.EVEX_Vsqrtps_xmm_k1z_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vsqrtps instruction.<br/>
		/// <br/>
		/// <c>VSQRTPS ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 51 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSQRTPS ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vsqrtps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			if (src.IsBroadcast) {
				op = Code.EVEX_Vsqrtps_ymm_k1z_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vsqrtps_ymm_ymmm256 : Code.EVEX_Vsqrtps_ymm_k1z_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vsqrtps instruction.<br/>
		/// <br/>
		/// <c>VSQRTPS zmm1 {k1}{z}, zmm2/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vsqrtps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.EVEX_Vsqrtps_zmm_k1z_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), dst.Flags | src.Flags);
		}
		/// <summary>vsqrtsd instruction.<br/>
		/// <br/>
		/// <c>VSQRTSD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG 51 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSQRTSD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vsqrtsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vsqrtsd_xmm_xmm_xmmm64 : Code.EVEX_Vsqrtsd_xmm_k1z_xmm_xmmm64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vsqrtsd instruction.<br/>
		/// <br/>
		/// <c>VSQRTSD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG 51 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSQRTSD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vsqrtsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vsqrtsd_xmm_xmm_xmmm64 : Code.EVEX_Vsqrtsd_xmm_k1z_xmm_xmmm64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vsqrtss instruction.<br/>
		/// <br/>
		/// <c>VSQRTSS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG 51 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSQRTSS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vsqrtss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vsqrtss_xmm_xmm_xmmm32 : Code.EVEX_Vsqrtss_xmm_k1z_xmm_xmmm32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vsqrtss instruction.<br/>
		/// <br/>
		/// <c>VSQRTSS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG 51 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSQRTSS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vsqrtss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vsqrtss_xmm_xmm_xmmm32 : Code.EVEX_Vsqrtss_xmm_k1z_xmm_xmmm32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vstmxcsr instruction.<br/>
		/// <br/>
		/// <c>VSTMXCSR m32</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F.WIG AE /3</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vstmxcsr(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.VEX_Vstmxcsr_m32;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>vsubpd instruction.<br/>
		/// <br/>
		/// <c>VSUBPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 5C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSUBPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 5C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vsubpd_xmm_xmm_xmmm128 : Code.EVEX_Vsubpd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vsubpd instruction.<br/>
		/// <br/>
		/// <c>VSUBPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 5C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSUBPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 5C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vsubpd_ymm_ymm_ymmm256 : Code.EVEX_Vsubpd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vsubpd instruction.<br/>
		/// <br/>
		/// <c>VSUBPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 5C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vsubpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vsubpd_zmm_k1z_zmm_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vsubpd instruction.<br/>
		/// <br/>
		/// <c>VSUBPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 5C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSUBPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 5C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vsubpd_xmm_k1z_xmm_xmmm128b64;
			} else op = PreferVex ? Code.VEX_Vsubpd_xmm_xmm_xmmm128 : Code.EVEX_Vsubpd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vsubpd instruction.<br/>
		/// <br/>
		/// <c>VSUBPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 5C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSUBPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 5C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vsubpd_ymm_k1z_ymm_ymmm256b64;
			} else op = PreferVex ? Code.VEX_Vsubpd_ymm_ymm_ymmm256 : Code.EVEX_Vsubpd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vsubpd instruction.<br/>
		/// <br/>
		/// <c>VSUBPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 5C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vsubpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vsubpd_zmm_k1z_zmm_zmmm512b64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vsubps instruction.<br/>
		/// <br/>
		/// <c>VSUBPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 5C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSUBPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 5C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vsubps_xmm_xmm_xmmm128 : Code.EVEX_Vsubps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vsubps instruction.<br/>
		/// <br/>
		/// <c>VSUBPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 5C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSUBPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 5C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vsubps_ymm_ymm_ymmm256 : Code.EVEX_Vsubps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vsubps instruction.<br/>
		/// <br/>
		/// <c>VSUBPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 5C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vsubps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vsubps_zmm_k1z_zmm_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vsubps instruction.<br/>
		/// <br/>
		/// <c>VSUBPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 5C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSUBPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 5C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vsubps_xmm_k1z_xmm_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vsubps_xmm_xmm_xmmm128 : Code.EVEX_Vsubps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vsubps instruction.<br/>
		/// <br/>
		/// <c>VSUBPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 5C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSUBPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 5C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vsubps_ymm_k1z_ymm_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vsubps_ymm_ymm_ymmm256 : Code.EVEX_Vsubps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vsubps instruction.<br/>
		/// <br/>
		/// <c>VSUBPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 5C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vsubps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vsubps_zmm_k1z_zmm_zmmm512b32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vsubsd instruction.<br/>
		/// <br/>
		/// <c>VSUBSD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG 5C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSUBSD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 5C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vsubsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vsubsd_xmm_xmm_xmmm64 : Code.EVEX_Vsubsd_xmm_k1z_xmm_xmmm64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vsubsd instruction.<br/>
		/// <br/>
		/// <c>VSUBSD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG 5C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSUBSD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 5C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vsubsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vsubsd_xmm_xmm_xmmm64 : Code.EVEX_Vsubsd_xmm_k1z_xmm_xmmm64_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vsubss instruction.<br/>
		/// <br/>
		/// <c>VSUBSS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG 5C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSUBSS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 5C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vsubss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vsubss_xmm_xmm_xmmm32 : Code.EVEX_Vsubss_xmm_k1z_xmm_xmmm32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags | src2.Flags);
		}
		/// <summary>vsubss instruction.<br/>
		/// <br/>
		/// <c>VSUBSS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG 5C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSUBSS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 5C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vsubss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vsubss_xmm_xmm_xmmm32 : Code.EVEX_Vsubss_xmm_k1z_xmm_xmmm32_er;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vtestpd instruction.<br/>
		/// <br/>
		/// <c>VTESTPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 0F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vtestpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.VEX_Vtestpd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vtestpd instruction.<br/>
		/// <br/>
		/// <c>VTESTPD ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 0F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vtestpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.VEX_Vtestpd_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vtestpd instruction.<br/>
		/// <br/>
		/// <c>VTESTPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 0F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vtestpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.VEX_Vtestpd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vtestpd instruction.<br/>
		/// <br/>
		/// <c>VTESTPD ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 0F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vtestpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.VEX_Vtestpd_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vtestps instruction.<br/>
		/// <br/>
		/// <c>VTESTPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 0E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vtestps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.VEX_Vtestps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vtestps instruction.<br/>
		/// <br/>
		/// <c>VTESTPS ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 0E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vtestps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src) {
			Code op;
			op = Code.VEX_Vtestps_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>vtestps instruction.<br/>
		/// <br/>
		/// <c>VTESTPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 0E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vtestps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.VEX_Vtestps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vtestps instruction.<br/>
		/// <br/>
		/// <c>VTESTPS ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 0E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vtestps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.VEX_Vtestps_ymm_ymmm256;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>vucomisd instruction.<br/>
		/// <br/>
		/// <c>VUCOMISD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F.WIG 2E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VUCOMISD xmm1, xmm2/m64{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F.W1 2E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vucomisd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vucomisd_xmm_xmmm64 : Code.EVEX_Vucomisd_xmm_xmmm64_sae;
			AddInstruction(Instruction.Create(op, dst, src), src.Flags);
		}
		/// <summary>vucomisd instruction.<br/>
		/// <br/>
		/// <c>VUCOMISD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F.WIG 2E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VUCOMISD xmm1, xmm2/m64{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F.W1 2E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vucomisd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vucomisd_xmm_xmmm64 : Code.EVEX_Vucomisd_xmm_xmmm64_sae;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), src.Flags);
		}
		/// <summary>vucomiss instruction.<br/>
		/// <br/>
		/// <c>VUCOMISS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.0F.WIG 2E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VUCOMISS xmm1, xmm2/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.0F.W0 2E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vucomiss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = PreferVex ? Code.VEX_Vucomiss_xmm_xmmm32 : Code.EVEX_Vucomiss_xmm_xmmm32_sae;
			AddInstruction(Instruction.Create(op, dst, src), src.Flags);
		}
		/// <summary>vucomiss instruction.<br/>
		/// <br/>
		/// <c>VUCOMISS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.0F.WIG 2E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VUCOMISS xmm1, xmm2/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.0F.W0 2E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vucomiss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = PreferVex ? Code.VEX_Vucomiss_xmm_xmmm32 : Code.EVEX_Vucomiss_xmm_xmmm32_sae;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)), src.Flags);
		}
		/// <summary>vunpckhpd instruction.<br/>
		/// <br/>
		/// <c>VUNPCKHPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 15 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VUNPCKHPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vunpckhpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vunpckhpd_xmm_xmm_xmmm128 : Code.EVEX_Vunpckhpd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vunpckhpd instruction.<br/>
		/// <br/>
		/// <c>VUNPCKHPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 15 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VUNPCKHPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vunpckhpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vunpckhpd_ymm_ymm_ymmm256 : Code.EVEX_Vunpckhpd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vunpckhpd instruction.<br/>
		/// <br/>
		/// <c>VUNPCKHPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vunpckhpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vunpckhpd_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vunpckhpd instruction.<br/>
		/// <br/>
		/// <c>VUNPCKHPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 15 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VUNPCKHPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vunpckhpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vunpckhpd_xmm_k1z_xmm_xmmm128b64;
			} else op = PreferVex ? Code.VEX_Vunpckhpd_xmm_xmm_xmmm128 : Code.EVEX_Vunpckhpd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vunpckhpd instruction.<br/>
		/// <br/>
		/// <c>VUNPCKHPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 15 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VUNPCKHPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vunpckhpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vunpckhpd_ymm_k1z_ymm_ymmm256b64;
			} else op = PreferVex ? Code.VEX_Vunpckhpd_ymm_ymm_ymmm256 : Code.EVEX_Vunpckhpd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vunpckhpd instruction.<br/>
		/// <br/>
		/// <c>VUNPCKHPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vunpckhpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vunpckhpd_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vunpckhps instruction.<br/>
		/// <br/>
		/// <c>VUNPCKHPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 15 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VUNPCKHPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vunpckhps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vunpckhps_xmm_xmm_xmmm128 : Code.EVEX_Vunpckhps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vunpckhps instruction.<br/>
		/// <br/>
		/// <c>VUNPCKHPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 15 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VUNPCKHPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vunpckhps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vunpckhps_ymm_ymm_ymmm256 : Code.EVEX_Vunpckhps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vunpckhps instruction.<br/>
		/// <br/>
		/// <c>VUNPCKHPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vunpckhps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vunpckhps_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vunpckhps instruction.<br/>
		/// <br/>
		/// <c>VUNPCKHPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 15 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VUNPCKHPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vunpckhps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vunpckhps_xmm_k1z_xmm_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vunpckhps_xmm_xmm_xmmm128 : Code.EVEX_Vunpckhps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vunpckhps instruction.<br/>
		/// <br/>
		/// <c>VUNPCKHPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 15 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VUNPCKHPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vunpckhps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vunpckhps_ymm_k1z_ymm_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vunpckhps_ymm_ymm_ymmm256 : Code.EVEX_Vunpckhps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vunpckhps instruction.<br/>
		/// <br/>
		/// <c>VUNPCKHPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vunpckhps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vunpckhps_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vunpcklpd instruction.<br/>
		/// <br/>
		/// <c>VUNPCKLPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 14 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VUNPCKLPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vunpcklpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vunpcklpd_xmm_xmm_xmmm128 : Code.EVEX_Vunpcklpd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vunpcklpd instruction.<br/>
		/// <br/>
		/// <c>VUNPCKLPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 14 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VUNPCKLPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vunpcklpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vunpcklpd_ymm_ymm_ymmm256 : Code.EVEX_Vunpcklpd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vunpcklpd instruction.<br/>
		/// <br/>
		/// <c>VUNPCKLPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vunpcklpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vunpcklpd_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vunpcklpd instruction.<br/>
		/// <br/>
		/// <c>VUNPCKLPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 14 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VUNPCKLPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vunpcklpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vunpcklpd_xmm_k1z_xmm_xmmm128b64;
			} else op = PreferVex ? Code.VEX_Vunpcklpd_xmm_xmm_xmmm128 : Code.EVEX_Vunpcklpd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vunpcklpd instruction.<br/>
		/// <br/>
		/// <c>VUNPCKLPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 14 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VUNPCKLPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vunpcklpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vunpcklpd_ymm_k1z_ymm_ymmm256b64;
			} else op = PreferVex ? Code.VEX_Vunpcklpd_ymm_ymm_ymmm256 : Code.EVEX_Vunpcklpd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vunpcklpd instruction.<br/>
		/// <br/>
		/// <c>VUNPCKLPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vunpcklpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vunpcklpd_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vunpcklps instruction.<br/>
		/// <br/>
		/// <c>VUNPCKLPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 14 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VUNPCKLPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vunpcklps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vunpcklps_xmm_xmm_xmmm128 : Code.EVEX_Vunpcklps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vunpcklps instruction.<br/>
		/// <br/>
		/// <c>VUNPCKLPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 14 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VUNPCKLPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vunpcklps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vunpcklps_ymm_ymm_ymmm256 : Code.EVEX_Vunpcklps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vunpcklps instruction.<br/>
		/// <br/>
		/// <c>VUNPCKLPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vunpcklps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vunpcklps_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vunpcklps instruction.<br/>
		/// <br/>
		/// <c>VUNPCKLPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 14 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VUNPCKLPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vunpcklps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vunpcklps_xmm_k1z_xmm_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vunpcklps_xmm_xmm_xmmm128 : Code.EVEX_Vunpcklps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vunpcklps instruction.<br/>
		/// <br/>
		/// <c>VUNPCKLPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 14 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VUNPCKLPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vunpcklps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vunpcklps_ymm_k1z_ymm_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vunpcklps_ymm_ymm_ymmm256 : Code.EVEX_Vunpcklps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vunpcklps instruction.<br/>
		/// <br/>
		/// <c>VUNPCKLPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vunpcklps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vunpcklps_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vxorpd instruction.<br/>
		/// <br/>
		/// <c>VXORPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 57 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VXORPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 57 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vxorpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vxorpd_xmm_xmm_xmmm128 : Code.EVEX_Vxorpd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vxorpd instruction.<br/>
		/// <br/>
		/// <c>VXORPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 57 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VXORPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 57 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vxorpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vxorpd_ymm_ymm_ymmm256 : Code.EVEX_Vxorpd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vxorpd instruction.<br/>
		/// <br/>
		/// <c>VXORPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 57 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vxorpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vxorpd_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vxorpd instruction.<br/>
		/// <br/>
		/// <c>VXORPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 57 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VXORPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 57 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vxorpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vxorpd_xmm_k1z_xmm_xmmm128b64;
			} else op = PreferVex ? Code.VEX_Vxorpd_xmm_xmm_xmmm128 : Code.EVEX_Vxorpd_xmm_k1z_xmm_xmmm128b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vxorpd instruction.<br/>
		/// <br/>
		/// <c>VXORPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 57 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VXORPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 57 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vxorpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vxorpd_ymm_k1z_ymm_ymmm256b64;
			} else op = PreferVex ? Code.VEX_Vxorpd_ymm_ymm_ymmm256 : Code.EVEX_Vxorpd_ymm_k1z_ymm_ymmm256b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vxorpd instruction.<br/>
		/// <br/>
		/// <c>VXORPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 57 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vxorpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vxorpd_zmm_k1z_zmm_zmmm512b64;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vxorps instruction.<br/>
		/// <br/>
		/// <c>VXORPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 57 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VXORPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 57 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vxorps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vxorps_xmm_xmm_xmmm128 : Code.EVEX_Vxorps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vxorps instruction.<br/>
		/// <br/>
		/// <c>VXORPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 57 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VXORPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 57 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vxorps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2) {
			Code op;
			op = PreferVex ? Code.VEX_Vxorps_ymm_ymm_ymmm256 : Code.EVEX_Vxorps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vxorps instruction.<br/>
		/// <br/>
		/// <c>VXORPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 57 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vxorps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2) {
			Code op;
			op = Code.EVEX_Vxorps_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2), dst.Flags);
		}
		/// <summary>vxorps instruction.<br/>
		/// <br/>
		/// <c>VXORPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 57 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VXORPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 57 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vxorps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vxorps_xmm_k1z_xmm_xmmm128b32;
			} else op = PreferVex ? Code.VEX_Vxorps_xmm_xmm_xmmm128 : Code.EVEX_Vxorps_xmm_k1z_xmm_xmmm128b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vxorps instruction.<br/>
		/// <br/>
		/// <c>VXORPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 57 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VXORPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 57 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vxorps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2) {
			Code op;
			if (src2.IsBroadcast) {
				op = Code.EVEX_Vxorps_ymm_k1z_ymm_ymmm256b32;
			} else op = PreferVex ? Code.VEX_Vxorps_ymm_ymm_ymmm256 : Code.EVEX_Vxorps_ymm_k1z_ymm_ymmm256b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vxorps instruction.<br/>
		/// <br/>
		/// <c>VXORPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 57 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vxorps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2) {
			Code op;
			op = Code.EVEX_Vxorps_zmm_k1z_zmm_zmmm512b32;
			AddInstruction(Instruction.Create(op, dst, src1, src2.ToMemoryOperand(Bitness)), dst.Flags | src2.Flags);
		}
		/// <summary>vzeroall instruction.<br/>
		/// <br/>
		/// <c>VZEROALL</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 77</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vzeroall() {
			Code op;
			op = Code.VEX_Vzeroall;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>vzeroupper instruction.<br/>
		/// <br/>
		/// <c>VZEROUPPER</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 77</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void vzeroupper() {
			Code op;
			op = Code.VEX_Vzeroupper;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>wait instruction.<br/>
		/// <br/>
		/// <c>WAIT</c><br/>
		/// <br/>
		/// <c>9B</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void wait() {
			Code op;
			op = Code.Wait;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>wbinvd instruction.<br/>
		/// <br/>
		/// <c>WBINVD</c><br/>
		/// <br/>
		/// <c>0F 09</c><br/>
		/// <br/>
		/// <c>486+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void wbinvd() {
			Code op;
			op = Code.Wbinvd;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>wbnoinvd instruction.<br/>
		/// <br/>
		/// <c>WBNOINVD</c><br/>
		/// <br/>
		/// <c>F3 0F 09</c><br/>
		/// <br/>
		/// <c>WBNOINVD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void wbnoinvd() {
			Code op;
			op = Code.Wbnoinvd;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>wrfsbase instruction.<br/>
		/// <br/>
		/// <c>WRFSBASE r32</c><br/>
		/// <br/>
		/// <c>F3 0F AE /2</c><br/>
		/// <br/>
		/// <c>FSGSBASE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void wrfsbase(AssemblerRegister32 dst) {
			Code op;
			op = Code.Wrfsbase_r32;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>wrfsbase instruction.<br/>
		/// <br/>
		/// <c>WRFSBASE r64</c><br/>
		/// <br/>
		/// <c>F3 REX.W 0F AE /2</c><br/>
		/// <br/>
		/// <c>FSGSBASE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void wrfsbase(AssemblerRegister64 dst) {
			Code op;
			op = Code.Wrfsbase_r64;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>wrgsbase instruction.<br/>
		/// <br/>
		/// <c>WRGSBASE r32</c><br/>
		/// <br/>
		/// <c>F3 0F AE /3</c><br/>
		/// <br/>
		/// <c>FSGSBASE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void wrgsbase(AssemblerRegister32 dst) {
			Code op;
			op = Code.Wrgsbase_r32;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>wrgsbase instruction.<br/>
		/// <br/>
		/// <c>WRGSBASE r64</c><br/>
		/// <br/>
		/// <c>F3 REX.W 0F AE /3</c><br/>
		/// <br/>
		/// <c>FSGSBASE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void wrgsbase(AssemblerRegister64 dst) {
			Code op;
			op = Code.Wrgsbase_r64;
			AddInstruction(Instruction.Create(op, dst));
		}
		/// <summary>wrmsr instruction.<br/>
		/// <br/>
		/// <c>WRMSR</c><br/>
		/// <br/>
		/// <c>0F 30</c><br/>
		/// <br/>
		/// <c>MSR</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void wrmsr() {
			Code op;
			op = Code.Wrmsr;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>wrpkru instruction.<br/>
		/// <br/>
		/// <c>WRPKRU</c><br/>
		/// <br/>
		/// <c>NP 0F 01 EF</c><br/>
		/// <br/>
		/// <c>PKU</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void wrpkru() {
			Code op;
			op = Code.Wrpkru;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>wrssd instruction.<br/>
		/// <br/>
		/// <c>WRSSD m32, r32</c><br/>
		/// <br/>
		/// <c>NP 0F 38 F6 /r</c><br/>
		/// <br/>
		/// <c>CET_SS</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void wrssd(AssemblerMemoryOperand dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Wrssd_m32_r32;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>wrssq instruction.<br/>
		/// <br/>
		/// <c>WRSSQ m64, r64</c><br/>
		/// <br/>
		/// <c>NP REX.W 0F 38 F6 /r</c><br/>
		/// <br/>
		/// <c>CET_SS</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void wrssq(AssemblerMemoryOperand dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Wrssq_m64_r64;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>wrussd instruction.<br/>
		/// <br/>
		/// <c>WRUSSD m32, r32</c><br/>
		/// <br/>
		/// <c>66 0F 38 F5 /r</c><br/>
		/// <br/>
		/// <c>CET_SS</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void wrussd(AssemblerMemoryOperand dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Wrussd_m32_r32;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>wrussq instruction.<br/>
		/// <br/>
		/// <c>WRUSSQ m64, r64</c><br/>
		/// <br/>
		/// <c>66 REX.W 0F 38 F5 /r</c><br/>
		/// <br/>
		/// <c>CET_SS</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void wrussq(AssemblerMemoryOperand dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Wrussq_m64_r64;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>xabort instruction.<br/>
		/// <br/>
		/// <c>XABORT imm8</c><br/>
		/// <br/>
		/// <c>C6 F8 ib</c><br/>
		/// <br/>
		/// <c>RTM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xabort(sbyte imm) {
			Code op;
			op = Code.Xabort_imm8;
			AddInstruction(Instruction.Create(op, imm));
		}
		/// <summary>xabort instruction.<br/>
		/// <br/>
		/// <c>XABORT imm8</c><br/>
		/// <br/>
		/// <c>C6 F8 ib</c><br/>
		/// <br/>
		/// <c>RTM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xabort(byte imm) {
			Code op;
			op = Code.Xabort_imm8;
			AddInstruction(Instruction.Create(op, (uint)imm));
		}
		/// <summary>xadd instruction.<br/>
		/// <br/>
		/// <c>XADD r/m8, r8</c><br/>
		/// <br/>
		/// <c>0F C0 /r</c><br/>
		/// <br/>
		/// <c>486+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xadd(AssemblerRegister8 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Xadd_rm8_r8;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>xadd instruction.<br/>
		/// <br/>
		/// <c>XADD r/m8, r8</c><br/>
		/// <br/>
		/// <c>0F C0 /r</c><br/>
		/// <br/>
		/// <c>486+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xadd(AssemblerMemoryOperand dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Xadd_rm8_r8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>xadd instruction.<br/>
		/// <br/>
		/// <c>XADD r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F C1 /r</c><br/>
		/// <br/>
		/// <c>486+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xadd(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Xadd_rm16_r16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>xadd instruction.<br/>
		/// <br/>
		/// <c>XADD r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F C1 /r</c><br/>
		/// <br/>
		/// <c>486+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xadd(AssemblerMemoryOperand dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Xadd_rm16_r16;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>xadd instruction.<br/>
		/// <br/>
		/// <c>XADD r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F C1 /r</c><br/>
		/// <br/>
		/// <c>486+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xadd(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Xadd_rm32_r32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>xadd instruction.<br/>
		/// <br/>
		/// <c>XADD r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F C1 /r</c><br/>
		/// <br/>
		/// <c>486+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xadd(AssemblerMemoryOperand dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Xadd_rm32_r32;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>xadd instruction.<br/>
		/// <br/>
		/// <c>XADD r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 0F C1 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void xadd(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Xadd_rm64_r64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>xadd instruction.<br/>
		/// <br/>
		/// <c>XADD r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 0F C1 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void xadd(AssemblerMemoryOperand dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Xadd_rm64_r64;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>xbegin instruction.<br/>
		/// <br/>
		/// <c>XBEGIN rel16</c><br/>
		/// <br/>
		/// <c>o16 C7 F8 cw</c><br/>
		/// <br/>
		/// <c>RTM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XBEGIN rel32</c><br/>
		/// <br/>
		/// <c>o32 C7 F8 cd</c><br/>
		/// <br/>
		/// <c>RTM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xbegin(Label dst) {
			AddInstruction(Instruction.CreateXbegin(Bitness, dst.Id));
		}
		/// <summary>xbegin instruction.<br/>
		/// <br/>
		/// <c>XBEGIN rel16</c><br/>
		/// <br/>
		/// <c>o16 C7 F8 cw</c><br/>
		/// <br/>
		/// <c>RTM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XBEGIN rel32</c><br/>
		/// <br/>
		/// <c>o32 C7 F8 cd</c><br/>
		/// <br/>
		/// <c>RTM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xbegin(ulong dst) {
			AddInstruction(Instruction.CreateXbegin(Bitness, dst));
		}
		/// <summary>xbts instruction.<br/>
		/// <br/>
		/// <c>XBTS r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F A6 /r</c><br/>
		/// <br/>
		/// <c>386 A0</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void xbts(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Xbts_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>xbts instruction.<br/>
		/// <br/>
		/// <c>XBTS r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F A6 /r</c><br/>
		/// <br/>
		/// <c>386 A0</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void xbts(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Xbts_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>xbts instruction.<br/>
		/// <br/>
		/// <c>XBTS r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F A6 /r</c><br/>
		/// <br/>
		/// <c>386 A0</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void xbts(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Xbts_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>xbts instruction.<br/>
		/// <br/>
		/// <c>XBTS r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F A6 /r</c><br/>
		/// <br/>
		/// <c>386 A0</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void xbts(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Xbts_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>xchg instruction.<br/>
		/// <br/>
		/// <c>XCHG r/m8, r8</c><br/>
		/// <br/>
		/// <c>86 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xchg(AssemblerRegister8 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Xchg_rm8_r8;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>xchg instruction.<br/>
		/// <br/>
		/// <c>XCHG r/m8, r8</c><br/>
		/// <br/>
		/// <c>86 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xchg(AssemblerMemoryOperand dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Xchg_rm8_r8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>xchg instruction.<br/>
		/// <br/>
		/// <c>XCHG r16, AX</c><br/>
		/// <br/>
		/// <c>o16 90+rw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XCHG r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 87 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xchg(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = src == Register.AX ? Code.Xchg_r16_AX : Code.Xchg_rm16_r16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>xchg instruction.<br/>
		/// <br/>
		/// <c>XCHG r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 87 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xchg(AssemblerMemoryOperand dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Xchg_rm16_r16;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>xchg instruction.<br/>
		/// <br/>
		/// <c>XCHG r32, EAX</c><br/>
		/// <br/>
		/// <c>o32 90+rd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XCHG r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 87 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xchg(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = src == Register.EAX ? Code.Xchg_r32_EAX : Code.Xchg_rm32_r32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>xchg instruction.<br/>
		/// <br/>
		/// <c>XCHG r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 87 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xchg(AssemblerMemoryOperand dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Xchg_rm32_r32;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>xchg instruction.<br/>
		/// <br/>
		/// <c>XCHG r64, RAX</c><br/>
		/// <br/>
		/// <c>REX.W 90+ro</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>XCHG r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 87 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void xchg(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = src == Register.RAX ? Code.Xchg_r64_RAX : Code.Xchg_rm64_r64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>xchg instruction.<br/>
		/// <br/>
		/// <c>XCHG r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 87 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void xchg(AssemblerMemoryOperand dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Xchg_rm64_r64;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>xcryptcbc instruction.<br/>
		/// <br/>
		/// <c>XCRYPTCBC</c><br/>
		/// <br/>
		/// <c>0F A7 D0</c><br/>
		/// <br/>
		/// <c>PADLOCK_ACE</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>XCRYPTCBC</c><br/>
		/// <br/>
		/// <c>a32 0F A7 D0</c><br/>
		/// <br/>
		/// <c>PADLOCK_ACE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XCRYPTCBC</c><br/>
		/// <br/>
		/// <c>a16 0F A7 D0</c><br/>
		/// <br/>
		/// <c>PADLOCK_ACE</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void xcryptcbc() {
			Code op;
			if (Bitness == 64) {
				op = Code.XcryptCbc_64;
			} else op = Bitness >= 32 ? Code.XcryptCbc_32 : Code.XcryptCbc_16;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>xcryptcfb instruction.<br/>
		/// <br/>
		/// <c>XCRYPTCFB</c><br/>
		/// <br/>
		/// <c>0F A7 E0</c><br/>
		/// <br/>
		/// <c>PADLOCK_ACE</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>XCRYPTCFB</c><br/>
		/// <br/>
		/// <c>a32 0F A7 E0</c><br/>
		/// <br/>
		/// <c>PADLOCK_ACE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XCRYPTCFB</c><br/>
		/// <br/>
		/// <c>a16 0F A7 E0</c><br/>
		/// <br/>
		/// <c>PADLOCK_ACE</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void xcryptcfb() {
			Code op;
			if (Bitness == 64) {
				op = Code.XcryptCfb_64;
			} else op = Bitness >= 32 ? Code.XcryptCfb_32 : Code.XcryptCfb_16;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>xcryptctr instruction.<br/>
		/// <br/>
		/// <c>XCRYPTCTR</c><br/>
		/// <br/>
		/// <c>0F A7 D8</c><br/>
		/// <br/>
		/// <c>PADLOCK_ACE</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>XCRYPTCTR</c><br/>
		/// <br/>
		/// <c>a32 0F A7 D8</c><br/>
		/// <br/>
		/// <c>PADLOCK_ACE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XCRYPTCTR</c><br/>
		/// <br/>
		/// <c>a16 0F A7 D8</c><br/>
		/// <br/>
		/// <c>PADLOCK_ACE</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void xcryptctr() {
			Code op;
			if (Bitness == 64) {
				op = Code.XcryptCtr_64;
			} else op = Bitness >= 32 ? Code.XcryptCtr_32 : Code.XcryptCtr_16;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>xcryptecb instruction.<br/>
		/// <br/>
		/// <c>XCRYPTECB</c><br/>
		/// <br/>
		/// <c>0F A7 C8</c><br/>
		/// <br/>
		/// <c>PADLOCK_ACE</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>XCRYPTECB</c><br/>
		/// <br/>
		/// <c>a32 0F A7 C8</c><br/>
		/// <br/>
		/// <c>PADLOCK_ACE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XCRYPTECB</c><br/>
		/// <br/>
		/// <c>a16 0F A7 C8</c><br/>
		/// <br/>
		/// <c>PADLOCK_ACE</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void xcryptecb() {
			Code op;
			if (Bitness == 64) {
				op = Code.XcryptEcb_64;
			} else op = Bitness >= 32 ? Code.XcryptEcb_32 : Code.XcryptEcb_16;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>xcryptofb instruction.<br/>
		/// <br/>
		/// <c>XCRYPTOFB</c><br/>
		/// <br/>
		/// <c>0F A7 E8</c><br/>
		/// <br/>
		/// <c>PADLOCK_ACE</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>XCRYPTOFB</c><br/>
		/// <br/>
		/// <c>a32 0F A7 E8</c><br/>
		/// <br/>
		/// <c>PADLOCK_ACE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XCRYPTOFB</c><br/>
		/// <br/>
		/// <c>a16 0F A7 E8</c><br/>
		/// <br/>
		/// <c>PADLOCK_ACE</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void xcryptofb() {
			Code op;
			if (Bitness == 64) {
				op = Code.XcryptOfb_64;
			} else op = Bitness >= 32 ? Code.XcryptOfb_32 : Code.XcryptOfb_16;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>xend instruction.<br/>
		/// <br/>
		/// <c>XEND</c><br/>
		/// <br/>
		/// <c>NP 0F 01 D5</c><br/>
		/// <br/>
		/// <c>RTM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xend() {
			Code op;
			op = Code.Xend;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>xgetbv instruction.<br/>
		/// <br/>
		/// <c>XGETBV</c><br/>
		/// <br/>
		/// <c>NP 0F 01 D0</c><br/>
		/// <br/>
		/// <c>XSAVE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xgetbv() {
			Code op;
			op = Code.Xgetbv;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>xor instruction.<br/>
		/// <br/>
		/// <c>XOR r/m8, r8</c><br/>
		/// <br/>
		/// <c>30 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xor(AssemblerRegister8 dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Xor_rm8_r8;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>xor instruction.<br/>
		/// <br/>
		/// <c>XOR r/m8, r8</c><br/>
		/// <br/>
		/// <c>30 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xor(AssemblerMemoryOperand dst, AssemblerRegister8 src) {
			Code op;
			op = Code.Xor_rm8_r8;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>xor instruction.<br/>
		/// <br/>
		/// <c>XOR r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 31 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xor(AssemblerRegister16 dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Xor_rm16_r16;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>xor instruction.<br/>
		/// <br/>
		/// <c>XOR r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 31 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xor(AssemblerMemoryOperand dst, AssemblerRegister16 src) {
			Code op;
			op = Code.Xor_rm16_r16;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>xor instruction.<br/>
		/// <br/>
		/// <c>XOR r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 31 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xor(AssemblerRegister32 dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Xor_rm32_r32;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>xor instruction.<br/>
		/// <br/>
		/// <c>XOR r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 31 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xor(AssemblerMemoryOperand dst, AssemblerRegister32 src) {
			Code op;
			op = Code.Xor_rm32_r32;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>xor instruction.<br/>
		/// <br/>
		/// <c>XOR r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 31 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void xor(AssemblerRegister64 dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Xor_rm64_r64;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>xor instruction.<br/>
		/// <br/>
		/// <c>XOR r/m64, r64</c><br/>
		/// <br/>
		/// <c>REX.W 31 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void xor(AssemblerMemoryOperand dst, AssemblerRegister64 src) {
			Code op;
			op = Code.Xor_rm64_r64;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), src));
		}
		/// <summary>xor instruction.<br/>
		/// <br/>
		/// <c>XOR r8, r/m8</c><br/>
		/// <br/>
		/// <c>32 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xor(AssemblerRegister8 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Xor_r8_rm8;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>xor instruction.<br/>
		/// <br/>
		/// <c>XOR r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 33 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xor(AssemblerRegister16 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Xor_r16_rm16;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>xor instruction.<br/>
		/// <br/>
		/// <c>XOR r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 33 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xor(AssemblerRegister32 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Xor_r32_rm32;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>xor instruction.<br/>
		/// <br/>
		/// <c>XOR r64, r/m64</c><br/>
		/// <br/>
		/// <c>REX.W 33 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void xor(AssemblerRegister64 dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Xor_r64_rm64;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>xor instruction.<br/>
		/// <br/>
		/// <c>XOR AL, imm8</c><br/>
		/// <br/>
		/// <c>34 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XOR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /6 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xor(AssemblerRegister8 dst, sbyte imm) {
			Code op;
			op = dst == Register.AL ? Code.Xor_AL_imm8 : Code.Xor_rm8_imm8;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>xor instruction.<br/>
		/// <br/>
		/// <c>XOR AX, imm16</c><br/>
		/// <br/>
		/// <c>o16 35 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XOR r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /6 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XOR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /6 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xor(AssemblerRegister16 dst, short imm) {
			Code op;
			if (dst == Register.AX) {
				op = Code.Xor_AX_imm16;
			} else op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Xor_rm16_imm8 : Code.Xor_rm16_imm16;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>xor instruction.<br/>
		/// <br/>
		/// <c>XOR EAX, imm32</c><br/>
		/// <br/>
		/// <c>o32 35 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XOR r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /6 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XOR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /6 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xor(AssemblerRegister32 dst, int imm) {
			Code op;
			if (dst == Register.EAX) {
				op = Code.Xor_EAX_imm32;
			} else op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Xor_rm32_imm8 : Code.Xor_rm32_imm32;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>xor instruction.<br/>
		/// <br/>
		/// <c>XOR RAX, imm32</c><br/>
		/// <br/>
		/// <c>REX.W 35 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>XOR r/m64, imm32</c><br/>
		/// <br/>
		/// <c>REX.W 81 /6 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>XOR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W 83 /6 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void xor(AssemblerRegister64 dst, int imm) {
			Code op;
			if (dst == Register.RAX) {
				op = Code.Xor_RAX_imm32;
			} else op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Xor_rm64_imm8 : Code.Xor_rm64_imm32;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>xor instruction.<br/>
		/// <br/>
		/// <c>XOR r/m64, imm32</c><br/>
		/// <br/>
		/// <c>REX.W 81 /6 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>XOR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>REX.W 83 /6 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>XOR r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /6 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XOR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /6 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XOR r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /6 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XOR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /6 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XOR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /6 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xor(AssemblerMemoryOperand dst, int imm) {
			Code op;
			if (dst.Size == MemoryOperandSize.QwordPtr) {
				op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Xor_rm64_imm8 : Code.Xor_rm64_imm32;
			} else if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Xor_rm32_imm8 : Code.Xor_rm32_imm32;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = imm >= sbyte.MinValue && imm <= sbyte.MaxValue ? Code.Xor_rm16_imm8 : Code.Xor_rm16_imm16;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Xor_rm8_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Xor, dst, imm);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>xor instruction.<br/>
		/// <br/>
		/// <c>XOR AL, imm8</c><br/>
		/// <br/>
		/// <c>34 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XOR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /6 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xor(AssemblerRegister8 dst, byte imm) {
			Code op;
			op = dst == Register.AL ? Code.Xor_AL_imm8 : Code.Xor_rm8_imm8;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>xor instruction.<br/>
		/// <br/>
		/// <c>XOR AX, imm16</c><br/>
		/// <br/>
		/// <c>o16 35 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XOR r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /6 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XOR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /6 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xor(AssemblerRegister16 dst, ushort imm) {
			Code op;
			if (dst == Register.AX) {
				op = Code.Xor_AX_imm16;
			} else op = imm <= (ushort)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF) ? Code.Xor_rm16_imm8 : Code.Xor_rm16_imm16;
			AddInstruction(Instruction.Create(op, dst, (uint)imm));
		}
		/// <summary>xor instruction.<br/>
		/// <br/>
		/// <c>XOR EAX, imm32</c><br/>
		/// <br/>
		/// <c>o32 35 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XOR r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /6 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XOR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /6 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xor(AssemblerRegister32 dst, uint imm) {
			Code op;
			if (dst == Register.EAX) {
				op = Code.Xor_EAX_imm32;
			} else op = imm <= (uint)sbyte.MaxValue || (0xFFFF_FF80 <= imm && imm <= 0xFFFF_FFFF) ? Code.Xor_rm32_imm8 : Code.Xor_rm32_imm32;
			AddInstruction(Instruction.Create(op, dst, imm));
		}
		/// <summary>xor instruction.<br/>
		/// <br/>
		/// <c>XOR r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /6 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XOR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /6 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XOR r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /6 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XOR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /6 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XOR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /6 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xor(AssemblerMemoryOperand dst, uint imm) {
			Code op;
			if (dst.Size == MemoryOperandSize.DwordPtr) {
				op = imm <= (uint)sbyte.MaxValue || (0xFFFF_FF80 <= imm && imm <= 0xFFFF_FFFF) ? Code.Xor_rm32_imm8 : Code.Xor_rm32_imm32;
			} else if (dst.Size == MemoryOperandSize.WordPtr) {
				op = imm <= (uint)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF) ? Code.Xor_rm16_imm8 : Code.Xor_rm16_imm16;
			} else if (dst.Size == MemoryOperandSize.BytePtr) {
				op = Code.Xor_rm8_imm8;
			} else {
				throw NoOpCodeFoundFor(Mnemonic.Xor, dst, imm);
			}
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness), imm));
		}
		/// <summary>xorpd instruction.<br/>
		/// <br/>
		/// <c>XORPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 57 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xorpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Xorpd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>xorpd instruction.<br/>
		/// <br/>
		/// <c>XORPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 57 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xorpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Xorpd_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>xorps instruction.<br/>
		/// <br/>
		/// <c>XORPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 57 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xorps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src) {
			Code op;
			op = Code.Xorps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src));
		}
		/// <summary>xorps instruction.<br/>
		/// <br/>
		/// <c>XORPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 57 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xorps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src) {
			Code op;
			op = Code.Xorps_xmm_xmmm128;
			AddInstruction(Instruction.Create(op, dst, src.ToMemoryOperand(Bitness)));
		}
		/// <summary>xresldtrk instruction.<br/>
		/// <br/>
		/// <c>XRESLDTRK</c><br/>
		/// <br/>
		/// <c>F2 0F 01 E9</c><br/>
		/// <br/>
		/// <c>TSXLDTRK</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xresldtrk() {
			Code op;
			op = Code.Xresldtrk;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>xrstor instruction.<br/>
		/// <br/>
		/// <c>XRSTOR mem</c><br/>
		/// <br/>
		/// <c>NP 0F AE /5</c><br/>
		/// <br/>
		/// <c>XSAVE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xrstor(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Xrstor_mem;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>xrstor64 instruction.<br/>
		/// <br/>
		/// <c>XRSTOR64 mem</c><br/>
		/// <br/>
		/// <c>NP REX.W 0F AE /5</c><br/>
		/// <br/>
		/// <c>XSAVE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void xrstor64(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Xrstor64_mem;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>xrstors instruction.<br/>
		/// <br/>
		/// <c>XRSTORS mem</c><br/>
		/// <br/>
		/// <c>NP 0F C7 /3</c><br/>
		/// <br/>
		/// <c>XSAVES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xrstors(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Xrstors_mem;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>xrstors64 instruction.<br/>
		/// <br/>
		/// <c>XRSTORS64 mem</c><br/>
		/// <br/>
		/// <c>NP REX.W 0F C7 /3</c><br/>
		/// <br/>
		/// <c>XSAVES</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void xrstors64(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Xrstors64_mem;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>xsave instruction.<br/>
		/// <br/>
		/// <c>XSAVE mem</c><br/>
		/// <br/>
		/// <c>NP 0F AE /4</c><br/>
		/// <br/>
		/// <c>XSAVE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xsave(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Xsave_mem;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>xsave64 instruction.<br/>
		/// <br/>
		/// <c>XSAVE64 mem</c><br/>
		/// <br/>
		/// <c>NP REX.W 0F AE /4</c><br/>
		/// <br/>
		/// <c>XSAVE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void xsave64(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Xsave64_mem;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>xsavec instruction.<br/>
		/// <br/>
		/// <c>XSAVEC mem</c><br/>
		/// <br/>
		/// <c>NP 0F C7 /4</c><br/>
		/// <br/>
		/// <c>XSAVEC</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xsavec(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Xsavec_mem;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>xsavec64 instruction.<br/>
		/// <br/>
		/// <c>XSAVEC64 mem</c><br/>
		/// <br/>
		/// <c>NP REX.W 0F C7 /4</c><br/>
		/// <br/>
		/// <c>XSAVEC</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void xsavec64(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Xsavec64_mem;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>xsaveopt instruction.<br/>
		/// <br/>
		/// <c>XSAVEOPT mem</c><br/>
		/// <br/>
		/// <c>NP 0F AE /6</c><br/>
		/// <br/>
		/// <c>XSAVEOPT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xsaveopt(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Xsaveopt_mem;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>xsaveopt64 instruction.<br/>
		/// <br/>
		/// <c>XSAVEOPT64 mem</c><br/>
		/// <br/>
		/// <c>NP REX.W 0F AE /6</c><br/>
		/// <br/>
		/// <c>XSAVEOPT</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void xsaveopt64(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Xsaveopt64_mem;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>xsaves instruction.<br/>
		/// <br/>
		/// <c>XSAVES mem</c><br/>
		/// <br/>
		/// <c>NP 0F C7 /5</c><br/>
		/// <br/>
		/// <c>XSAVES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xsaves(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Xsaves_mem;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>xsaves64 instruction.<br/>
		/// <br/>
		/// <c>XSAVES64 mem</c><br/>
		/// <br/>
		/// <c>NP REX.W 0F C7 /5</c><br/>
		/// <br/>
		/// <c>XSAVES</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		public void xsaves64(AssemblerMemoryOperand dst) {
			Code op;
			op = Code.Xsaves64_mem;
			AddInstruction(Instruction.Create(op, dst.ToMemoryOperand(Bitness)));
		}
		/// <summary>xsetbv instruction.<br/>
		/// <br/>
		/// <c>XSETBV</c><br/>
		/// <br/>
		/// <c>NP 0F 01 D1</c><br/>
		/// <br/>
		/// <c>XSAVE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xsetbv() {
			Code op;
			op = Code.Xsetbv;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>xsha1 instruction.<br/>
		/// <br/>
		/// <c>XSHA1</c><br/>
		/// <br/>
		/// <c>0F A6 C8</c><br/>
		/// <br/>
		/// <c>PADLOCK_PHE</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>XSHA1</c><br/>
		/// <br/>
		/// <c>a32 0F A6 C8</c><br/>
		/// <br/>
		/// <c>PADLOCK_PHE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XSHA1</c><br/>
		/// <br/>
		/// <c>a16 0F A6 C8</c><br/>
		/// <br/>
		/// <c>PADLOCK_PHE</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void xsha1() {
			Code op;
			if (Bitness == 64) {
				op = Code.Xsha1_64;
			} else op = Bitness >= 32 ? Code.Xsha1_32 : Code.Xsha1_16;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>xsha256 instruction.<br/>
		/// <br/>
		/// <c>XSHA256</c><br/>
		/// <br/>
		/// <c>0F A6 D0</c><br/>
		/// <br/>
		/// <c>PADLOCK_PHE</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>XSHA256</c><br/>
		/// <br/>
		/// <c>a32 0F A6 D0</c><br/>
		/// <br/>
		/// <c>PADLOCK_PHE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XSHA256</c><br/>
		/// <br/>
		/// <c>a16 0F A6 D0</c><br/>
		/// <br/>
		/// <c>PADLOCK_PHE</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void xsha256() {
			Code op;
			if (Bitness == 64) {
				op = Code.Xsha256_64;
			} else op = Bitness >= 32 ? Code.Xsha256_32 : Code.Xsha256_16;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>xstore instruction.<br/>
		/// <br/>
		/// <c>XSTORE</c><br/>
		/// <br/>
		/// <c>0F A7 C0</c><br/>
		/// <br/>
		/// <c>PADLOCK_RNG</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>XSTORE</c><br/>
		/// <br/>
		/// <c>a32 0F A7 C0</c><br/>
		/// <br/>
		/// <c>PADLOCK_RNG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XSTORE</c><br/>
		/// <br/>
		/// <c>a16 0F A7 C0</c><br/>
		/// <br/>
		/// <c>PADLOCK_RNG</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		public void xstore() {
			Code op;
			if (Bitness == 64) {
				op = Code.Xstore_64;
			} else op = Bitness >= 32 ? Code.Xstore_32 : Code.Xstore_16;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>xsusldtrk instruction.<br/>
		/// <br/>
		/// <c>XSUSLDTRK</c><br/>
		/// <br/>
		/// <c>F2 0F 01 E8</c><br/>
		/// <br/>
		/// <c>TSXLDTRK</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xsusldtrk() {
			Code op;
			op = Code.Xsusldtrk;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>xtest instruction.<br/>
		/// <br/>
		/// <c>XTEST</c><br/>
		/// <br/>
		/// <c>NP 0F 01 D6</c><br/>
		/// <br/>
		/// <c>HLE or RTM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		public void xtest() {
			Code op;
			op = Code.Xtest;
			AddInstruction(Instruction.Create(op));
		}
		/// <summary>Creates a db asm directive with the type byte.</summary>
		public void db(byte imm0) {
			AddInstruction(Instruction.CreateDeclareByte(imm0));
		}
		/// <summary>Creates a db asm directive with the type byte.</summary>
		public void db(byte imm0, byte imm1) {
			AddInstruction(Instruction.CreateDeclareByte(imm0, imm1));
		}
		/// <summary>Creates a db asm directive with the type byte.</summary>
		public void db(byte imm0, byte imm1, byte imm2) {
			AddInstruction(Instruction.CreateDeclareByte(imm0, imm1, imm2));
		}
		/// <summary>Creates a db asm directive with the type byte.</summary>
		public void db(byte imm0, byte imm1, byte imm2, byte imm3) {
			AddInstruction(Instruction.CreateDeclareByte(imm0, imm1, imm2, imm3));
		}
		/// <summary>Creates a db asm directive with the type byte.</summary>
		public void db(byte imm0, byte imm1, byte imm2, byte imm3, byte imm4) {
			AddInstruction(Instruction.CreateDeclareByte(imm0, imm1, imm2, imm3, imm4));
		}
		/// <summary>Creates a db asm directive with the type byte.</summary>
		public void db(byte imm0, byte imm1, byte imm2, byte imm3, byte imm4, byte imm5) {
			AddInstruction(Instruction.CreateDeclareByte(imm0, imm1, imm2, imm3, imm4, imm5));
		}
		/// <summary>Creates a db asm directive with the type byte.</summary>
		public void db(byte imm0, byte imm1, byte imm2, byte imm3, byte imm4, byte imm5, byte imm6) {
			AddInstruction(Instruction.CreateDeclareByte(imm0, imm1, imm2, imm3, imm4, imm5, imm6));
		}
		/// <summary>Creates a db asm directive with the type byte.</summary>
		public void db(byte imm0, byte imm1, byte imm2, byte imm3, byte imm4, byte imm5, byte imm6, byte imm7) {
			AddInstruction(Instruction.CreateDeclareByte(imm0, imm1, imm2, imm3, imm4, imm5, imm6, imm7));
		}
		/// <summary>Creates a db asm directive with the type byte.</summary>
		public void db(byte imm0, byte imm1, byte imm2, byte imm3, byte imm4, byte imm5, byte imm6, byte imm7, byte imm8) {
			AddInstruction(Instruction.CreateDeclareByte(imm0, imm1, imm2, imm3, imm4, imm5, imm6, imm7, imm8));
		}
		/// <summary>Creates a db asm directive with the type byte.</summary>
		public void db(byte imm0, byte imm1, byte imm2, byte imm3, byte imm4, byte imm5, byte imm6, byte imm7, byte imm8, byte imm9) {
			AddInstruction(Instruction.CreateDeclareByte(imm0, imm1, imm2, imm3, imm4, imm5, imm6, imm7, imm8, imm9));
		}
		/// <summary>Creates a db asm directive with the type byte.</summary>
		public void db(byte imm0, byte imm1, byte imm2, byte imm3, byte imm4, byte imm5, byte imm6, byte imm7, byte imm8, byte imm9, byte imm10) {
			AddInstruction(Instruction.CreateDeclareByte(imm0, imm1, imm2, imm3, imm4, imm5, imm6, imm7, imm8, imm9, imm10));
		}
		/// <summary>Creates a db asm directive with the type byte.</summary>
		public void db(byte imm0, byte imm1, byte imm2, byte imm3, byte imm4, byte imm5, byte imm6, byte imm7, byte imm8, byte imm9, byte imm10, byte imm11) {
			AddInstruction(Instruction.CreateDeclareByte(imm0, imm1, imm2, imm3, imm4, imm5, imm6, imm7, imm8, imm9, imm10, imm11));
		}
		/// <summary>Creates a db asm directive with the type byte.</summary>
		public void db(byte imm0, byte imm1, byte imm2, byte imm3, byte imm4, byte imm5, byte imm6, byte imm7, byte imm8, byte imm9, byte imm10, byte imm11, byte imm12) {
			AddInstruction(Instruction.CreateDeclareByte(imm0, imm1, imm2, imm3, imm4, imm5, imm6, imm7, imm8, imm9, imm10, imm11, imm12));
		}
		/// <summary>Creates a db asm directive with the type byte.</summary>
		public void db(byte imm0, byte imm1, byte imm2, byte imm3, byte imm4, byte imm5, byte imm6, byte imm7, byte imm8, byte imm9, byte imm10, byte imm11, byte imm12, byte imm13) {
			AddInstruction(Instruction.CreateDeclareByte(imm0, imm1, imm2, imm3, imm4, imm5, imm6, imm7, imm8, imm9, imm10, imm11, imm12, imm13));
		}
		/// <summary>Creates a db asm directive with the type byte.</summary>
		public void db(byte imm0, byte imm1, byte imm2, byte imm3, byte imm4, byte imm5, byte imm6, byte imm7, byte imm8, byte imm9, byte imm10, byte imm11, byte imm12, byte imm13, byte imm14) {
			AddInstruction(Instruction.CreateDeclareByte(imm0, imm1, imm2, imm3, imm4, imm5, imm6, imm7, imm8, imm9, imm10, imm11, imm12, imm13, imm14));
		}
		/// <summary>Creates a db asm directive with the type byte.</summary>
		public void db(byte imm0, byte imm1, byte imm2, byte imm3, byte imm4, byte imm5, byte imm6, byte imm7, byte imm8, byte imm9, byte imm10, byte imm11, byte imm12, byte imm13, byte imm14, byte imm15) {
			AddInstruction(Instruction.CreateDeclareByte(imm0, imm1, imm2, imm3, imm4, imm5, imm6, imm7, imm8, imm9, imm10, imm11, imm12, imm13, imm14, imm15));
		}
		/// <summary>Creates a db asm directive with the type sbyte.</summary>
		public void db(sbyte imm0) {
			AddInstruction(Instruction.CreateDeclareByte((byte)imm0));
		}
		/// <summary>Creates a db asm directive with the type sbyte.</summary>
		public void db(sbyte imm0, sbyte imm1) {
			AddInstruction(Instruction.CreateDeclareByte((byte)imm0, (byte)imm1));
		}
		/// <summary>Creates a db asm directive with the type sbyte.</summary>
		public void db(sbyte imm0, sbyte imm1, sbyte imm2) {
			AddInstruction(Instruction.CreateDeclareByte((byte)imm0, (byte)imm1, (byte)imm2));
		}
		/// <summary>Creates a db asm directive with the type sbyte.</summary>
		public void db(sbyte imm0, sbyte imm1, sbyte imm2, sbyte imm3) {
			AddInstruction(Instruction.CreateDeclareByte((byte)imm0, (byte)imm1, (byte)imm2, (byte)imm3));
		}
		/// <summary>Creates a db asm directive with the type sbyte.</summary>
		public void db(sbyte imm0, sbyte imm1, sbyte imm2, sbyte imm3, sbyte imm4) {
			AddInstruction(Instruction.CreateDeclareByte((byte)imm0, (byte)imm1, (byte)imm2, (byte)imm3, (byte)imm4));
		}
		/// <summary>Creates a db asm directive with the type sbyte.</summary>
		public void db(sbyte imm0, sbyte imm1, sbyte imm2, sbyte imm3, sbyte imm4, sbyte imm5) {
			AddInstruction(Instruction.CreateDeclareByte((byte)imm0, (byte)imm1, (byte)imm2, (byte)imm3, (byte)imm4, (byte)imm5));
		}
		/// <summary>Creates a db asm directive with the type sbyte.</summary>
		public void db(sbyte imm0, sbyte imm1, sbyte imm2, sbyte imm3, sbyte imm4, sbyte imm5, sbyte imm6) {
			AddInstruction(Instruction.CreateDeclareByte((byte)imm0, (byte)imm1, (byte)imm2, (byte)imm3, (byte)imm4, (byte)imm5, (byte)imm6));
		}
		/// <summary>Creates a db asm directive with the type sbyte.</summary>
		public void db(sbyte imm0, sbyte imm1, sbyte imm2, sbyte imm3, sbyte imm4, sbyte imm5, sbyte imm6, sbyte imm7) {
			AddInstruction(Instruction.CreateDeclareByte((byte)imm0, (byte)imm1, (byte)imm2, (byte)imm3, (byte)imm4, (byte)imm5, (byte)imm6, (byte)imm7));
		}
		/// <summary>Creates a db asm directive with the type sbyte.</summary>
		public void db(sbyte imm0, sbyte imm1, sbyte imm2, sbyte imm3, sbyte imm4, sbyte imm5, sbyte imm6, sbyte imm7, sbyte imm8) {
			AddInstruction(Instruction.CreateDeclareByte((byte)imm0, (byte)imm1, (byte)imm2, (byte)imm3, (byte)imm4, (byte)imm5, (byte)imm6, (byte)imm7, (byte)imm8));
		}
		/// <summary>Creates a db asm directive with the type sbyte.</summary>
		public void db(sbyte imm0, sbyte imm1, sbyte imm2, sbyte imm3, sbyte imm4, sbyte imm5, sbyte imm6, sbyte imm7, sbyte imm8, sbyte imm9) {
			AddInstruction(Instruction.CreateDeclareByte((byte)imm0, (byte)imm1, (byte)imm2, (byte)imm3, (byte)imm4, (byte)imm5, (byte)imm6, (byte)imm7, (byte)imm8, (byte)imm9));
		}
		/// <summary>Creates a db asm directive with the type sbyte.</summary>
		public void db(sbyte imm0, sbyte imm1, sbyte imm2, sbyte imm3, sbyte imm4, sbyte imm5, sbyte imm6, sbyte imm7, sbyte imm8, sbyte imm9, sbyte imm10) {
			AddInstruction(Instruction.CreateDeclareByte((byte)imm0, (byte)imm1, (byte)imm2, (byte)imm3, (byte)imm4, (byte)imm5, (byte)imm6, (byte)imm7, (byte)imm8, (byte)imm9, (byte)imm10));
		}
		/// <summary>Creates a db asm directive with the type sbyte.</summary>
		public void db(sbyte imm0, sbyte imm1, sbyte imm2, sbyte imm3, sbyte imm4, sbyte imm5, sbyte imm6, sbyte imm7, sbyte imm8, sbyte imm9, sbyte imm10, sbyte imm11) {
			AddInstruction(Instruction.CreateDeclareByte((byte)imm0, (byte)imm1, (byte)imm2, (byte)imm3, (byte)imm4, (byte)imm5, (byte)imm6, (byte)imm7, (byte)imm8, (byte)imm9, (byte)imm10, (byte)imm11));
		}
		/// <summary>Creates a db asm directive with the type sbyte.</summary>
		public void db(sbyte imm0, sbyte imm1, sbyte imm2, sbyte imm3, sbyte imm4, sbyte imm5, sbyte imm6, sbyte imm7, sbyte imm8, sbyte imm9, sbyte imm10, sbyte imm11, sbyte imm12) {
			AddInstruction(Instruction.CreateDeclareByte((byte)imm0, (byte)imm1, (byte)imm2, (byte)imm3, (byte)imm4, (byte)imm5, (byte)imm6, (byte)imm7, (byte)imm8, (byte)imm9, (byte)imm10, (byte)imm11, (byte)imm12));
		}
		/// <summary>Creates a db asm directive with the type sbyte.</summary>
		public void db(sbyte imm0, sbyte imm1, sbyte imm2, sbyte imm3, sbyte imm4, sbyte imm5, sbyte imm6, sbyte imm7, sbyte imm8, sbyte imm9, sbyte imm10, sbyte imm11, sbyte imm12, sbyte imm13) {
			AddInstruction(Instruction.CreateDeclareByte((byte)imm0, (byte)imm1, (byte)imm2, (byte)imm3, (byte)imm4, (byte)imm5, (byte)imm6, (byte)imm7, (byte)imm8, (byte)imm9, (byte)imm10, (byte)imm11, (byte)imm12, (byte)imm13));
		}
		/// <summary>Creates a db asm directive with the type sbyte.</summary>
		public void db(sbyte imm0, sbyte imm1, sbyte imm2, sbyte imm3, sbyte imm4, sbyte imm5, sbyte imm6, sbyte imm7, sbyte imm8, sbyte imm9, sbyte imm10, sbyte imm11, sbyte imm12, sbyte imm13, sbyte imm14) {
			AddInstruction(Instruction.CreateDeclareByte((byte)imm0, (byte)imm1, (byte)imm2, (byte)imm3, (byte)imm4, (byte)imm5, (byte)imm6, (byte)imm7, (byte)imm8, (byte)imm9, (byte)imm10, (byte)imm11, (byte)imm12, (byte)imm13, (byte)imm14));
		}
		/// <summary>Creates a db asm directive with the type sbyte.</summary>
		public void db(sbyte imm0, sbyte imm1, sbyte imm2, sbyte imm3, sbyte imm4, sbyte imm5, sbyte imm6, sbyte imm7, sbyte imm8, sbyte imm9, sbyte imm10, sbyte imm11, sbyte imm12, sbyte imm13, sbyte imm14, sbyte imm15) {
			AddInstruction(Instruction.CreateDeclareByte((byte)imm0, (byte)imm1, (byte)imm2, (byte)imm3, (byte)imm4, (byte)imm5, (byte)imm6, (byte)imm7, (byte)imm8, (byte)imm9, (byte)imm10, (byte)imm11, (byte)imm12, (byte)imm13, (byte)imm14, (byte)imm15));
		}
		/// <summary>Creates a dw asm directive with the type ushort.</summary>
		public void dw(ushort imm0) {
			AddInstruction(Instruction.CreateDeclareWord(imm0));
		}
		/// <summary>Creates a dw asm directive with the type ushort.</summary>
		public void dw(ushort imm0, ushort imm1) {
			AddInstruction(Instruction.CreateDeclareWord(imm0, imm1));
		}
		/// <summary>Creates a dw asm directive with the type ushort.</summary>
		public void dw(ushort imm0, ushort imm1, ushort imm2) {
			AddInstruction(Instruction.CreateDeclareWord(imm0, imm1, imm2));
		}
		/// <summary>Creates a dw asm directive with the type ushort.</summary>
		public void dw(ushort imm0, ushort imm1, ushort imm2, ushort imm3) {
			AddInstruction(Instruction.CreateDeclareWord(imm0, imm1, imm2, imm3));
		}
		/// <summary>Creates a dw asm directive with the type ushort.</summary>
		public void dw(ushort imm0, ushort imm1, ushort imm2, ushort imm3, ushort imm4) {
			AddInstruction(Instruction.CreateDeclareWord(imm0, imm1, imm2, imm3, imm4));
		}
		/// <summary>Creates a dw asm directive with the type ushort.</summary>
		public void dw(ushort imm0, ushort imm1, ushort imm2, ushort imm3, ushort imm4, ushort imm5) {
			AddInstruction(Instruction.CreateDeclareWord(imm0, imm1, imm2, imm3, imm4, imm5));
		}
		/// <summary>Creates a dw asm directive with the type ushort.</summary>
		public void dw(ushort imm0, ushort imm1, ushort imm2, ushort imm3, ushort imm4, ushort imm5, ushort imm6) {
			AddInstruction(Instruction.CreateDeclareWord(imm0, imm1, imm2, imm3, imm4, imm5, imm6));
		}
		/// <summary>Creates a dw asm directive with the type ushort.</summary>
		public void dw(ushort imm0, ushort imm1, ushort imm2, ushort imm3, ushort imm4, ushort imm5, ushort imm6, ushort imm7) {
			AddInstruction(Instruction.CreateDeclareWord(imm0, imm1, imm2, imm3, imm4, imm5, imm6, imm7));
		}
		/// <summary>Creates a dw asm directive with the type short.</summary>
		public void dw(short imm0) {
			AddInstruction(Instruction.CreateDeclareWord((ushort)imm0));
		}
		/// <summary>Creates a dw asm directive with the type short.</summary>
		public void dw(short imm0, short imm1) {
			AddInstruction(Instruction.CreateDeclareWord((ushort)imm0, (ushort)imm1));
		}
		/// <summary>Creates a dw asm directive with the type short.</summary>
		public void dw(short imm0, short imm1, short imm2) {
			AddInstruction(Instruction.CreateDeclareWord((ushort)imm0, (ushort)imm1, (ushort)imm2));
		}
		/// <summary>Creates a dw asm directive with the type short.</summary>
		public void dw(short imm0, short imm1, short imm2, short imm3) {
			AddInstruction(Instruction.CreateDeclareWord((ushort)imm0, (ushort)imm1, (ushort)imm2, (ushort)imm3));
		}
		/// <summary>Creates a dw asm directive with the type short.</summary>
		public void dw(short imm0, short imm1, short imm2, short imm3, short imm4) {
			AddInstruction(Instruction.CreateDeclareWord((ushort)imm0, (ushort)imm1, (ushort)imm2, (ushort)imm3, (ushort)imm4));
		}
		/// <summary>Creates a dw asm directive with the type short.</summary>
		public void dw(short imm0, short imm1, short imm2, short imm3, short imm4, short imm5) {
			AddInstruction(Instruction.CreateDeclareWord((ushort)imm0, (ushort)imm1, (ushort)imm2, (ushort)imm3, (ushort)imm4, (ushort)imm5));
		}
		/// <summary>Creates a dw asm directive with the type short.</summary>
		public void dw(short imm0, short imm1, short imm2, short imm3, short imm4, short imm5, short imm6) {
			AddInstruction(Instruction.CreateDeclareWord((ushort)imm0, (ushort)imm1, (ushort)imm2, (ushort)imm3, (ushort)imm4, (ushort)imm5, (ushort)imm6));
		}
		/// <summary>Creates a dw asm directive with the type short.</summary>
		public void dw(short imm0, short imm1, short imm2, short imm3, short imm4, short imm5, short imm6, short imm7) {
			AddInstruction(Instruction.CreateDeclareWord((ushort)imm0, (ushort)imm1, (ushort)imm2, (ushort)imm3, (ushort)imm4, (ushort)imm5, (ushort)imm6, (ushort)imm7));
		}
		/// <summary>Creates a dd asm directive with the type uint.</summary>
		public void dd(uint imm0) {
			AddInstruction(Instruction.CreateDeclareDword(imm0));
		}
		/// <summary>Creates a dd asm directive with the type uint.</summary>
		public void dd(uint imm0, uint imm1) {
			AddInstruction(Instruction.CreateDeclareDword(imm0, imm1));
		}
		/// <summary>Creates a dd asm directive with the type uint.</summary>
		public void dd(uint imm0, uint imm1, uint imm2) {
			AddInstruction(Instruction.CreateDeclareDword(imm0, imm1, imm2));
		}
		/// <summary>Creates a dd asm directive with the type uint.</summary>
		public void dd(uint imm0, uint imm1, uint imm2, uint imm3) {
			AddInstruction(Instruction.CreateDeclareDword(imm0, imm1, imm2, imm3));
		}
		/// <summary>Creates a dd asm directive with the type int.</summary>
		public void dd(int imm0) {
			AddInstruction(Instruction.CreateDeclareDword((uint)imm0));
		}
		/// <summary>Creates a dd asm directive with the type int.</summary>
		public void dd(int imm0, int imm1) {
			AddInstruction(Instruction.CreateDeclareDword((uint)imm0, (uint)imm1));
		}
		/// <summary>Creates a dd asm directive with the type int.</summary>
		public void dd(int imm0, int imm1, int imm2) {
			AddInstruction(Instruction.CreateDeclareDword((uint)imm0, (uint)imm1, (uint)imm2));
		}
		/// <summary>Creates a dd asm directive with the type int.</summary>
		public void dd(int imm0, int imm1, int imm2, int imm3) {
			AddInstruction(Instruction.CreateDeclareDword((uint)imm0, (uint)imm1, (uint)imm2, (uint)imm3));
		}
		/// <summary>Creates a dd asm directive with the type float.</summary>
		public unsafe void dd(float imm0) {
			AddInstruction(Instruction.CreateDeclareDword(*(uint*)&imm0));
		}
		/// <summary>Creates a dd asm directive with the type float.</summary>
		public unsafe void dd(float imm0, float imm1) {
			AddInstruction(Instruction.CreateDeclareDword(*(uint*)&imm0, *(uint*)&imm1));
		}
		/// <summary>Creates a dd asm directive with the type float.</summary>
		public unsafe void dd(float imm0, float imm1, float imm2) {
			AddInstruction(Instruction.CreateDeclareDword(*(uint*)&imm0, *(uint*)&imm1, *(uint*)&imm2));
		}
		/// <summary>Creates a dd asm directive with the type float.</summary>
		public unsafe void dd(float imm0, float imm1, float imm2, float imm3) {
			AddInstruction(Instruction.CreateDeclareDword(*(uint*)&imm0, *(uint*)&imm1, *(uint*)&imm2, *(uint*)&imm3));
		}
		/// <summary>Creates a dq asm directive with the type ulong.</summary>
		public void dq(ulong imm0) {
			AddInstruction(Instruction.CreateDeclareQword(imm0));
		}
		/// <summary>Creates a dq asm directive with the type ulong.</summary>
		public void dq(ulong imm0, ulong imm1) {
			AddInstruction(Instruction.CreateDeclareQword(imm0, imm1));
		}
		/// <summary>Creates a dq asm directive with the type long.</summary>
		public void dq(long imm0) {
			AddInstruction(Instruction.CreateDeclareQword((ulong)imm0));
		}
		/// <summary>Creates a dq asm directive with the type long.</summary>
		public void dq(long imm0, long imm1) {
			AddInstruction(Instruction.CreateDeclareQword((ulong)imm0, (ulong)imm1));
		}
		/// <summary>Creates a dq asm directive with the type double.</summary>
		public unsafe void dq(double imm0) {
			AddInstruction(Instruction.CreateDeclareQword(*(ulong*)&imm0));
		}
		/// <summary>Creates a dq asm directive with the type double.</summary>
		public unsafe void dq(double imm0, double imm1) {
			AddInstruction(Instruction.CreateDeclareQword(*(ulong*)&imm0, *(ulong*)&imm1));
		}
	}
}
#endif
