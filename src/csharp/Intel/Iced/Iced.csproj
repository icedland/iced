<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>netstandard2.1;netstandard2.0;net45</TargetFrameworks>

    <Description>x86/x64 disassembler, assembler, instruction decoder</Description>
    <Title>$(Description)</Title>
    <AssemblyTitle>Iced</AssemblyTitle>
    <AssemblyName>Iced</AssemblyName>
    <PackageId>Iced</PackageId>
    <PackageIcon>logo.png</PackageIcon>
    <PackageProjectUrl>https://github.com/icedland/iced</PackageProjectUrl>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageVersion>$(InformationalVersion)</PackageVersion>
    <PackageTags>disassembler;x86;x64;assembler;encoder;decoder;formatter</PackageTags>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <EmbedUntrackedSources>true</EmbedUntrackedSources>
    <IncludeSymbols>true</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <Nullable>enable</Nullable>
    <Deterministic>true</Deterministic>

    <!-- From the README -->
    <PackageDescription>
iced is a blazing fast and correct x86 (16/32/64-bit) instruction decoder, disassembler and assembler written in C#.

- 👍 Supports all Intel and AMD instructions
- 👍 Correct: All instructions are tested and iced has been tested against other disassemblers/assemblers (xed, gas, objdump, masm, dumpbin, nasm, ndisasm) and fuzzed
- 👍 100% C# code
- 👍 The formatter supports masm, nasm, gas (AT&amp;T), Intel (XED) and there are many options to customize the output
- 👍 The decoder is 2x+ faster than other similar libraries and doesn't allocate any memory
- 👍 Small decoded instructions, only 32 bytes
- 👍 Create instructions with code assembler, eg. `asm.mov(eax, edx)`
- 👍 The encoder can be used to re-encode decoded instructions at any address
- 👍 API to get instruction info, eg. read/written registers, memory and rflags bits; CPUID feature flag, control flow info, etc
- 👍 Supports `.NET Standard 2.0/2.1+` and `.NET Framework 4.5+`
- 👍 License: MIT
    </PackageDescription>
    <PackageReleaseNotes></PackageReleaseNotes>
  </PropertyGroup>

  <PropertyGroup Condition="'$(GITHUB_ACTIONS)' == 'true'">
    <ContinuousIntegrationBuild>true</ContinuousIntegrationBuild>
  </PropertyGroup>

  <ItemGroup>
    <None Include="..\..\..\..\LICENSE.txt" Pack="true" PackagePath="" />
    <None Include="..\..\..\..\logo.png" Pack="true" PackagePath="" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.NETFramework.ReferenceAssemblies" Version="1.0.2" PrivateAssets="All" />
    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.1.0" PrivateAssets="All" />
  </ItemGroup>

  <PropertyGroup>
    <DefineConstants Condition=" $(TargetFramework.StartsWith(netstandard)) AND '$(TargetFramework)' != 'netstandard2.0' ">$(DefineConstants);HAS_SPAN</DefineConstants>
  </PropertyGroup>

</Project>
