name: GitHub CI
on:
  push:
    paths:
      - ".github/workflows/build.yml"
      - "build/**"
      - "src/**"
      - "!**/*.md"
    branches:
      - master
  pull_request:
    paths:
      - ".github/workflows/build.yml"
      - "build/**"
      - "src/**"
      - "!**/*.md"
    branches:
      - master

# Keep this in sync with the other *.yml files
env:
  CI_REQ_DOTNET_SDK_VER: '7.0.x'
  CI_NODE_MIN_VER: 'latest'
  RUSTFLAGS: '-D warnings'
  MACOSX_DEPLOYMENT_TARGET: '10.12'
  JAVA_DISTRIBUTION: 'temurin'
  JAVA_VERSION: '8'

jobs:

  #############################################################################
  #############################################################################
  #############################################################################

  build-rust-python-macos-x64:
    name: Python (${{matrix.os}}) x64
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [macos-latest]

    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        shell: bash
        run: bash build/ci-install-rust.sh

      # NOTE: We use setup-miniconda and not setup-python because setup-python's
      #       binaries target a later macos version and will produce warnings
      #       when building wheels on macos.
      #           https://github.com/actions/setup-python/issues/26
      #       This also means that all bash shells (that use Python) must
      #       use the -le options:
      #           shell: bash -le {0}
      #       setup-python is faster to install than setup-miniconda so we only
      #       use setup-miniconda if this is a macos image.
      - uses: conda-incubator/setup-miniconda@v2.2.0
        with:
          python-version: '3.8'
      - name: Install Python tools
        shell: bash -le {0}
        run: |
          python --version 2>&1 | grep 'Python 3\.8'
          python -m pip install -r src/rust/iced-x86-py/requirements-dev.txt

      - name: Build and test
        shell: bash -le {0}
        run: |
          ./build/build-python --no-set-rustflags --python python --quick-check
          git clean -xdf

      - uses: conda-incubator/setup-miniconda@v2.2.0
        with:
          python-version: '3.8'
      - name: Build and test the wheel
        shell: bash -le {0}
        run: |
          python --version 2>&1 | grep 'Python 3\.8'
          bash build/ci-py-build-wheels.sh --build

      - uses: conda-incubator/setup-miniconda@v2.2.0
        with:
          python-version: '3.9'
      - name: Build and test the wheel
        shell: bash -le {0}
        run: |
          python --version 2>&1 | grep 'Python 3\.9'
          bash build/ci-py-build-wheels.sh

      - uses: conda-incubator/setup-miniconda@v2.2.0
        with:
          python-version: '3.10'
      - name: Build and test the wheel
        shell: bash -le {0}
        run: |
          python --version 2>&1 | grep 'Python 3\.10'
          bash build/ci-py-build-wheels.sh

      - uses: conda-incubator/setup-miniconda@v2.2.0
        with:
          python-version: '3.11'
      - name: Build and test the wheel
        shell: bash -le {0}
        run: |
          python --version 2>&1 | grep 'Python 3\.11'
          bash build/ci-py-build-wheels.sh

      - uses: actions/upload-artifact@v3
        with:
          name: py-dist-${{matrix.os}}-x64
          path: /tmp/py-dist
          if-no-files-found: error

  #############################################################################
  #############################################################################
  #############################################################################

  build-rust-python-windows-x64:
    name: Python (${{matrix.os}}) x64
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [windows-latest]

    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        shell: bash
        run: bash build/ci-install-rust.sh

      - uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      - name: Install Python tools
        shell: bash
        run: |
          python --version 2>&1 | grep 'Python 3\.8'
          python -m pip install -r src/rust/iced-x86-py/requirements-dev.txt

      - name: Build and test
        shell: bash
        run: |
          ./build/build-python --no-set-rustflags --python python --quick-check
          git clean -xdf

      - uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      - name: Build and test the wheel
        shell: bash
        run: |
          python --version 2>&1 | grep 'Python 3\.8'
          bash build/ci-py-build-wheels.sh --build

      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Build and test the wheel
        shell: bash
        run: |
          python --version 2>&1 | grep 'Python 3\.9'
          bash build/ci-py-build-wheels.sh

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Build and test the wheel
        shell: bash
        run: |
          python --version 2>&1 | grep 'Python 3\.10'
          bash build/ci-py-build-wheels.sh

      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Build and test the wheel
        shell: bash
        run: |
          python --version 2>&1 | grep 'Python 3\.11'
          bash build/ci-py-build-wheels.sh

      - uses: actions/setup-python@v4
        with:
          python-version: 'pypy-3.8'
      - name: Build and test the wheel
        shell: bash
        run: |
          python --version
          python --version 2>&1 | grep 'Python 3\.8'
          bash build/ci-py-build-wheels.sh --build --py-kind pypy

      - name: Fix upload path
        shell: bash
        run: |
          git clean -xdf
          cp -r /tmp/py-dist .
      - uses: actions/upload-artifact@v3
        with:
          name: py-dist-${{matrix.os}}-x64
          path: py-dist
          if-no-files-found: error

  #############################################################################
  #############################################################################
  #############################################################################

  build-rust-python-windows-x86:
    name: Python (${{matrix.os}}) x86
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [windows-latest]

    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        shell: bash
        run: bash build/ci-install-rust.sh

      - name: Install 32-bit Rust
        shell: bash
        run: |
          rustup install stable-i686-pc-windows-msvc --no-self-update
          rustup default stable-i686-pc-windows-msvc
          rustup show

      - uses: actions/setup-python@v4
        with:
          python-version: '3.8'
          architecture: x86
      - name: Build and test the wheel
        shell: bash
        run: |
          python --version 2>&1 | grep 'Python 3\.8'
          bash build/ci-py-build-wheels.sh --build

      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          architecture: x86
      - name: Build and test the wheel
        shell: bash
        run: |
          python --version 2>&1 | grep 'Python 3\.9'
          bash build/ci-py-build-wheels.sh

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          architecture: x86
      - name: Build and test the wheel
        shell: bash
        run: |
          python --version 2>&1 | grep 'Python 3\.10'
          bash build/ci-py-build-wheels.sh

      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          architecture: x86
      - name: Build and test the wheel
        shell: bash
        run: |
          python --version 2>&1 | grep 'Python 3\.11'
          bash build/ci-py-build-wheels.sh

      - name: Fix upload path
        shell: bash
        run: |
          git clean -xdf
          cp -r /tmp/py-dist .
      - uses: actions/upload-artifact@v3
        with:
          name: py-dist-${{matrix.os}}-x86
          path: py-dist
          if-no-files-found: error

  #############################################################################
  #############################################################################
  #############################################################################

  upload-files:
    runs-on: ubuntu-latest
    name: Upload files
    needs:
      - build-rust-python-macos-x64
      - build-rust-python-windows-x64
      - build-rust-python-windows-x86

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{env.CI_REQ_DOTNET_SDK_VER}}
      - uses: actions/setup-java@v3
        with:
          distribution: ${{env.JAVA_DISTRIBUTION}}
          java-version: ${{env.JAVA_VERSION}}
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - uses: actions/setup-node@v3
        with:
          node-version: ${{env.CI_NODE_MIN_VER}}
          registry-url: "https://registry.npmjs.org"

      - uses: actions/download-artifact@v3
        with:
          path: /tmp/artifacts

      - name: Verify downloads
        shell: bash
        run: |
          if [ -z "$(ls -A /tmp/artifacts/nupkg/Iced.*.nupkg)" ]; then
            echo "Missing nupkg files"
            exit 1
          fi
          if [ -z "$(ls -A /tmp/artifacts/npm/iced-x86-*.tgz)" ]; then
            echo "Missing npm files"
            exit 1
          fi

          mkdir /tmp/py-dist-tmp
          mkdir /tmp/py-dist
          for path in /tmp/artifacts/py-dist-*; do
            cp "$path/"* /tmp/py-dist-tmp
          done

          mv /tmp/py-dist-tmp/iced_x86-*.whl /tmp/py-dist
          mv /tmp/py-dist-tmp/iced-x86-*.tar.gz /tmp/py-dist

          if [ -n "$(ls -A /tmp/py-dist-tmp/* 2>/dev/null)" ]; then
            ls -l /tmp/py-dist-tmp
            echo "Unknown files found (see above)"
            echo "If it's a new Python version, see Python version comment above (`build-rust-python`)"
            exit 1
          fi
          rmdir /tmp/py-dist-tmp

      - name: Upload checks
        shell: bash
        run: |
          python -m pip install -U twine
          python -m twine check /tmp/py-dist/*
          dotnet nuget push --help
          cargo publish --help
          npm publish --help
          mvn --help
